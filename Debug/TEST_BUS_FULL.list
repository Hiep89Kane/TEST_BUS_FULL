
TEST_BUS_FULL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046d8  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  08004790  08004790  00014790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800490c  0800490c  00020148  2**0
                  CONTENTS
  4 .ARM          00000000  0800490c  0800490c  00020148  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800490c  0800490c  00020148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800490c  0800490c  0001490c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004910  08004910  00014910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000148  20000000  08004914  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  20000148  08004a5c  00020148  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200002fc  08004a5c  000202fc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c43d  00000000  00000000  00020170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000277c  00000000  00000000  0002c5ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d08  00000000  00000000  0002ed30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bb0  00000000  00000000  0002fa38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a53  00000000  00000000  000305e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000109e9  00000000  00000000  0004703b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000835b7  00000000  00000000  00057a24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dafdb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c2c  00000000  00000000  000db02c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000148 	.word	0x20000148
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08004778 	.word	0x08004778

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	2000014c 	.word	0x2000014c
 80000fc:	08004778 	.word	0x08004778

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <btn_progress_loop>:
#include <button.h>
#include "timer.h"

void btn_progress_loop(button_t *btn){
 8000218:	b580      	push	{r7, lr}
 800021a:	b088      	sub	sp, #32
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]

	if(btn->pinStt==0)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	68db      	ldr	r3, [r3, #12]
 8000224:	2b00      	cmp	r3, #0
 8000226:	d100      	bne.n	800022a <btn_progress_loop+0x12>
 8000228:	e114      	b.n	8000454 <btn_progress_loop+0x23c>
		return;

	  //is press
	  if(btn->pinStt()){
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	68db      	ldr	r3, [r3, #12]
 800022e:	4798      	blx	r3
 8000230:	1e03      	subs	r3, r0, #0
 8000232:	d100      	bne.n	8000236 <btn_progress_loop+0x1e>
 8000234:	e090      	b.n	8000358 <btn_progress_loop+0x140>
		 switch(btn->state){
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	781b      	ldrb	r3, [r3, #0]
 800023a:	2b07      	cmp	r3, #7
 800023c:	d900      	bls.n	8000240 <btn_progress_loop+0x28>
 800023e:	e07f      	b.n	8000340 <btn_progress_loop+0x128>
 8000240:	009a      	lsls	r2, r3, #2
 8000242:	4b89      	ldr	r3, [pc, #548]	; (8000468 <btn_progress_loop+0x250>)
 8000244:	18d3      	adds	r3, r2, r3
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	469f      	mov	pc, r3
			 case _BTN_null:
				 btn->state=_BTN_init;
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	2201      	movs	r2, #1
 800024e:	701a      	strb	r2, [r3, #0]
			      timer_set(&btn->process._timeout,_TIME_INIT_PRESS);
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	3310      	adds	r3, #16
 8000254:	2105      	movs	r1, #5
 8000256:	0018      	movs	r0, r3
 8000258:	f001 fdd0 	bl	8001dfc <timer_set>
			      btn->process._timeBeginHold = timer_getTick();
 800025c:	f001 fdb8 	bl	8001dd0 <timer_getTick>
 8000260:	0002      	movs	r2, r0
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	621a      	str	r2, [r3, #32]
			      break;
 8000266:	e076      	b.n	8000356 <btn_progress_loop+0x13e>

			case _BTN_init:
				 if (timer_expired(&btn->process._timeout))
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	3310      	adds	r3, #16
 800026c:	0018      	movs	r0, r3
 800026e:	f001 fe01 	bl	8001e74 <timer_expired>
 8000272:	1e03      	subs	r3, r0, #0
 8000274:	d066      	beq.n	8000344 <btn_progress_loop+0x12c>
					 btn->state=_BTN_isPress;
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	2202      	movs	r2, #2
 800027a:	701a      	strb	r2, [r3, #0]
				 break;
 800027c:	e062      	b.n	8000344 <btn_progress_loop+0x12c>

			case _BTN_isPress:
				btn->state=_BTN_wait_hold;
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	2203      	movs	r2, #3
 8000282:	701a      	strb	r2, [r3, #0]
			     timer_set(&btn->process._timeout,_TIME_HOLD_ACTIVE);
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	3310      	adds	r3, #16
 8000288:	2164      	movs	r1, #100	; 0x64
 800028a:	0018      	movs	r0, r3
 800028c:	f001 fdb6 	bl	8001dfc <timer_set>

			     //callback Press
			     if(btn->cb_function){
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	689b      	ldr	r3, [r3, #8]
 8000294:	2b00      	cmp	r3, #0
 8000296:	d057      	beq.n	8000348 <btn_progress_loop+0x130>
			    	 button_typeArg_t ArgValue;
			    	 ArgValue.event = BUTTON_PRESS;
 8000298:	231c      	movs	r3, #28
 800029a:	18fb      	adds	r3, r7, r3
 800029c:	2201      	movs	r2, #1
 800029e:	701a      	strb	r2, [r3, #0]
			    	 btn->cb_function(_BUTTON_FUNC_EVENT, ArgValue);
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	689b      	ldr	r3, [r3, #8]
 80002a4:	69fa      	ldr	r2, [r7, #28]
 80002a6:	0011      	movs	r1, r2
 80002a8:	2000      	movs	r0, #0
 80002aa:	4798      	blx	r3
			     }

			     break;
 80002ac:	e04c      	b.n	8000348 <btn_progress_loop+0x130>

			case _BTN_wait_hold :
				if (timer_expired(&btn->process._timeout)){
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	3310      	adds	r3, #16
 80002b2:	0018      	movs	r0, r3
 80002b4:	f001 fdde 	bl	8001e74 <timer_expired>
 80002b8:	1e03      	subs	r3, r0, #0
 80002ba:	d047      	beq.n	800034c <btn_progress_loop+0x134>
					btn->state=_BTN_isHold;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	2204      	movs	r2, #4
 80002c0:	701a      	strb	r2, [r3, #0]
				      //callbak hold Release
				      if(btn->cb_function){
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	689b      	ldr	r3, [r3, #8]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d040      	beq.n	800034c <btn_progress_loop+0x134>
				    	  button_typeArg_t ArgValue;
				    	  ArgValue.event = BUTTON_HOLD_PRESS;
 80002ca:	2318      	movs	r3, #24
 80002cc:	18fb      	adds	r3, r7, r3
 80002ce:	2204      	movs	r2, #4
 80002d0:	701a      	strb	r2, [r3, #0]
				    	  btn->cb_function(_BUTTON_FUNC_EVENT, ArgValue);
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	689b      	ldr	r3, [r3, #8]
 80002d6:	69ba      	ldr	r2, [r7, #24]
 80002d8:	0011      	movs	r1, r2
 80002da:	2000      	movs	r0, #0
 80002dc:	4798      	blx	r3
				      }
				}
				break;
 80002de:	e035      	b.n	800034c <btn_progress_loop+0x134>

			case _BTN_wait_clrMultiClick:
		    	//restart init ...
		    	if (!timer_expired(&btn->process._timeout)) {
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	3310      	adds	r3, #16
 80002e4:	0018      	movs	r0, r3
 80002e6:	f001 fdc5 	bl	8001e74 <timer_expired>
 80002ea:	1e03      	subs	r3, r0, #0
 80002ec:	d130      	bne.n	8000350 <btn_progress_loop+0x138>
		    		btn->state=_BTN_init;
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	2201      	movs	r2, #1
 80002f2:	701a      	strb	r2, [r3, #0]
		    		timer_set(&btn->process._timeout,_TIME_INIT_PRESS);
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	3310      	adds	r3, #16
 80002f8:	2105      	movs	r1, #5
 80002fa:	0018      	movs	r0, r3
 80002fc:	f001 fd7e 	bl	8001dfc <timer_set>
		    		btn->process._timeBeginHold=timer_getTick();
 8000300:	f001 fd66 	bl	8001dd0 <timer_getTick>
 8000304:	0002      	movs	r2, r0
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	621a      	str	r2, [r3, #32]
		    	}
		    	break;
 800030a:	e021      	b.n	8000350 <btn_progress_loop+0x138>

			case _BTN_isHold:
				btn->timeHold = timer_getTick()-btn->process._timeBeginHold;
 800030c:	f001 fd60 	bl	8001dd0 <timer_getTick>
 8000310:	0002      	movs	r2, r0
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	6a1b      	ldr	r3, [r3, #32]
 8000316:	1ad2      	subs	r2, r2, r3
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	605a      	str	r2, [r3, #4]

				//callback Hold on
				if(btn->cb_function){
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	689b      	ldr	r3, [r3, #8]
 8000320:	2b00      	cmp	r3, #0
 8000322:	d017      	beq.n	8000354 <btn_progress_loop+0x13c>
					button_typeArg_t ArgValue;
			    	ArgValue.holdInterval_ms = 10*btn->timeHold;
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	685a      	ldr	r2, [r3, #4]
 8000328:	0013      	movs	r3, r2
 800032a:	009b      	lsls	r3, r3, #2
 800032c:	189b      	adds	r3, r3, r2
 800032e:	005b      	lsls	r3, r3, #1
 8000330:	617b      	str	r3, [r7, #20]
					btn->cb_function(_BUTTON_FUNC_HOLD, ArgValue);
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	689b      	ldr	r3, [r3, #8]
 8000336:	697a      	ldr	r2, [r7, #20]
 8000338:	0011      	movs	r1, r2
 800033a:	2002      	movs	r0, #2
 800033c:	4798      	blx	r3
				}

				break;
 800033e:	e009      	b.n	8000354 <btn_progress_loop+0x13c>

			default : break;
 8000340:	46c0      	nop			; (mov r8, r8)
 8000342:	e08e      	b.n	8000462 <btn_progress_loop+0x24a>
				 break;
 8000344:	46c0      	nop			; (mov r8, r8)
 8000346:	e08c      	b.n	8000462 <btn_progress_loop+0x24a>
			     break;
 8000348:	46c0      	nop			; (mov r8, r8)
 800034a:	e08a      	b.n	8000462 <btn_progress_loop+0x24a>
				break;
 800034c:	46c0      	nop			; (mov r8, r8)
 800034e:	e088      	b.n	8000462 <btn_progress_loop+0x24a>
		    	break;
 8000350:	46c0      	nop			; (mov r8, r8)
 8000352:	e086      	b.n	8000462 <btn_progress_loop+0x24a>
				break;
 8000354:	46c0      	nop			; (mov r8, r8)
		 }
		 return;
 8000356:	e084      	b.n	8000462 <btn_progress_loop+0x24a>
	  }
	  //is release
	  else
	  {
		  switch(btn->state){
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	3b03      	subs	r3, #3
 800035e:	2b04      	cmp	r3, #4
 8000360:	d900      	bls.n	8000364 <btn_progress_loop+0x14c>
 8000362:	e073      	b.n	800044c <btn_progress_loop+0x234>
 8000364:	009a      	lsls	r2, r3, #2
 8000366:	4b41      	ldr	r3, [pc, #260]	; (800046c <btn_progress_loop+0x254>)
 8000368:	18d3      	adds	r3, r2, r3
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	469f      	mov	pc, r3
			  case _BTN_wait_hold:
				  btn->state=_BTN_isRelease;
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	2205      	movs	r2, #5
 8000372:	701a      	strb	r2, [r3, #0]
			      timer_set(&btn->process._timeout,_TIME_INIT_RELEASE);
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	3310      	adds	r3, #16
 8000378:	2105      	movs	r1, #5
 800037a:	0018      	movs	r0, r3
 800037c:	f001 fd3e 	bl	8001dfc <timer_set>
			      break;
 8000380:	e06f      	b.n	8000462 <btn_progress_loop+0x24a>

			  case _BTN_isRelease:
			      if (timer_expired(&btn->process._timeout)){
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	3310      	adds	r3, #16
 8000386:	0018      	movs	r0, r3
 8000388:	f001 fd74 	bl	8001e74 <timer_expired>
 800038c:	1e03      	subs	r3, r0, #0
 800038e:	d063      	beq.n	8000458 <btn_progress_loop+0x240>
			    	  btn->state=_BTN_isClick;
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	2206      	movs	r2, #6
 8000394:	701a      	strb	r2, [r3, #0]
			    	  btn->multiClick++;
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	785b      	ldrb	r3, [r3, #1]
 800039a:	3301      	adds	r3, #1
 800039c:	b2da      	uxtb	r2, r3
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	705a      	strb	r2, [r3, #1]

					//callback every click
					if(btn->cb_function){
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	689b      	ldr	r3, [r3, #8]
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d009      	beq.n	80003be <btn_progress_loop+0x1a6>
						button_typeArg_t ArgValue;
						ArgValue.event = BUTTON_ONECLICK;
 80003aa:	2310      	movs	r3, #16
 80003ac:	18fb      	adds	r3, r7, r3
 80003ae:	2203      	movs	r2, #3
 80003b0:	701a      	strb	r2, [r3, #0]
						btn->cb_function(_BUTTON_FUNC_EVENT, ArgValue);
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	689b      	ldr	r3, [r3, #8]
 80003b6:	693a      	ldr	r2, [r7, #16]
 80003b8:	0011      	movs	r1, r2
 80003ba:	2000      	movs	r0, #0
 80003bc:	4798      	blx	r3
					}


					//callback multiClick
					if(btn->cb_function){
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	689b      	ldr	r3, [r3, #8]
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d048      	beq.n	8000458 <btn_progress_loop+0x240>
						button_typeArg_t ArgValue;
						ArgValue.numClick = btn->multiClick;
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	785a      	ldrb	r2, [r3, #1]
 80003ca:	230c      	movs	r3, #12
 80003cc:	18fb      	adds	r3, r7, r3
 80003ce:	701a      	strb	r2, [r3, #0]
						//if( btn->multiClick > 2)
						btn->cb_function(_BUTTON_FUNC_MULCLICK, ArgValue);
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	689b      	ldr	r3, [r3, #8]
 80003d4:	68fa      	ldr	r2, [r7, #12]
 80003d6:	0011      	movs	r1, r2
 80003d8:	2001      	movs	r0, #1
 80003da:	4798      	blx	r3
					}
			      }

			      break;
 80003dc:	e03c      	b.n	8000458 <btn_progress_loop+0x240>

			  case  _BTN_isHold:
				  btn->state=_BTN_hold_pass;
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	2209      	movs	r2, #9
 80003e2:	701a      	strb	r2, [r3, #0]
			      timer_stop(&btn->process._timeout);
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	3310      	adds	r3, #16
 80003e8:	0018      	movs	r0, r3
 80003ea:	f001 fd63 	bl	8001eb4 <timer_stop>
			      btn->multiClick=0;
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	2200      	movs	r2, #0
 80003f2:	705a      	strb	r2, [r3, #1]

			      //callbak hold Release
			      if(btn->cb_function){
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	689b      	ldr	r3, [r3, #8]
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d02f      	beq.n	800045c <btn_progress_loop+0x244>
			    	  button_typeArg_t ArgValue;
			    	  ArgValue.event = BUTTON_HOLD_RELEASE;
 80003fc:	2308      	movs	r3, #8
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	2205      	movs	r2, #5
 8000402:	701a      	strb	r2, [r3, #0]
			    	  btn->cb_function(_BUTTON_FUNC_EVENT, ArgValue);
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	689b      	ldr	r3, [r3, #8]
 8000408:	68ba      	ldr	r2, [r7, #8]
 800040a:	0011      	movs	r1, r2
 800040c:	2000      	movs	r0, #0
 800040e:	4798      	blx	r3
			      }

			      break;
 8000410:	e024      	b.n	800045c <btn_progress_loop+0x244>

			  case _BTN_isClick:
				btn->state=_BTN_wait_clrMultiClick;
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	2207      	movs	r2, #7
 8000416:	701a      	strb	r2, [r3, #0]
			    timer_set(&btn->process._timeout,_TIMEOUT_MULTICLICK);
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	3310      	adds	r3, #16
 800041c:	2132      	movs	r1, #50	; 0x32
 800041e:	0018      	movs	r0, r3
 8000420:	f001 fcec 	bl	8001dfc <timer_set>

			    break;
 8000424:	e01d      	b.n	8000462 <btn_progress_loop+0x24a>

			  case _BTN_wait_clrMultiClick:
			    if (timer_expired(&btn->process._timeout)){
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	3310      	adds	r3, #16
 800042a:	0018      	movs	r0, r3
 800042c:	f001 fd22 	bl	8001e74 <timer_expired>
 8000430:	1e03      	subs	r3, r0, #0
 8000432:	d015      	beq.n	8000460 <btn_progress_loop+0x248>
			    	btn->state=_BTN_null;
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	2200      	movs	r2, #0
 8000438:	701a      	strb	r2, [r3, #0]
			    	timer_stop(&btn->process._timeout);
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	3310      	adds	r3, #16
 800043e:	0018      	movs	r0, r3
 8000440:	f001 fd38 	bl	8001eb4 <timer_stop>
			    	 btn->multiClick=0;
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	2200      	movs	r2, #0
 8000448:	705a      	strb	r2, [r3, #1]
			    }
			    break;
 800044a:	e009      	b.n	8000460 <btn_progress_loop+0x248>

			  default : btn->state=_BTN_null;
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	2200      	movs	r2, #0
 8000450:	701a      	strb	r2, [r3, #0]
 8000452:	e006      	b.n	8000462 <btn_progress_loop+0x24a>
		return;
 8000454:	46c0      	nop			; (mov r8, r8)
 8000456:	e004      	b.n	8000462 <btn_progress_loop+0x24a>
			      break;
 8000458:	46c0      	nop			; (mov r8, r8)
 800045a:	e002      	b.n	8000462 <btn_progress_loop+0x24a>
			      break;
 800045c:	46c0      	nop			; (mov r8, r8)
 800045e:	e000      	b.n	8000462 <btn_progress_loop+0x24a>
			    break;
 8000460:	46c0      	nop			; (mov r8, r8)
		  }
	  }
}
 8000462:	46bd      	mov	sp, r7
 8000464:	b008      	add	sp, #32
 8000466:	bd80      	pop	{r7, pc}
 8000468:	08004790 	.word	0x08004790
 800046c:	080047b0 	.word	0x080047b0

08000470 <DbWord_sbi>:
	uint8_t	byte[8];
	uint32_t word[2];
	uint64_t dbWord;
}DbWord_64bit_t;

uint64_t DbWord_sbi(uint64_t data64, uint8_t bit){
 8000470:	b580      	push	{r7, lr}
 8000472:	b086      	sub	sp, #24
 8000474:	af00      	add	r7, sp, #0
 8000476:	60b8      	str	r0, [r7, #8]
 8000478:	60f9      	str	r1, [r7, #12]
 800047a:	1dfb      	adds	r3, r7, #7
 800047c:	701a      	strb	r2, [r3, #0]
	DbWord_64bit_t tmp;

	tmp.dbWord = data64;
 800047e:	68ba      	ldr	r2, [r7, #8]
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	613a      	str	r2, [r7, #16]
 8000484:	617b      	str	r3, [r7, #20]
	if(bit<32)
 8000486:	1dfb      	adds	r3, r7, #7
 8000488:	781b      	ldrb	r3, [r3, #0]
 800048a:	2b1f      	cmp	r3, #31
 800048c:	d808      	bhi.n	80004a0 <DbWord_sbi+0x30>
		sbi(tmp.word[0], bit);
 800048e:	693b      	ldr	r3, [r7, #16]
 8000490:	1dfa      	adds	r2, r7, #7
 8000492:	7812      	ldrb	r2, [r2, #0]
 8000494:	2101      	movs	r1, #1
 8000496:	4091      	lsls	r1, r2
 8000498:	000a      	movs	r2, r1
 800049a:	4313      	orrs	r3, r2
 800049c:	613b      	str	r3, [r7, #16]
 800049e:	e010      	b.n	80004c2 <DbWord_sbi+0x52>
	else if(bit>=32 && bit<64)
 80004a0:	1dfb      	adds	r3, r7, #7
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	2b1f      	cmp	r3, #31
 80004a6:	d90c      	bls.n	80004c2 <DbWord_sbi+0x52>
 80004a8:	1dfb      	adds	r3, r7, #7
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	2b3f      	cmp	r3, #63	; 0x3f
 80004ae:	d808      	bhi.n	80004c2 <DbWord_sbi+0x52>
		sbi(tmp.word[1], bit-32);
 80004b0:	697b      	ldr	r3, [r7, #20]
 80004b2:	1dfa      	adds	r2, r7, #7
 80004b4:	7812      	ldrb	r2, [r2, #0]
 80004b6:	3a20      	subs	r2, #32
 80004b8:	2101      	movs	r1, #1
 80004ba:	4091      	lsls	r1, r2
 80004bc:	000a      	movs	r2, r1
 80004be:	4313      	orrs	r3, r2
 80004c0:	617b      	str	r3, [r7, #20]

	return tmp.dbWord;
 80004c2:	693a      	ldr	r2, [r7, #16]
 80004c4:	697b      	ldr	r3, [r7, #20]
}
 80004c6:	0010      	movs	r0, r2
 80004c8:	0019      	movs	r1, r3
 80004ca:	46bd      	mov	sp, r7
 80004cc:	b006      	add	sp, #24
 80004ce:	bd80      	pop	{r7, pc}

080004d0 <DbWord_cbi>:

uint64_t DbWord_cbi(uint64_t data64, uint8_t bit){
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b086      	sub	sp, #24
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	60b8      	str	r0, [r7, #8]
 80004d8:	60f9      	str	r1, [r7, #12]
 80004da:	1dfb      	adds	r3, r7, #7
 80004dc:	701a      	strb	r2, [r3, #0]
	DbWord_64bit_t tmp;

	tmp.dbWord = data64;
 80004de:	68ba      	ldr	r2, [r7, #8]
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	613a      	str	r2, [r7, #16]
 80004e4:	617b      	str	r3, [r7, #20]
	if(bit<32)
 80004e6:	1dfb      	adds	r3, r7, #7
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	2b1f      	cmp	r3, #31
 80004ec:	d809      	bhi.n	8000502 <DbWord_cbi+0x32>
		cbi(tmp.word[0], bit);
 80004ee:	693b      	ldr	r3, [r7, #16]
 80004f0:	1dfa      	adds	r2, r7, #7
 80004f2:	7812      	ldrb	r2, [r2, #0]
 80004f4:	2101      	movs	r1, #1
 80004f6:	4091      	lsls	r1, r2
 80004f8:	000a      	movs	r2, r1
 80004fa:	43d2      	mvns	r2, r2
 80004fc:	4013      	ands	r3, r2
 80004fe:	613b      	str	r3, [r7, #16]
 8000500:	e011      	b.n	8000526 <DbWord_cbi+0x56>
	else if(bit>=32 && bit<64)
 8000502:	1dfb      	adds	r3, r7, #7
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	2b1f      	cmp	r3, #31
 8000508:	d90d      	bls.n	8000526 <DbWord_cbi+0x56>
 800050a:	1dfb      	adds	r3, r7, #7
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	2b3f      	cmp	r3, #63	; 0x3f
 8000510:	d809      	bhi.n	8000526 <DbWord_cbi+0x56>
		cbi(tmp.word[1], bit-32);
 8000512:	697b      	ldr	r3, [r7, #20]
 8000514:	1dfa      	adds	r2, r7, #7
 8000516:	7812      	ldrb	r2, [r2, #0]
 8000518:	3a20      	subs	r2, #32
 800051a:	2101      	movs	r1, #1
 800051c:	4091      	lsls	r1, r2
 800051e:	000a      	movs	r2, r1
 8000520:	43d2      	mvns	r2, r2
 8000522:	4013      	ands	r3, r2
 8000524:	617b      	str	r3, [r7, #20]

	return tmp.dbWord;
 8000526:	693a      	ldr	r2, [r7, #16]
 8000528:	697b      	ldr	r3, [r7, #20]
}
 800052a:	0010      	movs	r0, r2
 800052c:	0019      	movs	r1, r3
 800052e:	46bd      	mov	sp, r7
 8000530:	b006      	add	sp, #24
 8000532:	bd80      	pop	{r7, pc}

08000534 <DbWord_wbi>:
		result = rbi(tmp.word[1], bit-32);

	return result;
}

uint64_t DbWord_wbi(uint64_t data64, uint8_t bit, uint8_t boolean){
 8000534:	b580      	push	{r7, lr}
 8000536:	b086      	sub	sp, #24
 8000538:	af00      	add	r7, sp, #0
 800053a:	60b8      	str	r0, [r7, #8]
 800053c:	60f9      	str	r1, [r7, #12]
 800053e:	0019      	movs	r1, r3
 8000540:	1dfb      	adds	r3, r7, #7
 8000542:	701a      	strb	r2, [r3, #0]
 8000544:	1dbb      	adds	r3, r7, #6
 8000546:	1c0a      	adds	r2, r1, #0
 8000548:	701a      	strb	r2, [r3, #0]
	DbWord_64bit_t tmp;

	tmp.dbWord = data64;
 800054a:	68ba      	ldr	r2, [r7, #8]
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	613a      	str	r2, [r7, #16]
 8000550:	617b      	str	r3, [r7, #20]

	if(bit<32){
 8000552:	1dfb      	adds	r3, r7, #7
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	2b1f      	cmp	r3, #31
 8000558:	d816      	bhi.n	8000588 <DbWord_wbi+0x54>
		if(boolean)sbi(tmp.word[0], bit);
 800055a:	1dbb      	adds	r3, r7, #6
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	2b00      	cmp	r3, #0
 8000560:	d008      	beq.n	8000574 <DbWord_wbi+0x40>
 8000562:	693b      	ldr	r3, [r7, #16]
 8000564:	1dfa      	adds	r2, r7, #7
 8000566:	7812      	ldrb	r2, [r2, #0]
 8000568:	2101      	movs	r1, #1
 800056a:	4091      	lsls	r1, r2
 800056c:	000a      	movs	r2, r1
 800056e:	4313      	orrs	r3, r2
 8000570:	613b      	str	r3, [r7, #16]
 8000572:	e029      	b.n	80005c8 <DbWord_wbi+0x94>
		else cbi(tmp.word[0], bit);
 8000574:	693b      	ldr	r3, [r7, #16]
 8000576:	1dfa      	adds	r2, r7, #7
 8000578:	7812      	ldrb	r2, [r2, #0]
 800057a:	2101      	movs	r1, #1
 800057c:	4091      	lsls	r1, r2
 800057e:	000a      	movs	r2, r1
 8000580:	43d2      	mvns	r2, r2
 8000582:	4013      	ands	r3, r2
 8000584:	613b      	str	r3, [r7, #16]
 8000586:	e01f      	b.n	80005c8 <DbWord_wbi+0x94>
	}
	else if(bit>=32 && bit<64){
 8000588:	1dfb      	adds	r3, r7, #7
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	2b1f      	cmp	r3, #31
 800058e:	d91b      	bls.n	80005c8 <DbWord_wbi+0x94>
 8000590:	1dfb      	adds	r3, r7, #7
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	2b3f      	cmp	r3, #63	; 0x3f
 8000596:	d817      	bhi.n	80005c8 <DbWord_wbi+0x94>
		if(boolean)sbi(tmp.word[1], bit-32);
 8000598:	1dbb      	adds	r3, r7, #6
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d009      	beq.n	80005b4 <DbWord_wbi+0x80>
 80005a0:	697b      	ldr	r3, [r7, #20]
 80005a2:	1dfa      	adds	r2, r7, #7
 80005a4:	7812      	ldrb	r2, [r2, #0]
 80005a6:	3a20      	subs	r2, #32
 80005a8:	2101      	movs	r1, #1
 80005aa:	4091      	lsls	r1, r2
 80005ac:	000a      	movs	r2, r1
 80005ae:	4313      	orrs	r3, r2
 80005b0:	617b      	str	r3, [r7, #20]
 80005b2:	e009      	b.n	80005c8 <DbWord_wbi+0x94>
		else cbi(tmp.word[1], bit-32);
 80005b4:	697b      	ldr	r3, [r7, #20]
 80005b6:	1dfa      	adds	r2, r7, #7
 80005b8:	7812      	ldrb	r2, [r2, #0]
 80005ba:	3a20      	subs	r2, #32
 80005bc:	2101      	movs	r1, #1
 80005be:	4091      	lsls	r1, r2
 80005c0:	000a      	movs	r2, r1
 80005c2:	43d2      	mvns	r2, r2
 80005c4:	4013      	ands	r3, r2
 80005c6:	617b      	str	r3, [r7, #20]
	}


	return tmp.dbWord;
 80005c8:	693a      	ldr	r2, [r7, #16]
 80005ca:	697b      	ldr	r3, [r7, #20]
}
 80005cc:	0010      	movs	r0, r2
 80005ce:	0019      	movs	r1, r3
 80005d0:	46bd      	mov	sp, r7
 80005d2:	b006      	add	sp, #24
 80005d4:	bd80      	pop	{r7, pc}
	...

080005d8 <delay_ms>:
  }
  return ReturnVal[InputIndex];
}

void delay_ms(uint32_t ms)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  WRD();
 80005e0:	4b05      	ldr	r3, [pc, #20]	; (80005f8 <delay_ms+0x20>)
 80005e2:	0018      	movs	r0, r3
 80005e4:	f003 fa74 	bl	8003ad0 <HAL_IWDG_Refresh>
  HAL_Delay(ms);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	0018      	movs	r0, r3
 80005ec:	f001 ffbc 	bl	8002568 <HAL_Delay>
}
 80005f0:	46c0      	nop			; (mov r8, r8)
 80005f2:	46bd      	mov	sp, r7
 80005f4:	b002      	add	sp, #8
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	200002e8 	.word	0x200002e8

080005fc <shift_595_Word>:
    }
    HC595_LATCH(0);
    HC595_LATCH(1);
}

void shift_595_Word(uint32_t word){
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
    for(uint8_t i=32; i>0; i--)
 8000604:	230f      	movs	r3, #15
 8000606:	18fb      	adds	r3, r7, r3
 8000608:	2220      	movs	r2, #32
 800060a:	701a      	strb	r2, [r3, #0]
 800060c:	e029      	b.n	8000662 <shift_595_Word+0x66>
    {
        if (word&(1<<(i-1)))
 800060e:	230f      	movs	r3, #15
 8000610:	18fb      	adds	r3, r7, r3
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	3b01      	subs	r3, #1
 8000616:	2201      	movs	r2, #1
 8000618:	409a      	lsls	r2, r3
 800061a:	0013      	movs	r3, r2
 800061c:	001a      	movs	r2, r3
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4013      	ands	r3, r2
 8000622:	d006      	beq.n	8000632 <shift_595_Word+0x36>
        	HC595_DATA(1);
 8000624:	4b19      	ldr	r3, [pc, #100]	; (800068c <shift_595_Word+0x90>)
 8000626:	2201      	movs	r2, #1
 8000628:	2120      	movs	r1, #32
 800062a:	0018      	movs	r0, r3
 800062c:	f002 fab3 	bl	8002b96 <HAL_GPIO_WritePin>
 8000630:	e005      	b.n	800063e <shift_595_Word+0x42>
        else
        	HC595_DATA(0);
 8000632:	4b16      	ldr	r3, [pc, #88]	; (800068c <shift_595_Word+0x90>)
 8000634:	2200      	movs	r2, #0
 8000636:	2120      	movs	r1, #32
 8000638:	0018      	movs	r0, r3
 800063a:	f002 faac 	bl	8002b96 <HAL_GPIO_WritePin>
        HC595_SCK(0);
 800063e:	4b13      	ldr	r3, [pc, #76]	; (800068c <shift_595_Word+0x90>)
 8000640:	2200      	movs	r2, #0
 8000642:	2108      	movs	r1, #8
 8000644:	0018      	movs	r0, r3
 8000646:	f002 faa6 	bl	8002b96 <HAL_GPIO_WritePin>
        HC595_SCK(1);
 800064a:	4b10      	ldr	r3, [pc, #64]	; (800068c <shift_595_Word+0x90>)
 800064c:	2201      	movs	r2, #1
 800064e:	2108      	movs	r1, #8
 8000650:	0018      	movs	r0, r3
 8000652:	f002 faa0 	bl	8002b96 <HAL_GPIO_WritePin>
    for(uint8_t i=32; i>0; i--)
 8000656:	210f      	movs	r1, #15
 8000658:	187b      	adds	r3, r7, r1
 800065a:	781a      	ldrb	r2, [r3, #0]
 800065c:	187b      	adds	r3, r7, r1
 800065e:	3a01      	subs	r2, #1
 8000660:	701a      	strb	r2, [r3, #0]
 8000662:	230f      	movs	r3, #15
 8000664:	18fb      	adds	r3, r7, r3
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d1d0      	bne.n	800060e <shift_595_Word+0x12>
    }
    HC595_LATCH(0);
 800066c:	4b07      	ldr	r3, [pc, #28]	; (800068c <shift_595_Word+0x90>)
 800066e:	2200      	movs	r2, #0
 8000670:	2110      	movs	r1, #16
 8000672:	0018      	movs	r0, r3
 8000674:	f002 fa8f 	bl	8002b96 <HAL_GPIO_WritePin>
    HC595_LATCH(1);
 8000678:	4b04      	ldr	r3, [pc, #16]	; (800068c <shift_595_Word+0x90>)
 800067a:	2201      	movs	r2, #1
 800067c:	2110      	movs	r1, #16
 800067e:	0018      	movs	r0, r3
 8000680:	f002 fa89 	bl	8002b96 <HAL_GPIO_WritePin>
}
 8000684:	46c0      	nop			; (mov r8, r8)
 8000686:	46bd      	mov	sp, r7
 8000688:	b004      	add	sp, #16
 800068a:	bd80      	pop	{r7, pc}
 800068c:	50000400 	.word	0x50000400

08000690 <shift_595_array>:
    HC595_LATCH(0);
    HC595_LATCH(1);
}

void shift_595_array(uint8_t byteArray[HC595_USED_NUM])
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
	for(uint8_t i = HC595_USED_NUM; i >0; i--)
 8000698:	230f      	movs	r3, #15
 800069a:	18fb      	adds	r3, r7, r3
 800069c:	2204      	movs	r2, #4
 800069e:	701a      	strb	r2, [r3, #0]
 80006a0:	e03f      	b.n	8000722 <shift_595_array+0x92>
	{
		for(uint8_t k=8; k>0; k--)
 80006a2:	230e      	movs	r3, #14
 80006a4:	18fb      	adds	r3, r7, r3
 80006a6:	2208      	movs	r2, #8
 80006a8:	701a      	strb	r2, [r3, #0]
 80006aa:	e02f      	b.n	800070c <shift_595_array+0x7c>
		{
			if(byteArray[i-1] & (1<<(k-1)))
 80006ac:	230f      	movs	r3, #15
 80006ae:	18fb      	adds	r3, r7, r3
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	3b01      	subs	r3, #1
 80006b4:	687a      	ldr	r2, [r7, #4]
 80006b6:	18d3      	adds	r3, r2, r3
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	001a      	movs	r2, r3
 80006bc:	230e      	movs	r3, #14
 80006be:	18fb      	adds	r3, r7, r3
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	3b01      	subs	r3, #1
 80006c4:	411a      	asrs	r2, r3
 80006c6:	0013      	movs	r3, r2
 80006c8:	2201      	movs	r2, #1
 80006ca:	4013      	ands	r3, r2
 80006cc:	d006      	beq.n	80006dc <shift_595_array+0x4c>
				HC595_DATA(1);
 80006ce:	4b1f      	ldr	r3, [pc, #124]	; (800074c <shift_595_array+0xbc>)
 80006d0:	2201      	movs	r2, #1
 80006d2:	2120      	movs	r1, #32
 80006d4:	0018      	movs	r0, r3
 80006d6:	f002 fa5e 	bl	8002b96 <HAL_GPIO_WritePin>
 80006da:	e005      	b.n	80006e8 <shift_595_array+0x58>
			else
				HC595_DATA(0);
 80006dc:	4b1b      	ldr	r3, [pc, #108]	; (800074c <shift_595_array+0xbc>)
 80006de:	2200      	movs	r2, #0
 80006e0:	2120      	movs	r1, #32
 80006e2:	0018      	movs	r0, r3
 80006e4:	f002 fa57 	bl	8002b96 <HAL_GPIO_WritePin>

			HC595_SCK(0);
 80006e8:	4b18      	ldr	r3, [pc, #96]	; (800074c <shift_595_array+0xbc>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	2108      	movs	r1, #8
 80006ee:	0018      	movs	r0, r3
 80006f0:	f002 fa51 	bl	8002b96 <HAL_GPIO_WritePin>
			HC595_SCK(1);
 80006f4:	4b15      	ldr	r3, [pc, #84]	; (800074c <shift_595_array+0xbc>)
 80006f6:	2201      	movs	r2, #1
 80006f8:	2108      	movs	r1, #8
 80006fa:	0018      	movs	r0, r3
 80006fc:	f002 fa4b 	bl	8002b96 <HAL_GPIO_WritePin>
		for(uint8_t k=8; k>0; k--)
 8000700:	210e      	movs	r1, #14
 8000702:	187b      	adds	r3, r7, r1
 8000704:	781a      	ldrb	r2, [r3, #0]
 8000706:	187b      	adds	r3, r7, r1
 8000708:	3a01      	subs	r2, #1
 800070a:	701a      	strb	r2, [r3, #0]
 800070c:	230e      	movs	r3, #14
 800070e:	18fb      	adds	r3, r7, r3
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d1ca      	bne.n	80006ac <shift_595_array+0x1c>
	for(uint8_t i = HC595_USED_NUM; i >0; i--)
 8000716:	210f      	movs	r1, #15
 8000718:	187b      	adds	r3, r7, r1
 800071a:	781a      	ldrb	r2, [r3, #0]
 800071c:	187b      	adds	r3, r7, r1
 800071e:	3a01      	subs	r2, #1
 8000720:	701a      	strb	r2, [r3, #0]
 8000722:	230f      	movs	r3, #15
 8000724:	18fb      	adds	r3, r7, r3
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d1ba      	bne.n	80006a2 <shift_595_array+0x12>
		}
	}
	HC595_LATCH(0);
 800072c:	4b07      	ldr	r3, [pc, #28]	; (800074c <shift_595_array+0xbc>)
 800072e:	2200      	movs	r2, #0
 8000730:	2110      	movs	r1, #16
 8000732:	0018      	movs	r0, r3
 8000734:	f002 fa2f 	bl	8002b96 <HAL_GPIO_WritePin>
    HC595_LATCH(1);
 8000738:	4b04      	ldr	r3, [pc, #16]	; (800074c <shift_595_array+0xbc>)
 800073a:	2201      	movs	r2, #1
 800073c:	2110      	movs	r1, #16
 800073e:	0018      	movs	r0, r3
 8000740:	f002 fa29 	bl	8002b96 <HAL_GPIO_WritePin>
}
 8000744:	46c0      	nop			; (mov r8, r8)
 8000746:	46bd      	mov	sp, r7
 8000748:	b004      	add	sp, #16
 800074a:	bd80      	pop	{r7, pc}
 800074c:	50000400 	.word	0x50000400

08000750 <HAL_SYSTICK_Callback>:
/**
 * @brief  SYSTICK callback - 1ms.
 * @retval None
 */
void HAL_SYSTICK_Callback(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
	static uint8_t tx10;

	// 10ms
	if (++tx10 >= 10)
 8000754:	4b09      	ldr	r3, [pc, #36]	; (800077c <HAL_SYSTICK_Callback+0x2c>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	3301      	adds	r3, #1
 800075a:	b2da      	uxtb	r2, r3
 800075c:	4b07      	ldr	r3, [pc, #28]	; (800077c <HAL_SYSTICK_Callback+0x2c>)
 800075e:	701a      	strb	r2, [r3, #0]
 8000760:	4b06      	ldr	r3, [pc, #24]	; (800077c <HAL_SYSTICK_Callback+0x2c>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	2b09      	cmp	r3, #9
 8000766:	d906      	bls.n	8000776 <HAL_SYSTICK_Callback+0x26>
	{
		tx10 = 0;
 8000768:	4b04      	ldr	r3, [pc, #16]	; (800077c <HAL_SYSTICK_Callback+0x2c>)
 800076a:	2200      	movs	r2, #0
 800076c:	701a      	strb	r2, [r3, #0]
		timer_periodic_poll();
 800076e:	f001 fb39 	bl	8001de4 <timer_periodic_poll>
		OUTPUT_periodic_poll();
 8000772:	f000 f833 	bl	80007dc <OUTPUT_periodic_poll>
	}
}
 8000776:	46c0      	nop			; (mov r8, r8)
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20000164 	.word	0x20000164

08000780 <OUTPUT_set_blink>:
	}
	return 0;
}

uint8_t OUTPUT_set_blink(OUTPUT_struct_t *OUTPUT_tmp, uint8_t repeat, clock_time_t ON_duty, clock_time_t OFF_duty, clock_time_t repeat_duty)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	60f8      	str	r0, [r7, #12]
 8000788:	607a      	str	r2, [r7, #4]
 800078a:	603b      	str	r3, [r7, #0]
 800078c:	230b      	movs	r3, #11
 800078e:	18fb      	adds	r3, r7, r3
 8000790:	1c0a      	adds	r2, r1, #0
 8000792:	701a      	strb	r2, [r3, #0]
	OUTPUT_tmp->mode = _OUTPUT_mode_blink;
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	2203      	movs	r2, #3
 8000798:	701a      	strb	r2, [r3, #0]
	OUTPUT_tmp->state = _OUTPUT_state_START;
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	2200      	movs	r2, #0
 800079e:	705a      	strb	r2, [r3, #1]
	if (ON_duty == 0)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d104      	bne.n	80007b0 <OUTPUT_set_blink+0x30>
	{
		OUTPUT_tmp->mode = _OUTPUT_mode_off;
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	2201      	movs	r2, #1
 80007aa:	701a      	strb	r2, [r3, #0]
		return 2; // On=0
 80007ac:	2302      	movs	r3, #2
 80007ae:	e011      	b.n	80007d4 <OUTPUT_set_blink+0x54>
	}
	OUTPUT_tmp->ON_duty = ON_duty;
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	687a      	ldr	r2, [r7, #4]
 80007b4:	605a      	str	r2, [r3, #4]
	OUTPUT_tmp->OFF_duty = OFF_duty;
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	683a      	ldr	r2, [r7, #0]
 80007ba:	609a      	str	r2, [r3, #8]
	OUTPUT_tmp->repeat = repeat;
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	220b      	movs	r2, #11
 80007c0:	18ba      	adds	r2, r7, r2
 80007c2:	7812      	ldrb	r2, [r2, #0]
 80007c4:	709a      	strb	r2, [r3, #2]
	OUTPUT_tmp->repeat_count = 0;
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	2200      	movs	r2, #0
 80007ca:	70da      	strb	r2, [r3, #3]
	OUTPUT_tmp->repeat_duty = repeat_duty;
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	69ba      	ldr	r2, [r7, #24]
 80007d0:	60da      	str	r2, [r3, #12]
	return 0;
 80007d2:	2300      	movs	r3, #0
}
 80007d4:	0018      	movs	r0, r3
 80007d6:	46bd      	mov	sp, r7
 80007d8:	b004      	add	sp, #16
 80007da:	bd80      	pop	{r7, pc}

080007dc <OUTPUT_periodic_poll>:

void OUTPUT_periodic_poll(void)
{
 80007dc:	b590      	push	{r4, r7, lr}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0

	for (uint8_t i = 0; i < OUTPUT_number_max; i++)
 80007e2:	1dfb      	adds	r3, r7, #7
 80007e4:	2200      	movs	r2, #0
 80007e6:	701a      	strb	r2, [r3, #0]
 80007e8:	e16b      	b.n	8000ac2 <OUTPUT_periodic_poll+0x2e6>
	{

		if (OUTPUT_struct_t_buf[i] == 0)
 80007ea:	1dfb      	adds	r3, r7, #7
 80007ec:	781a      	ldrb	r2, [r3, #0]
 80007ee:	4bba      	ldr	r3, [pc, #744]	; (8000ad8 <OUTPUT_periodic_poll+0x2fc>)
 80007f0:	0092      	lsls	r2, r2, #2
 80007f2:	58d3      	ldr	r3, [r2, r3]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d100      	bne.n	80007fa <OUTPUT_periodic_poll+0x1e>
 80007f8:	e157      	b.n	8000aaa <OUTPUT_periodic_poll+0x2ce>
			continue;

		if (OUTPUT_struct_t_buf[i]->mode == _OUTPUT_mode_noctrl)
 80007fa:	1dfb      	adds	r3, r7, #7
 80007fc:	781a      	ldrb	r2, [r3, #0]
 80007fe:	4bb6      	ldr	r3, [pc, #728]	; (8000ad8 <OUTPUT_periodic_poll+0x2fc>)
 8000800:	0092      	lsls	r2, r2, #2
 8000802:	58d3      	ldr	r3, [r2, r3]
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d100      	bne.n	800080c <OUTPUT_periodic_poll+0x30>
 800080a:	e150      	b.n	8000aae <OUTPUT_periodic_poll+0x2d2>
			continue;

		// bat dau
		if (OUTPUT_struct_t_buf[i]->state == _OUTPUT_state_START)
 800080c:	1dfb      	adds	r3, r7, #7
 800080e:	781a      	ldrb	r2, [r3, #0]
 8000810:	4bb1      	ldr	r3, [pc, #708]	; (8000ad8 <OUTPUT_periodic_poll+0x2fc>)
 8000812:	0092      	lsls	r2, r2, #2
 8000814:	58d3      	ldr	r3, [r2, r3]
 8000816:	785b      	ldrb	r3, [r3, #1]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d159      	bne.n	80008d0 <OUTPUT_periodic_poll+0xf4>
		{
			OUTPUT_struct_t_buf[i]->state = _OUTPUT_state_ON;
 800081c:	1dfb      	adds	r3, r7, #7
 800081e:	781a      	ldrb	r2, [r3, #0]
 8000820:	4bad      	ldr	r3, [pc, #692]	; (8000ad8 <OUTPUT_periodic_poll+0x2fc>)
 8000822:	0092      	lsls	r2, r2, #2
 8000824:	58d3      	ldr	r3, [r2, r3]
 8000826:	2201      	movs	r2, #1
 8000828:	705a      	strb	r2, [r3, #1]
			switch (OUTPUT_struct_t_buf[i]->mode)
 800082a:	1dfb      	adds	r3, r7, #7
 800082c:	781a      	ldrb	r2, [r3, #0]
 800082e:	4baa      	ldr	r3, [pc, #680]	; (8000ad8 <OUTPUT_periodic_poll+0x2fc>)
 8000830:	0092      	lsls	r2, r2, #2
 8000832:	58d3      	ldr	r3, [r2, r3]
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	2b03      	cmp	r3, #3
 8000838:	d018      	beq.n	800086c <OUTPUT_periodic_poll+0x90>
 800083a:	dd00      	ble.n	800083e <OUTPUT_periodic_poll+0x62>
 800083c:	e13c      	b.n	8000ab8 <OUTPUT_periodic_poll+0x2dc>
 800083e:	2b01      	cmp	r3, #1
 8000840:	d002      	beq.n	8000848 <OUTPUT_periodic_poll+0x6c>
 8000842:	2b02      	cmp	r3, #2
 8000844:	d009      	beq.n	800085a <OUTPUT_periodic_poll+0x7e>
 8000846:	e137      	b.n	8000ab8 <OUTPUT_periodic_poll+0x2dc>
			{
			case _OUTPUT_mode_off:
				OUTPUT_struct_t_buf[i]->OUTPUT_BaseCtrl(0);
 8000848:	1dfb      	adds	r3, r7, #7
 800084a:	781a      	ldrb	r2, [r3, #0]
 800084c:	4ba2      	ldr	r3, [pc, #648]	; (8000ad8 <OUTPUT_periodic_poll+0x2fc>)
 800084e:	0092      	lsls	r2, r2, #2
 8000850:	58d3      	ldr	r3, [r2, r3]
 8000852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000854:	2000      	movs	r0, #0
 8000856:	4798      	blx	r3
				break;
 8000858:	e12e      	b.n	8000ab8 <OUTPUT_periodic_poll+0x2dc>
			case _OUTPUT_mode_on:
				OUTPUT_struct_t_buf[i]->OUTPUT_BaseCtrl(1);
 800085a:	1dfb      	adds	r3, r7, #7
 800085c:	781a      	ldrb	r2, [r3, #0]
 800085e:	4b9e      	ldr	r3, [pc, #632]	; (8000ad8 <OUTPUT_periodic_poll+0x2fc>)
 8000860:	0092      	lsls	r2, r2, #2
 8000862:	58d3      	ldr	r3, [r2, r3]
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	2001      	movs	r0, #1
 8000868:	4798      	blx	r3
				break;
 800086a:	e125      	b.n	8000ab8 <OUTPUT_periodic_poll+0x2dc>
			case _OUTPUT_mode_blink:
				// bat dau la ON truoc
				OUTPUT_struct_t_buf[i]->OUTPUT_BaseCtrl(1);
 800086c:	1dfb      	adds	r3, r7, #7
 800086e:	781a      	ldrb	r2, [r3, #0]
 8000870:	4b99      	ldr	r3, [pc, #612]	; (8000ad8 <OUTPUT_periodic_poll+0x2fc>)
 8000872:	0092      	lsls	r2, r2, #2
 8000874:	58d3      	ldr	r3, [r2, r3]
 8000876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000878:	2001      	movs	r0, #1
 800087a:	4798      	blx	r3
				timer_set(&OUTPUT_struct_t_buf[i]->timeout, OUTPUT_struct_t_buf[i]->ON_duty);
 800087c:	1dfb      	adds	r3, r7, #7
 800087e:	781a      	ldrb	r2, [r3, #0]
 8000880:	4b95      	ldr	r3, [pc, #596]	; (8000ad8 <OUTPUT_periodic_poll+0x2fc>)
 8000882:	0092      	lsls	r2, r2, #2
 8000884:	58d3      	ldr	r3, [r2, r3]
 8000886:	3310      	adds	r3, #16
 8000888:	0018      	movs	r0, r3
 800088a:	1dfb      	adds	r3, r7, #7
 800088c:	781a      	ldrb	r2, [r3, #0]
 800088e:	4b92      	ldr	r3, [pc, #584]	; (8000ad8 <OUTPUT_periodic_poll+0x2fc>)
 8000890:	0092      	lsls	r2, r2, #2
 8000892:	58d3      	ldr	r3, [r2, r3]
 8000894:	685b      	ldr	r3, [r3, #4]
 8000896:	0019      	movs	r1, r3
 8000898:	f001 fab0 	bl	8001dfc <timer_set>
				if (OUTPUT_struct_t_buf[i]->repeat_duty != 0)
 800089c:	1dfb      	adds	r3, r7, #7
 800089e:	781a      	ldrb	r2, [r3, #0]
 80008a0:	4b8d      	ldr	r3, [pc, #564]	; (8000ad8 <OUTPUT_periodic_poll+0x2fc>)
 80008a2:	0092      	lsls	r2, r2, #2
 80008a4:	58d3      	ldr	r3, [r2, r3]
 80008a6:	68db      	ldr	r3, [r3, #12]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d100      	bne.n	80008ae <OUTPUT_periodic_poll+0xd2>
 80008ac:	e101      	b.n	8000ab2 <OUTPUT_periodic_poll+0x2d6>
				{
					timer_set(&OUTPUT_struct_t_buf[i]->duty_timeout, OUTPUT_struct_t_buf[i]->repeat_duty);
 80008ae:	1dfb      	adds	r3, r7, #7
 80008b0:	781a      	ldrb	r2, [r3, #0]
 80008b2:	4b89      	ldr	r3, [pc, #548]	; (8000ad8 <OUTPUT_periodic_poll+0x2fc>)
 80008b4:	0092      	lsls	r2, r2, #2
 80008b6:	58d3      	ldr	r3, [r2, r3]
 80008b8:	3320      	adds	r3, #32
 80008ba:	0018      	movs	r0, r3
 80008bc:	1dfb      	adds	r3, r7, #7
 80008be:	781a      	ldrb	r2, [r3, #0]
 80008c0:	4b85      	ldr	r3, [pc, #532]	; (8000ad8 <OUTPUT_periodic_poll+0x2fc>)
 80008c2:	0092      	lsls	r2, r2, #2
 80008c4:	58d3      	ldr	r3, [r2, r3]
 80008c6:	68db      	ldr	r3, [r3, #12]
 80008c8:	0019      	movs	r1, r3
 80008ca:	f001 fa97 	bl	8001dfc <timer_set>
				}
				break;
 80008ce:	e0f0      	b.n	8000ab2 <OUTPUT_periodic_poll+0x2d6>
			}
		}
		// neu blink thi lam
		else if (OUTPUT_struct_t_buf[i]->mode == _OUTPUT_mode_blink)
 80008d0:	1dfb      	adds	r3, r7, #7
 80008d2:	781a      	ldrb	r2, [r3, #0]
 80008d4:	4b80      	ldr	r3, [pc, #512]	; (8000ad8 <OUTPUT_periodic_poll+0x2fc>)
 80008d6:	0092      	lsls	r2, r2, #2
 80008d8:	58d3      	ldr	r3, [r2, r3]
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	2b03      	cmp	r3, #3
 80008de:	d000      	beq.n	80008e2 <OUTPUT_periodic_poll+0x106>
 80008e0:	e0e9      	b.n	8000ab6 <OUTPUT_periodic_poll+0x2da>
		{
			if (timer_expired(&OUTPUT_struct_t_buf[i]->timeout))
 80008e2:	1dfb      	adds	r3, r7, #7
 80008e4:	781a      	ldrb	r2, [r3, #0]
 80008e6:	4b7c      	ldr	r3, [pc, #496]	; (8000ad8 <OUTPUT_periodic_poll+0x2fc>)
 80008e8:	0092      	lsls	r2, r2, #2
 80008ea:	58d3      	ldr	r3, [r2, r3]
 80008ec:	3310      	adds	r3, #16
 80008ee:	0018      	movs	r0, r3
 80008f0:	f001 fac0 	bl	8001e74 <timer_expired>
 80008f4:	1e03      	subs	r3, r0, #0
 80008f6:	d100      	bne.n	80008fa <OUTPUT_periodic_poll+0x11e>
 80008f8:	e0dd      	b.n	8000ab6 <OUTPUT_periodic_poll+0x2da>
			{
				switch (OUTPUT_struct_t_buf[i]->state)
 80008fa:	1dfb      	adds	r3, r7, #7
 80008fc:	781a      	ldrb	r2, [r3, #0]
 80008fe:	4b76      	ldr	r3, [pc, #472]	; (8000ad8 <OUTPUT_periodic_poll+0x2fc>)
 8000900:	0092      	lsls	r2, r2, #2
 8000902:	58d3      	ldr	r3, [r2, r3]
 8000904:	785b      	ldrb	r3, [r3, #1]
 8000906:	2b03      	cmp	r3, #3
 8000908:	d100      	bne.n	800090c <OUTPUT_periodic_poll+0x130>
 800090a:	e0a5      	b.n	8000a58 <OUTPUT_periodic_poll+0x27c>
 800090c:	dd00      	ble.n	8000910 <OUTPUT_periodic_poll+0x134>
 800090e:	e0d3      	b.n	8000ab8 <OUTPUT_periodic_poll+0x2dc>
 8000910:	2b01      	cmp	r3, #1
 8000912:	d002      	beq.n	800091a <OUTPUT_periodic_poll+0x13e>
 8000914:	2b02      	cmp	r3, #2
 8000916:	d037      	beq.n	8000988 <OUTPUT_periodic_poll+0x1ac>
 8000918:	e0ce      	b.n	8000ab8 <OUTPUT_periodic_poll+0x2dc>
				{
				case _OUTPUT_state_ON:
					OUTPUT_struct_t_buf[i]->state = _OUTPUT_state_OFF;
 800091a:	1dfb      	adds	r3, r7, #7
 800091c:	781a      	ldrb	r2, [r3, #0]
 800091e:	4b6e      	ldr	r3, [pc, #440]	; (8000ad8 <OUTPUT_periodic_poll+0x2fc>)
 8000920:	0092      	lsls	r2, r2, #2
 8000922:	58d3      	ldr	r3, [r2, r3]
 8000924:	2202      	movs	r2, #2
 8000926:	705a      	strb	r2, [r3, #1]
					OUTPUT_struct_t_buf[i]->OUTPUT_BaseCtrl(0);
 8000928:	1dfb      	adds	r3, r7, #7
 800092a:	781a      	ldrb	r2, [r3, #0]
 800092c:	4b6a      	ldr	r3, [pc, #424]	; (8000ad8 <OUTPUT_periodic_poll+0x2fc>)
 800092e:	0092      	lsls	r2, r2, #2
 8000930:	58d3      	ldr	r3, [r2, r3]
 8000932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000934:	2000      	movs	r0, #0
 8000936:	4798      	blx	r3
					// neu thoi gian OFF_duty => chuyen qua tat LED
					if (OUTPUT_struct_t_buf[i]->OFF_duty == 0)
 8000938:	1dfb      	adds	r3, r7, #7
 800093a:	781a      	ldrb	r2, [r3, #0]
 800093c:	4b66      	ldr	r3, [pc, #408]	; (8000ad8 <OUTPUT_periodic_poll+0x2fc>)
 800093e:	0092      	lsls	r2, r2, #2
 8000940:	58d3      	ldr	r3, [r2, r3]
 8000942:	689b      	ldr	r3, [r3, #8]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d10e      	bne.n	8000966 <OUTPUT_periodic_poll+0x18a>
					{
						OUTPUT_struct_t_buf[i]->mode = _OUTPUT_mode_off;
 8000948:	1dfb      	adds	r3, r7, #7
 800094a:	781a      	ldrb	r2, [r3, #0]
 800094c:	4b62      	ldr	r3, [pc, #392]	; (8000ad8 <OUTPUT_periodic_poll+0x2fc>)
 800094e:	0092      	lsls	r2, r2, #2
 8000950:	58d3      	ldr	r3, [r2, r3]
 8000952:	2201      	movs	r2, #1
 8000954:	701a      	strb	r2, [r3, #0]
						OUTPUT_struct_t_buf[i]->state = _OUTPUT_state_ON;
 8000956:	1dfb      	adds	r3, r7, #7
 8000958:	781a      	ldrb	r2, [r3, #0]
 800095a:	4b5f      	ldr	r3, [pc, #380]	; (8000ad8 <OUTPUT_periodic_poll+0x2fc>)
 800095c:	0092      	lsls	r2, r2, #2
 800095e:	58d3      	ldr	r3, [r2, r3]
 8000960:	2201      	movs	r2, #1
 8000962:	705a      	strb	r2, [r3, #1]
					}
					else
						timer_set(&OUTPUT_struct_t_buf[i]->timeout, OUTPUT_struct_t_buf[i]->OFF_duty);
					break;
 8000964:	e0a8      	b.n	8000ab8 <OUTPUT_periodic_poll+0x2dc>
						timer_set(&OUTPUT_struct_t_buf[i]->timeout, OUTPUT_struct_t_buf[i]->OFF_duty);
 8000966:	1dfb      	adds	r3, r7, #7
 8000968:	781a      	ldrb	r2, [r3, #0]
 800096a:	4b5b      	ldr	r3, [pc, #364]	; (8000ad8 <OUTPUT_periodic_poll+0x2fc>)
 800096c:	0092      	lsls	r2, r2, #2
 800096e:	58d3      	ldr	r3, [r2, r3]
 8000970:	3310      	adds	r3, #16
 8000972:	0018      	movs	r0, r3
 8000974:	1dfb      	adds	r3, r7, #7
 8000976:	781a      	ldrb	r2, [r3, #0]
 8000978:	4b57      	ldr	r3, [pc, #348]	; (8000ad8 <OUTPUT_periodic_poll+0x2fc>)
 800097a:	0092      	lsls	r2, r2, #2
 800097c:	58d3      	ldr	r3, [r2, r3]
 800097e:	689b      	ldr	r3, [r3, #8]
 8000980:	0019      	movs	r1, r3
 8000982:	f001 fa3b 	bl	8001dfc <timer_set>
					break;
 8000986:	e097      	b.n	8000ab8 <OUTPUT_periodic_poll+0x2dc>

				case _OUTPUT_state_OFF:
					// Neu dat toi so lan lap lai thi cho chu ky moi hoac tat
					if (++OUTPUT_struct_t_buf[i]->repeat_count == OUTPUT_struct_t_buf[i]->repeat)
 8000988:	1dfb      	adds	r3, r7, #7
 800098a:	781a      	ldrb	r2, [r3, #0]
 800098c:	4b52      	ldr	r3, [pc, #328]	; (8000ad8 <OUTPUT_periodic_poll+0x2fc>)
 800098e:	0092      	lsls	r2, r2, #2
 8000990:	58d3      	ldr	r3, [r2, r3]
 8000992:	78da      	ldrb	r2, [r3, #3]
 8000994:	3201      	adds	r2, #1
 8000996:	b2d2      	uxtb	r2, r2
 8000998:	70da      	strb	r2, [r3, #3]
 800099a:	78da      	ldrb	r2, [r3, #3]
 800099c:	1dfb      	adds	r3, r7, #7
 800099e:	7819      	ldrb	r1, [r3, #0]
 80009a0:	4b4d      	ldr	r3, [pc, #308]	; (8000ad8 <OUTPUT_periodic_poll+0x2fc>)
 80009a2:	0089      	lsls	r1, r1, #2
 80009a4:	58cb      	ldr	r3, [r1, r3]
 80009a6:	789b      	ldrb	r3, [r3, #2]
 80009a8:	429a      	cmp	r2, r3
 80009aa:	d135      	bne.n	8000a18 <OUTPUT_periodic_poll+0x23c>
					{
						OUTPUT_struct_t_buf[i]->repeat_count = 0;
 80009ac:	1dfb      	adds	r3, r7, #7
 80009ae:	781a      	ldrb	r2, [r3, #0]
 80009b0:	4b49      	ldr	r3, [pc, #292]	; (8000ad8 <OUTPUT_periodic_poll+0x2fc>)
 80009b2:	0092      	lsls	r2, r2, #2
 80009b4:	58d3      	ldr	r3, [r2, r3]
 80009b6:	2200      	movs	r2, #0
 80009b8:	70da      	strb	r2, [r3, #3]
						// Neu ko su dung chu ky lap lai thi tra ve che do off
						if (OUTPUT_struct_t_buf[i]->repeat_duty == 0)
 80009ba:	1dfb      	adds	r3, r7, #7
 80009bc:	781a      	ldrb	r2, [r3, #0]
 80009be:	4b46      	ldr	r3, [pc, #280]	; (8000ad8 <OUTPUT_periodic_poll+0x2fc>)
 80009c0:	0092      	lsls	r2, r2, #2
 80009c2:	58d3      	ldr	r3, [r2, r3]
 80009c4:	68db      	ldr	r3, [r3, #12]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d10e      	bne.n	80009e8 <OUTPUT_periodic_poll+0x20c>
						{
							OUTPUT_struct_t_buf[i]->state = _OUTPUT_state_START;
 80009ca:	1dfb      	adds	r3, r7, #7
 80009cc:	781a      	ldrb	r2, [r3, #0]
 80009ce:	4b42      	ldr	r3, [pc, #264]	; (8000ad8 <OUTPUT_periodic_poll+0x2fc>)
 80009d0:	0092      	lsls	r2, r2, #2
 80009d2:	58d3      	ldr	r3, [r2, r3]
 80009d4:	2200      	movs	r2, #0
 80009d6:	705a      	strb	r2, [r3, #1]
							OUTPUT_struct_t_buf[i]->mode = _OUTPUT_mode_noctrl; //############
 80009d8:	1dfb      	adds	r3, r7, #7
 80009da:	781a      	ldrb	r2, [r3, #0]
 80009dc:	4b3e      	ldr	r3, [pc, #248]	; (8000ad8 <OUTPUT_periodic_poll+0x2fc>)
 80009de:	0092      	lsls	r2, r2, #2
 80009e0:	58d3      	ldr	r3, [r2, r3]
 80009e2:	2200      	movs	r2, #0
 80009e4:	701a      	strb	r2, [r3, #0]
					{
						OUTPUT_struct_t_buf[i]->state = _OUTPUT_state_ON;
						OUTPUT_struct_t_buf[i]->OUTPUT_BaseCtrl(1);
						timer_set(&OUTPUT_struct_t_buf[i]->timeout, OUTPUT_struct_t_buf[i]->ON_duty);
					}
					break;
 80009e6:	e067      	b.n	8000ab8 <OUTPUT_periodic_poll+0x2dc>
							OUTPUT_struct_t_buf[i]->state = _OUTPUT_state_REPEAT;
 80009e8:	1dfb      	adds	r3, r7, #7
 80009ea:	781a      	ldrb	r2, [r3, #0]
 80009ec:	4b3a      	ldr	r3, [pc, #232]	; (8000ad8 <OUTPUT_periodic_poll+0x2fc>)
 80009ee:	0092      	lsls	r2, r2, #2
 80009f0:	58d3      	ldr	r3, [r2, r3]
 80009f2:	2203      	movs	r2, #3
 80009f4:	705a      	strb	r2, [r3, #1]
							OUTPUT_struct_t_buf[i]->timeout = OUTPUT_struct_t_buf[i]->duty_timeout; // ???
 80009f6:	1dfb      	adds	r3, r7, #7
 80009f8:	781a      	ldrb	r2, [r3, #0]
 80009fa:	4b37      	ldr	r3, [pc, #220]	; (8000ad8 <OUTPUT_periodic_poll+0x2fc>)
 80009fc:	0092      	lsls	r2, r2, #2
 80009fe:	58d2      	ldr	r2, [r2, r3]
 8000a00:	1dfb      	adds	r3, r7, #7
 8000a02:	7819      	ldrb	r1, [r3, #0]
 8000a04:	4b34      	ldr	r3, [pc, #208]	; (8000ad8 <OUTPUT_periodic_poll+0x2fc>)
 8000a06:	0089      	lsls	r1, r1, #2
 8000a08:	58cb      	ldr	r3, [r1, r3]
 8000a0a:	3310      	adds	r3, #16
 8000a0c:	3220      	adds	r2, #32
 8000a0e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000a10:	c313      	stmia	r3!, {r0, r1, r4}
 8000a12:	6812      	ldr	r2, [r2, #0]
 8000a14:	601a      	str	r2, [r3, #0]
					break;
 8000a16:	e04f      	b.n	8000ab8 <OUTPUT_periodic_poll+0x2dc>
						OUTPUT_struct_t_buf[i]->state = _OUTPUT_state_ON;
 8000a18:	1dfb      	adds	r3, r7, #7
 8000a1a:	781a      	ldrb	r2, [r3, #0]
 8000a1c:	4b2e      	ldr	r3, [pc, #184]	; (8000ad8 <OUTPUT_periodic_poll+0x2fc>)
 8000a1e:	0092      	lsls	r2, r2, #2
 8000a20:	58d3      	ldr	r3, [r2, r3]
 8000a22:	2201      	movs	r2, #1
 8000a24:	705a      	strb	r2, [r3, #1]
						OUTPUT_struct_t_buf[i]->OUTPUT_BaseCtrl(1);
 8000a26:	1dfb      	adds	r3, r7, #7
 8000a28:	781a      	ldrb	r2, [r3, #0]
 8000a2a:	4b2b      	ldr	r3, [pc, #172]	; (8000ad8 <OUTPUT_periodic_poll+0x2fc>)
 8000a2c:	0092      	lsls	r2, r2, #2
 8000a2e:	58d3      	ldr	r3, [r2, r3]
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	2001      	movs	r0, #1
 8000a34:	4798      	blx	r3
						timer_set(&OUTPUT_struct_t_buf[i]->timeout, OUTPUT_struct_t_buf[i]->ON_duty);
 8000a36:	1dfb      	adds	r3, r7, #7
 8000a38:	781a      	ldrb	r2, [r3, #0]
 8000a3a:	4b27      	ldr	r3, [pc, #156]	; (8000ad8 <OUTPUT_periodic_poll+0x2fc>)
 8000a3c:	0092      	lsls	r2, r2, #2
 8000a3e:	58d3      	ldr	r3, [r2, r3]
 8000a40:	3310      	adds	r3, #16
 8000a42:	0018      	movs	r0, r3
 8000a44:	1dfb      	adds	r3, r7, #7
 8000a46:	781a      	ldrb	r2, [r3, #0]
 8000a48:	4b23      	ldr	r3, [pc, #140]	; (8000ad8 <OUTPUT_periodic_poll+0x2fc>)
 8000a4a:	0092      	lsls	r2, r2, #2
 8000a4c:	58d3      	ldr	r3, [r2, r3]
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	0019      	movs	r1, r3
 8000a52:	f001 f9d3 	bl	8001dfc <timer_set>
					break;
 8000a56:	e02f      	b.n	8000ab8 <OUTPUT_periodic_poll+0x2dc>

				case _OUTPUT_state_REPEAT:
					// Thoi gian bat dau chu ky moi da den
					OUTPUT_struct_t_buf[i]->state = _OUTPUT_state_ON;
 8000a58:	1dfb      	adds	r3, r7, #7
 8000a5a:	781a      	ldrb	r2, [r3, #0]
 8000a5c:	4b1e      	ldr	r3, [pc, #120]	; (8000ad8 <OUTPUT_periodic_poll+0x2fc>)
 8000a5e:	0092      	lsls	r2, r2, #2
 8000a60:	58d3      	ldr	r3, [r2, r3]
 8000a62:	2201      	movs	r2, #1
 8000a64:	705a      	strb	r2, [r3, #1]
					OUTPUT_struct_t_buf[i]->OUTPUT_BaseCtrl(1);
 8000a66:	1dfb      	adds	r3, r7, #7
 8000a68:	781a      	ldrb	r2, [r3, #0]
 8000a6a:	4b1b      	ldr	r3, [pc, #108]	; (8000ad8 <OUTPUT_periodic_poll+0x2fc>)
 8000a6c:	0092      	lsls	r2, r2, #2
 8000a6e:	58d3      	ldr	r3, [r2, r3]
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	2001      	movs	r0, #1
 8000a74:	4798      	blx	r3
					timer_set(&OUTPUT_struct_t_buf[i]->timeout, OUTPUT_struct_t_buf[i]->ON_duty);
 8000a76:	1dfb      	adds	r3, r7, #7
 8000a78:	781a      	ldrb	r2, [r3, #0]
 8000a7a:	4b17      	ldr	r3, [pc, #92]	; (8000ad8 <OUTPUT_periodic_poll+0x2fc>)
 8000a7c:	0092      	lsls	r2, r2, #2
 8000a7e:	58d3      	ldr	r3, [r2, r3]
 8000a80:	3310      	adds	r3, #16
 8000a82:	0018      	movs	r0, r3
 8000a84:	1dfb      	adds	r3, r7, #7
 8000a86:	781a      	ldrb	r2, [r3, #0]
 8000a88:	4b13      	ldr	r3, [pc, #76]	; (8000ad8 <OUTPUT_periodic_poll+0x2fc>)
 8000a8a:	0092      	lsls	r2, r2, #2
 8000a8c:	58d3      	ldr	r3, [r2, r3]
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	0019      	movs	r1, r3
 8000a92:	f001 f9b3 	bl	8001dfc <timer_set>
					timer_reset(&OUTPUT_struct_t_buf[i]->duty_timeout);
 8000a96:	1dfb      	adds	r3, r7, #7
 8000a98:	781a      	ldrb	r2, [r3, #0]
 8000a9a:	4b0f      	ldr	r3, [pc, #60]	; (8000ad8 <OUTPUT_periodic_poll+0x2fc>)
 8000a9c:	0092      	lsls	r2, r2, #2
 8000a9e:	58d3      	ldr	r3, [r2, r3]
 8000aa0:	3320      	adds	r3, #32
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f001 f9c2 	bl	8001e2c <timer_reset>
					break;
 8000aa8:	e006      	b.n	8000ab8 <OUTPUT_periodic_poll+0x2dc>
			continue;
 8000aaa:	46c0      	nop			; (mov r8, r8)
 8000aac:	e004      	b.n	8000ab8 <OUTPUT_periodic_poll+0x2dc>
			continue;
 8000aae:	46c0      	nop			; (mov r8, r8)
 8000ab0:	e002      	b.n	8000ab8 <OUTPUT_periodic_poll+0x2dc>
				break;
 8000ab2:	46c0      	nop			; (mov r8, r8)
 8000ab4:	e000      	b.n	8000ab8 <OUTPUT_periodic_poll+0x2dc>

				} // end switch state
			}	  // end timer_expired--> co the la ON_duty hoac OFF duty
 8000ab6:	46c0      	nop			; (mov r8, r8)
	for (uint8_t i = 0; i < OUTPUT_number_max; i++)
 8000ab8:	1dfb      	adds	r3, r7, #7
 8000aba:	781a      	ldrb	r2, [r3, #0]
 8000abc:	1dfb      	adds	r3, r7, #7
 8000abe:	3201      	adds	r2, #1
 8000ac0:	701a      	strb	r2, [r3, #0]
 8000ac2:	1dfb      	adds	r3, r7, #7
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	2b04      	cmp	r3, #4
 8000ac8:	d800      	bhi.n	8000acc <OUTPUT_periodic_poll+0x2f0>
 8000aca:	e68e      	b.n	80007ea <OUTPUT_periodic_poll+0xe>
		}		  // end if mode = blink
	}			  // end for
}
 8000acc:	46c0      	nop			; (mov r8, r8)
 8000ace:	46c0      	nop			; (mov r8, r8)
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	b003      	add	sp, #12
 8000ad4:	bd90      	pop	{r4, r7, pc}
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	20000168 	.word	0x20000168

08000adc <OUTPUT_config_new_control>:

uint8_t OUTPUT_config_new_control(OUTPUT_struct_t *state, void (*OUTPUT_BaseCtrl_pointer)(uint8_t ON_OFF))
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
 8000ae4:	6039      	str	r1, [r7, #0]

	for (uint8_t i = 0; i < OUTPUT_number_max; i++)
 8000ae6:	230f      	movs	r3, #15
 8000ae8:	18fb      	adds	r3, r7, r3
 8000aea:	2200      	movs	r2, #0
 8000aec:	701a      	strb	r2, [r3, #0]
 8000aee:	e021      	b.n	8000b34 <OUTPUT_config_new_control+0x58>
	{
		if (OUTPUT_struct_t_buf[i] == 0)
 8000af0:	210f      	movs	r1, #15
 8000af2:	187b      	adds	r3, r7, r1
 8000af4:	781a      	ldrb	r2, [r3, #0]
 8000af6:	4b14      	ldr	r3, [pc, #80]	; (8000b48 <OUTPUT_config_new_control+0x6c>)
 8000af8:	0092      	lsls	r2, r2, #2
 8000afa:	58d3      	ldr	r3, [r2, r3]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d113      	bne.n	8000b28 <OUTPUT_config_new_control+0x4c>
		{
			OUTPUT_struct_t_buf[i] = state;
 8000b00:	0008      	movs	r0, r1
 8000b02:	187b      	adds	r3, r7, r1
 8000b04:	781a      	ldrb	r2, [r3, #0]
 8000b06:	4b10      	ldr	r3, [pc, #64]	; (8000b48 <OUTPUT_config_new_control+0x6c>)
 8000b08:	0092      	lsls	r2, r2, #2
 8000b0a:	6879      	ldr	r1, [r7, #4]
 8000b0c:	50d1      	str	r1, [r2, r3]
			OUTPUT_struct_t_buf[i]->OUTPUT_BaseCtrl = OUTPUT_BaseCtrl_pointer;
 8000b0e:	0001      	movs	r1, r0
 8000b10:	187b      	adds	r3, r7, r1
 8000b12:	781a      	ldrb	r2, [r3, #0]
 8000b14:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <OUTPUT_config_new_control+0x6c>)
 8000b16:	0092      	lsls	r2, r2, #2
 8000b18:	58d3      	ldr	r3, [r2, r3]
 8000b1a:	683a      	ldr	r2, [r7, #0]
 8000b1c:	631a      	str	r2, [r3, #48]	; 0x30
			return i + 1;
 8000b1e:	187b      	adds	r3, r7, r1
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	3301      	adds	r3, #1
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	e00b      	b.n	8000b40 <OUTPUT_config_new_control+0x64>
	for (uint8_t i = 0; i < OUTPUT_number_max; i++)
 8000b28:	210f      	movs	r1, #15
 8000b2a:	187b      	adds	r3, r7, r1
 8000b2c:	781a      	ldrb	r2, [r3, #0]
 8000b2e:	187b      	adds	r3, r7, r1
 8000b30:	3201      	adds	r2, #1
 8000b32:	701a      	strb	r2, [r3, #0]
 8000b34:	230f      	movs	r3, #15
 8000b36:	18fb      	adds	r3, r7, r3
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	2b04      	cmp	r3, #4
 8000b3c:	d9d8      	bls.n	8000af0 <OUTPUT_config_new_control+0x14>
		}
	}
	return 0;
 8000b3e:	2300      	movs	r3, #0
}
 8000b40:	0018      	movs	r0, r3
 8000b42:	46bd      	mov	sp, r7
 8000b44:	b004      	add	sp, #16
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	20000168 	.word	0x20000168

08000b4c <BTN0_Stt>:
char str1[_STRING_BUFFER_SIZE];
char str2[_STRING_BUFFER_SIZE];
Display_t displayLCD[_DISPLAYMAX];

#define APP_BUTTON_NUM	1
uint8_t BTN0_Stt() {return (uint8_t)(!I_BT0);}
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	2380      	movs	r3, #128	; 0x80
 8000b52:	021b      	lsls	r3, r3, #8
 8000b54:	4a05      	ldr	r2, [pc, #20]	; (8000b6c <BTN0_Stt+0x20>)
 8000b56:	0019      	movs	r1, r3
 8000b58:	0010      	movs	r0, r2
 8000b5a:	f001 ffff 	bl	8002b5c <HAL_GPIO_ReadPin>
 8000b5e:	0003      	movs	r3, r0
 8000b60:	425a      	negs	r2, r3
 8000b62:	4153      	adcs	r3, r2
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	0018      	movs	r0, r3
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	50000800 	.word	0x50000800

08000b70 <input_00>:
void output_30(uint8_t logic);
void output_31(uint8_t logic);
void output_32(uint8_t logic);

// INPUT
uint8_t input_00(void) { return 1;}
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	2301      	movs	r3, #1
 8000b76:	0018      	movs	r0, r3
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <input_01>:
uint8_t input_01(void) { return HAL_GPIO_ReadPin(IN1_GPIO_Port, IN1_Pin); }
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	4b04      	ldr	r3, [pc, #16]	; (8000b94 <input_01+0x18>)
 8000b82:	2104      	movs	r1, #4
 8000b84:	0018      	movs	r0, r3
 8000b86:	f001 ffe9 	bl	8002b5c <HAL_GPIO_ReadPin>
 8000b8a:	0003      	movs	r3, r0
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	46c0      	nop			; (mov r8, r8)
 8000b94:	50000800 	.word	0x50000800

08000b98 <input_02>:
uint8_t input_02(void) { return HAL_GPIO_ReadPin(IN2_GPIO_Port, IN2_Pin); }
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	4b04      	ldr	r3, [pc, #16]	; (8000bb0 <input_02+0x18>)
 8000b9e:	2108      	movs	r1, #8
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	f001 ffdb 	bl	8002b5c <HAL_GPIO_ReadPin>
 8000ba6:	0003      	movs	r3, r0
 8000ba8:	0018      	movs	r0, r3
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	46c0      	nop			; (mov r8, r8)
 8000bb0:	50000800 	.word	0x50000800

08000bb4 <input_03>:
uint8_t input_03(void) { return HAL_GPIO_ReadPin(IN3_GPIO_Port, IN3_Pin); }
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	23a0      	movs	r3, #160	; 0xa0
 8000bba:	05db      	lsls	r3, r3, #23
 8000bbc:	2108      	movs	r1, #8
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	f001 ffcc 	bl	8002b5c <HAL_GPIO_ReadPin>
 8000bc4:	0003      	movs	r3, r0
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <input_04>:
uint8_t input_04(void) { return HAL_GPIO_ReadPin(IN4_GPIO_Port, IN4_Pin); }
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	23a0      	movs	r3, #160	; 0xa0
 8000bd2:	05db      	lsls	r3, r3, #23
 8000bd4:	2104      	movs	r1, #4
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	f001 ffc0 	bl	8002b5c <HAL_GPIO_ReadPin>
 8000bdc:	0003      	movs	r3, r0
 8000bde:	0018      	movs	r0, r3
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <input_05>:
uint8_t input_05(void) { return HAL_GPIO_ReadPin(IN5_GPIO_Port, IN5_Pin); }
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	23a0      	movs	r3, #160	; 0xa0
 8000bea:	05db      	lsls	r3, r3, #23
 8000bec:	2120      	movs	r1, #32
 8000bee:	0018      	movs	r0, r3
 8000bf0:	f001 ffb4 	bl	8002b5c <HAL_GPIO_ReadPin>
 8000bf4:	0003      	movs	r3, r0
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <input_06>:
uint8_t input_06(void) { return HAL_GPIO_ReadPin(IN6_GPIO_Port, IN6_Pin); }
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	23a0      	movs	r3, #160	; 0xa0
 8000c02:	05db      	lsls	r3, r3, #23
 8000c04:	2110      	movs	r1, #16
 8000c06:	0018      	movs	r0, r3
 8000c08:	f001 ffa8 	bl	8002b5c <HAL_GPIO_ReadPin>
 8000c0c:	0003      	movs	r3, r0
 8000c0e:	0018      	movs	r0, r3
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <input_07>:
uint8_t input_07(void) { return HAL_GPIO_ReadPin(IN7_GPIO_Port, IN7_Pin); }
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	23a0      	movs	r3, #160	; 0xa0
 8000c1a:	05db      	lsls	r3, r3, #23
 8000c1c:	2102      	movs	r1, #2
 8000c1e:	0018      	movs	r0, r3
 8000c20:	f001 ff9c 	bl	8002b5c <HAL_GPIO_ReadPin>
 8000c24:	0003      	movs	r3, r0
 8000c26:	0018      	movs	r0, r3
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <input_08>:
uint8_t input_08(void) { return HAL_GPIO_ReadPin(IN8_GPIO_Port, IN8_Pin); }
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	23a0      	movs	r3, #160	; 0xa0
 8000c32:	05db      	lsls	r3, r3, #23
 8000c34:	2101      	movs	r1, #1
 8000c36:	0018      	movs	r0, r3
 8000c38:	f001 ff90 	bl	8002b5c <HAL_GPIO_ReadPin>
 8000c3c:	0003      	movs	r3, r0
 8000c3e:	0018      	movs	r0, r3
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <input_09>:

uint8_t input_09(void) { return HAL_GPIO_ReadPin(IN9_GPIO_Port, IN9_Pin); }
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	23a0      	movs	r3, #160	; 0xa0
 8000c4a:	05db      	lsls	r3, r3, #23
 8000c4c:	2180      	movs	r1, #128	; 0x80
 8000c4e:	0018      	movs	r0, r3
 8000c50:	f001 ff84 	bl	8002b5c <HAL_GPIO_ReadPin>
 8000c54:	0003      	movs	r3, r0
 8000c56:	0018      	movs	r0, r3
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <input_10>:
uint8_t input_10(void) { return HAL_GPIO_ReadPin(IN10_GPIO_Port, IN10_Pin); }
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	23a0      	movs	r3, #160	; 0xa0
 8000c62:	05db      	lsls	r3, r3, #23
 8000c64:	2140      	movs	r1, #64	; 0x40
 8000c66:	0018      	movs	r0, r3
 8000c68:	f001 ff78 	bl	8002b5c <HAL_GPIO_ReadPin>
 8000c6c:	0003      	movs	r3, r0
 8000c6e:	0018      	movs	r0, r3
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <input_11>:
uint8_t input_11(void) { return HAL_GPIO_ReadPin(IN11_GPIO_Port, IN11_Pin); }
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	4b04      	ldr	r3, [pc, #16]	; (8000c8c <input_11+0x18>)
 8000c7a:	2180      	movs	r1, #128	; 0x80
 8000c7c:	0018      	movs	r0, r3
 8000c7e:	f001 ff6d 	bl	8002b5c <HAL_GPIO_ReadPin>
 8000c82:	0003      	movs	r3, r0
 8000c84:	0018      	movs	r0, r3
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	46c0      	nop			; (mov r8, r8)
 8000c8c:	50000800 	.word	0x50000800

08000c90 <input_12>:
uint8_t input_12(void) { return HAL_GPIO_ReadPin(IN12_GPIO_Port, IN12_Pin); }
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	2380      	movs	r3, #128	; 0x80
 8000c96:	021b      	lsls	r3, r3, #8
 8000c98:	4a04      	ldr	r2, [pc, #16]	; (8000cac <input_12+0x1c>)
 8000c9a:	0019      	movs	r1, r3
 8000c9c:	0010      	movs	r0, r2
 8000c9e:	f001 ff5d 	bl	8002b5c <HAL_GPIO_ReadPin>
 8000ca2:	0003      	movs	r3, r0
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	46c0      	nop			; (mov r8, r8)
 8000cac:	50000400 	.word	0x50000400

08000cb0 <input_13>:
uint8_t input_13(void) { return HAL_GPIO_ReadPin(IN13_GPIO_Port, IN13_Pin); }
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	2380      	movs	r3, #128	; 0x80
 8000cb6:	00da      	lsls	r2, r3, #3
 8000cb8:	23a0      	movs	r3, #160	; 0xa0
 8000cba:	05db      	lsls	r3, r3, #23
 8000cbc:	0011      	movs	r1, r2
 8000cbe:	0018      	movs	r0, r3
 8000cc0:	f001 ff4c 	bl	8002b5c <HAL_GPIO_ReadPin>
 8000cc4:	0003      	movs	r3, r0
 8000cc6:	0018      	movs	r0, r3
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <input_14>:
uint8_t input_14(void) { return HAL_GPIO_ReadPin(IN14_GPIO_Port, IN14_Pin); }
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	2380      	movs	r3, #128	; 0x80
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	4a04      	ldr	r2, [pc, #16]	; (8000ce8 <input_14+0x1c>)
 8000cd6:	0019      	movs	r1, r3
 8000cd8:	0010      	movs	r0, r2
 8000cda:	f001 ff3f 	bl	8002b5c <HAL_GPIO_ReadPin>
 8000cde:	0003      	movs	r3, r0
 8000ce0:	0018      	movs	r0, r3
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	46c0      	nop			; (mov r8, r8)
 8000ce8:	50000c00 	.word	0x50000c00

08000cec <input_15>:
uint8_t input_15(void) { return HAL_GPIO_ReadPin(IN15_GPIO_Port, IN15_Pin); }
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	2380      	movs	r3, #128	; 0x80
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	4a04      	ldr	r2, [pc, #16]	; (8000d08 <input_15+0x1c>)
 8000cf6:	0019      	movs	r1, r3
 8000cf8:	0010      	movs	r0, r2
 8000cfa:	f001 ff2f 	bl	8002b5c <HAL_GPIO_ReadPin>
 8000cfe:	0003      	movs	r3, r0
 8000d00:	0018      	movs	r0, r3
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	46c0      	nop			; (mov r8, r8)
 8000d08:	50000c00 	.word	0x50000c00

08000d0c <input_16>:
uint8_t input_16(void) { return HAL_GPIO_ReadPin(IN16_GPIO_Port, IN16_Pin); }
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	4b04      	ldr	r3, [pc, #16]	; (8000d24 <input_16+0x18>)
 8000d12:	2140      	movs	r1, #64	; 0x40
 8000d14:	0018      	movs	r0, r3
 8000d16:	f001 ff21 	bl	8002b5c <HAL_GPIO_ReadPin>
 8000d1a:	0003      	movs	r3, r0
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	46c0      	nop			; (mov r8, r8)
 8000d24:	50000800 	.word	0x50000800

08000d28 <input_17>:

uint8_t input_17(void) { return HAL_GPIO_ReadPin(IN17_GPIO_Port, IN17_Pin); }
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	2380      	movs	r3, #128	; 0x80
 8000d2e:	011a      	lsls	r2, r3, #4
 8000d30:	23a0      	movs	r3, #160	; 0xa0
 8000d32:	05db      	lsls	r3, r3, #23
 8000d34:	0011      	movs	r1, r2
 8000d36:	0018      	movs	r0, r3
 8000d38:	f001 ff10 	bl	8002b5c <HAL_GPIO_ReadPin>
 8000d3c:	0003      	movs	r3, r0
 8000d3e:	0018      	movs	r0, r3
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <input_18>:
uint8_t input_18(void) { return HAL_GPIO_ReadPin(IN18_GPIO_Port, IN18_Pin); }
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	2380      	movs	r3, #128	; 0x80
 8000d4a:	015a      	lsls	r2, r3, #5
 8000d4c:	23a0      	movs	r3, #160	; 0xa0
 8000d4e:	05db      	lsls	r3, r3, #23
 8000d50:	0011      	movs	r1, r2
 8000d52:	0018      	movs	r0, r3
 8000d54:	f001 ff02 	bl	8002b5c <HAL_GPIO_ReadPin>
 8000d58:	0003      	movs	r3, r0
 8000d5a:	0018      	movs	r0, r3
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <input_19>:
uint8_t input_19(void) { return HAL_GPIO_ReadPin(IN19_GPIO_Port, IN19_Pin); }
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	2380      	movs	r3, #128	; 0x80
 8000d66:	021a      	lsls	r2, r3, #8
 8000d68:	23a0      	movs	r3, #160	; 0xa0
 8000d6a:	05db      	lsls	r3, r3, #23
 8000d6c:	0011      	movs	r1, r2
 8000d6e:	0018      	movs	r0, r3
 8000d70:	f001 fef4 	bl	8002b5c <HAL_GPIO_ReadPin>
 8000d74:	0003      	movs	r3, r0
 8000d76:	0018      	movs	r0, r3
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <input_20>:
uint8_t input_20(void) { return HAL_GPIO_ReadPin(IN20_GPIO_Port, IN20_Pin); }
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	2380      	movs	r3, #128	; 0x80
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	4a04      	ldr	r2, [pc, #16]	; (8000d98 <input_20+0x1c>)
 8000d86:	0019      	movs	r1, r3
 8000d88:	0010      	movs	r0, r2
 8000d8a:	f001 fee7 	bl	8002b5c <HAL_GPIO_ReadPin>
 8000d8e:	0003      	movs	r3, r0
 8000d90:	0018      	movs	r0, r3
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	46c0      	nop			; (mov r8, r8)
 8000d98:	50000800 	.word	0x50000800

08000d9c <input_21>:
uint8_t input_21(void) { return HAL_GPIO_ReadPin(IN21_GPIO_Port, IN21_Pin); }
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	2380      	movs	r3, #128	; 0x80
 8000da2:	009a      	lsls	r2, r3, #2
 8000da4:	23a0      	movs	r3, #160	; 0xa0
 8000da6:	05db      	lsls	r3, r3, #23
 8000da8:	0011      	movs	r1, r2
 8000daa:	0018      	movs	r0, r3
 8000dac:	f001 fed6 	bl	8002b5c <HAL_GPIO_ReadPin>
 8000db0:	0003      	movs	r3, r0
 8000db2:	0018      	movs	r0, r3
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <input_22>:
uint8_t input_22(void) { return HAL_GPIO_ReadPin(IN22_GPIO_Port, IN22_Pin); }
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	2380      	movs	r3, #128	; 0x80
 8000dbe:	005a      	lsls	r2, r3, #1
 8000dc0:	23a0      	movs	r3, #160	; 0xa0
 8000dc2:	05db      	lsls	r3, r3, #23
 8000dc4:	0011      	movs	r1, r2
 8000dc6:	0018      	movs	r0, r3
 8000dc8:	f001 fec8 	bl	8002b5c <HAL_GPIO_ReadPin>
 8000dcc:	0003      	movs	r3, r0
 8000dce:	0018      	movs	r0, r3
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <input_23>:
uint8_t input_23(void) { return HAL_GPIO_ReadPin(IN23_GPIO_Port, IN23_Pin); }
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	2380      	movs	r3, #128	; 0x80
 8000dda:	01db      	lsls	r3, r3, #7
 8000ddc:	4a04      	ldr	r2, [pc, #16]	; (8000df0 <input_23+0x1c>)
 8000dde:	0019      	movs	r1, r3
 8000de0:	0010      	movs	r0, r2
 8000de2:	f001 febb 	bl	8002b5c <HAL_GPIO_ReadPin>
 8000de6:	0003      	movs	r3, r0
 8000de8:	0018      	movs	r0, r3
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	46c0      	nop			; (mov r8, r8)
 8000df0:	50000400 	.word	0x50000400

08000df4 <input_24>:
uint8_t input_24(void) { return HAL_GPIO_ReadPin(IN24_GPIO_Port, IN24_Pin); }
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	2380      	movs	r3, #128	; 0x80
 8000dfa:	019b      	lsls	r3, r3, #6
 8000dfc:	4a04      	ldr	r2, [pc, #16]	; (8000e10 <input_24+0x1c>)
 8000dfe:	0019      	movs	r1, r3
 8000e00:	0010      	movs	r0, r2
 8000e02:	f001 feab 	bl	8002b5c <HAL_GPIO_ReadPin>
 8000e06:	0003      	movs	r3, r0
 8000e08:	0018      	movs	r0, r3
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	46c0      	nop			; (mov r8, r8)
 8000e10:	50000400 	.word	0x50000400

08000e14 <input_25>:

uint8_t input_25(void) { return HAL_GPIO_ReadPin(IN25_GPIO_Port, IN25_Pin); }
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	2380      	movs	r3, #128	; 0x80
 8000e1a:	015b      	lsls	r3, r3, #5
 8000e1c:	4a04      	ldr	r2, [pc, #16]	; (8000e30 <input_25+0x1c>)
 8000e1e:	0019      	movs	r1, r3
 8000e20:	0010      	movs	r0, r2
 8000e22:	f001 fe9b 	bl	8002b5c <HAL_GPIO_ReadPin>
 8000e26:	0003      	movs	r3, r0
 8000e28:	0018      	movs	r0, r3
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	46c0      	nop			; (mov r8, r8)
 8000e30:	50000400 	.word	0x50000400

08000e34 <input_26>:
uint8_t input_26(void) { return HAL_GPIO_ReadPin(IN26_GPIO_Port, IN26_Pin); }
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	2380      	movs	r3, #128	; 0x80
 8000e3a:	011b      	lsls	r3, r3, #4
 8000e3c:	4a04      	ldr	r2, [pc, #16]	; (8000e50 <input_26+0x1c>)
 8000e3e:	0019      	movs	r1, r3
 8000e40:	0010      	movs	r0, r2
 8000e42:	f001 fe8b 	bl	8002b5c <HAL_GPIO_ReadPin>
 8000e46:	0003      	movs	r3, r0
 8000e48:	0018      	movs	r0, r3
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	46c0      	nop			; (mov r8, r8)
 8000e50:	50000400 	.word	0x50000400

08000e54 <input_27>:
uint8_t input_27(void) { return HAL_GPIO_ReadPin(IN27_GPIO_Port, IN27_Pin); }
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	2380      	movs	r3, #128	; 0x80
 8000e5a:	00db      	lsls	r3, r3, #3
 8000e5c:	4a04      	ldr	r2, [pc, #16]	; (8000e70 <input_27+0x1c>)
 8000e5e:	0019      	movs	r1, r3
 8000e60:	0010      	movs	r0, r2
 8000e62:	f001 fe7b 	bl	8002b5c <HAL_GPIO_ReadPin>
 8000e66:	0003      	movs	r3, r0
 8000e68:	0018      	movs	r0, r3
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	50000400 	.word	0x50000400

08000e74 <input_28>:
uint8_t input_28(void) { return HAL_GPIO_ReadPin(IN28_GPIO_Port, IN28_Pin); }
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	4b04      	ldr	r3, [pc, #16]	; (8000e8c <input_28+0x18>)
 8000e7a:	2104      	movs	r1, #4
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	f001 fe6d 	bl	8002b5c <HAL_GPIO_ReadPin>
 8000e82:	0003      	movs	r3, r0
 8000e84:	0018      	movs	r0, r3
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	46c0      	nop			; (mov r8, r8)
 8000e8c:	50000400 	.word	0x50000400

08000e90 <input_29>:
uint8_t input_29(void) { return HAL_GPIO_ReadPin(IN29_GPIO_Port, IN29_Pin); }
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	4b04      	ldr	r3, [pc, #16]	; (8000ea8 <input_29+0x18>)
 8000e96:	2102      	movs	r1, #2
 8000e98:	0018      	movs	r0, r3
 8000e9a:	f001 fe5f 	bl	8002b5c <HAL_GPIO_ReadPin>
 8000e9e:	0003      	movs	r3, r0
 8000ea0:	0018      	movs	r0, r3
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	46c0      	nop			; (mov r8, r8)
 8000ea8:	50000400 	.word	0x50000400

08000eac <input_30>:
uint8_t input_30(void) { return HAL_GPIO_ReadPin(IN30_GPIO_Port, IN30_Pin); }
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	4b04      	ldr	r3, [pc, #16]	; (8000ec4 <input_30+0x18>)
 8000eb2:	2101      	movs	r1, #1
 8000eb4:	0018      	movs	r0, r3
 8000eb6:	f001 fe51 	bl	8002b5c <HAL_GPIO_ReadPin>
 8000eba:	0003      	movs	r3, r0
 8000ebc:	0018      	movs	r0, r3
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	46c0      	nop			; (mov r8, r8)
 8000ec4:	50000400 	.word	0x50000400

08000ec8 <input_31>:
uint8_t input_31(void) { return HAL_GPIO_ReadPin(IN31_GPIO_Port, IN31_Pin); }
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	4b04      	ldr	r3, [pc, #16]	; (8000ee0 <input_31+0x18>)
 8000ece:	2120      	movs	r1, #32
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	f001 fe43 	bl	8002b5c <HAL_GPIO_ReadPin>
 8000ed6:	0003      	movs	r3, r0
 8000ed8:	0018      	movs	r0, r3
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	46c0      	nop			; (mov r8, r8)
 8000ee0:	50000800 	.word	0x50000800

08000ee4 <input_32>:
uint8_t input_32(void) { return HAL_GPIO_ReadPin(IN32_GPIO_Port, IN32_Pin); }
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	4b04      	ldr	r3, [pc, #16]	; (8000efc <input_32+0x18>)
 8000eea:	2110      	movs	r1, #16
 8000eec:	0018      	movs	r0, r3
 8000eee:	f001 fe35 	bl	8002b5c <HAL_GPIO_ReadPin>
 8000ef2:	0003      	movs	r3, r0
 8000ef4:	0018      	movs	r0, r3
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	46c0      	nop			; (mov r8, r8)
 8000efc:	50000800 	.word	0x50000800

08000f00 <input_33>:

uint8_t input_33(void) { return HAL_GPIO_ReadPin(IN33_GPIO_Port, IN33_Pin); }
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	4b04      	ldr	r3, [pc, #16]	; (8000f18 <input_33+0x18>)
 8000f06:	2101      	movs	r1, #1
 8000f08:	0018      	movs	r0, r3
 8000f0a:	f001 fe27 	bl	8002b5c <HAL_GPIO_ReadPin>
 8000f0e:	0003      	movs	r3, r0
 8000f10:	0018      	movs	r0, r3
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	46c0      	nop			; (mov r8, r8)
 8000f18:	50000c00 	.word	0x50000c00

08000f1c <input_34>:
uint8_t input_34(void) { return HAL_GPIO_ReadPin(IN34_GPIO_Port, IN34_Pin); }
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	2380      	movs	r3, #128	; 0x80
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	4a04      	ldr	r2, [pc, #16]	; (8000f38 <input_34+0x1c>)
 8000f26:	0019      	movs	r1, r3
 8000f28:	0010      	movs	r0, r2
 8000f2a:	f001 fe17 	bl	8002b5c <HAL_GPIO_ReadPin>
 8000f2e:	0003      	movs	r3, r0
 8000f30:	0018      	movs	r0, r3
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	46c0      	nop			; (mov r8, r8)
 8000f38:	50000800 	.word	0x50000800

08000f3c <input_35>:
uint8_t input_35(void) { return HAL_GPIO_ReadPin(IN35_GPIO_Port, IN35_Pin); }
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	4b04      	ldr	r3, [pc, #16]	; (8000f54 <input_35+0x18>)
 8000f42:	2104      	movs	r1, #4
 8000f44:	0018      	movs	r0, r3
 8000f46:	f001 fe09 	bl	8002b5c <HAL_GPIO_ReadPin>
 8000f4a:	0003      	movs	r3, r0
 8000f4c:	0018      	movs	r0, r3
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	46c0      	nop			; (mov r8, r8)
 8000f54:	50000c00 	.word	0x50000c00

08000f58 <input_36>:
uint8_t input_36(void) { return HAL_GPIO_ReadPin(IN36_GPIO_Port, IN36_Pin); }
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	4b04      	ldr	r3, [pc, #16]	; (8000f70 <input_36+0x18>)
 8000f5e:	2102      	movs	r1, #2
 8000f60:	0018      	movs	r0, r3
 8000f62:	f001 fdfb 	bl	8002b5c <HAL_GPIO_ReadPin>
 8000f66:	0003      	movs	r3, r0
 8000f68:	0018      	movs	r0, r3
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	46c0      	nop			; (mov r8, r8)
 8000f70:	50000c00 	.word	0x50000c00

08000f74 <input_37>:
uint8_t input_37(void) { return HAL_GPIO_ReadPin(IN37_GPIO_Port, IN37_Pin); }
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	4b04      	ldr	r3, [pc, #16]	; (8000f8c <input_37+0x18>)
 8000f7a:	2140      	movs	r1, #64	; 0x40
 8000f7c:	0018      	movs	r0, r3
 8000f7e:	f001 fded 	bl	8002b5c <HAL_GPIO_ReadPin>
 8000f82:	0003      	movs	r3, r0
 8000f84:	0018      	movs	r0, r3
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	46c0      	nop			; (mov r8, r8)
 8000f8c:	50000400 	.word	0x50000400

08000f90 <input_38>:
uint8_t input_38(void) { return HAL_GPIO_ReadPin(IN38_GPIO_Port, IN38_Pin); }
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	4b04      	ldr	r3, [pc, #16]	; (8000fa8 <input_38+0x18>)
 8000f96:	2180      	movs	r1, #128	; 0x80
 8000f98:	0018      	movs	r0, r3
 8000f9a:	f001 fddf 	bl	8002b5c <HAL_GPIO_ReadPin>
 8000f9e:	0003      	movs	r3, r0
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	46c0      	nop			; (mov r8, r8)
 8000fa8:	50000400 	.word	0x50000400

08000fac <input_39>:
uint8_t input_39(void) { return HAL_GPIO_ReadPin(IN39_GPIO_Port, IN39_Pin); }
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	2380      	movs	r3, #128	; 0x80
 8000fb2:	015b      	lsls	r3, r3, #5
 8000fb4:	4a04      	ldr	r2, [pc, #16]	; (8000fc8 <input_39+0x1c>)
 8000fb6:	0019      	movs	r1, r3
 8000fb8:	0010      	movs	r0, r2
 8000fba:	f001 fdcf 	bl	8002b5c <HAL_GPIO_ReadPin>
 8000fbe:	0003      	movs	r3, r0
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	46c0      	nop			; (mov r8, r8)
 8000fc8:	50000800 	.word	0x50000800

08000fcc <input_40>:
uint8_t input_40(void) { return HAL_GPIO_ReadPin(IN40_GPIO_Port, IN40_Pin); }
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	2380      	movs	r3, #128	; 0x80
 8000fd2:	011b      	lsls	r3, r3, #4
 8000fd4:	4a04      	ldr	r2, [pc, #16]	; (8000fe8 <input_40+0x1c>)
 8000fd6:	0019      	movs	r1, r3
 8000fd8:	0010      	movs	r0, r2
 8000fda:	f001 fdbf 	bl	8002b5c <HAL_GPIO_ReadPin>
 8000fde:	0003      	movs	r3, r0
 8000fe0:	0018      	movs	r0, r3
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	46c0      	nop			; (mov r8, r8)
 8000fe8:	50000800 	.word	0x50000800

08000fec <input_41>:

uint8_t input_41(void) { return HAL_GPIO_ReadPin(IN41_GPIO_Port, IN41_Pin); }
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	2380      	movs	r3, #128	; 0x80
 8000ff2:	01db      	lsls	r3, r3, #7
 8000ff4:	4a04      	ldr	r2, [pc, #16]	; (8001008 <input_41+0x1c>)
 8000ff6:	0019      	movs	r1, r3
 8000ff8:	0010      	movs	r0, r2
 8000ffa:	f001 fdaf 	bl	8002b5c <HAL_GPIO_ReadPin>
 8000ffe:	0003      	movs	r3, r0
 8001000:	0018      	movs	r0, r3
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	46c0      	nop			; (mov r8, r8)
 8001008:	50000800 	.word	0x50000800

0800100c <input_42>:
uint8_t input_42(void) { return HAL_GPIO_ReadPin(IN42_GPIO_Port, IN42_Pin); }
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
 8001010:	2380      	movs	r3, #128	; 0x80
 8001012:	019b      	lsls	r3, r3, #6
 8001014:	4a04      	ldr	r2, [pc, #16]	; (8001028 <input_42+0x1c>)
 8001016:	0019      	movs	r1, r3
 8001018:	0010      	movs	r0, r2
 800101a:	f001 fd9f 	bl	8002b5c <HAL_GPIO_ReadPin>
 800101e:	0003      	movs	r3, r0
 8001020:	0018      	movs	r0, r3
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	46c0      	nop			; (mov r8, r8)
 8001028:	50000800 	.word	0x50000800

0800102c <input_43>:
uint8_t input_43(void) { return HAL_GPIO_ReadPin(IN43_GPIO_Port, IN43_Pin); }
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
 8001030:	4b04      	ldr	r3, [pc, #16]	; (8001044 <input_43+0x18>)
 8001032:	2108      	movs	r1, #8
 8001034:	0018      	movs	r0, r3
 8001036:	f001 fd91 	bl	8002b5c <HAL_GPIO_ReadPin>
 800103a:	0003      	movs	r3, r0
 800103c:	0018      	movs	r0, r3
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	46c0      	nop			; (mov r8, r8)
 8001044:	50000c00 	.word	0x50000c00

08001048 <input_44>:
uint8_t input_44(void) { return HAL_GPIO_ReadPin(IN44_GPIO_Port, IN44_Pin); }
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
 800104c:	4b04      	ldr	r3, [pc, #16]	; (8001060 <input_44+0x18>)
 800104e:	2110      	movs	r1, #16
 8001050:	0018      	movs	r0, r3
 8001052:	f001 fd83 	bl	8002b5c <HAL_GPIO_ReadPin>
 8001056:	0003      	movs	r3, r0
 8001058:	0018      	movs	r0, r3
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	46c0      	nop			; (mov r8, r8)
 8001060:	50000c00 	.word	0x50000c00

08001064 <input_45>:
uint8_t input_45(void) { return HAL_GPIO_ReadPin(IN45_GPIO_Port, IN45_Pin); }
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
 8001068:	4b04      	ldr	r3, [pc, #16]	; (800107c <input_45+0x18>)
 800106a:	2120      	movs	r1, #32
 800106c:	0018      	movs	r0, r3
 800106e:	f001 fd75 	bl	8002b5c <HAL_GPIO_ReadPin>
 8001072:	0003      	movs	r3, r0
 8001074:	0018      	movs	r0, r3
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	46c0      	nop			; (mov r8, r8)
 800107c:	50000c00 	.word	0x50000c00

08001080 <output_00>:

uint64_t getAllPinStt();

void output_00(uint8_t logic) { ;}
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	0002      	movs	r2, r0
 8001088:	1dfb      	adds	r3, r7, #7
 800108a:	701a      	strb	r2, [r3, #0]
 800108c:	46c0      	nop			; (mov r8, r8)
 800108e:	46bd      	mov	sp, r7
 8001090:	b002      	add	sp, #8
 8001092:	bd80      	pop	{r7, pc}

08001094 <output_01>:
void output_01(uint8_t logic) { wbi(Out595.all,0,logic);}
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	0002      	movs	r2, r0
 800109c:	1dfb      	adds	r3, r7, #7
 800109e:	701a      	strb	r2, [r3, #0]
 80010a0:	1dfb      	adds	r3, r7, #7
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d006      	beq.n	80010b6 <output_01+0x22>
 80010a8:	4b08      	ldr	r3, [pc, #32]	; (80010cc <output_01+0x38>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2201      	movs	r2, #1
 80010ae:	431a      	orrs	r2, r3
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <output_01+0x38>)
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	e006      	b.n	80010c4 <output_01+0x30>
 80010b6:	4b05      	ldr	r3, [pc, #20]	; (80010cc <output_01+0x38>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2201      	movs	r2, #1
 80010bc:	4393      	bics	r3, r2
 80010be:	001a      	movs	r2, r3
 80010c0:	4b02      	ldr	r3, [pc, #8]	; (80010cc <output_01+0x38>)
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	46c0      	nop			; (mov r8, r8)
 80010c6:	46bd      	mov	sp, r7
 80010c8:	b002      	add	sp, #8
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20000204 	.word	0x20000204

080010d0 <output_02>:
void output_02(uint8_t logic) { wbi(Out595.all,1,logic);}
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	0002      	movs	r2, r0
 80010d8:	1dfb      	adds	r3, r7, #7
 80010da:	701a      	strb	r2, [r3, #0]
 80010dc:	1dfb      	adds	r3, r7, #7
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d006      	beq.n	80010f2 <output_02+0x22>
 80010e4:	4b08      	ldr	r3, [pc, #32]	; (8001108 <output_02+0x38>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2202      	movs	r2, #2
 80010ea:	431a      	orrs	r2, r3
 80010ec:	4b06      	ldr	r3, [pc, #24]	; (8001108 <output_02+0x38>)
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	e006      	b.n	8001100 <output_02+0x30>
 80010f2:	4b05      	ldr	r3, [pc, #20]	; (8001108 <output_02+0x38>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2202      	movs	r2, #2
 80010f8:	4393      	bics	r3, r2
 80010fa:	001a      	movs	r2, r3
 80010fc:	4b02      	ldr	r3, [pc, #8]	; (8001108 <output_02+0x38>)
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	46c0      	nop			; (mov r8, r8)
 8001102:	46bd      	mov	sp, r7
 8001104:	b002      	add	sp, #8
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20000204 	.word	0x20000204

0800110c <output_03>:
void output_03(uint8_t logic) { wbi(Out595.all,2,logic);}
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	0002      	movs	r2, r0
 8001114:	1dfb      	adds	r3, r7, #7
 8001116:	701a      	strb	r2, [r3, #0]
 8001118:	1dfb      	adds	r3, r7, #7
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d006      	beq.n	800112e <output_03+0x22>
 8001120:	4b08      	ldr	r3, [pc, #32]	; (8001144 <output_03+0x38>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2204      	movs	r2, #4
 8001126:	431a      	orrs	r2, r3
 8001128:	4b06      	ldr	r3, [pc, #24]	; (8001144 <output_03+0x38>)
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	e006      	b.n	800113c <output_03+0x30>
 800112e:	4b05      	ldr	r3, [pc, #20]	; (8001144 <output_03+0x38>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2204      	movs	r2, #4
 8001134:	4393      	bics	r3, r2
 8001136:	001a      	movs	r2, r3
 8001138:	4b02      	ldr	r3, [pc, #8]	; (8001144 <output_03+0x38>)
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	46c0      	nop			; (mov r8, r8)
 800113e:	46bd      	mov	sp, r7
 8001140:	b002      	add	sp, #8
 8001142:	bd80      	pop	{r7, pc}
 8001144:	20000204 	.word	0x20000204

08001148 <output_04>:
void output_04(uint8_t logic) { wbi(Out595.all,3,logic);}
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	0002      	movs	r2, r0
 8001150:	1dfb      	adds	r3, r7, #7
 8001152:	701a      	strb	r2, [r3, #0]
 8001154:	1dfb      	adds	r3, r7, #7
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d006      	beq.n	800116a <output_04+0x22>
 800115c:	4b08      	ldr	r3, [pc, #32]	; (8001180 <output_04+0x38>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2208      	movs	r2, #8
 8001162:	431a      	orrs	r2, r3
 8001164:	4b06      	ldr	r3, [pc, #24]	; (8001180 <output_04+0x38>)
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	e006      	b.n	8001178 <output_04+0x30>
 800116a:	4b05      	ldr	r3, [pc, #20]	; (8001180 <output_04+0x38>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	2208      	movs	r2, #8
 8001170:	4393      	bics	r3, r2
 8001172:	001a      	movs	r2, r3
 8001174:	4b02      	ldr	r3, [pc, #8]	; (8001180 <output_04+0x38>)
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	46c0      	nop			; (mov r8, r8)
 800117a:	46bd      	mov	sp, r7
 800117c:	b002      	add	sp, #8
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20000204 	.word	0x20000204

08001184 <output_05>:
void output_05(uint8_t logic) { wbi(Out595.all,4,logic);}
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	0002      	movs	r2, r0
 800118c:	1dfb      	adds	r3, r7, #7
 800118e:	701a      	strb	r2, [r3, #0]
 8001190:	1dfb      	adds	r3, r7, #7
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d006      	beq.n	80011a6 <output_05+0x22>
 8001198:	4b08      	ldr	r3, [pc, #32]	; (80011bc <output_05+0x38>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2210      	movs	r2, #16
 800119e:	431a      	orrs	r2, r3
 80011a0:	4b06      	ldr	r3, [pc, #24]	; (80011bc <output_05+0x38>)
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	e006      	b.n	80011b4 <output_05+0x30>
 80011a6:	4b05      	ldr	r3, [pc, #20]	; (80011bc <output_05+0x38>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2210      	movs	r2, #16
 80011ac:	4393      	bics	r3, r2
 80011ae:	001a      	movs	r2, r3
 80011b0:	4b02      	ldr	r3, [pc, #8]	; (80011bc <output_05+0x38>)
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	46c0      	nop			; (mov r8, r8)
 80011b6:	46bd      	mov	sp, r7
 80011b8:	b002      	add	sp, #8
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20000204 	.word	0x20000204

080011c0 <output_06>:
void output_06(uint8_t logic) { wbi(Out595.all,5,logic);}
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	0002      	movs	r2, r0
 80011c8:	1dfb      	adds	r3, r7, #7
 80011ca:	701a      	strb	r2, [r3, #0]
 80011cc:	1dfb      	adds	r3, r7, #7
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d006      	beq.n	80011e2 <output_06+0x22>
 80011d4:	4b08      	ldr	r3, [pc, #32]	; (80011f8 <output_06+0x38>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2220      	movs	r2, #32
 80011da:	431a      	orrs	r2, r3
 80011dc:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <output_06+0x38>)
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	e006      	b.n	80011f0 <output_06+0x30>
 80011e2:	4b05      	ldr	r3, [pc, #20]	; (80011f8 <output_06+0x38>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2220      	movs	r2, #32
 80011e8:	4393      	bics	r3, r2
 80011ea:	001a      	movs	r2, r3
 80011ec:	4b02      	ldr	r3, [pc, #8]	; (80011f8 <output_06+0x38>)
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	46c0      	nop			; (mov r8, r8)
 80011f2:	46bd      	mov	sp, r7
 80011f4:	b002      	add	sp, #8
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20000204 	.word	0x20000204

080011fc <output_07>:
void output_07(uint8_t logic) { wbi(Out595.all,6,logic);}
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	0002      	movs	r2, r0
 8001204:	1dfb      	adds	r3, r7, #7
 8001206:	701a      	strb	r2, [r3, #0]
 8001208:	1dfb      	adds	r3, r7, #7
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d006      	beq.n	800121e <output_07+0x22>
 8001210:	4b08      	ldr	r3, [pc, #32]	; (8001234 <output_07+0x38>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2240      	movs	r2, #64	; 0x40
 8001216:	431a      	orrs	r2, r3
 8001218:	4b06      	ldr	r3, [pc, #24]	; (8001234 <output_07+0x38>)
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	e006      	b.n	800122c <output_07+0x30>
 800121e:	4b05      	ldr	r3, [pc, #20]	; (8001234 <output_07+0x38>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2240      	movs	r2, #64	; 0x40
 8001224:	4393      	bics	r3, r2
 8001226:	001a      	movs	r2, r3
 8001228:	4b02      	ldr	r3, [pc, #8]	; (8001234 <output_07+0x38>)
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	46c0      	nop			; (mov r8, r8)
 800122e:	46bd      	mov	sp, r7
 8001230:	b002      	add	sp, #8
 8001232:	bd80      	pop	{r7, pc}
 8001234:	20000204 	.word	0x20000204

08001238 <output_08>:
void output_08(uint8_t logic) { wbi(Out595.all,7,logic);}
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	0002      	movs	r2, r0
 8001240:	1dfb      	adds	r3, r7, #7
 8001242:	701a      	strb	r2, [r3, #0]
 8001244:	1dfb      	adds	r3, r7, #7
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d006      	beq.n	800125a <output_08+0x22>
 800124c:	4b08      	ldr	r3, [pc, #32]	; (8001270 <output_08+0x38>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2280      	movs	r2, #128	; 0x80
 8001252:	431a      	orrs	r2, r3
 8001254:	4b06      	ldr	r3, [pc, #24]	; (8001270 <output_08+0x38>)
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	e006      	b.n	8001268 <output_08+0x30>
 800125a:	4b05      	ldr	r3, [pc, #20]	; (8001270 <output_08+0x38>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2280      	movs	r2, #128	; 0x80
 8001260:	4393      	bics	r3, r2
 8001262:	001a      	movs	r2, r3
 8001264:	4b02      	ldr	r3, [pc, #8]	; (8001270 <output_08+0x38>)
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	46c0      	nop			; (mov r8, r8)
 800126a:	46bd      	mov	sp, r7
 800126c:	b002      	add	sp, #8
 800126e:	bd80      	pop	{r7, pc}
 8001270:	20000204 	.word	0x20000204

08001274 <output_09>:
void output_09(uint8_t logic) { wbi(Out595.all,8,logic);}
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	0002      	movs	r2, r0
 800127c:	1dfb      	adds	r3, r7, #7
 800127e:	701a      	strb	r2, [r3, #0]
 8001280:	1dfb      	adds	r3, r7, #7
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d007      	beq.n	8001298 <output_09+0x24>
 8001288:	4b08      	ldr	r3, [pc, #32]	; (80012ac <output_09+0x38>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2280      	movs	r2, #128	; 0x80
 800128e:	0052      	lsls	r2, r2, #1
 8001290:	431a      	orrs	r2, r3
 8001292:	4b06      	ldr	r3, [pc, #24]	; (80012ac <output_09+0x38>)
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	e005      	b.n	80012a4 <output_09+0x30>
 8001298:	4b04      	ldr	r3, [pc, #16]	; (80012ac <output_09+0x38>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a04      	ldr	r2, [pc, #16]	; (80012b0 <output_09+0x3c>)
 800129e:	401a      	ands	r2, r3
 80012a0:	4b02      	ldr	r3, [pc, #8]	; (80012ac <output_09+0x38>)
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	46c0      	nop			; (mov r8, r8)
 80012a6:	46bd      	mov	sp, r7
 80012a8:	b002      	add	sp, #8
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	20000204 	.word	0x20000204
 80012b0:	fffffeff 	.word	0xfffffeff

080012b4 <output_10>:
void output_10(uint8_t logic) { wbi(Out595.all,9,logic);}
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	0002      	movs	r2, r0
 80012bc:	1dfb      	adds	r3, r7, #7
 80012be:	701a      	strb	r2, [r3, #0]
 80012c0:	1dfb      	adds	r3, r7, #7
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d007      	beq.n	80012d8 <output_10+0x24>
 80012c8:	4b08      	ldr	r3, [pc, #32]	; (80012ec <output_10+0x38>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2280      	movs	r2, #128	; 0x80
 80012ce:	0092      	lsls	r2, r2, #2
 80012d0:	431a      	orrs	r2, r3
 80012d2:	4b06      	ldr	r3, [pc, #24]	; (80012ec <output_10+0x38>)
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	e005      	b.n	80012e4 <output_10+0x30>
 80012d8:	4b04      	ldr	r3, [pc, #16]	; (80012ec <output_10+0x38>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a04      	ldr	r2, [pc, #16]	; (80012f0 <output_10+0x3c>)
 80012de:	401a      	ands	r2, r3
 80012e0:	4b02      	ldr	r3, [pc, #8]	; (80012ec <output_10+0x38>)
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	46c0      	nop			; (mov r8, r8)
 80012e6:	46bd      	mov	sp, r7
 80012e8:	b002      	add	sp, #8
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	20000204 	.word	0x20000204
 80012f0:	fffffdff 	.word	0xfffffdff

080012f4 <output_11>:
void output_11(uint8_t logic) { wbi(Out595.all,10,logic);}
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	0002      	movs	r2, r0
 80012fc:	1dfb      	adds	r3, r7, #7
 80012fe:	701a      	strb	r2, [r3, #0]
 8001300:	1dfb      	adds	r3, r7, #7
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d007      	beq.n	8001318 <output_11+0x24>
 8001308:	4b08      	ldr	r3, [pc, #32]	; (800132c <output_11+0x38>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2280      	movs	r2, #128	; 0x80
 800130e:	00d2      	lsls	r2, r2, #3
 8001310:	431a      	orrs	r2, r3
 8001312:	4b06      	ldr	r3, [pc, #24]	; (800132c <output_11+0x38>)
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	e005      	b.n	8001324 <output_11+0x30>
 8001318:	4b04      	ldr	r3, [pc, #16]	; (800132c <output_11+0x38>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a04      	ldr	r2, [pc, #16]	; (8001330 <output_11+0x3c>)
 800131e:	401a      	ands	r2, r3
 8001320:	4b02      	ldr	r3, [pc, #8]	; (800132c <output_11+0x38>)
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	46c0      	nop			; (mov r8, r8)
 8001326:	46bd      	mov	sp, r7
 8001328:	b002      	add	sp, #8
 800132a:	bd80      	pop	{r7, pc}
 800132c:	20000204 	.word	0x20000204
 8001330:	fffffbff 	.word	0xfffffbff

08001334 <output_12>:
void output_12(uint8_t logic) { wbi(Out595.all,11,logic);}
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	0002      	movs	r2, r0
 800133c:	1dfb      	adds	r3, r7, #7
 800133e:	701a      	strb	r2, [r3, #0]
 8001340:	1dfb      	adds	r3, r7, #7
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d007      	beq.n	8001358 <output_12+0x24>
 8001348:	4b08      	ldr	r3, [pc, #32]	; (800136c <output_12+0x38>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2280      	movs	r2, #128	; 0x80
 800134e:	0112      	lsls	r2, r2, #4
 8001350:	431a      	orrs	r2, r3
 8001352:	4b06      	ldr	r3, [pc, #24]	; (800136c <output_12+0x38>)
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	e005      	b.n	8001364 <output_12+0x30>
 8001358:	4b04      	ldr	r3, [pc, #16]	; (800136c <output_12+0x38>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a04      	ldr	r2, [pc, #16]	; (8001370 <output_12+0x3c>)
 800135e:	401a      	ands	r2, r3
 8001360:	4b02      	ldr	r3, [pc, #8]	; (800136c <output_12+0x38>)
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	46c0      	nop			; (mov r8, r8)
 8001366:	46bd      	mov	sp, r7
 8001368:	b002      	add	sp, #8
 800136a:	bd80      	pop	{r7, pc}
 800136c:	20000204 	.word	0x20000204
 8001370:	fffff7ff 	.word	0xfffff7ff

08001374 <output_13>:
void output_13(uint8_t logic) { wbi(Out595.all,12,logic);}
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	0002      	movs	r2, r0
 800137c:	1dfb      	adds	r3, r7, #7
 800137e:	701a      	strb	r2, [r3, #0]
 8001380:	1dfb      	adds	r3, r7, #7
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d007      	beq.n	8001398 <output_13+0x24>
 8001388:	4b08      	ldr	r3, [pc, #32]	; (80013ac <output_13+0x38>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2280      	movs	r2, #128	; 0x80
 800138e:	0152      	lsls	r2, r2, #5
 8001390:	431a      	orrs	r2, r3
 8001392:	4b06      	ldr	r3, [pc, #24]	; (80013ac <output_13+0x38>)
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	e005      	b.n	80013a4 <output_13+0x30>
 8001398:	4b04      	ldr	r3, [pc, #16]	; (80013ac <output_13+0x38>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a04      	ldr	r2, [pc, #16]	; (80013b0 <output_13+0x3c>)
 800139e:	401a      	ands	r2, r3
 80013a0:	4b02      	ldr	r3, [pc, #8]	; (80013ac <output_13+0x38>)
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	46c0      	nop			; (mov r8, r8)
 80013a6:	46bd      	mov	sp, r7
 80013a8:	b002      	add	sp, #8
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	20000204 	.word	0x20000204
 80013b0:	ffffefff 	.word	0xffffefff

080013b4 <output_14>:
void output_14(uint8_t logic) { wbi(Out595.all,13,logic);}
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	0002      	movs	r2, r0
 80013bc:	1dfb      	adds	r3, r7, #7
 80013be:	701a      	strb	r2, [r3, #0]
 80013c0:	1dfb      	adds	r3, r7, #7
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d007      	beq.n	80013d8 <output_14+0x24>
 80013c8:	4b08      	ldr	r3, [pc, #32]	; (80013ec <output_14+0x38>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2280      	movs	r2, #128	; 0x80
 80013ce:	0192      	lsls	r2, r2, #6
 80013d0:	431a      	orrs	r2, r3
 80013d2:	4b06      	ldr	r3, [pc, #24]	; (80013ec <output_14+0x38>)
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	e005      	b.n	80013e4 <output_14+0x30>
 80013d8:	4b04      	ldr	r3, [pc, #16]	; (80013ec <output_14+0x38>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a04      	ldr	r2, [pc, #16]	; (80013f0 <output_14+0x3c>)
 80013de:	401a      	ands	r2, r3
 80013e0:	4b02      	ldr	r3, [pc, #8]	; (80013ec <output_14+0x38>)
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	46c0      	nop			; (mov r8, r8)
 80013e6:	46bd      	mov	sp, r7
 80013e8:	b002      	add	sp, #8
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20000204 	.word	0x20000204
 80013f0:	ffffdfff 	.word	0xffffdfff

080013f4 <output_15>:
void output_15(uint8_t logic) { wbi(Out595.all,14,logic);}
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	0002      	movs	r2, r0
 80013fc:	1dfb      	adds	r3, r7, #7
 80013fe:	701a      	strb	r2, [r3, #0]
 8001400:	1dfb      	adds	r3, r7, #7
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d007      	beq.n	8001418 <output_15+0x24>
 8001408:	4b08      	ldr	r3, [pc, #32]	; (800142c <output_15+0x38>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2280      	movs	r2, #128	; 0x80
 800140e:	01d2      	lsls	r2, r2, #7
 8001410:	431a      	orrs	r2, r3
 8001412:	4b06      	ldr	r3, [pc, #24]	; (800142c <output_15+0x38>)
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	e005      	b.n	8001424 <output_15+0x30>
 8001418:	4b04      	ldr	r3, [pc, #16]	; (800142c <output_15+0x38>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a04      	ldr	r2, [pc, #16]	; (8001430 <output_15+0x3c>)
 800141e:	401a      	ands	r2, r3
 8001420:	4b02      	ldr	r3, [pc, #8]	; (800142c <output_15+0x38>)
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	46c0      	nop			; (mov r8, r8)
 8001426:	46bd      	mov	sp, r7
 8001428:	b002      	add	sp, #8
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20000204 	.word	0x20000204
 8001430:	ffffbfff 	.word	0xffffbfff

08001434 <output_16>:
void output_16(uint8_t logic) { wbi(Out595.all,15,logic);}
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	0002      	movs	r2, r0
 800143c:	1dfb      	adds	r3, r7, #7
 800143e:	701a      	strb	r2, [r3, #0]
 8001440:	1dfb      	adds	r3, r7, #7
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d007      	beq.n	8001458 <output_16+0x24>
 8001448:	4b08      	ldr	r3, [pc, #32]	; (800146c <output_16+0x38>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2280      	movs	r2, #128	; 0x80
 800144e:	0212      	lsls	r2, r2, #8
 8001450:	431a      	orrs	r2, r3
 8001452:	4b06      	ldr	r3, [pc, #24]	; (800146c <output_16+0x38>)
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	e005      	b.n	8001464 <output_16+0x30>
 8001458:	4b04      	ldr	r3, [pc, #16]	; (800146c <output_16+0x38>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a04      	ldr	r2, [pc, #16]	; (8001470 <output_16+0x3c>)
 800145e:	401a      	ands	r2, r3
 8001460:	4b02      	ldr	r3, [pc, #8]	; (800146c <output_16+0x38>)
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	46c0      	nop			; (mov r8, r8)
 8001466:	46bd      	mov	sp, r7
 8001468:	b002      	add	sp, #8
 800146a:	bd80      	pop	{r7, pc}
 800146c:	20000204 	.word	0x20000204
 8001470:	ffff7fff 	.word	0xffff7fff

08001474 <output_17>:
void output_17(uint8_t logic) { wbi(Out595.all,16,logic);}
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	0002      	movs	r2, r0
 800147c:	1dfb      	adds	r3, r7, #7
 800147e:	701a      	strb	r2, [r3, #0]
 8001480:	1dfb      	adds	r3, r7, #7
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d007      	beq.n	8001498 <output_17+0x24>
 8001488:	4b08      	ldr	r3, [pc, #32]	; (80014ac <output_17+0x38>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2280      	movs	r2, #128	; 0x80
 800148e:	0252      	lsls	r2, r2, #9
 8001490:	431a      	orrs	r2, r3
 8001492:	4b06      	ldr	r3, [pc, #24]	; (80014ac <output_17+0x38>)
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	e005      	b.n	80014a4 <output_17+0x30>
 8001498:	4b04      	ldr	r3, [pc, #16]	; (80014ac <output_17+0x38>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a04      	ldr	r2, [pc, #16]	; (80014b0 <output_17+0x3c>)
 800149e:	401a      	ands	r2, r3
 80014a0:	4b02      	ldr	r3, [pc, #8]	; (80014ac <output_17+0x38>)
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	46c0      	nop			; (mov r8, r8)
 80014a6:	46bd      	mov	sp, r7
 80014a8:	b002      	add	sp, #8
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	20000204 	.word	0x20000204
 80014b0:	fffeffff 	.word	0xfffeffff

080014b4 <output_18>:
void output_18(uint8_t logic) { wbi(Out595.all,17,logic);}
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	0002      	movs	r2, r0
 80014bc:	1dfb      	adds	r3, r7, #7
 80014be:	701a      	strb	r2, [r3, #0]
 80014c0:	1dfb      	adds	r3, r7, #7
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d007      	beq.n	80014d8 <output_18+0x24>
 80014c8:	4b08      	ldr	r3, [pc, #32]	; (80014ec <output_18+0x38>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2280      	movs	r2, #128	; 0x80
 80014ce:	0292      	lsls	r2, r2, #10
 80014d0:	431a      	orrs	r2, r3
 80014d2:	4b06      	ldr	r3, [pc, #24]	; (80014ec <output_18+0x38>)
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	e005      	b.n	80014e4 <output_18+0x30>
 80014d8:	4b04      	ldr	r3, [pc, #16]	; (80014ec <output_18+0x38>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a04      	ldr	r2, [pc, #16]	; (80014f0 <output_18+0x3c>)
 80014de:	401a      	ands	r2, r3
 80014e0:	4b02      	ldr	r3, [pc, #8]	; (80014ec <output_18+0x38>)
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	46c0      	nop			; (mov r8, r8)
 80014e6:	46bd      	mov	sp, r7
 80014e8:	b002      	add	sp, #8
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	20000204 	.word	0x20000204
 80014f0:	fffdffff 	.word	0xfffdffff

080014f4 <output_19>:
void output_19(uint8_t logic) { wbi(Out595.all,18,logic);}
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	0002      	movs	r2, r0
 80014fc:	1dfb      	adds	r3, r7, #7
 80014fe:	701a      	strb	r2, [r3, #0]
 8001500:	1dfb      	adds	r3, r7, #7
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d007      	beq.n	8001518 <output_19+0x24>
 8001508:	4b08      	ldr	r3, [pc, #32]	; (800152c <output_19+0x38>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2280      	movs	r2, #128	; 0x80
 800150e:	02d2      	lsls	r2, r2, #11
 8001510:	431a      	orrs	r2, r3
 8001512:	4b06      	ldr	r3, [pc, #24]	; (800152c <output_19+0x38>)
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	e005      	b.n	8001524 <output_19+0x30>
 8001518:	4b04      	ldr	r3, [pc, #16]	; (800152c <output_19+0x38>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a04      	ldr	r2, [pc, #16]	; (8001530 <output_19+0x3c>)
 800151e:	401a      	ands	r2, r3
 8001520:	4b02      	ldr	r3, [pc, #8]	; (800152c <output_19+0x38>)
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	46c0      	nop			; (mov r8, r8)
 8001526:	46bd      	mov	sp, r7
 8001528:	b002      	add	sp, #8
 800152a:	bd80      	pop	{r7, pc}
 800152c:	20000204 	.word	0x20000204
 8001530:	fffbffff 	.word	0xfffbffff

08001534 <output_20>:
void output_20(uint8_t logic) { wbi(Out595.all,19,logic);}
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	0002      	movs	r2, r0
 800153c:	1dfb      	adds	r3, r7, #7
 800153e:	701a      	strb	r2, [r3, #0]
 8001540:	1dfb      	adds	r3, r7, #7
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d007      	beq.n	8001558 <output_20+0x24>
 8001548:	4b08      	ldr	r3, [pc, #32]	; (800156c <output_20+0x38>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2280      	movs	r2, #128	; 0x80
 800154e:	0312      	lsls	r2, r2, #12
 8001550:	431a      	orrs	r2, r3
 8001552:	4b06      	ldr	r3, [pc, #24]	; (800156c <output_20+0x38>)
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	e005      	b.n	8001564 <output_20+0x30>
 8001558:	4b04      	ldr	r3, [pc, #16]	; (800156c <output_20+0x38>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a04      	ldr	r2, [pc, #16]	; (8001570 <output_20+0x3c>)
 800155e:	401a      	ands	r2, r3
 8001560:	4b02      	ldr	r3, [pc, #8]	; (800156c <output_20+0x38>)
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	46c0      	nop			; (mov r8, r8)
 8001566:	46bd      	mov	sp, r7
 8001568:	b002      	add	sp, #8
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20000204 	.word	0x20000204
 8001570:	fff7ffff 	.word	0xfff7ffff

08001574 <output_21>:
void output_21(uint8_t logic) { wbi(Out595.all,20,logic);}
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	0002      	movs	r2, r0
 800157c:	1dfb      	adds	r3, r7, #7
 800157e:	701a      	strb	r2, [r3, #0]
 8001580:	1dfb      	adds	r3, r7, #7
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d007      	beq.n	8001598 <output_21+0x24>
 8001588:	4b08      	ldr	r3, [pc, #32]	; (80015ac <output_21+0x38>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2280      	movs	r2, #128	; 0x80
 800158e:	0352      	lsls	r2, r2, #13
 8001590:	431a      	orrs	r2, r3
 8001592:	4b06      	ldr	r3, [pc, #24]	; (80015ac <output_21+0x38>)
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	e005      	b.n	80015a4 <output_21+0x30>
 8001598:	4b04      	ldr	r3, [pc, #16]	; (80015ac <output_21+0x38>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a04      	ldr	r2, [pc, #16]	; (80015b0 <output_21+0x3c>)
 800159e:	401a      	ands	r2, r3
 80015a0:	4b02      	ldr	r3, [pc, #8]	; (80015ac <output_21+0x38>)
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	46c0      	nop			; (mov r8, r8)
 80015a6:	46bd      	mov	sp, r7
 80015a8:	b002      	add	sp, #8
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	20000204 	.word	0x20000204
 80015b0:	ffefffff 	.word	0xffefffff

080015b4 <output_22>:
void output_22(uint8_t logic) { wbi(Out595.all,21,logic);}
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	0002      	movs	r2, r0
 80015bc:	1dfb      	adds	r3, r7, #7
 80015be:	701a      	strb	r2, [r3, #0]
 80015c0:	1dfb      	adds	r3, r7, #7
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d007      	beq.n	80015d8 <output_22+0x24>
 80015c8:	4b08      	ldr	r3, [pc, #32]	; (80015ec <output_22+0x38>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2280      	movs	r2, #128	; 0x80
 80015ce:	0392      	lsls	r2, r2, #14
 80015d0:	431a      	orrs	r2, r3
 80015d2:	4b06      	ldr	r3, [pc, #24]	; (80015ec <output_22+0x38>)
 80015d4:	601a      	str	r2, [r3, #0]
 80015d6:	e005      	b.n	80015e4 <output_22+0x30>
 80015d8:	4b04      	ldr	r3, [pc, #16]	; (80015ec <output_22+0x38>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a04      	ldr	r2, [pc, #16]	; (80015f0 <output_22+0x3c>)
 80015de:	401a      	ands	r2, r3
 80015e0:	4b02      	ldr	r3, [pc, #8]	; (80015ec <output_22+0x38>)
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	46c0      	nop			; (mov r8, r8)
 80015e6:	46bd      	mov	sp, r7
 80015e8:	b002      	add	sp, #8
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	20000204 	.word	0x20000204
 80015f0:	ffdfffff 	.word	0xffdfffff

080015f4 <output_23>:
void output_23(uint8_t logic) { wbi(Out595.all,22,logic);}
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	0002      	movs	r2, r0
 80015fc:	1dfb      	adds	r3, r7, #7
 80015fe:	701a      	strb	r2, [r3, #0]
 8001600:	1dfb      	adds	r3, r7, #7
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d007      	beq.n	8001618 <output_23+0x24>
 8001608:	4b08      	ldr	r3, [pc, #32]	; (800162c <output_23+0x38>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2280      	movs	r2, #128	; 0x80
 800160e:	03d2      	lsls	r2, r2, #15
 8001610:	431a      	orrs	r2, r3
 8001612:	4b06      	ldr	r3, [pc, #24]	; (800162c <output_23+0x38>)
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	e005      	b.n	8001624 <output_23+0x30>
 8001618:	4b04      	ldr	r3, [pc, #16]	; (800162c <output_23+0x38>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a04      	ldr	r2, [pc, #16]	; (8001630 <output_23+0x3c>)
 800161e:	401a      	ands	r2, r3
 8001620:	4b02      	ldr	r3, [pc, #8]	; (800162c <output_23+0x38>)
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	46c0      	nop			; (mov r8, r8)
 8001626:	46bd      	mov	sp, r7
 8001628:	b002      	add	sp, #8
 800162a:	bd80      	pop	{r7, pc}
 800162c:	20000204 	.word	0x20000204
 8001630:	ffbfffff 	.word	0xffbfffff

08001634 <output_24>:
void output_24(uint8_t logic) { wbi(Out595.all,23,logic);}
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	0002      	movs	r2, r0
 800163c:	1dfb      	adds	r3, r7, #7
 800163e:	701a      	strb	r2, [r3, #0]
 8001640:	1dfb      	adds	r3, r7, #7
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d007      	beq.n	8001658 <output_24+0x24>
 8001648:	4b08      	ldr	r3, [pc, #32]	; (800166c <output_24+0x38>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2280      	movs	r2, #128	; 0x80
 800164e:	0412      	lsls	r2, r2, #16
 8001650:	431a      	orrs	r2, r3
 8001652:	4b06      	ldr	r3, [pc, #24]	; (800166c <output_24+0x38>)
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	e005      	b.n	8001664 <output_24+0x30>
 8001658:	4b04      	ldr	r3, [pc, #16]	; (800166c <output_24+0x38>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a04      	ldr	r2, [pc, #16]	; (8001670 <output_24+0x3c>)
 800165e:	401a      	ands	r2, r3
 8001660:	4b02      	ldr	r3, [pc, #8]	; (800166c <output_24+0x38>)
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	46c0      	nop			; (mov r8, r8)
 8001666:	46bd      	mov	sp, r7
 8001668:	b002      	add	sp, #8
 800166a:	bd80      	pop	{r7, pc}
 800166c:	20000204 	.word	0x20000204
 8001670:	ff7fffff 	.word	0xff7fffff

08001674 <output_25>:
void output_25(uint8_t logic) { wbi(Out595.all,24,logic);}
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	0002      	movs	r2, r0
 800167c:	1dfb      	adds	r3, r7, #7
 800167e:	701a      	strb	r2, [r3, #0]
 8001680:	1dfb      	adds	r3, r7, #7
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d007      	beq.n	8001698 <output_25+0x24>
 8001688:	4b08      	ldr	r3, [pc, #32]	; (80016ac <output_25+0x38>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2280      	movs	r2, #128	; 0x80
 800168e:	0452      	lsls	r2, r2, #17
 8001690:	431a      	orrs	r2, r3
 8001692:	4b06      	ldr	r3, [pc, #24]	; (80016ac <output_25+0x38>)
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	e005      	b.n	80016a4 <output_25+0x30>
 8001698:	4b04      	ldr	r3, [pc, #16]	; (80016ac <output_25+0x38>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a04      	ldr	r2, [pc, #16]	; (80016b0 <output_25+0x3c>)
 800169e:	401a      	ands	r2, r3
 80016a0:	4b02      	ldr	r3, [pc, #8]	; (80016ac <output_25+0x38>)
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	46c0      	nop			; (mov r8, r8)
 80016a6:	46bd      	mov	sp, r7
 80016a8:	b002      	add	sp, #8
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	20000204 	.word	0x20000204
 80016b0:	feffffff 	.word	0xfeffffff

080016b4 <output_26>:
void output_26(uint8_t logic) { wbi(Out595.all,25,logic);}
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	0002      	movs	r2, r0
 80016bc:	1dfb      	adds	r3, r7, #7
 80016be:	701a      	strb	r2, [r3, #0]
 80016c0:	1dfb      	adds	r3, r7, #7
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d007      	beq.n	80016d8 <output_26+0x24>
 80016c8:	4b08      	ldr	r3, [pc, #32]	; (80016ec <output_26+0x38>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2280      	movs	r2, #128	; 0x80
 80016ce:	0492      	lsls	r2, r2, #18
 80016d0:	431a      	orrs	r2, r3
 80016d2:	4b06      	ldr	r3, [pc, #24]	; (80016ec <output_26+0x38>)
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	e005      	b.n	80016e4 <output_26+0x30>
 80016d8:	4b04      	ldr	r3, [pc, #16]	; (80016ec <output_26+0x38>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a04      	ldr	r2, [pc, #16]	; (80016f0 <output_26+0x3c>)
 80016de:	401a      	ands	r2, r3
 80016e0:	4b02      	ldr	r3, [pc, #8]	; (80016ec <output_26+0x38>)
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	46c0      	nop			; (mov r8, r8)
 80016e6:	46bd      	mov	sp, r7
 80016e8:	b002      	add	sp, #8
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	20000204 	.word	0x20000204
 80016f0:	fdffffff 	.word	0xfdffffff

080016f4 <output_27>:
void output_27(uint8_t logic) { wbi(Out595.all,26,logic);}
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	0002      	movs	r2, r0
 80016fc:	1dfb      	adds	r3, r7, #7
 80016fe:	701a      	strb	r2, [r3, #0]
 8001700:	1dfb      	adds	r3, r7, #7
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d007      	beq.n	8001718 <output_27+0x24>
 8001708:	4b08      	ldr	r3, [pc, #32]	; (800172c <output_27+0x38>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2280      	movs	r2, #128	; 0x80
 800170e:	04d2      	lsls	r2, r2, #19
 8001710:	431a      	orrs	r2, r3
 8001712:	4b06      	ldr	r3, [pc, #24]	; (800172c <output_27+0x38>)
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	e005      	b.n	8001724 <output_27+0x30>
 8001718:	4b04      	ldr	r3, [pc, #16]	; (800172c <output_27+0x38>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a04      	ldr	r2, [pc, #16]	; (8001730 <output_27+0x3c>)
 800171e:	401a      	ands	r2, r3
 8001720:	4b02      	ldr	r3, [pc, #8]	; (800172c <output_27+0x38>)
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	46c0      	nop			; (mov r8, r8)
 8001726:	46bd      	mov	sp, r7
 8001728:	b002      	add	sp, #8
 800172a:	bd80      	pop	{r7, pc}
 800172c:	20000204 	.word	0x20000204
 8001730:	fbffffff 	.word	0xfbffffff

08001734 <output_28>:
void output_28(uint8_t logic) { wbi(Out595.all,27,logic);}
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	0002      	movs	r2, r0
 800173c:	1dfb      	adds	r3, r7, #7
 800173e:	701a      	strb	r2, [r3, #0]
 8001740:	1dfb      	adds	r3, r7, #7
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d007      	beq.n	8001758 <output_28+0x24>
 8001748:	4b08      	ldr	r3, [pc, #32]	; (800176c <output_28+0x38>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2280      	movs	r2, #128	; 0x80
 800174e:	0512      	lsls	r2, r2, #20
 8001750:	431a      	orrs	r2, r3
 8001752:	4b06      	ldr	r3, [pc, #24]	; (800176c <output_28+0x38>)
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	e005      	b.n	8001764 <output_28+0x30>
 8001758:	4b04      	ldr	r3, [pc, #16]	; (800176c <output_28+0x38>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a04      	ldr	r2, [pc, #16]	; (8001770 <output_28+0x3c>)
 800175e:	401a      	ands	r2, r3
 8001760:	4b02      	ldr	r3, [pc, #8]	; (800176c <output_28+0x38>)
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	46c0      	nop			; (mov r8, r8)
 8001766:	46bd      	mov	sp, r7
 8001768:	b002      	add	sp, #8
 800176a:	bd80      	pop	{r7, pc}
 800176c:	20000204 	.word	0x20000204
 8001770:	f7ffffff 	.word	0xf7ffffff

08001774 <output_29>:
void output_29(uint8_t logic) { wbi(Out595.all,28,logic);}
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	0002      	movs	r2, r0
 800177c:	1dfb      	adds	r3, r7, #7
 800177e:	701a      	strb	r2, [r3, #0]
 8001780:	1dfb      	adds	r3, r7, #7
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d007      	beq.n	8001798 <output_29+0x24>
 8001788:	4b08      	ldr	r3, [pc, #32]	; (80017ac <output_29+0x38>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2280      	movs	r2, #128	; 0x80
 800178e:	0552      	lsls	r2, r2, #21
 8001790:	431a      	orrs	r2, r3
 8001792:	4b06      	ldr	r3, [pc, #24]	; (80017ac <output_29+0x38>)
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	e005      	b.n	80017a4 <output_29+0x30>
 8001798:	4b04      	ldr	r3, [pc, #16]	; (80017ac <output_29+0x38>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a04      	ldr	r2, [pc, #16]	; (80017b0 <output_29+0x3c>)
 800179e:	401a      	ands	r2, r3
 80017a0:	4b02      	ldr	r3, [pc, #8]	; (80017ac <output_29+0x38>)
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	46c0      	nop			; (mov r8, r8)
 80017a6:	46bd      	mov	sp, r7
 80017a8:	b002      	add	sp, #8
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	20000204 	.word	0x20000204
 80017b0:	efffffff 	.word	0xefffffff

080017b4 <output_30>:
void output_30(uint8_t logic) { wbi(Out595.all,29,logic);}
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	0002      	movs	r2, r0
 80017bc:	1dfb      	adds	r3, r7, #7
 80017be:	701a      	strb	r2, [r3, #0]
 80017c0:	1dfb      	adds	r3, r7, #7
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d007      	beq.n	80017d8 <output_30+0x24>
 80017c8:	4b08      	ldr	r3, [pc, #32]	; (80017ec <output_30+0x38>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2280      	movs	r2, #128	; 0x80
 80017ce:	0592      	lsls	r2, r2, #22
 80017d0:	431a      	orrs	r2, r3
 80017d2:	4b06      	ldr	r3, [pc, #24]	; (80017ec <output_30+0x38>)
 80017d4:	601a      	str	r2, [r3, #0]
 80017d6:	e005      	b.n	80017e4 <output_30+0x30>
 80017d8:	4b04      	ldr	r3, [pc, #16]	; (80017ec <output_30+0x38>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a04      	ldr	r2, [pc, #16]	; (80017f0 <output_30+0x3c>)
 80017de:	401a      	ands	r2, r3
 80017e0:	4b02      	ldr	r3, [pc, #8]	; (80017ec <output_30+0x38>)
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	46c0      	nop			; (mov r8, r8)
 80017e6:	46bd      	mov	sp, r7
 80017e8:	b002      	add	sp, #8
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	20000204 	.word	0x20000204
 80017f0:	dfffffff 	.word	0xdfffffff

080017f4 <output_31>:
void output_31(uint8_t logic) { wbi(Out595.all,30,logic);}
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	0002      	movs	r2, r0
 80017fc:	1dfb      	adds	r3, r7, #7
 80017fe:	701a      	strb	r2, [r3, #0]
 8001800:	1dfb      	adds	r3, r7, #7
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d007      	beq.n	8001818 <output_31+0x24>
 8001808:	4b08      	ldr	r3, [pc, #32]	; (800182c <output_31+0x38>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2280      	movs	r2, #128	; 0x80
 800180e:	05d2      	lsls	r2, r2, #23
 8001810:	431a      	orrs	r2, r3
 8001812:	4b06      	ldr	r3, [pc, #24]	; (800182c <output_31+0x38>)
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	e005      	b.n	8001824 <output_31+0x30>
 8001818:	4b04      	ldr	r3, [pc, #16]	; (800182c <output_31+0x38>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a04      	ldr	r2, [pc, #16]	; (8001830 <output_31+0x3c>)
 800181e:	401a      	ands	r2, r3
 8001820:	4b02      	ldr	r3, [pc, #8]	; (800182c <output_31+0x38>)
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	46c0      	nop			; (mov r8, r8)
 8001826:	46bd      	mov	sp, r7
 8001828:	b002      	add	sp, #8
 800182a:	bd80      	pop	{r7, pc}
 800182c:	20000204 	.word	0x20000204
 8001830:	bfffffff 	.word	0xbfffffff

08001834 <output_32>:
void output_32(uint8_t logic) { wbi(Out595.all,31,logic);}
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	0002      	movs	r2, r0
 800183c:	1dfb      	adds	r3, r7, #7
 800183e:	701a      	strb	r2, [r3, #0]
 8001840:	1dfb      	adds	r3, r7, #7
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d007      	beq.n	8001858 <output_32+0x24>
 8001848:	4b08      	ldr	r3, [pc, #32]	; (800186c <output_32+0x38>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2280      	movs	r2, #128	; 0x80
 800184e:	0612      	lsls	r2, r2, #24
 8001850:	431a      	orrs	r2, r3
 8001852:	4b06      	ldr	r3, [pc, #24]	; (800186c <output_32+0x38>)
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	e005      	b.n	8001864 <output_32+0x30>
 8001858:	4b04      	ldr	r3, [pc, #16]	; (800186c <output_32+0x38>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	085a      	lsrs	r2, r3, #1
 8001860:	4b02      	ldr	r3, [pc, #8]	; (800186c <output_32+0x38>)
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	46c0      	nop			; (mov r8, r8)
 8001866:	46bd      	mov	sp, r7
 8001868:	b002      	add	sp, #8
 800186a:	bd80      	pop	{r7, pc}
 800186c:	20000204 	.word	0x20000204

08001870 <BUZ_BaseCtrl>:

	memcpy(str_cmp0,displayLCD[0].str_row0, _STRING_BUFFER_SIZE);
	memcpy(str_cmp1,displayLCD[0].str_row1, _STRING_BUFFER_SIZE);
}

void BUZ_BaseCtrl(uint8_t ON_OFF){
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	0002      	movs	r2, r0
 8001878:	1dfb      	adds	r3, r7, #7
 800187a:	701a      	strb	r2, [r3, #0]
	if (ON_OFF) BUZ_ON;
 800187c:	1dfb      	adds	r3, r7, #7
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d006      	beq.n	8001892 <BUZ_BaseCtrl+0x22>
 8001884:	4b08      	ldr	r3, [pc, #32]	; (80018a8 <BUZ_BaseCtrl+0x38>)
 8001886:	2201      	movs	r2, #1
 8001888:	2102      	movs	r1, #2
 800188a:	0018      	movs	r0, r3
 800188c:	f001 f983 	bl	8002b96 <HAL_GPIO_WritePin>
	else BUZ_OFF;
}
 8001890:	e005      	b.n	800189e <BUZ_BaseCtrl+0x2e>
	else BUZ_OFF;
 8001892:	4b05      	ldr	r3, [pc, #20]	; (80018a8 <BUZ_BaseCtrl+0x38>)
 8001894:	2200      	movs	r2, #0
 8001896:	2102      	movs	r1, #2
 8001898:	0018      	movs	r0, r3
 800189a:	f001 f97c 	bl	8002b96 <HAL_GPIO_WritePin>
}
 800189e:	46c0      	nop			; (mov r8, r8)
 80018a0:	46bd      	mov	sp, r7
 80018a2:	b002      	add	sp, #8
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	46c0      	nop			; (mov r8, r8)
 80018a8:	50000800 	.word	0x50000800

080018ac <allButtons_init>:
void allButtons_init(){
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
	//init callback button0
	BUTTON_arr[0].pinStt = &BTN0_Stt;
 80018b0:	4b04      	ldr	r3, [pc, #16]	; (80018c4 <allButtons_init+0x18>)
 80018b2:	4a05      	ldr	r2, [pc, #20]	; (80018c8 <allButtons_init+0x1c>)
 80018b4:	60da      	str	r2, [r3, #12]
	BUTTON_arr[0].cb_function = &button0_callBackHandle;
 80018b6:	4b03      	ldr	r3, [pc, #12]	; (80018c4 <allButtons_init+0x18>)
 80018b8:	4a04      	ldr	r2, [pc, #16]	; (80018cc <allButtons_init+0x20>)
 80018ba:	609a      	str	r2, [r3, #8]
}
 80018bc:	46c0      	nop			; (mov r8, r8)
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	46c0      	nop			; (mov r8, r8)
 80018c4:	20000250 	.word	0x20000250
 80018c8:	08000b4d 	.word	0x08000b4d
 80018cc:	080018d1 	.word	0x080018d1

080018d0 <button0_callBackHandle>:

void button0_callBackHandle(button_functionCb_t typeFunction, button_typeArg_t agr){
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af02      	add	r7, sp, #8
 80018d6:	0002      	movs	r2, r0
 80018d8:	6039      	str	r1, [r7, #0]
 80018da:	1dfb      	adds	r3, r7, #7
 80018dc:	701a      	strb	r2, [r3, #0]

	switch(typeFunction){
 80018de:	1dfb      	adds	r3, r7, #7
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d010      	beq.n	8001908 <button0_callBackHandle+0x38>
 80018e6:	dc4e      	bgt.n	8001986 <button0_callBackHandle+0xb6>
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d002      	beq.n	80018f2 <button0_callBackHandle+0x22>
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d04c      	beq.n	800198a <button0_callBackHandle+0xba>
				TOOL.state = _STATE_TEST;
				ErrorsReport.all = 0;
			}
			break;

		default:break;
 80018f0:	e049      	b.n	8001986 <button0_callBackHandle+0xb6>
			if(agr.event==BUTTON_ONECLICK){
 80018f2:	003b      	movs	r3, r7
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	2b03      	cmp	r3, #3
 80018f8:	d149      	bne.n	800198e <button0_callBackHandle+0xbe>
				TOOL.state = _STATE_TEST;
 80018fa:	4b28      	ldr	r3, [pc, #160]	; (800199c <button0_callBackHandle+0xcc>)
 80018fc:	2201      	movs	r2, #1
 80018fe:	705a      	strb	r2, [r3, #1]
				ErrorsReport.all = 0;
 8001900:	4b27      	ldr	r3, [pc, #156]	; (80019a0 <button0_callBackHandle+0xd0>)
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]
			break;
 8001906:	e042      	b.n	800198e <button0_callBackHandle+0xbe>
			if(agr.holdInterval_ms == 3000){
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	4a26      	ldr	r2, [pc, #152]	; (80019a4 <button0_callBackHandle+0xd4>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d140      	bne.n	8001992 <button0_callBackHandle+0xc2>
				if(TOOL.mode == _MODE_AF3){
 8001910:	4b22      	ldr	r3, [pc, #136]	; (800199c <button0_callBackHandle+0xcc>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d113      	bne.n	8001940 <button0_callBackHandle+0x70>
					TOOL.mode  = _MODE_SWT;
 8001918:	4b20      	ldr	r3, [pc, #128]	; (800199c <button0_callBackHandle+0xcc>)
 800191a:	2204      	movs	r2, #4
 800191c:	701a      	strb	r2, [r3, #0]
					memcpy(BusRulesToCheckArr, SwtPrive_RulesCommon, sizeof(SwtPrive_RulesCommon));
 800191e:	4a22      	ldr	r2, [pc, #136]	; (80019a8 <button0_callBackHandle+0xd8>)
 8001920:	4b22      	ldr	r3, [pc, #136]	; (80019ac <button0_callBackHandle+0xdc>)
 8001922:	0010      	movs	r0, r2
 8001924:	0019      	movs	r1, r3
 8001926:	2384      	movs	r3, #132	; 0x84
 8001928:	001a      	movs	r2, r3
 800192a:	f002 ff13 	bl	8004754 <memcpy>
					OUTPUT_set_blink(&_BUZZER,2,CLOCK_SECOND/4,CLOCK_SECOND/4,0);
 800192e:	4820      	ldr	r0, [pc, #128]	; (80019b0 <button0_callBackHandle+0xe0>)
 8001930:	2300      	movs	r3, #0
 8001932:	9300      	str	r3, [sp, #0]
 8001934:	2319      	movs	r3, #25
 8001936:	2219      	movs	r2, #25
 8001938:	2102      	movs	r1, #2
 800193a:	f7fe ff21 	bl	8000780 <OUTPUT_set_blink>
 800193e:	e016      	b.n	800196e <button0_callBackHandle+0x9e>
				else if(TOOL.mode == _MODE_SWT){
 8001940:	4b16      	ldr	r3, [pc, #88]	; (800199c <button0_callBackHandle+0xcc>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	2b04      	cmp	r3, #4
 8001946:	d112      	bne.n	800196e <button0_callBackHandle+0x9e>
					TOOL.mode  = _MODE_AF3;
 8001948:	4b14      	ldr	r3, [pc, #80]	; (800199c <button0_callBackHandle+0xcc>)
 800194a:	2200      	movs	r2, #0
 800194c:	701a      	strb	r2, [r3, #0]
					memcpy(BusRulesToCheckArr, AF3_RulesCommon, sizeof(AF3_RulesCommon));
 800194e:	4a16      	ldr	r2, [pc, #88]	; (80019a8 <button0_callBackHandle+0xd8>)
 8001950:	4b18      	ldr	r3, [pc, #96]	; (80019b4 <button0_callBackHandle+0xe4>)
 8001952:	0010      	movs	r0, r2
 8001954:	0019      	movs	r1, r3
 8001956:	2384      	movs	r3, #132	; 0x84
 8001958:	001a      	movs	r2, r3
 800195a:	f002 fefb 	bl	8004754 <memcpy>
					OUTPUT_set_blink(&_BUZZER,1,CLOCK_SECOND/4,CLOCK_SECOND/4,0);
 800195e:	4814      	ldr	r0, [pc, #80]	; (80019b0 <button0_callBackHandle+0xe0>)
 8001960:	2300      	movs	r3, #0
 8001962:	9300      	str	r3, [sp, #0]
 8001964:	2319      	movs	r3, #25
 8001966:	2219      	movs	r2, #25
 8001968:	2101      	movs	r1, #1
 800196a:	f7fe ff09 	bl	8000780 <OUTPUT_set_blink>
				delay_ms(1000);
 800196e:	23fa      	movs	r3, #250	; 0xfa
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	0018      	movs	r0, r3
 8001974:	f7fe fe30 	bl	80005d8 <delay_ms>
				TOOL.state = _STATE_TEST;
 8001978:	4b08      	ldr	r3, [pc, #32]	; (800199c <button0_callBackHandle+0xcc>)
 800197a:	2201      	movs	r2, #1
 800197c:	705a      	strb	r2, [r3, #1]
				ErrorsReport.all = 0;
 800197e:	4b08      	ldr	r3, [pc, #32]	; (80019a0 <button0_callBackHandle+0xd0>)
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
			break;
 8001984:	e005      	b.n	8001992 <button0_callBackHandle+0xc2>
		default:break;
 8001986:	46c0      	nop			; (mov r8, r8)
 8001988:	e004      	b.n	8001994 <button0_callBackHandle+0xc4>
			break;
 800198a:	46c0      	nop			; (mov r8, r8)
 800198c:	e002      	b.n	8001994 <button0_callBackHandle+0xc4>
			break;
 800198e:	46c0      	nop			; (mov r8, r8)
 8001990:	e000      	b.n	8001994 <button0_callBackHandle+0xc4>
			break;
 8001992:	46c0      	nop			; (mov r8, r8)
	}

}
 8001994:	46c0      	nop			; (mov r8, r8)
 8001996:	46bd      	mov	sp, r7
 8001998:	b002      	add	sp, #8
 800199a:	bd80      	pop	{r7, pc}
 800199c:	20000200 	.word	0x20000200
 80019a0:	20000208 	.word	0x20000208
 80019a4:	00000bb8 	.word	0x00000bb8
 80019a8:	2000017c 	.word	0x2000017c
 80019ac:	08004848 	.word	0x08004848
 80019b0:	2000021c 	.word	0x2000021c
 80019b4:	080047c4 	.word	0x080047c4

080019b8 <allButtonsHandle>:

void allButtonsHandle(){
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
	for(uint8_t i=0; i < APP_BUTTON_NUM; i++){
 80019be:	1dfb      	adds	r3, r7, #7
 80019c0:	2200      	movs	r2, #0
 80019c2:	701a      	strb	r2, [r3, #0]
 80019c4:	e00f      	b.n	80019e6 <allButtonsHandle+0x2e>
		btn_progress_loop(&BUTTON_arr[i]);
 80019c6:	1dfb      	adds	r3, r7, #7
 80019c8:	781a      	ldrb	r2, [r3, #0]
 80019ca:	0013      	movs	r3, r2
 80019cc:	00db      	lsls	r3, r3, #3
 80019ce:	189b      	adds	r3, r3, r2
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	4a09      	ldr	r2, [pc, #36]	; (80019f8 <allButtonsHandle+0x40>)
 80019d4:	189b      	adds	r3, r3, r2
 80019d6:	0018      	movs	r0, r3
 80019d8:	f7fe fc1e 	bl	8000218 <btn_progress_loop>
	for(uint8_t i=0; i < APP_BUTTON_NUM; i++){
 80019dc:	1dfb      	adds	r3, r7, #7
 80019de:	781a      	ldrb	r2, [r3, #0]
 80019e0:	1dfb      	adds	r3, r7, #7
 80019e2:	3201      	adds	r2, #1
 80019e4:	701a      	strb	r2, [r3, #0]
 80019e6:	1dfb      	adds	r3, r7, #7
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d0eb      	beq.n	80019c6 <allButtonsHandle+0xe>
	}
}
 80019ee:	46c0      	nop			; (mov r8, r8)
 80019f0:	46c0      	nop			; (mov r8, r8)
 80019f2:	46bd      	mov	sp, r7
 80019f4:	b002      	add	sp, #8
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	20000250 	.word	0x20000250

080019fc <getAllPinStt>:

uint64_t getAllPinStt(){
 80019fc:	b590      	push	{r4, r7, lr}
 80019fe:	b085      	sub	sp, #20
 8001a00:	af00      	add	r7, sp, #0
	uint64_t result=0xFFFFFFFFFFFFFFFF;
 8001a02:	2201      	movs	r2, #1
 8001a04:	4252      	negs	r2, r2
 8001a06:	17d3      	asrs	r3, r2, #31
 8001a08:	60ba      	str	r2, [r7, #8]
 8001a0a:	60fb      	str	r3, [r7, #12]
	for(uint8_t i=0; i<_NUM_IN_WIRE; i++){
 8001a0c:	1dfb      	adds	r3, r7, #7
 8001a0e:	2200      	movs	r2, #0
 8001a10:	701a      	strb	r2, [r3, #0]
 8001a12:	e017      	b.n	8001a44 <getAllPinStt+0x48>
		result = DbWord_wbi(result,i,inputArray[i]());
 8001a14:	1dfb      	adds	r3, r7, #7
 8001a16:	781a      	ldrb	r2, [r3, #0]
 8001a18:	4b10      	ldr	r3, [pc, #64]	; (8001a5c <getAllPinStt+0x60>)
 8001a1a:	0092      	lsls	r2, r2, #2
 8001a1c:	58d3      	ldr	r3, [r2, r3]
 8001a1e:	4798      	blx	r3
 8001a20:	0003      	movs	r3, r0
 8001a22:	001c      	movs	r4, r3
 8001a24:	1dfb      	adds	r3, r7, #7
 8001a26:	781a      	ldrb	r2, [r3, #0]
 8001a28:	68b8      	ldr	r0, [r7, #8]
 8001a2a:	68f9      	ldr	r1, [r7, #12]
 8001a2c:	0023      	movs	r3, r4
 8001a2e:	f7fe fd81 	bl	8000534 <DbWord_wbi>
 8001a32:	0002      	movs	r2, r0
 8001a34:	000b      	movs	r3, r1
 8001a36:	60ba      	str	r2, [r7, #8]
 8001a38:	60fb      	str	r3, [r7, #12]
	for(uint8_t i=0; i<_NUM_IN_WIRE; i++){
 8001a3a:	1dfb      	adds	r3, r7, #7
 8001a3c:	781a      	ldrb	r2, [r3, #0]
 8001a3e:	1dfb      	adds	r3, r7, #7
 8001a40:	3201      	adds	r2, #1
 8001a42:	701a      	strb	r2, [r3, #0]
 8001a44:	1dfb      	adds	r3, r7, #7
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b2d      	cmp	r3, #45	; 0x2d
 8001a4a:	d9e3      	bls.n	8001a14 <getAllPinStt+0x18>
	}

	return result;
 8001a4c:	68ba      	ldr	r2, [r7, #8]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
}
 8001a50:	0010      	movs	r0, r2
 8001a52:	0019      	movs	r1, r3
 8001a54:	46bd      	mov	sp, r7
 8001a56:	b005      	add	sp, #20
 8001a58:	bd90      	pop	{r4, r7, pc}
 8001a5a:	46c0      	nop			; (mov r8, r8)
 8001a5c:	20000000 	.word	0x20000000

08001a60 <test_bus_init>:

void test_bus_init(){
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af02      	add	r7, sp, #8
	//init
//	HAL_I2C_Init(&hi2c1);
//	CLCD_I2C_Init(&LCD1, &hi2c1, 0x4e, 20, 4);
// 	timer_set(&_timer_ShowLCD, CLOCK_SECOND/4);
	allButtons_init();
 8001a66:	f7ff ff21 	bl	80018ac <allButtons_init>

	timer_set(&timer_debug, 2*CLOCK_SECOND);
 8001a6a:	4b16      	ldr	r3, [pc, #88]	; (8001ac4 <test_bus_init+0x64>)
 8001a6c:	21c8      	movs	r1, #200	; 0xc8
 8001a6e:	0018      	movs	r0, r3
 8001a70:	f000 f9c4 	bl	8001dfc <timer_set>

	Out595.all = 0xFFFFFFFF;
 8001a74:	4b14      	ldr	r3, [pc, #80]	; (8001ac8 <test_bus_init+0x68>)
 8001a76:	2201      	movs	r2, #1
 8001a78:	4252      	negs	r2, r2
 8001a7a:	601a      	str	r2, [r3, #0]
	shift_595_array(Out595.SDA_out);
 8001a7c:	4b12      	ldr	r3, [pc, #72]	; (8001ac8 <test_bus_init+0x68>)
 8001a7e:	0018      	movs	r0, r3
 8001a80:	f7fe fe06 	bl	8000690 <shift_595_array>
	OUTPUT_config_new_control(&_BUZZER, &BUZ_BaseCtrl);
 8001a84:	4a11      	ldr	r2, [pc, #68]	; (8001acc <test_bus_init+0x6c>)
 8001a86:	4b12      	ldr	r3, [pc, #72]	; (8001ad0 <test_bus_init+0x70>)
 8001a88:	0011      	movs	r1, r2
 8001a8a:	0018      	movs	r0, r3
 8001a8c:	f7ff f826 	bl	8000adc <OUTPUT_config_new_control>

	TOOL.mode = _MODE_AF3;
 8001a90:	4b10      	ldr	r3, [pc, #64]	; (8001ad4 <test_bus_init+0x74>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	701a      	strb	r2, [r3, #0]
	memcpy(BusRulesToCheckArr, AF3_RulesCommon, sizeof(AF3_RulesCommon));
 8001a96:	4a10      	ldr	r2, [pc, #64]	; (8001ad8 <test_bus_init+0x78>)
 8001a98:	4b10      	ldr	r3, [pc, #64]	; (8001adc <test_bus_init+0x7c>)
 8001a9a:	0010      	movs	r0, r2
 8001a9c:	0019      	movs	r1, r3
 8001a9e:	2384      	movs	r3, #132	; 0x84
 8001aa0:	001a      	movs	r2, r3
 8001aa2:	f002 fe57 	bl	8004754 <memcpy>
	TOOL.state = _STATE_NONE;
 8001aa6:	4b0b      	ldr	r3, [pc, #44]	; (8001ad4 <test_bus_init+0x74>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	705a      	strb	r2, [r3, #1]

	OUTPUT_set_blink(&_BUZZER,1,CLOCK_SECOND/4,CLOCK_SECOND/4,0);
 8001aac:	4808      	ldr	r0, [pc, #32]	; (8001ad0 <test_bus_init+0x70>)
 8001aae:	2300      	movs	r3, #0
 8001ab0:	9300      	str	r3, [sp, #0]
 8001ab2:	2319      	movs	r3, #25
 8001ab4:	2219      	movs	r2, #25
 8001ab6:	2101      	movs	r1, #1
 8001ab8:	f7fe fe62 	bl	8000780 <OUTPUT_set_blink>
//		sprintf(displayLCD[0].str_row0,"Day dien AF3");
//	else if(TOOL.mode == _MODE_SWT)
//		sprintf(displayLCD[0].str_row0,"Day Switch");
//
//	sprintf(displayLCD[0].str_row1,"Nhan nut de test");
}
 8001abc:	46c0      	nop			; (mov r8, r8)
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	46c0      	nop			; (mov r8, r8)
 8001ac4:	2000020c 	.word	0x2000020c
 8001ac8:	20000204 	.word	0x20000204
 8001acc:	08001871 	.word	0x08001871
 8001ad0:	2000021c 	.word	0x2000021c
 8001ad4:	20000200 	.word	0x20000200
 8001ad8:	2000017c 	.word	0x2000017c
 8001adc:	080047c4 	.word	0x080047c4

08001ae0 <test_bus_loop>:

uint64_t inputManager;
void test_bus_loop(){
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0

	//update_LCDScreen();
	inputManager = getAllPinStt();
 8001ae4:	f7ff ff8a 	bl	80019fc <getAllPinStt>
 8001ae8:	0002      	movs	r2, r0
 8001aea:	000b      	movs	r3, r1
 8001aec:	4904      	ldr	r1, [pc, #16]	; (8001b00 <test_bus_loop+0x20>)
 8001aee:	600a      	str	r2, [r1, #0]
 8001af0:	604b      	str	r3, [r1, #4]
	allButtonsHandle();
 8001af2:	f7ff ff61 	bl	80019b8 <allButtonsHandle>
	test_bus_AF3All();
 8001af6:	f000 f8f3 	bl	8001ce0 <test_bus_AF3All>
}
 8001afa:	46c0      	nop			; (mov r8, r8)
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	20000278 	.word	0x20000278

08001b04 <test_EachLine>:

//uint64_t allInputStt , allInputStt_Cmp , allInputStt_default;
void test_EachLine(uint8_t pAF3RuleArr[_NUM_OUT_WIRE][_NUM_IN_WIRE_CHECK], ManagerLineOut_t *pResult){
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b08c      	sub	sp, #48	; 0x30
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]

	uint8_t	bit_dk1, bit_dk2, bit_dk3;
	uint64_t allInputStt , allInputStt_Cmp , allInputStt_default;

	//reset lỗi = 0
	pResult->all = 0;
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
	allInputStt = 0;
 8001b14:	2200      	movs	r2, #0
 8001b16:	2300      	movs	r3, #0
 8001b18:	623a      	str	r2, [r7, #32]
 8001b1a:	627b      	str	r3, [r7, #36]	; 0x24
	allInputStt_Cmp = 0;
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61ba      	str	r2, [r7, #24]
 8001b22:	61fb      	str	r3, [r7, #28]

	//reset tat ca output ve muc cao va doc gia tri bien Input
	Out595.all = 0xFFFFFFFF;
 8001b24:	4b6c      	ldr	r3, [pc, #432]	; (8001cd8 <test_EachLine+0x1d4>)
 8001b26:	2201      	movs	r2, #1
 8001b28:	4252      	negs	r2, r2
 8001b2a:	601a      	str	r2, [r3, #0]
	shift_595_Word(Out595.all);
 8001b2c:	4b6a      	ldr	r3, [pc, #424]	; (8001cd8 <test_EachLine+0x1d4>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	0018      	movs	r0, r3
 8001b32:	f7fe fd63 	bl	80005fc <shift_595_Word>
	delay_ms(10);
 8001b36:	200a      	movs	r0, #10
 8001b38:	f7fe fd4e 	bl	80005d8 <delay_ms>
	allInputStt_default = getAllPinStt();
 8001b3c:	f7ff ff5e 	bl	80019fc <getAllPinStt>
 8001b40:	0002      	movs	r2, r0
 8001b42:	000b      	movs	r3, r1
 8001b44:	613a      	str	r2, [r7, #16]
 8001b46:	617b      	str	r3, [r7, #20]

	for(uint8_t i=1; i<_NUM_OUT_WIRE; i++){
 8001b48:	232f      	movs	r3, #47	; 0x2f
 8001b4a:	18fb      	adds	r3, r7, r3
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	701a      	strb	r2, [r3, #0]
 8001b50:	e0b6      	b.n	8001cc0 <test_EachLine+0x1bc>
		//reset lai tat ca output muc cao sai check xong 1 wire
		Out595.all = 0xFFFFFFFF;
 8001b52:	4b61      	ldr	r3, [pc, #388]	; (8001cd8 <test_EachLine+0x1d4>)
 8001b54:	2201      	movs	r2, #1
 8001b56:	4252      	negs	r2, r2
 8001b58:	601a      	str	r2, [r3, #0]
		allInputStt_Cmp = allInputStt_default;
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	61ba      	str	r2, [r7, #24]
 8001b60:	61fb      	str	r3, [r7, #28]

		//Lấy điều kiện so sánh của wire này
		bit_dk1 = pAF3RuleArr[i][1];
 8001b62:	212f      	movs	r1, #47	; 0x2f
 8001b64:	187b      	adds	r3, r7, r1
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	18d2      	adds	r2, r2, r3
 8001b6e:	200f      	movs	r0, #15
 8001b70:	183b      	adds	r3, r7, r0
 8001b72:	7852      	ldrb	r2, [r2, #1]
 8001b74:	701a      	strb	r2, [r3, #0]
		bit_dk2 = pAF3RuleArr[i][2];
 8001b76:	187b      	adds	r3, r7, r1
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	18d2      	adds	r2, r2, r3
 8001b80:	230e      	movs	r3, #14
 8001b82:	18fb      	adds	r3, r7, r3
 8001b84:	7892      	ldrb	r2, [r2, #2]
 8001b86:	701a      	strb	r2, [r3, #0]
		bit_dk3 = pAF3RuleArr[i][3];
 8001b88:	187b      	adds	r3, r7, r1
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	18d2      	adds	r2, r2, r3
 8001b92:	230d      	movs	r3, #13
 8001b94:	18fb      	adds	r3, r7, r3
 8001b96:	78d2      	ldrb	r2, [r2, #3]
 8001b98:	701a      	strb	r2, [r3, #0]
		//Nếu dk==0 thi bo qua khong check điều kiện đó
		allInputStt_Cmp = (bit_dk1) ? DbWord_cbi(allInputStt_Cmp, bit_dk1) : DbWord_sbi(allInputStt_Cmp, bit_dk1);
 8001b9a:	183b      	adds	r3, r7, r0
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d009      	beq.n	8001bb6 <test_EachLine+0xb2>
 8001ba2:	183b      	adds	r3, r7, r0
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	69b8      	ldr	r0, [r7, #24]
 8001ba8:	69f9      	ldr	r1, [r7, #28]
 8001baa:	001a      	movs	r2, r3
 8001bac:	f7fe fc90 	bl	80004d0 <DbWord_cbi>
 8001bb0:	0002      	movs	r2, r0
 8001bb2:	000b      	movs	r3, r1
 8001bb4:	e009      	b.n	8001bca <test_EachLine+0xc6>
 8001bb6:	230f      	movs	r3, #15
 8001bb8:	18fb      	adds	r3, r7, r3
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	69b8      	ldr	r0, [r7, #24]
 8001bbe:	69f9      	ldr	r1, [r7, #28]
 8001bc0:	001a      	movs	r2, r3
 8001bc2:	f7fe fc55 	bl	8000470 <DbWord_sbi>
 8001bc6:	0002      	movs	r2, r0
 8001bc8:	000b      	movs	r3, r1
 8001bca:	61ba      	str	r2, [r7, #24]
 8001bcc:	61fb      	str	r3, [r7, #28]
		allInputStt_Cmp = (bit_dk2) ? DbWord_cbi(allInputStt_Cmp, bit_dk2) : DbWord_sbi(allInputStt_Cmp, bit_dk2);
 8001bce:	220e      	movs	r2, #14
 8001bd0:	18bb      	adds	r3, r7, r2
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d009      	beq.n	8001bec <test_EachLine+0xe8>
 8001bd8:	18bb      	adds	r3, r7, r2
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	69b8      	ldr	r0, [r7, #24]
 8001bde:	69f9      	ldr	r1, [r7, #28]
 8001be0:	001a      	movs	r2, r3
 8001be2:	f7fe fc75 	bl	80004d0 <DbWord_cbi>
 8001be6:	0002      	movs	r2, r0
 8001be8:	000b      	movs	r3, r1
 8001bea:	e009      	b.n	8001c00 <test_EachLine+0xfc>
 8001bec:	230e      	movs	r3, #14
 8001bee:	18fb      	adds	r3, r7, r3
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	69b8      	ldr	r0, [r7, #24]
 8001bf4:	69f9      	ldr	r1, [r7, #28]
 8001bf6:	001a      	movs	r2, r3
 8001bf8:	f7fe fc3a 	bl	8000470 <DbWord_sbi>
 8001bfc:	0002      	movs	r2, r0
 8001bfe:	000b      	movs	r3, r1
 8001c00:	61ba      	str	r2, [r7, #24]
 8001c02:	61fb      	str	r3, [r7, #28]
		allInputStt_Cmp = (bit_dk3) ? DbWord_cbi(allInputStt_Cmp, bit_dk3) : DbWord_sbi(allInputStt_Cmp, bit_dk3);
 8001c04:	220d      	movs	r2, #13
 8001c06:	18bb      	adds	r3, r7, r2
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d009      	beq.n	8001c22 <test_EachLine+0x11e>
 8001c0e:	18bb      	adds	r3, r7, r2
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	69b8      	ldr	r0, [r7, #24]
 8001c14:	69f9      	ldr	r1, [r7, #28]
 8001c16:	001a      	movs	r2, r3
 8001c18:	f7fe fc5a 	bl	80004d0 <DbWord_cbi>
 8001c1c:	0002      	movs	r2, r0
 8001c1e:	000b      	movs	r3, r1
 8001c20:	e009      	b.n	8001c36 <test_EachLine+0x132>
 8001c22:	230d      	movs	r3, #13
 8001c24:	18fb      	adds	r3, r7, r3
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	69b8      	ldr	r0, [r7, #24]
 8001c2a:	69f9      	ldr	r1, [r7, #28]
 8001c2c:	001a      	movs	r2, r3
 8001c2e:	f7fe fc1f 	bl	8000470 <DbWord_sbi>
 8001c32:	0002      	movs	r2, r0
 8001c34:	000b      	movs	r3, r1
 8001c36:	61ba      	str	r2, [r7, #24]
 8001c38:	61fb      	str	r3, [r7, #28]

		//set mức thấp từng chân
		outputArray[pAF3RuleArr[i][0]](_LOW);
 8001c3a:	232f      	movs	r3, #47	; 0x2f
 8001c3c:	18fb      	adds	r3, r7, r3
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	18d3      	adds	r3, r2, r3
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	001a      	movs	r2, r3
 8001c4a:	4b24      	ldr	r3, [pc, #144]	; (8001cdc <test_EachLine+0x1d8>)
 8001c4c:	0092      	lsls	r2, r2, #2
 8001c4e:	58d3      	ldr	r3, [r2, r3]
 8001c50:	2000      	movs	r0, #0
 8001c52:	4798      	blx	r3
		shift_595_Word(Out595.all);
 8001c54:	4b20      	ldr	r3, [pc, #128]	; (8001cd8 <test_EachLine+0x1d4>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	0018      	movs	r0, r3
 8001c5a:	f7fe fccf 	bl	80005fc <shift_595_Word>
		delay_ms(10);
 8001c5e:	200a      	movs	r0, #10
 8001c60:	f7fe fcba 	bl	80005d8 <delay_ms>
		//Đọc lại giá trị Input mới
		allInputStt = getAllPinStt();
 8001c64:	f7ff feca 	bl	80019fc <getAllPinStt>
 8001c68:	0002      	movs	r2, r0
 8001c6a:	000b      	movs	r3, r1
 8001c6c:	623a      	str	r2, [r7, #32]
 8001c6e:	627b      	str	r3, [r7, #36]	; 0x24

		if(allInputStt != allInputStt_Cmp)
 8001c70:	6a3a      	ldr	r2, [r7, #32]
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d103      	bne.n	8001c80 <test_EachLine+0x17c>
 8001c78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d00c      	beq.n	8001c9a <test_EachLine+0x196>
			sbi((pResult->all),i-1);//1 la lỗi
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	222f      	movs	r2, #47	; 0x2f
 8001c86:	18ba      	adds	r2, r7, r2
 8001c88:	7812      	ldrb	r2, [r2, #0]
 8001c8a:	3a01      	subs	r2, #1
 8001c8c:	2101      	movs	r1, #1
 8001c8e:	4091      	lsls	r1, r2
 8001c90:	000a      	movs	r2, r1
 8001c92:	431a      	orrs	r2, r3
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	e00c      	b.n	8001cb4 <test_EachLine+0x1b0>
		else
			cbi((pResult->all),i-1);//0 la OK
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	222f      	movs	r2, #47	; 0x2f
 8001ca0:	18ba      	adds	r2, r7, r2
 8001ca2:	7812      	ldrb	r2, [r2, #0]
 8001ca4:	3a01      	subs	r2, #1
 8001ca6:	2101      	movs	r1, #1
 8001ca8:	4091      	lsls	r1, r2
 8001caa:	000a      	movs	r2, r1
 8001cac:	43d2      	mvns	r2, r2
 8001cae:	401a      	ands	r2, r3
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	601a      	str	r2, [r3, #0]
	for(uint8_t i=1; i<_NUM_OUT_WIRE; i++){
 8001cb4:	212f      	movs	r1, #47	; 0x2f
 8001cb6:	187b      	adds	r3, r7, r1
 8001cb8:	781a      	ldrb	r2, [r3, #0]
 8001cba:	187b      	adds	r3, r7, r1
 8001cbc:	3201      	adds	r2, #1
 8001cbe:	701a      	strb	r2, [r3, #0]
 8001cc0:	232f      	movs	r3, #47	; 0x2f
 8001cc2:	18fb      	adds	r3, r7, r3
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	2b20      	cmp	r3, #32
 8001cc8:	d800      	bhi.n	8001ccc <test_EachLine+0x1c8>
 8001cca:	e742      	b.n	8001b52 <test_EachLine+0x4e>
//			i = 20-1;
//			repeatSafety = 1;
//		}
	}

}
 8001ccc:	46c0      	nop			; (mov r8, r8)
 8001cce:	46c0      	nop			; (mov r8, r8)
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	b00c      	add	sp, #48	; 0x30
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	46c0      	nop			; (mov r8, r8)
 8001cd8:	20000204 	.word	0x20000204
 8001cdc:	200000b8 	.word	0x200000b8

08001ce0 <test_bus_AF3All>:

void test_bus_AF3All(){
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af02      	add	r7, sp, #8
	static TIMER_vitual_t timer_togle_led;

	//if(TOOL.mode != _MODE_AF3) return;

	switch(TOOL.state){
 8001ce6:	4b34      	ldr	r3, [pc, #208]	; (8001db8 <test_bus_AF3All+0xd8>)
 8001ce8:	785b      	ldrb	r3, [r3, #1]
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d016      	beq.n	8001d1c <test_bus_AF3All+0x3c>
 8001cee:	dc5f      	bgt.n	8001db0 <test_bus_AF3All+0xd0>
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d05a      	beq.n	8001daa <test_bus_AF3All+0xca>
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d15b      	bne.n	8001db0 <test_bus_AF3All+0xd0>
		case _STATE_NONE: return;

		case _STATE_TEST:
			test_EachLine(BusRulesToCheckArr, &ErrorsReport);
 8001cf8:	4a30      	ldr	r2, [pc, #192]	; (8001dbc <test_bus_AF3All+0xdc>)
 8001cfa:	4b31      	ldr	r3, [pc, #196]	; (8001dc0 <test_bus_AF3All+0xe0>)
 8001cfc:	0011      	movs	r1, r2
 8001cfe:	0018      	movs	r0, r3
 8001d00:	f7ff ff00 	bl	8001b04 <test_EachLine>
			delay_ms(20);
 8001d04:	2014      	movs	r0, #20
 8001d06:	f7fe fc67 	bl	80005d8 <delay_ms>
			TOOL.state = _STATE_FINISHED;
 8001d0a:	4b2b      	ldr	r3, [pc, #172]	; (8001db8 <test_bus_AF3All+0xd8>)
 8001d0c:	2202      	movs	r2, #2
 8001d0e:	705a      	strb	r2, [r3, #1]
			timer_set(&timer_togle_led, CLOCK_SECOND/2);
 8001d10:	4b2c      	ldr	r3, [pc, #176]	; (8001dc4 <test_bus_AF3All+0xe4>)
 8001d12:	2132      	movs	r1, #50	; 0x32
 8001d14:	0018      	movs	r0, r3
 8001d16:	f000 f871 	bl	8001dfc <timer_set>
			break;
 8001d1a:	e049      	b.n	8001db0 <test_bus_AF3All+0xd0>

		case _STATE_FINISHED:
			if(ErrorsReport.all==0) {
 8001d1c:	4b27      	ldr	r3, [pc, #156]	; (8001dbc <test_bus_AF3All+0xdc>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d112      	bne.n	8001d4a <test_bus_AF3All+0x6a>
				Out595.all = 0;
 8001d24:	4b28      	ldr	r3, [pc, #160]	; (8001dc8 <test_bus_AF3All+0xe8>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	601a      	str	r2, [r3, #0]
				timer_stop(&timer_togle_led);
 8001d2a:	4b26      	ldr	r3, [pc, #152]	; (8001dc4 <test_bus_AF3All+0xe4>)
 8001d2c:	0018      	movs	r0, r3
 8001d2e:	f000 f8c1 	bl	8001eb4 <timer_stop>
				//sprintf(displayLCD[0].str_row1,"Day OK");
				TOOL.state = _STATE_NONE;
 8001d32:	4b21      	ldr	r3, [pc, #132]	; (8001db8 <test_bus_AF3All+0xd8>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	705a      	strb	r2, [r3, #1]
				OUTPUT_set_blink(&_BUZZER,1,CLOCK_SECOND/4,CLOCK_SECOND/10,0);
 8001d38:	4824      	ldr	r0, [pc, #144]	; (8001dcc <test_bus_AF3All+0xec>)
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	9300      	str	r3, [sp, #0]
 8001d3e:	230a      	movs	r3, #10
 8001d40:	2219      	movs	r2, #25
 8001d42:	2101      	movs	r1, #1
 8001d44:	f7fe fd1c 	bl	8000780 <OUTPUT_set_blink>
				return;
 8001d48:	e032      	b.n	8001db0 <test_bus_AF3All+0xd0>
			}
			else {
				if(!timer_expired(&timer_togle_led))return;
 8001d4a:	4b1e      	ldr	r3, [pc, #120]	; (8001dc4 <test_bus_AF3All+0xe4>)
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	f000 f891 	bl	8001e74 <timer_expired>
 8001d52:	1e03      	subs	r3, r0, #0
 8001d54:	d02b      	beq.n	8001dae <test_bus_AF3All+0xce>
				timer_restart(&timer_togle_led);
 8001d56:	4b1b      	ldr	r3, [pc, #108]	; (8001dc4 <test_bus_AF3All+0xe4>)
 8001d58:	0018      	movs	r0, r3
 8001d5a:	f000 f879 	bl	8001e50 <timer_restart>
				//sprintf(displayLCD[0].str_row1,"Day Loi");

				for(uint8_t i=0; i<32; i++){
 8001d5e:	1dfb      	adds	r3, r7, #7
 8001d60:	2200      	movs	r2, #0
 8001d62:	701a      	strb	r2, [r3, #0]
 8001d64:	e017      	b.n	8001d96 <test_bus_AF3All+0xb6>
					//Nếu Line nào có lỗi thì nhấp nháy Line đó
					if(rbi(ErrorsReport.all,i)) tbi(Out595.all,i);
 8001d66:	4b15      	ldr	r3, [pc, #84]	; (8001dbc <test_bus_AF3All+0xdc>)
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	1dfb      	adds	r3, r7, #7
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	40da      	lsrs	r2, r3
 8001d70:	0013      	movs	r3, r2
 8001d72:	2201      	movs	r2, #1
 8001d74:	4013      	ands	r3, r2
 8001d76:	d009      	beq.n	8001d8c <test_bus_AF3All+0xac>
 8001d78:	4b13      	ldr	r3, [pc, #76]	; (8001dc8 <test_bus_AF3All+0xe8>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	1dfa      	adds	r2, r7, #7
 8001d7e:	7812      	ldrb	r2, [r2, #0]
 8001d80:	2101      	movs	r1, #1
 8001d82:	4091      	lsls	r1, r2
 8001d84:	000a      	movs	r2, r1
 8001d86:	405a      	eors	r2, r3
 8001d88:	4b0f      	ldr	r3, [pc, #60]	; (8001dc8 <test_bus_AF3All+0xe8>)
 8001d8a:	601a      	str	r2, [r3, #0]
				for(uint8_t i=0; i<32; i++){
 8001d8c:	1dfb      	adds	r3, r7, #7
 8001d8e:	781a      	ldrb	r2, [r3, #0]
 8001d90:	1dfb      	adds	r3, r7, #7
 8001d92:	3201      	adds	r2, #1
 8001d94:	701a      	strb	r2, [r3, #0]
 8001d96:	1dfb      	adds	r3, r7, #7
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	2b1f      	cmp	r3, #31
 8001d9c:	d9e3      	bls.n	8001d66 <test_bus_AF3All+0x86>
				}
				shift_595_Word(Out595.all);
 8001d9e:	4b0a      	ldr	r3, [pc, #40]	; (8001dc8 <test_bus_AF3All+0xe8>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	0018      	movs	r0, r3
 8001da4:	f7fe fc2a 	bl	80005fc <shift_595_Word>
			}
			break;
 8001da8:	e002      	b.n	8001db0 <test_bus_AF3All+0xd0>
		case _STATE_NONE: return;
 8001daa:	46c0      	nop			; (mov r8, r8)
 8001dac:	e000      	b.n	8001db0 <test_bus_AF3All+0xd0>
				if(!timer_expired(&timer_togle_led))return;
 8001dae:	46c0      	nop			; (mov r8, r8)
	}

}
 8001db0:	46bd      	mov	sp, r7
 8001db2:	b002      	add	sp, #8
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	46c0      	nop			; (mov r8, r8)
 8001db8:	20000200 	.word	0x20000200
 8001dbc:	20000208 	.word	0x20000208
 8001dc0:	2000017c 	.word	0x2000017c
 8001dc4:	20000280 	.word	0x20000280
 8001dc8:	20000204 	.word	0x20000204
 8001dcc:	2000021c 	.word	0x2000021c

08001dd0 <timer_getTick>:
/*---------------------------------------------------------------------------*/
/**
 * get uTick of my timer system.
 */
clock_time_t timer_getTick()
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  return _unitTick;
 8001dd4:	4b02      	ldr	r3, [pc, #8]	; (8001de0 <timer_getTick+0x10>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
}
 8001dd8:	0018      	movs	r0, r3
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	46c0      	nop			; (mov r8, r8)
 8001de0:	20000290 	.word	0x20000290

08001de4 <timer_periodic_poll>:
/**
 * count the uTick .
 * This function is must be call in a timer interrupt
 */
void timer_periodic_poll(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
	_unitTick++;
 8001de8:	4b03      	ldr	r3, [pc, #12]	; (8001df8 <timer_periodic_poll+0x14>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	1c5a      	adds	r2, r3, #1
 8001dee:	4b02      	ldr	r3, [pc, #8]	; (8001df8 <timer_periodic_poll+0x14>)
 8001df0:	601a      	str	r2, [r3, #0]
}
 8001df2:	46c0      	nop			; (mov r8, r8)
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	20000290 	.word	0x20000290

08001dfc <timer_set>:
 * \param t A pointer to the timer
 * \param interval The interval before the timer expires.
 *
 */
void timer_set(TIMER_vitual_t *t, clock_time_t interval)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
  t->status = _timer_on;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	701a      	strb	r2, [r3, #0]
  t->start = _unitTick;
 8001e0c:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <timer_set+0x2c>)
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	605a      	str	r2, [r3, #4]
  t->interval = interval;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	683a      	ldr	r2, [r7, #0]
 8001e18:	609a      	str	r2, [r3, #8]
  t->left_time = 0;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	60da      	str	r2, [r3, #12]
}
 8001e20:	46c0      	nop			; (mov r8, r8)
 8001e22:	46bd      	mov	sp, r7
 8001e24:	b002      	add	sp, #8
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	20000290 	.word	0x20000290

08001e2c <timer_reset>:
 * \param t A pointer to the timer.
 *
 * \sa timer_restart()
 */
void timer_reset(TIMER_vitual_t *t)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  t->start += t->interval;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685a      	ldr	r2, [r3, #4]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	18d2      	adds	r2, r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	605a      	str	r2, [r3, #4]
  t->status = _timer_on;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2201      	movs	r2, #1
 8001e46:	701a      	strb	r2, [r3, #0]
}
 8001e48:	46c0      	nop			; (mov r8, r8)
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	b002      	add	sp, #8
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <timer_restart>:
 * \param t A pointer to the timer.
 *
 * \sa timer_reset()
 */
void timer_restart(TIMER_vitual_t *t)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  t->start = _unitTick;
 8001e58:	4b05      	ldr	r3, [pc, #20]	; (8001e70 <timer_restart+0x20>)
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	605a      	str	r2, [r3, #4]
  t->status = _timer_on;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2201      	movs	r2, #1
 8001e64:	701a      	strb	r2, [r3, #0]
}
 8001e66:	46c0      	nop			; (mov r8, r8)
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	b002      	add	sp, #8
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	46c0      	nop			; (mov r8, r8)
 8001e70:	20000290 	.word	0x20000290

08001e74 <timer_expired>:
 *
 * \return Non-zero if the timer has expired, zero otherwise.
 *
 */
uint8_t timer_expired(TIMER_vitual_t *t)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  if (t->status == _timer_over)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d101      	bne.n	8001e88 <timer_expired+0x14>
	  return 1;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e00e      	b.n	8001ea6 <timer_expired+0x32>

  if ((clock_time_t)(_unitTick - t->start) >= (clock_time_t)t->interval){
 8001e88:	4b09      	ldr	r3, [pc, #36]	; (8001eb0 <timer_expired+0x3c>)
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	1ad2      	subs	r2, r2, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d304      	bcc.n	8001ea4 <timer_expired+0x30>
	  t->status = _timer_over;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2202      	movs	r2, #2
 8001e9e:	701a      	strb	r2, [r3, #0]
	   return 1;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e000      	b.n	8001ea6 <timer_expired+0x32>
  }
  return 0;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	0018      	movs	r0, r3
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	b002      	add	sp, #8
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	46c0      	nop			; (mov r8, r8)
 8001eb0:	20000290 	.word	0x20000290

08001eb4 <timer_stop>:
 *
 * \return Non-zero if the timer has expired, zero otherwise.
 *
 */
void timer_stop(TIMER_vitual_t *t)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  t->status = _timer_off;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	701a      	strb	r2, [r3, #0]
  t->left_time = 0;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	60da      	str	r2, [r3, #12]
}
 8001ec8:	46c0      	nop			; (mov r8, r8)
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	b002      	add	sp, #8
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ed4:	f000 fac2 	bl	800245c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ed8:	f000 f816 	bl	8001f08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001edc:	f000 f8d2 	bl	8002084 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001ee0:	f000 f870 	bl	8001fc4 <MX_I2C1_Init>
  MX_IWDG_Init();
 8001ee4:	f000 f8ae 	bl	8002044 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  test_bus_init();
 8001ee8:	f7ff fdba 	bl	8001a60 <test_bus_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_IWDG_Init(&hiwdg);
 8001eec:	4b05      	ldr	r3, [pc, #20]	; (8001f04 <main+0x34>)
 8001eee:	0018      	movs	r0, r3
 8001ef0:	f001 fd9c 	bl	8003a2c <HAL_IWDG_Init>
  while (1)
  {
    HAL_IWDG_Refresh(&hiwdg);
 8001ef4:	4b03      	ldr	r3, [pc, #12]	; (8001f04 <main+0x34>)
 8001ef6:	0018      	movs	r0, r3
 8001ef8:	f001 fdea 	bl	8003ad0 <HAL_IWDG_Refresh>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    test_bus_loop();
 8001efc:	f7ff fdf0 	bl	8001ae0 <test_bus_loop>
    HAL_IWDG_Refresh(&hiwdg);
 8001f00:	e7f8      	b.n	8001ef4 <main+0x24>
 8001f02:	46c0      	nop			; (mov r8, r8)
 8001f04:	200002e8 	.word	0x200002e8

08001f08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f08:	b590      	push	{r4, r7, lr}
 8001f0a:	b093      	sub	sp, #76	; 0x4c
 8001f0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f0e:	2414      	movs	r4, #20
 8001f10:	193b      	adds	r3, r7, r4
 8001f12:	0018      	movs	r0, r3
 8001f14:	2334      	movs	r3, #52	; 0x34
 8001f16:	001a      	movs	r2, r3
 8001f18:	2100      	movs	r1, #0
 8001f1a:	f002 fc24 	bl	8004766 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f1e:	1d3b      	adds	r3, r7, #4
 8001f20:	0018      	movs	r0, r3
 8001f22:	2310      	movs	r3, #16
 8001f24:	001a      	movs	r2, r3
 8001f26:	2100      	movs	r1, #0
 8001f28:	f002 fc1d 	bl	8004766 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f2c:	2380      	movs	r3, #128	; 0x80
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	0018      	movs	r0, r3
 8001f32:	f001 fddd 	bl	8003af0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001f36:	193b      	adds	r3, r7, r4
 8001f38:	220a      	movs	r2, #10
 8001f3a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f3c:	193b      	adds	r3, r7, r4
 8001f3e:	2280      	movs	r2, #128	; 0x80
 8001f40:	0052      	lsls	r2, r2, #1
 8001f42:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001f44:	0021      	movs	r1, r4
 8001f46:	187b      	adds	r3, r7, r1
 8001f48:	2200      	movs	r2, #0
 8001f4a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f4c:	187b      	adds	r3, r7, r1
 8001f4e:	2240      	movs	r2, #64	; 0x40
 8001f50:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001f52:	187b      	adds	r3, r7, r1
 8001f54:	2201      	movs	r2, #1
 8001f56:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f58:	187b      	adds	r3, r7, r1
 8001f5a:	2202      	movs	r2, #2
 8001f5c:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f5e:	187b      	adds	r3, r7, r1
 8001f60:	2202      	movs	r2, #2
 8001f62:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001f64:	187b      	adds	r3, r7, r1
 8001f66:	2200      	movs	r2, #0
 8001f68:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001f6a:	187b      	adds	r3, r7, r1
 8001f6c:	2208      	movs	r2, #8
 8001f6e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f70:	187b      	adds	r3, r7, r1
 8001f72:	2280      	movs	r2, #128	; 0x80
 8001f74:	0292      	lsls	r2, r2, #10
 8001f76:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001f78:	187b      	adds	r3, r7, r1
 8001f7a:	2280      	movs	r2, #128	; 0x80
 8001f7c:	0592      	lsls	r2, r2, #22
 8001f7e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f80:	187b      	adds	r3, r7, r1
 8001f82:	0018      	movs	r0, r3
 8001f84:	f001 fdf4 	bl	8003b70 <HAL_RCC_OscConfig>
 8001f88:	1e03      	subs	r3, r0, #0
 8001f8a:	d001      	beq.n	8001f90 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001f8c:	f000 f94c 	bl	8002228 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f90:	1d3b      	adds	r3, r7, #4
 8001f92:	2207      	movs	r2, #7
 8001f94:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f96:	1d3b      	adds	r3, r7, #4
 8001f98:	2202      	movs	r2, #2
 8001f9a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f9c:	1d3b      	adds	r3, r7, #4
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001fa2:	1d3b      	adds	r3, r7, #4
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001fa8:	1d3b      	adds	r3, r7, #4
 8001faa:	2102      	movs	r1, #2
 8001fac:	0018      	movs	r0, r3
 8001fae:	f002 f8ef 	bl	8004190 <HAL_RCC_ClockConfig>
 8001fb2:	1e03      	subs	r3, r0, #0
 8001fb4:	d001      	beq.n	8001fba <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001fb6:	f000 f937 	bl	8002228 <Error_Handler>
  }
}
 8001fba:	46c0      	nop			; (mov r8, r8)
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	b013      	add	sp, #76	; 0x4c
 8001fc0:	bd90      	pop	{r4, r7, pc}
	...

08001fc4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001fc8:	4b1b      	ldr	r3, [pc, #108]	; (8002038 <MX_I2C1_Init+0x74>)
 8001fca:	4a1c      	ldr	r2, [pc, #112]	; (800203c <MX_I2C1_Init+0x78>)
 8001fcc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8001fce:	4b1a      	ldr	r3, [pc, #104]	; (8002038 <MX_I2C1_Init+0x74>)
 8001fd0:	4a1b      	ldr	r2, [pc, #108]	; (8002040 <MX_I2C1_Init+0x7c>)
 8001fd2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001fd4:	4b18      	ldr	r3, [pc, #96]	; (8002038 <MX_I2C1_Init+0x74>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fda:	4b17      	ldr	r3, [pc, #92]	; (8002038 <MX_I2C1_Init+0x74>)
 8001fdc:	2201      	movs	r2, #1
 8001fde:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fe0:	4b15      	ldr	r3, [pc, #84]	; (8002038 <MX_I2C1_Init+0x74>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001fe6:	4b14      	ldr	r3, [pc, #80]	; (8002038 <MX_I2C1_Init+0x74>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001fec:	4b12      	ldr	r3, [pc, #72]	; (8002038 <MX_I2C1_Init+0x74>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ff2:	4b11      	ldr	r3, [pc, #68]	; (8002038 <MX_I2C1_Init+0x74>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ff8:	4b0f      	ldr	r3, [pc, #60]	; (8002038 <MX_I2C1_Init+0x74>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ffe:	4b0e      	ldr	r3, [pc, #56]	; (8002038 <MX_I2C1_Init+0x74>)
 8002000:	0018      	movs	r0, r3
 8002002:	f000 fde5 	bl	8002bd0 <HAL_I2C_Init>
 8002006:	1e03      	subs	r3, r0, #0
 8002008:	d001      	beq.n	800200e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800200a:	f000 f90d 	bl	8002228 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800200e:	4b0a      	ldr	r3, [pc, #40]	; (8002038 <MX_I2C1_Init+0x74>)
 8002010:	2100      	movs	r1, #0
 8002012:	0018      	movs	r0, r3
 8002014:	f001 fc72 	bl	80038fc <HAL_I2CEx_ConfigAnalogFilter>
 8002018:	1e03      	subs	r3, r0, #0
 800201a:	d001      	beq.n	8002020 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800201c:	f000 f904 	bl	8002228 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002020:	4b05      	ldr	r3, [pc, #20]	; (8002038 <MX_I2C1_Init+0x74>)
 8002022:	2100      	movs	r1, #0
 8002024:	0018      	movs	r0, r3
 8002026:	f001 fcb5 	bl	8003994 <HAL_I2CEx_ConfigDigitalFilter>
 800202a:	1e03      	subs	r3, r0, #0
 800202c:	d001      	beq.n	8002032 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800202e:	f000 f8fb 	bl	8002228 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002032:	46c0      	nop			; (mov r8, r8)
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	20000294 	.word	0x20000294
 800203c:	40005400 	.word	0x40005400
 8002040:	10707dbc 	.word	0x10707dbc

08002044 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8002048:	4b0b      	ldr	r3, [pc, #44]	; (8002078 <MX_IWDG_Init+0x34>)
 800204a:	4a0c      	ldr	r2, [pc, #48]	; (800207c <MX_IWDG_Init+0x38>)
 800204c:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 800204e:	4b0a      	ldr	r3, [pc, #40]	; (8002078 <MX_IWDG_Init+0x34>)
 8002050:	2203      	movs	r2, #3
 8002052:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8002054:	4b08      	ldr	r3, [pc, #32]	; (8002078 <MX_IWDG_Init+0x34>)
 8002056:	4a0a      	ldr	r2, [pc, #40]	; (8002080 <MX_IWDG_Init+0x3c>)
 8002058:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 800205a:	4b07      	ldr	r3, [pc, #28]	; (8002078 <MX_IWDG_Init+0x34>)
 800205c:	4a08      	ldr	r2, [pc, #32]	; (8002080 <MX_IWDG_Init+0x3c>)
 800205e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8002060:	4b05      	ldr	r3, [pc, #20]	; (8002078 <MX_IWDG_Init+0x34>)
 8002062:	0018      	movs	r0, r3
 8002064:	f001 fce2 	bl	8003a2c <HAL_IWDG_Init>
 8002068:	1e03      	subs	r3, r0, #0
 800206a:	d001      	beq.n	8002070 <MX_IWDG_Init+0x2c>
  {
    Error_Handler();
 800206c:	f000 f8dc 	bl	8002228 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8002070:	46c0      	nop			; (mov r8, r8)
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	46c0      	nop			; (mov r8, r8)
 8002078:	200002e8 	.word	0x200002e8
 800207c:	40003000 	.word	0x40003000
 8002080:	00000fff 	.word	0x00000fff

08002084 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002084:	b590      	push	{r4, r7, lr}
 8002086:	b08b      	sub	sp, #44	; 0x2c
 8002088:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800208a:	2414      	movs	r4, #20
 800208c:	193b      	adds	r3, r7, r4
 800208e:	0018      	movs	r0, r3
 8002090:	2314      	movs	r3, #20
 8002092:	001a      	movs	r2, r3
 8002094:	2100      	movs	r1, #0
 8002096:	f002 fb66 	bl	8004766 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800209a:	4b5a      	ldr	r3, [pc, #360]	; (8002204 <MX_GPIO_Init+0x180>)
 800209c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800209e:	4b59      	ldr	r3, [pc, #356]	; (8002204 <MX_GPIO_Init+0x180>)
 80020a0:	2104      	movs	r1, #4
 80020a2:	430a      	orrs	r2, r1
 80020a4:	635a      	str	r2, [r3, #52]	; 0x34
 80020a6:	4b57      	ldr	r3, [pc, #348]	; (8002204 <MX_GPIO_Init+0x180>)
 80020a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020aa:	2204      	movs	r2, #4
 80020ac:	4013      	ands	r3, r2
 80020ae:	613b      	str	r3, [r7, #16]
 80020b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020b2:	4b54      	ldr	r3, [pc, #336]	; (8002204 <MX_GPIO_Init+0x180>)
 80020b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020b6:	4b53      	ldr	r3, [pc, #332]	; (8002204 <MX_GPIO_Init+0x180>)
 80020b8:	2101      	movs	r1, #1
 80020ba:	430a      	orrs	r2, r1
 80020bc:	635a      	str	r2, [r3, #52]	; 0x34
 80020be:	4b51      	ldr	r3, [pc, #324]	; (8002204 <MX_GPIO_Init+0x180>)
 80020c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020c2:	2201      	movs	r2, #1
 80020c4:	4013      	ands	r3, r2
 80020c6:	60fb      	str	r3, [r7, #12]
 80020c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ca:	4b4e      	ldr	r3, [pc, #312]	; (8002204 <MX_GPIO_Init+0x180>)
 80020cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020ce:	4b4d      	ldr	r3, [pc, #308]	; (8002204 <MX_GPIO_Init+0x180>)
 80020d0:	2102      	movs	r1, #2
 80020d2:	430a      	orrs	r2, r1
 80020d4:	635a      	str	r2, [r3, #52]	; 0x34
 80020d6:	4b4b      	ldr	r3, [pc, #300]	; (8002204 <MX_GPIO_Init+0x180>)
 80020d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020da:	2202      	movs	r2, #2
 80020dc:	4013      	ands	r3, r2
 80020de:	60bb      	str	r3, [r7, #8]
 80020e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020e2:	4b48      	ldr	r3, [pc, #288]	; (8002204 <MX_GPIO_Init+0x180>)
 80020e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020e6:	4b47      	ldr	r3, [pc, #284]	; (8002204 <MX_GPIO_Init+0x180>)
 80020e8:	2108      	movs	r1, #8
 80020ea:	430a      	orrs	r2, r1
 80020ec:	635a      	str	r2, [r3, #52]	; 0x34
 80020ee:	4b45      	ldr	r3, [pc, #276]	; (8002204 <MX_GPIO_Init+0x180>)
 80020f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020f2:	2208      	movs	r2, #8
 80020f4:	4013      	ands	r3, r2
 80020f6:	607b      	str	r3, [r7, #4]
 80020f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BUZ_Pin|PNP4_Pin, GPIO_PIN_RESET);
 80020fa:	4943      	ldr	r1, [pc, #268]	; (8002208 <MX_GPIO_Init+0x184>)
 80020fc:	4b43      	ldr	r3, [pc, #268]	; (800220c <MX_GPIO_Init+0x188>)
 80020fe:	2200      	movs	r2, #0
 8002100:	0018      	movs	r0, r3
 8002102:	f000 fd48 	bl	8002b96 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SCK_595_Pin|LAT_595_Pin|SDA_595_Pin, GPIO_PIN_RESET);
 8002106:	4b42      	ldr	r3, [pc, #264]	; (8002210 <MX_GPIO_Init+0x18c>)
 8002108:	2200      	movs	r2, #0
 800210a:	2138      	movs	r1, #56	; 0x38
 800210c:	0018      	movs	r0, r3
 800210e:	f000 fd42 	bl	8002b96 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : IN40_Pin IN39_Pin IN42_Pin IN41_Pin
                           BUTTON_Pin IN1_Pin IN2_Pin IN32_Pin
                           IN31_Pin IN16_Pin IN11_Pin IN20_Pin
                           IN34_Pin */
  GPIO_InitStruct.Pin = IN40_Pin|IN39_Pin|IN42_Pin|IN41_Pin
 8002112:	193b      	adds	r3, r7, r4
 8002114:	4a3f      	ldr	r2, [pc, #252]	; (8002214 <MX_GPIO_Init+0x190>)
 8002116:	601a      	str	r2, [r3, #0]
                          |BUTTON_Pin|IN1_Pin|IN2_Pin|IN32_Pin
                          |IN31_Pin|IN16_Pin|IN11_Pin|IN20_Pin
                          |IN34_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002118:	193b      	adds	r3, r7, r4
 800211a:	2200      	movs	r2, #0
 800211c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800211e:	193b      	adds	r3, r7, r4
 8002120:	2201      	movs	r2, #1
 8002122:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002124:	193b      	adds	r3, r7, r4
 8002126:	4a39      	ldr	r2, [pc, #228]	; (800220c <MX_GPIO_Init+0x188>)
 8002128:	0019      	movs	r1, r3
 800212a:	0010      	movs	r0, r2
 800212c:	f000 fbb2 	bl	8002894 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZ_Pin */
  GPIO_InitStruct.Pin = BUZ_Pin;
 8002130:	193b      	adds	r3, r7, r4
 8002132:	2202      	movs	r2, #2
 8002134:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002136:	193b      	adds	r3, r7, r4
 8002138:	2201      	movs	r2, #1
 800213a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800213c:	193b      	adds	r3, r7, r4
 800213e:	2202      	movs	r2, #2
 8002140:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002142:	193b      	adds	r3, r7, r4
 8002144:	2201      	movs	r2, #1
 8002146:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BUZ_GPIO_Port, &GPIO_InitStruct);
 8002148:	193b      	adds	r3, r7, r4
 800214a:	4a30      	ldr	r2, [pc, #192]	; (800220c <MX_GPIO_Init+0x188>)
 800214c:	0019      	movs	r1, r3
 800214e:	0010      	movs	r0, r2
 8002150:	f000 fba0 	bl	8002894 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN8_Pin IN7_Pin IN4_Pin IN3_Pin
                           IN6_Pin IN5_Pin IN10_Pin IN9_Pin
                           IN22_Pin IN21_Pin IN13_Pin IN17_Pin
                           IN18_Pin IN19_Pin */
  GPIO_InitStruct.Pin = IN8_Pin|IN7_Pin|IN4_Pin|IN3_Pin
 8002154:	193b      	adds	r3, r7, r4
 8002156:	4a30      	ldr	r2, [pc, #192]	; (8002218 <MX_GPIO_Init+0x194>)
 8002158:	601a      	str	r2, [r3, #0]
                          |IN6_Pin|IN5_Pin|IN10_Pin|IN9_Pin
                          |IN22_Pin|IN21_Pin|IN13_Pin|IN17_Pin
                          |IN18_Pin|IN19_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800215a:	193b      	adds	r3, r7, r4
 800215c:	2200      	movs	r2, #0
 800215e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002160:	193b      	adds	r3, r7, r4
 8002162:	2201      	movs	r2, #1
 8002164:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002166:	193a      	adds	r2, r7, r4
 8002168:	23a0      	movs	r3, #160	; 0xa0
 800216a:	05db      	lsls	r3, r3, #23
 800216c:	0011      	movs	r1, r2
 800216e:	0018      	movs	r0, r3
 8002170:	f000 fb90 	bl	8002894 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN30_Pin IN29_Pin IN28_Pin IN27_Pin
                           IN26_Pin IN25_Pin IN24_Pin IN23_Pin
                           IN12_Pin IN37_Pin IN38_Pin */
  GPIO_InitStruct.Pin = IN30_Pin|IN29_Pin|IN28_Pin|IN27_Pin
 8002174:	193b      	adds	r3, r7, r4
 8002176:	4a29      	ldr	r2, [pc, #164]	; (800221c <MX_GPIO_Init+0x198>)
 8002178:	601a      	str	r2, [r3, #0]
                          |IN26_Pin|IN25_Pin|IN24_Pin|IN23_Pin
                          |IN12_Pin|IN37_Pin|IN38_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800217a:	193b      	adds	r3, r7, r4
 800217c:	2200      	movs	r2, #0
 800217e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002180:	193b      	adds	r3, r7, r4
 8002182:	2201      	movs	r2, #1
 8002184:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002186:	193b      	adds	r3, r7, r4
 8002188:	4a21      	ldr	r2, [pc, #132]	; (8002210 <MX_GPIO_Init+0x18c>)
 800218a:	0019      	movs	r1, r3
 800218c:	0010      	movs	r0, r2
 800218e:	f000 fb81 	bl	8002894 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN15_Pin IN14_Pin IN33_Pin IN36_Pin
                           IN35_Pin IN43_Pin IN44_Pin IN45_Pin
                           IN46_Pin */
  GPIO_InitStruct.Pin = IN15_Pin|IN14_Pin|IN33_Pin|IN36_Pin
 8002192:	193b      	adds	r3, r7, r4
 8002194:	4a22      	ldr	r2, [pc, #136]	; (8002220 <MX_GPIO_Init+0x19c>)
 8002196:	601a      	str	r2, [r3, #0]
                          |IN35_Pin|IN43_Pin|IN44_Pin|IN45_Pin
                          |IN46_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002198:	193b      	adds	r3, r7, r4
 800219a:	2200      	movs	r2, #0
 800219c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800219e:	193b      	adds	r3, r7, r4
 80021a0:	2201      	movs	r2, #1
 80021a2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021a4:	193b      	adds	r3, r7, r4
 80021a6:	4a1f      	ldr	r2, [pc, #124]	; (8002224 <MX_GPIO_Init+0x1a0>)
 80021a8:	0019      	movs	r1, r3
 80021aa:	0010      	movs	r0, r2
 80021ac:	f000 fb72 	bl	8002894 <HAL_GPIO_Init>

  /*Configure GPIO pins : SCK_595_Pin LAT_595_Pin SDA_595_Pin */
  GPIO_InitStruct.Pin = SCK_595_Pin|LAT_595_Pin|SDA_595_Pin;
 80021b0:	193b      	adds	r3, r7, r4
 80021b2:	2238      	movs	r2, #56	; 0x38
 80021b4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021b6:	193b      	adds	r3, r7, r4
 80021b8:	2201      	movs	r2, #1
 80021ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021bc:	193b      	adds	r3, r7, r4
 80021be:	2201      	movs	r2, #1
 80021c0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021c2:	193b      	adds	r3, r7, r4
 80021c4:	2203      	movs	r2, #3
 80021c6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021c8:	193b      	adds	r3, r7, r4
 80021ca:	4a11      	ldr	r2, [pc, #68]	; (8002210 <MX_GPIO_Init+0x18c>)
 80021cc:	0019      	movs	r1, r3
 80021ce:	0010      	movs	r0, r2
 80021d0:	f000 fb60 	bl	8002894 <HAL_GPIO_Init>

  /*Configure GPIO pin : PNP4_Pin */
  GPIO_InitStruct.Pin = PNP4_Pin;
 80021d4:	0021      	movs	r1, r4
 80021d6:	187b      	adds	r3, r7, r1
 80021d8:	2280      	movs	r2, #128	; 0x80
 80021da:	00d2      	lsls	r2, r2, #3
 80021dc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80021de:	187b      	adds	r3, r7, r1
 80021e0:	2211      	movs	r2, #17
 80021e2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021e4:	187b      	adds	r3, r7, r1
 80021e6:	2201      	movs	r2, #1
 80021e8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ea:	187b      	adds	r3, r7, r1
 80021ec:	2200      	movs	r2, #0
 80021ee:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(PNP4_GPIO_Port, &GPIO_InitStruct);
 80021f0:	187b      	adds	r3, r7, r1
 80021f2:	4a06      	ldr	r2, [pc, #24]	; (800220c <MX_GPIO_Init+0x188>)
 80021f4:	0019      	movs	r1, r3
 80021f6:	0010      	movs	r0, r2
 80021f8:	f000 fb4c 	bl	8002894 <HAL_GPIO_Init>

}
 80021fc:	46c0      	nop			; (mov r8, r8)
 80021fe:	46bd      	mov	sp, r7
 8002200:	b00b      	add	sp, #44	; 0x2c
 8002202:	bd90      	pop	{r4, r7, pc}
 8002204:	40021000 	.word	0x40021000
 8002208:	00000402 	.word	0x00000402
 800220c:	50000800 	.word	0x50000800
 8002210:	50000400 	.word	0x50000400
 8002214:	0000fbfc 	.word	0x0000fbfc
 8002218:	00009fff 	.word	0x00009fff
 800221c:	0000fcc7 	.word	0x0000fcc7
 8002220:	0000037f 	.word	0x0000037f
 8002224:	50000c00 	.word	0x50000c00

08002228 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800222c:	46c0      	nop			; (mov r8, r8)
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
	...

08002234 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800223a:	4b11      	ldr	r3, [pc, #68]	; (8002280 <HAL_MspInit+0x4c>)
 800223c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800223e:	4b10      	ldr	r3, [pc, #64]	; (8002280 <HAL_MspInit+0x4c>)
 8002240:	2101      	movs	r1, #1
 8002242:	430a      	orrs	r2, r1
 8002244:	641a      	str	r2, [r3, #64]	; 0x40
 8002246:	4b0e      	ldr	r3, [pc, #56]	; (8002280 <HAL_MspInit+0x4c>)
 8002248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224a:	2201      	movs	r2, #1
 800224c:	4013      	ands	r3, r2
 800224e:	607b      	str	r3, [r7, #4]
 8002250:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002252:	4b0b      	ldr	r3, [pc, #44]	; (8002280 <HAL_MspInit+0x4c>)
 8002254:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002256:	4b0a      	ldr	r3, [pc, #40]	; (8002280 <HAL_MspInit+0x4c>)
 8002258:	2180      	movs	r1, #128	; 0x80
 800225a:	0549      	lsls	r1, r1, #21
 800225c:	430a      	orrs	r2, r1
 800225e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002260:	4b07      	ldr	r3, [pc, #28]	; (8002280 <HAL_MspInit+0x4c>)
 8002262:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002264:	2380      	movs	r3, #128	; 0x80
 8002266:	055b      	lsls	r3, r3, #21
 8002268:	4013      	ands	r3, r2
 800226a:	603b      	str	r3, [r7, #0]
 800226c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800226e:	23c0      	movs	r3, #192	; 0xc0
 8002270:	00db      	lsls	r3, r3, #3
 8002272:	0018      	movs	r0, r3
 8002274:	f000 f99c 	bl	80025b0 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002278:	46c0      	nop			; (mov r8, r8)
 800227a:	46bd      	mov	sp, r7
 800227c:	b002      	add	sp, #8
 800227e:	bd80      	pop	{r7, pc}
 8002280:	40021000 	.word	0x40021000

08002284 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002284:	b590      	push	{r4, r7, lr}
 8002286:	b091      	sub	sp, #68	; 0x44
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800228c:	232c      	movs	r3, #44	; 0x2c
 800228e:	18fb      	adds	r3, r7, r3
 8002290:	0018      	movs	r0, r3
 8002292:	2314      	movs	r3, #20
 8002294:	001a      	movs	r2, r3
 8002296:	2100      	movs	r1, #0
 8002298:	f002 fa65 	bl	8004766 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800229c:	2410      	movs	r4, #16
 800229e:	193b      	adds	r3, r7, r4
 80022a0:	0018      	movs	r0, r3
 80022a2:	231c      	movs	r3, #28
 80022a4:	001a      	movs	r2, r3
 80022a6:	2100      	movs	r1, #0
 80022a8:	f002 fa5d 	bl	8004766 <memset>
  if(hi2c->Instance==I2C1)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a32      	ldr	r2, [pc, #200]	; (800237c <HAL_I2C_MspInit+0xf8>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d15e      	bne.n	8002374 <HAL_I2C_MspInit+0xf0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80022b6:	193b      	adds	r3, r7, r4
 80022b8:	2220      	movs	r2, #32
 80022ba:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80022bc:	193b      	adds	r3, r7, r4
 80022be:	2200      	movs	r2, #0
 80022c0:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022c2:	193b      	adds	r3, r7, r4
 80022c4:	0018      	movs	r0, r3
 80022c6:	f002 f8ed 	bl	80044a4 <HAL_RCCEx_PeriphCLKConfig>
 80022ca:	1e03      	subs	r3, r0, #0
 80022cc:	d001      	beq.n	80022d2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80022ce:	f7ff ffab 	bl	8002228 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022d2:	4b2b      	ldr	r3, [pc, #172]	; (8002380 <HAL_I2C_MspInit+0xfc>)
 80022d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022d6:	4b2a      	ldr	r3, [pc, #168]	; (8002380 <HAL_I2C_MspInit+0xfc>)
 80022d8:	2102      	movs	r1, #2
 80022da:	430a      	orrs	r2, r1
 80022dc:	635a      	str	r2, [r3, #52]	; 0x34
 80022de:	4b28      	ldr	r3, [pc, #160]	; (8002380 <HAL_I2C_MspInit+0xfc>)
 80022e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022e2:	2202      	movs	r2, #2
 80022e4:	4013      	ands	r3, r2
 80022e6:	60fb      	str	r3, [r7, #12]
 80022e8:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80022ea:	212c      	movs	r1, #44	; 0x2c
 80022ec:	187b      	adds	r3, r7, r1
 80022ee:	2280      	movs	r2, #128	; 0x80
 80022f0:	0052      	lsls	r2, r2, #1
 80022f2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022f4:	000c      	movs	r4, r1
 80022f6:	193b      	adds	r3, r7, r4
 80022f8:	2212      	movs	r2, #18
 80022fa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022fc:	193b      	adds	r3, r7, r4
 80022fe:	2201      	movs	r2, #1
 8002300:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002302:	193b      	adds	r3, r7, r4
 8002304:	2200      	movs	r2, #0
 8002306:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8002308:	193b      	adds	r3, r7, r4
 800230a:	2206      	movs	r2, #6
 800230c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800230e:	193b      	adds	r3, r7, r4
 8002310:	4a1c      	ldr	r2, [pc, #112]	; (8002384 <HAL_I2C_MspInit+0x100>)
 8002312:	0019      	movs	r1, r3
 8002314:	0010      	movs	r0, r2
 8002316:	f000 fabd 	bl	8002894 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800231a:	0021      	movs	r1, r4
 800231c:	187b      	adds	r3, r7, r1
 800231e:	2280      	movs	r2, #128	; 0x80
 8002320:	0092      	lsls	r2, r2, #2
 8002322:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002324:	187b      	adds	r3, r7, r1
 8002326:	2212      	movs	r2, #18
 8002328:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800232a:	187b      	adds	r3, r7, r1
 800232c:	2201      	movs	r2, #1
 800232e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002330:	187b      	adds	r3, r7, r1
 8002332:	2202      	movs	r2, #2
 8002334:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8002336:	187b      	adds	r3, r7, r1
 8002338:	2206      	movs	r2, #6
 800233a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800233c:	187b      	adds	r3, r7, r1
 800233e:	4a11      	ldr	r2, [pc, #68]	; (8002384 <HAL_I2C_MspInit+0x100>)
 8002340:	0019      	movs	r1, r3
 8002342:	0010      	movs	r0, r2
 8002344:	f000 faa6 	bl	8002894 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002348:	4b0d      	ldr	r3, [pc, #52]	; (8002380 <HAL_I2C_MspInit+0xfc>)
 800234a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800234c:	4b0c      	ldr	r3, [pc, #48]	; (8002380 <HAL_I2C_MspInit+0xfc>)
 800234e:	2180      	movs	r1, #128	; 0x80
 8002350:	0389      	lsls	r1, r1, #14
 8002352:	430a      	orrs	r2, r1
 8002354:	63da      	str	r2, [r3, #60]	; 0x3c
 8002356:	4b0a      	ldr	r3, [pc, #40]	; (8002380 <HAL_I2C_MspInit+0xfc>)
 8002358:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800235a:	2380      	movs	r3, #128	; 0x80
 800235c:	039b      	lsls	r3, r3, #14
 800235e:	4013      	ands	r3, r2
 8002360:	60bb      	str	r3, [r7, #8]
 8002362:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8002364:	2200      	movs	r2, #0
 8002366:	2100      	movs	r1, #0
 8002368:	2017      	movs	r0, #23
 800236a:	f000 f9e3 	bl	8002734 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 800236e:	2017      	movs	r0, #23
 8002370:	f000 f9f5 	bl	800275e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002374:	46c0      	nop			; (mov r8, r8)
 8002376:	46bd      	mov	sp, r7
 8002378:	b011      	add	sp, #68	; 0x44
 800237a:	bd90      	pop	{r4, r7, pc}
 800237c:	40005400 	.word	0x40005400
 8002380:	40021000 	.word	0x40021000
 8002384:	50000400 	.word	0x50000400

08002388 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800238c:	46c0      	nop			; (mov r8, r8)
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}

08002392 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002392:	b580      	push	{r7, lr}
 8002394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002396:	e7fe      	b.n	8002396 <HardFault_Handler+0x4>

08002398 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800239c:	46c0      	nop			; (mov r8, r8)
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023a2:	b580      	push	{r7, lr}
 80023a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023a6:	46c0      	nop			; (mov r8, r8)
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023b0:	f000 f8be 	bl	8002530 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 80023b4:	f000 f9f0 	bl	8002798 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 80023b8:	46c0      	nop			; (mov r8, r8)
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
	...

080023c0 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 80023c4:	4b09      	ldr	r3, [pc, #36]	; (80023ec <I2C1_IRQHandler+0x2c>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	699a      	ldr	r2, [r3, #24]
 80023ca:	23e0      	movs	r3, #224	; 0xe0
 80023cc:	00db      	lsls	r3, r3, #3
 80023ce:	4013      	ands	r3, r2
 80023d0:	d004      	beq.n	80023dc <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 80023d2:	4b06      	ldr	r3, [pc, #24]	; (80023ec <I2C1_IRQHandler+0x2c>)
 80023d4:	0018      	movs	r0, r3
 80023d6:	f000 fcab 	bl	8002d30 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 80023da:	e003      	b.n	80023e4 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 80023dc:	4b03      	ldr	r3, [pc, #12]	; (80023ec <I2C1_IRQHandler+0x2c>)
 80023de:	0018      	movs	r0, r3
 80023e0:	f000 fc8c 	bl	8002cfc <HAL_I2C_EV_IRQHandler>
}
 80023e4:	46c0      	nop			; (mov r8, r8)
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	46c0      	nop			; (mov r8, r8)
 80023ec:	20000294 	.word	0x20000294

080023f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80023f4:	4b03      	ldr	r3, [pc, #12]	; (8002404 <SystemInit+0x14>)
 80023f6:	2280      	movs	r2, #128	; 0x80
 80023f8:	0512      	lsls	r2, r2, #20
 80023fa:	609a      	str	r2, [r3, #8]
#endif
}
 80023fc:	46c0      	nop			; (mov r8, r8)
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	46c0      	nop			; (mov r8, r8)
 8002404:	e000ed00 	.word	0xe000ed00

08002408 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002408:	480d      	ldr	r0, [pc, #52]	; (8002440 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800240a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800240c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800240e:	e003      	b.n	8002418 <LoopCopyDataInit>

08002410 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002410:	4b0c      	ldr	r3, [pc, #48]	; (8002444 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8002412:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002414:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002416:	3104      	adds	r1, #4

08002418 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002418:	480b      	ldr	r0, [pc, #44]	; (8002448 <LoopForever+0xa>)
  ldr r3, =_edata
 800241a:	4b0c      	ldr	r3, [pc, #48]	; (800244c <LoopForever+0xe>)
  adds r2, r0, r1
 800241c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800241e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002420:	d3f6      	bcc.n	8002410 <CopyDataInit>
  ldr r2, =_sbss
 8002422:	4a0b      	ldr	r2, [pc, #44]	; (8002450 <LoopForever+0x12>)
  b LoopFillZerobss
 8002424:	e002      	b.n	800242c <LoopFillZerobss>

08002426 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002426:	2300      	movs	r3, #0
  str  r3, [r2]
 8002428:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800242a:	3204      	adds	r2, #4

0800242c <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800242c:	4b09      	ldr	r3, [pc, #36]	; (8002454 <LoopForever+0x16>)
  cmp r2, r3
 800242e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002430:	d3f9      	bcc.n	8002426 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002432:	f7ff ffdd 	bl	80023f0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002436:	f002 f969 	bl	800470c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800243a:	f7ff fd49 	bl	8001ed0 <main>

0800243e <LoopForever>:

LoopForever:
    b LoopForever
 800243e:	e7fe      	b.n	800243e <LoopForever>
  ldr   r0, =_estack
 8002440:	20009000 	.word	0x20009000
  ldr r3, =_sidata
 8002444:	08004914 	.word	0x08004914
  ldr r0, =_sdata
 8002448:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800244c:	20000148 	.word	0x20000148
  ldr r2, =_sbss
 8002450:	20000148 	.word	0x20000148
  ldr r3, = _ebss
 8002454:	200002fc 	.word	0x200002fc

08002458 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002458:	e7fe      	b.n	8002458 <ADC1_IRQHandler>
	...

0800245c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002462:	1dfb      	adds	r3, r7, #7
 8002464:	2200      	movs	r2, #0
 8002466:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002468:	4b0b      	ldr	r3, [pc, #44]	; (8002498 <HAL_Init+0x3c>)
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	4b0a      	ldr	r3, [pc, #40]	; (8002498 <HAL_Init+0x3c>)
 800246e:	2180      	movs	r1, #128	; 0x80
 8002470:	0049      	lsls	r1, r1, #1
 8002472:	430a      	orrs	r2, r1
 8002474:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002476:	2000      	movs	r0, #0
 8002478:	f000 f810 	bl	800249c <HAL_InitTick>
 800247c:	1e03      	subs	r3, r0, #0
 800247e:	d003      	beq.n	8002488 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002480:	1dfb      	adds	r3, r7, #7
 8002482:	2201      	movs	r2, #1
 8002484:	701a      	strb	r2, [r3, #0]
 8002486:	e001      	b.n	800248c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002488:	f7ff fed4 	bl	8002234 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800248c:	1dfb      	adds	r3, r7, #7
 800248e:	781b      	ldrb	r3, [r3, #0]
}
 8002490:	0018      	movs	r0, r3
 8002492:	46bd      	mov	sp, r7
 8002494:	b002      	add	sp, #8
 8002496:	bd80      	pop	{r7, pc}
 8002498:	40022000 	.word	0x40022000

0800249c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800249c:	b590      	push	{r4, r7, lr}
 800249e:	b085      	sub	sp, #20
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80024a4:	230f      	movs	r3, #15
 80024a6:	18fb      	adds	r3, r7, r3
 80024a8:	2200      	movs	r2, #0
 80024aa:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80024ac:	4b1d      	ldr	r3, [pc, #116]	; (8002524 <HAL_InitTick+0x88>)
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d02b      	beq.n	800250c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80024b4:	4b1c      	ldr	r3, [pc, #112]	; (8002528 <HAL_InitTick+0x8c>)
 80024b6:	681c      	ldr	r4, [r3, #0]
 80024b8:	4b1a      	ldr	r3, [pc, #104]	; (8002524 <HAL_InitTick+0x88>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	0019      	movs	r1, r3
 80024be:	23fa      	movs	r3, #250	; 0xfa
 80024c0:	0098      	lsls	r0, r3, #2
 80024c2:	f7fd fe1d 	bl	8000100 <__udivsi3>
 80024c6:	0003      	movs	r3, r0
 80024c8:	0019      	movs	r1, r3
 80024ca:	0020      	movs	r0, r4
 80024cc:	f7fd fe18 	bl	8000100 <__udivsi3>
 80024d0:	0003      	movs	r3, r0
 80024d2:	0018      	movs	r0, r3
 80024d4:	f000 f953 	bl	800277e <HAL_SYSTICK_Config>
 80024d8:	1e03      	subs	r3, r0, #0
 80024da:	d112      	bne.n	8002502 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2b03      	cmp	r3, #3
 80024e0:	d80a      	bhi.n	80024f8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024e2:	6879      	ldr	r1, [r7, #4]
 80024e4:	2301      	movs	r3, #1
 80024e6:	425b      	negs	r3, r3
 80024e8:	2200      	movs	r2, #0
 80024ea:	0018      	movs	r0, r3
 80024ec:	f000 f922 	bl	8002734 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024f0:	4b0e      	ldr	r3, [pc, #56]	; (800252c <HAL_InitTick+0x90>)
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	601a      	str	r2, [r3, #0]
 80024f6:	e00d      	b.n	8002514 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80024f8:	230f      	movs	r3, #15
 80024fa:	18fb      	adds	r3, r7, r3
 80024fc:	2201      	movs	r2, #1
 80024fe:	701a      	strb	r2, [r3, #0]
 8002500:	e008      	b.n	8002514 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002502:	230f      	movs	r3, #15
 8002504:	18fb      	adds	r3, r7, r3
 8002506:	2201      	movs	r2, #1
 8002508:	701a      	strb	r2, [r3, #0]
 800250a:	e003      	b.n	8002514 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800250c:	230f      	movs	r3, #15
 800250e:	18fb      	adds	r3, r7, r3
 8002510:	2201      	movs	r2, #1
 8002512:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002514:	230f      	movs	r3, #15
 8002516:	18fb      	adds	r3, r7, r3
 8002518:	781b      	ldrb	r3, [r3, #0]
}
 800251a:	0018      	movs	r0, r3
 800251c:	46bd      	mov	sp, r7
 800251e:	b005      	add	sp, #20
 8002520:	bd90      	pop	{r4, r7, pc}
 8002522:	46c0      	nop			; (mov r8, r8)
 8002524:	20000144 	.word	0x20000144
 8002528:	2000013c 	.word	0x2000013c
 800252c:	20000140 	.word	0x20000140

08002530 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002534:	4b05      	ldr	r3, [pc, #20]	; (800254c <HAL_IncTick+0x1c>)
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	001a      	movs	r2, r3
 800253a:	4b05      	ldr	r3, [pc, #20]	; (8002550 <HAL_IncTick+0x20>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	18d2      	adds	r2, r2, r3
 8002540:	4b03      	ldr	r3, [pc, #12]	; (8002550 <HAL_IncTick+0x20>)
 8002542:	601a      	str	r2, [r3, #0]
}
 8002544:	46c0      	nop			; (mov r8, r8)
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	46c0      	nop			; (mov r8, r8)
 800254c:	20000144 	.word	0x20000144
 8002550:	200002f8 	.word	0x200002f8

08002554 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
  return uwTick;
 8002558:	4b02      	ldr	r3, [pc, #8]	; (8002564 <HAL_GetTick+0x10>)
 800255a:	681b      	ldr	r3, [r3, #0]
}
 800255c:	0018      	movs	r0, r3
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	46c0      	nop			; (mov r8, r8)
 8002564:	200002f8 	.word	0x200002f8

08002568 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002570:	f7ff fff0 	bl	8002554 <HAL_GetTick>
 8002574:	0003      	movs	r3, r0
 8002576:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	3301      	adds	r3, #1
 8002580:	d005      	beq.n	800258e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002582:	4b0a      	ldr	r3, [pc, #40]	; (80025ac <HAL_Delay+0x44>)
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	001a      	movs	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	189b      	adds	r3, r3, r2
 800258c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800258e:	46c0      	nop			; (mov r8, r8)
 8002590:	f7ff ffe0 	bl	8002554 <HAL_GetTick>
 8002594:	0002      	movs	r2, r0
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	68fa      	ldr	r2, [r7, #12]
 800259c:	429a      	cmp	r2, r3
 800259e:	d8f7      	bhi.n	8002590 <HAL_Delay+0x28>
  {
  }
}
 80025a0:	46c0      	nop			; (mov r8, r8)
 80025a2:	46c0      	nop			; (mov r8, r8)
 80025a4:	46bd      	mov	sp, r7
 80025a6:	b004      	add	sp, #16
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	46c0      	nop			; (mov r8, r8)
 80025ac:	20000144 	.word	0x20000144

080025b0 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80025b8:	4b06      	ldr	r3, [pc, #24]	; (80025d4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a06      	ldr	r2, [pc, #24]	; (80025d8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80025be:	4013      	ands	r3, r2
 80025c0:	0019      	movs	r1, r3
 80025c2:	4b04      	ldr	r3, [pc, #16]	; (80025d4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	430a      	orrs	r2, r1
 80025c8:	601a      	str	r2, [r3, #0]
}
 80025ca:	46c0      	nop			; (mov r8, r8)
 80025cc:	46bd      	mov	sp, r7
 80025ce:	b002      	add	sp, #8
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	46c0      	nop			; (mov r8, r8)
 80025d4:	40010000 	.word	0x40010000
 80025d8:	fffff9ff 	.word	0xfffff9ff

080025dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	0002      	movs	r2, r0
 80025e4:	1dfb      	adds	r3, r7, #7
 80025e6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80025e8:	1dfb      	adds	r3, r7, #7
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	2b7f      	cmp	r3, #127	; 0x7f
 80025ee:	d809      	bhi.n	8002604 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025f0:	1dfb      	adds	r3, r7, #7
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	001a      	movs	r2, r3
 80025f6:	231f      	movs	r3, #31
 80025f8:	401a      	ands	r2, r3
 80025fa:	4b04      	ldr	r3, [pc, #16]	; (800260c <__NVIC_EnableIRQ+0x30>)
 80025fc:	2101      	movs	r1, #1
 80025fe:	4091      	lsls	r1, r2
 8002600:	000a      	movs	r2, r1
 8002602:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002604:	46c0      	nop			; (mov r8, r8)
 8002606:	46bd      	mov	sp, r7
 8002608:	b002      	add	sp, #8
 800260a:	bd80      	pop	{r7, pc}
 800260c:	e000e100 	.word	0xe000e100

08002610 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002610:	b590      	push	{r4, r7, lr}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	0002      	movs	r2, r0
 8002618:	6039      	str	r1, [r7, #0]
 800261a:	1dfb      	adds	r3, r7, #7
 800261c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800261e:	1dfb      	adds	r3, r7, #7
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	2b7f      	cmp	r3, #127	; 0x7f
 8002624:	d828      	bhi.n	8002678 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002626:	4a2f      	ldr	r2, [pc, #188]	; (80026e4 <__NVIC_SetPriority+0xd4>)
 8002628:	1dfb      	adds	r3, r7, #7
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	b25b      	sxtb	r3, r3
 800262e:	089b      	lsrs	r3, r3, #2
 8002630:	33c0      	adds	r3, #192	; 0xc0
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	589b      	ldr	r3, [r3, r2]
 8002636:	1dfa      	adds	r2, r7, #7
 8002638:	7812      	ldrb	r2, [r2, #0]
 800263a:	0011      	movs	r1, r2
 800263c:	2203      	movs	r2, #3
 800263e:	400a      	ands	r2, r1
 8002640:	00d2      	lsls	r2, r2, #3
 8002642:	21ff      	movs	r1, #255	; 0xff
 8002644:	4091      	lsls	r1, r2
 8002646:	000a      	movs	r2, r1
 8002648:	43d2      	mvns	r2, r2
 800264a:	401a      	ands	r2, r3
 800264c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	019b      	lsls	r3, r3, #6
 8002652:	22ff      	movs	r2, #255	; 0xff
 8002654:	401a      	ands	r2, r3
 8002656:	1dfb      	adds	r3, r7, #7
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	0018      	movs	r0, r3
 800265c:	2303      	movs	r3, #3
 800265e:	4003      	ands	r3, r0
 8002660:	00db      	lsls	r3, r3, #3
 8002662:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002664:	481f      	ldr	r0, [pc, #124]	; (80026e4 <__NVIC_SetPriority+0xd4>)
 8002666:	1dfb      	adds	r3, r7, #7
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	b25b      	sxtb	r3, r3
 800266c:	089b      	lsrs	r3, r3, #2
 800266e:	430a      	orrs	r2, r1
 8002670:	33c0      	adds	r3, #192	; 0xc0
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002676:	e031      	b.n	80026dc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002678:	4a1b      	ldr	r2, [pc, #108]	; (80026e8 <__NVIC_SetPriority+0xd8>)
 800267a:	1dfb      	adds	r3, r7, #7
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	0019      	movs	r1, r3
 8002680:	230f      	movs	r3, #15
 8002682:	400b      	ands	r3, r1
 8002684:	3b08      	subs	r3, #8
 8002686:	089b      	lsrs	r3, r3, #2
 8002688:	3306      	adds	r3, #6
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	18d3      	adds	r3, r2, r3
 800268e:	3304      	adds	r3, #4
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	1dfa      	adds	r2, r7, #7
 8002694:	7812      	ldrb	r2, [r2, #0]
 8002696:	0011      	movs	r1, r2
 8002698:	2203      	movs	r2, #3
 800269a:	400a      	ands	r2, r1
 800269c:	00d2      	lsls	r2, r2, #3
 800269e:	21ff      	movs	r1, #255	; 0xff
 80026a0:	4091      	lsls	r1, r2
 80026a2:	000a      	movs	r2, r1
 80026a4:	43d2      	mvns	r2, r2
 80026a6:	401a      	ands	r2, r3
 80026a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	019b      	lsls	r3, r3, #6
 80026ae:	22ff      	movs	r2, #255	; 0xff
 80026b0:	401a      	ands	r2, r3
 80026b2:	1dfb      	adds	r3, r7, #7
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	0018      	movs	r0, r3
 80026b8:	2303      	movs	r3, #3
 80026ba:	4003      	ands	r3, r0
 80026bc:	00db      	lsls	r3, r3, #3
 80026be:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80026c0:	4809      	ldr	r0, [pc, #36]	; (80026e8 <__NVIC_SetPriority+0xd8>)
 80026c2:	1dfb      	adds	r3, r7, #7
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	001c      	movs	r4, r3
 80026c8:	230f      	movs	r3, #15
 80026ca:	4023      	ands	r3, r4
 80026cc:	3b08      	subs	r3, #8
 80026ce:	089b      	lsrs	r3, r3, #2
 80026d0:	430a      	orrs	r2, r1
 80026d2:	3306      	adds	r3, #6
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	18c3      	adds	r3, r0, r3
 80026d8:	3304      	adds	r3, #4
 80026da:	601a      	str	r2, [r3, #0]
}
 80026dc:	46c0      	nop			; (mov r8, r8)
 80026de:	46bd      	mov	sp, r7
 80026e0:	b003      	add	sp, #12
 80026e2:	bd90      	pop	{r4, r7, pc}
 80026e4:	e000e100 	.word	0xe000e100
 80026e8:	e000ed00 	.word	0xe000ed00

080026ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	1e5a      	subs	r2, r3, #1
 80026f8:	2380      	movs	r3, #128	; 0x80
 80026fa:	045b      	lsls	r3, r3, #17
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d301      	bcc.n	8002704 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002700:	2301      	movs	r3, #1
 8002702:	e010      	b.n	8002726 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002704:	4b0a      	ldr	r3, [pc, #40]	; (8002730 <SysTick_Config+0x44>)
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	3a01      	subs	r2, #1
 800270a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800270c:	2301      	movs	r3, #1
 800270e:	425b      	negs	r3, r3
 8002710:	2103      	movs	r1, #3
 8002712:	0018      	movs	r0, r3
 8002714:	f7ff ff7c 	bl	8002610 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002718:	4b05      	ldr	r3, [pc, #20]	; (8002730 <SysTick_Config+0x44>)
 800271a:	2200      	movs	r2, #0
 800271c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800271e:	4b04      	ldr	r3, [pc, #16]	; (8002730 <SysTick_Config+0x44>)
 8002720:	2207      	movs	r2, #7
 8002722:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002724:	2300      	movs	r3, #0
}
 8002726:	0018      	movs	r0, r3
 8002728:	46bd      	mov	sp, r7
 800272a:	b002      	add	sp, #8
 800272c:	bd80      	pop	{r7, pc}
 800272e:	46c0      	nop			; (mov r8, r8)
 8002730:	e000e010 	.word	0xe000e010

08002734 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	60b9      	str	r1, [r7, #8]
 800273c:	607a      	str	r2, [r7, #4]
 800273e:	210f      	movs	r1, #15
 8002740:	187b      	adds	r3, r7, r1
 8002742:	1c02      	adds	r2, r0, #0
 8002744:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002746:	68ba      	ldr	r2, [r7, #8]
 8002748:	187b      	adds	r3, r7, r1
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	b25b      	sxtb	r3, r3
 800274e:	0011      	movs	r1, r2
 8002750:	0018      	movs	r0, r3
 8002752:	f7ff ff5d 	bl	8002610 <__NVIC_SetPriority>
}
 8002756:	46c0      	nop			; (mov r8, r8)
 8002758:	46bd      	mov	sp, r7
 800275a:	b004      	add	sp, #16
 800275c:	bd80      	pop	{r7, pc}

0800275e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800275e:	b580      	push	{r7, lr}
 8002760:	b082      	sub	sp, #8
 8002762:	af00      	add	r7, sp, #0
 8002764:	0002      	movs	r2, r0
 8002766:	1dfb      	adds	r3, r7, #7
 8002768:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800276a:	1dfb      	adds	r3, r7, #7
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	b25b      	sxtb	r3, r3
 8002770:	0018      	movs	r0, r3
 8002772:	f7ff ff33 	bl	80025dc <__NVIC_EnableIRQ>
}
 8002776:	46c0      	nop			; (mov r8, r8)
 8002778:	46bd      	mov	sp, r7
 800277a:	b002      	add	sp, #8
 800277c:	bd80      	pop	{r7, pc}

0800277e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800277e:	b580      	push	{r7, lr}
 8002780:	b082      	sub	sp, #8
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	0018      	movs	r0, r3
 800278a:	f7ff ffaf 	bl	80026ec <SysTick_Config>
 800278e:	0003      	movs	r3, r0
}
 8002790:	0018      	movs	r0, r3
 8002792:	46bd      	mov	sp, r7
 8002794:	b002      	add	sp, #8
 8002796:	bd80      	pop	{r7, pc}

08002798 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800279c:	f7fd ffd8 	bl	8000750 <HAL_SYSTICK_Callback>
}
 80027a0:	46c0      	nop			; (mov r8, r8)
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
	...

080027a8 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027b0:	210f      	movs	r1, #15
 80027b2:	187b      	adds	r3, r7, r1
 80027b4:	2200      	movs	r2, #0
 80027b6:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2225      	movs	r2, #37	; 0x25
 80027bc:	5c9b      	ldrb	r3, [r3, r2]
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d006      	beq.n	80027d2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2204      	movs	r2, #4
 80027c8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80027ca:	187b      	adds	r3, r7, r1
 80027cc:	2201      	movs	r2, #1
 80027ce:	701a      	strb	r2, [r3, #0]
 80027d0:	e049      	b.n	8002866 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	210e      	movs	r1, #14
 80027de:	438a      	bics	r2, r1
 80027e0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2101      	movs	r1, #1
 80027ee:	438a      	bics	r2, r1
 80027f0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fc:	491d      	ldr	r1, [pc, #116]	; (8002874 <HAL_DMA_Abort_IT+0xcc>)
 80027fe:	400a      	ands	r2, r1
 8002800:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8002802:	4b1d      	ldr	r3, [pc, #116]	; (8002878 <HAL_DMA_Abort_IT+0xd0>)
 8002804:	6859      	ldr	r1, [r3, #4]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280a:	221c      	movs	r2, #28
 800280c:	4013      	ands	r3, r2
 800280e:	2201      	movs	r2, #1
 8002810:	409a      	lsls	r2, r3
 8002812:	4b19      	ldr	r3, [pc, #100]	; (8002878 <HAL_DMA_Abort_IT+0xd0>)
 8002814:	430a      	orrs	r2, r1
 8002816:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002820:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002826:	2b00      	cmp	r3, #0
 8002828:	d00c      	beq.n	8002844 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002834:	490f      	ldr	r1, [pc, #60]	; (8002874 <HAL_DMA_Abort_IT+0xcc>)
 8002836:	400a      	ands	r2, r1
 8002838:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002842:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2225      	movs	r2, #37	; 0x25
 8002848:	2101      	movs	r1, #1
 800284a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2224      	movs	r2, #36	; 0x24
 8002850:	2100      	movs	r1, #0
 8002852:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002858:	2b00      	cmp	r3, #0
 800285a:	d004      	beq.n	8002866 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	0010      	movs	r0, r2
 8002864:	4798      	blx	r3
    }
  }
  return status;
 8002866:	230f      	movs	r3, #15
 8002868:	18fb      	adds	r3, r7, r3
 800286a:	781b      	ldrb	r3, [r3, #0]
}
 800286c:	0018      	movs	r0, r3
 800286e:	46bd      	mov	sp, r7
 8002870:	b004      	add	sp, #16
 8002872:	bd80      	pop	{r7, pc}
 8002874:	fffffeff 	.word	0xfffffeff
 8002878:	40020000 	.word	0x40020000

0800287c <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2225      	movs	r2, #37	; 0x25
 8002888:	5c9b      	ldrb	r3, [r3, r2]
 800288a:	b2db      	uxtb	r3, r3
}
 800288c:	0018      	movs	r0, r3
 800288e:	46bd      	mov	sp, r7
 8002890:	b002      	add	sp, #8
 8002892:	bd80      	pop	{r7, pc}

08002894 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800289e:	2300      	movs	r3, #0
 80028a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028a2:	e147      	b.n	8002b34 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2101      	movs	r1, #1
 80028aa:	697a      	ldr	r2, [r7, #20]
 80028ac:	4091      	lsls	r1, r2
 80028ae:	000a      	movs	r2, r1
 80028b0:	4013      	ands	r3, r2
 80028b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d100      	bne.n	80028bc <HAL_GPIO_Init+0x28>
 80028ba:	e138      	b.n	8002b2e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	2203      	movs	r2, #3
 80028c2:	4013      	ands	r3, r2
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d005      	beq.n	80028d4 <HAL_GPIO_Init+0x40>
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	2203      	movs	r2, #3
 80028ce:	4013      	ands	r3, r2
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d130      	bne.n	8002936 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	2203      	movs	r2, #3
 80028e0:	409a      	lsls	r2, r3
 80028e2:	0013      	movs	r3, r2
 80028e4:	43da      	mvns	r2, r3
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	4013      	ands	r3, r2
 80028ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	68da      	ldr	r2, [r3, #12]
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	005b      	lsls	r3, r3, #1
 80028f4:	409a      	lsls	r2, r3
 80028f6:	0013      	movs	r3, r2
 80028f8:	693a      	ldr	r2, [r7, #16]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	693a      	ldr	r2, [r7, #16]
 8002902:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800290a:	2201      	movs	r2, #1
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	409a      	lsls	r2, r3
 8002910:	0013      	movs	r3, r2
 8002912:	43da      	mvns	r2, r3
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	4013      	ands	r3, r2
 8002918:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	091b      	lsrs	r3, r3, #4
 8002920:	2201      	movs	r2, #1
 8002922:	401a      	ands	r2, r3
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	409a      	lsls	r2, r3
 8002928:	0013      	movs	r3, r2
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	4313      	orrs	r3, r2
 800292e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	693a      	ldr	r2, [r7, #16]
 8002934:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	2203      	movs	r2, #3
 800293c:	4013      	ands	r3, r2
 800293e:	2b03      	cmp	r3, #3
 8002940:	d017      	beq.n	8002972 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	005b      	lsls	r3, r3, #1
 800294c:	2203      	movs	r2, #3
 800294e:	409a      	lsls	r2, r3
 8002950:	0013      	movs	r3, r2
 8002952:	43da      	mvns	r2, r3
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	4013      	ands	r3, r2
 8002958:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	689a      	ldr	r2, [r3, #8]
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	409a      	lsls	r2, r3
 8002964:	0013      	movs	r3, r2
 8002966:	693a      	ldr	r2, [r7, #16]
 8002968:	4313      	orrs	r3, r2
 800296a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	693a      	ldr	r2, [r7, #16]
 8002970:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	2203      	movs	r2, #3
 8002978:	4013      	ands	r3, r2
 800297a:	2b02      	cmp	r3, #2
 800297c:	d123      	bne.n	80029c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	08da      	lsrs	r2, r3, #3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	3208      	adds	r2, #8
 8002986:	0092      	lsls	r2, r2, #2
 8002988:	58d3      	ldr	r3, [r2, r3]
 800298a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	2207      	movs	r2, #7
 8002990:	4013      	ands	r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	220f      	movs	r2, #15
 8002996:	409a      	lsls	r2, r3
 8002998:	0013      	movs	r3, r2
 800299a:	43da      	mvns	r2, r3
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	4013      	ands	r3, r2
 80029a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	691a      	ldr	r2, [r3, #16]
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	2107      	movs	r1, #7
 80029aa:	400b      	ands	r3, r1
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	409a      	lsls	r2, r3
 80029b0:	0013      	movs	r3, r2
 80029b2:	693a      	ldr	r2, [r7, #16]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	08da      	lsrs	r2, r3, #3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	3208      	adds	r2, #8
 80029c0:	0092      	lsls	r2, r2, #2
 80029c2:	6939      	ldr	r1, [r7, #16]
 80029c4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	005b      	lsls	r3, r3, #1
 80029d0:	2203      	movs	r2, #3
 80029d2:	409a      	lsls	r2, r3
 80029d4:	0013      	movs	r3, r2
 80029d6:	43da      	mvns	r2, r3
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	4013      	ands	r3, r2
 80029dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	2203      	movs	r2, #3
 80029e4:	401a      	ands	r2, r3
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	409a      	lsls	r2, r3
 80029ec:	0013      	movs	r3, r2
 80029ee:	693a      	ldr	r2, [r7, #16]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	693a      	ldr	r2, [r7, #16]
 80029f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685a      	ldr	r2, [r3, #4]
 80029fe:	23c0      	movs	r3, #192	; 0xc0
 8002a00:	029b      	lsls	r3, r3, #10
 8002a02:	4013      	ands	r3, r2
 8002a04:	d100      	bne.n	8002a08 <HAL_GPIO_Init+0x174>
 8002a06:	e092      	b.n	8002b2e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002a08:	4a50      	ldr	r2, [pc, #320]	; (8002b4c <HAL_GPIO_Init+0x2b8>)
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	089b      	lsrs	r3, r3, #2
 8002a0e:	3318      	adds	r3, #24
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	589b      	ldr	r3, [r3, r2]
 8002a14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	2203      	movs	r2, #3
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	00db      	lsls	r3, r3, #3
 8002a1e:	220f      	movs	r2, #15
 8002a20:	409a      	lsls	r2, r3
 8002a22:	0013      	movs	r3, r2
 8002a24:	43da      	mvns	r2, r3
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	4013      	ands	r3, r2
 8002a2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	23a0      	movs	r3, #160	; 0xa0
 8002a30:	05db      	lsls	r3, r3, #23
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d013      	beq.n	8002a5e <HAL_GPIO_Init+0x1ca>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a45      	ldr	r2, [pc, #276]	; (8002b50 <HAL_GPIO_Init+0x2bc>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d00d      	beq.n	8002a5a <HAL_GPIO_Init+0x1c6>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a44      	ldr	r2, [pc, #272]	; (8002b54 <HAL_GPIO_Init+0x2c0>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d007      	beq.n	8002a56 <HAL_GPIO_Init+0x1c2>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a43      	ldr	r2, [pc, #268]	; (8002b58 <HAL_GPIO_Init+0x2c4>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d101      	bne.n	8002a52 <HAL_GPIO_Init+0x1be>
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e006      	b.n	8002a60 <HAL_GPIO_Init+0x1cc>
 8002a52:	2305      	movs	r3, #5
 8002a54:	e004      	b.n	8002a60 <HAL_GPIO_Init+0x1cc>
 8002a56:	2302      	movs	r3, #2
 8002a58:	e002      	b.n	8002a60 <HAL_GPIO_Init+0x1cc>
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e000      	b.n	8002a60 <HAL_GPIO_Init+0x1cc>
 8002a5e:	2300      	movs	r3, #0
 8002a60:	697a      	ldr	r2, [r7, #20]
 8002a62:	2103      	movs	r1, #3
 8002a64:	400a      	ands	r2, r1
 8002a66:	00d2      	lsls	r2, r2, #3
 8002a68:	4093      	lsls	r3, r2
 8002a6a:	693a      	ldr	r2, [r7, #16]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002a70:	4936      	ldr	r1, [pc, #216]	; (8002b4c <HAL_GPIO_Init+0x2b8>)
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	089b      	lsrs	r3, r3, #2
 8002a76:	3318      	adds	r3, #24
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a7e:	4b33      	ldr	r3, [pc, #204]	; (8002b4c <HAL_GPIO_Init+0x2b8>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	43da      	mvns	r2, r3
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	685a      	ldr	r2, [r3, #4]
 8002a92:	2380      	movs	r3, #128	; 0x80
 8002a94:	035b      	lsls	r3, r3, #13
 8002a96:	4013      	ands	r3, r2
 8002a98:	d003      	beq.n	8002aa2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002a9a:	693a      	ldr	r2, [r7, #16]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002aa2:	4b2a      	ldr	r3, [pc, #168]	; (8002b4c <HAL_GPIO_Init+0x2b8>)
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002aa8:	4b28      	ldr	r3, [pc, #160]	; (8002b4c <HAL_GPIO_Init+0x2b8>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	43da      	mvns	r2, r3
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685a      	ldr	r2, [r3, #4]
 8002abc:	2380      	movs	r3, #128	; 0x80
 8002abe:	039b      	lsls	r3, r3, #14
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	d003      	beq.n	8002acc <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002ac4:	693a      	ldr	r2, [r7, #16]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002acc:	4b1f      	ldr	r3, [pc, #124]	; (8002b4c <HAL_GPIO_Init+0x2b8>)
 8002ace:	693a      	ldr	r2, [r7, #16]
 8002ad0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002ad2:	4a1e      	ldr	r2, [pc, #120]	; (8002b4c <HAL_GPIO_Init+0x2b8>)
 8002ad4:	2384      	movs	r3, #132	; 0x84
 8002ad6:	58d3      	ldr	r3, [r2, r3]
 8002ad8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	43da      	mvns	r2, r3
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685a      	ldr	r2, [r3, #4]
 8002ae8:	2380      	movs	r3, #128	; 0x80
 8002aea:	029b      	lsls	r3, r3, #10
 8002aec:	4013      	ands	r3, r2
 8002aee:	d003      	beq.n	8002af8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002af0:	693a      	ldr	r2, [r7, #16]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002af8:	4914      	ldr	r1, [pc, #80]	; (8002b4c <HAL_GPIO_Init+0x2b8>)
 8002afa:	2284      	movs	r2, #132	; 0x84
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002b00:	4a12      	ldr	r2, [pc, #72]	; (8002b4c <HAL_GPIO_Init+0x2b8>)
 8002b02:	2380      	movs	r3, #128	; 0x80
 8002b04:	58d3      	ldr	r3, [r2, r3]
 8002b06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	43da      	mvns	r2, r3
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	4013      	ands	r3, r2
 8002b10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685a      	ldr	r2, [r3, #4]
 8002b16:	2380      	movs	r3, #128	; 0x80
 8002b18:	025b      	lsls	r3, r3, #9
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	d003      	beq.n	8002b26 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002b1e:	693a      	ldr	r2, [r7, #16]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b26:	4909      	ldr	r1, [pc, #36]	; (8002b4c <HAL_GPIO_Init+0x2b8>)
 8002b28:	2280      	movs	r2, #128	; 0x80
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	3301      	adds	r3, #1
 8002b32:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	40da      	lsrs	r2, r3
 8002b3c:	1e13      	subs	r3, r2, #0
 8002b3e:	d000      	beq.n	8002b42 <HAL_GPIO_Init+0x2ae>
 8002b40:	e6b0      	b.n	80028a4 <HAL_GPIO_Init+0x10>
  }
}
 8002b42:	46c0      	nop			; (mov r8, r8)
 8002b44:	46c0      	nop			; (mov r8, r8)
 8002b46:	46bd      	mov	sp, r7
 8002b48:	b006      	add	sp, #24
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	40021800 	.word	0x40021800
 8002b50:	50000400 	.word	0x50000400
 8002b54:	50000800 	.word	0x50000800
 8002b58:	50000c00 	.word	0x50000c00

08002b5c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	000a      	movs	r2, r1
 8002b66:	1cbb      	adds	r3, r7, #2
 8002b68:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	1cba      	adds	r2, r7, #2
 8002b70:	8812      	ldrh	r2, [r2, #0]
 8002b72:	4013      	ands	r3, r2
 8002b74:	d004      	beq.n	8002b80 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002b76:	230f      	movs	r3, #15
 8002b78:	18fb      	adds	r3, r7, r3
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	701a      	strb	r2, [r3, #0]
 8002b7e:	e003      	b.n	8002b88 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b80:	230f      	movs	r3, #15
 8002b82:	18fb      	adds	r3, r7, r3
 8002b84:	2200      	movs	r2, #0
 8002b86:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002b88:	230f      	movs	r3, #15
 8002b8a:	18fb      	adds	r3, r7, r3
 8002b8c:	781b      	ldrb	r3, [r3, #0]
}
 8002b8e:	0018      	movs	r0, r3
 8002b90:	46bd      	mov	sp, r7
 8002b92:	b004      	add	sp, #16
 8002b94:	bd80      	pop	{r7, pc}

08002b96 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b082      	sub	sp, #8
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
 8002b9e:	0008      	movs	r0, r1
 8002ba0:	0011      	movs	r1, r2
 8002ba2:	1cbb      	adds	r3, r7, #2
 8002ba4:	1c02      	adds	r2, r0, #0
 8002ba6:	801a      	strh	r2, [r3, #0]
 8002ba8:	1c7b      	adds	r3, r7, #1
 8002baa:	1c0a      	adds	r2, r1, #0
 8002bac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002bae:	1c7b      	adds	r3, r7, #1
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d004      	beq.n	8002bc0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002bb6:	1cbb      	adds	r3, r7, #2
 8002bb8:	881a      	ldrh	r2, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002bbe:	e003      	b.n	8002bc8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002bc0:	1cbb      	adds	r3, r7, #2
 8002bc2:	881a      	ldrh	r2, [r3, #0]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002bc8:	46c0      	nop			; (mov r8, r8)
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	b002      	add	sp, #8
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d101      	bne.n	8002be2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e082      	b.n	8002ce8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2241      	movs	r2, #65	; 0x41
 8002be6:	5c9b      	ldrb	r3, [r3, r2]
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d107      	bne.n	8002bfe <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2240      	movs	r2, #64	; 0x40
 8002bf2:	2100      	movs	r1, #0
 8002bf4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	0018      	movs	r0, r3
 8002bfa:	f7ff fb43 	bl	8002284 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2241      	movs	r2, #65	; 0x41
 8002c02:	2124      	movs	r1, #36	; 0x24
 8002c04:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2101      	movs	r1, #1
 8002c12:	438a      	bics	r2, r1
 8002c14:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685a      	ldr	r2, [r3, #4]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4934      	ldr	r1, [pc, #208]	; (8002cf0 <HAL_I2C_Init+0x120>)
 8002c20:	400a      	ands	r2, r1
 8002c22:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	689a      	ldr	r2, [r3, #8]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4931      	ldr	r1, [pc, #196]	; (8002cf4 <HAL_I2C_Init+0x124>)
 8002c30:	400a      	ands	r2, r1
 8002c32:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d108      	bne.n	8002c4e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	689a      	ldr	r2, [r3, #8]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2180      	movs	r1, #128	; 0x80
 8002c46:	0209      	lsls	r1, r1, #8
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	609a      	str	r2, [r3, #8]
 8002c4c:	e007      	b.n	8002c5e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	689a      	ldr	r2, [r3, #8]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2184      	movs	r1, #132	; 0x84
 8002c58:	0209      	lsls	r1, r1, #8
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d104      	bne.n	8002c70 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2280      	movs	r2, #128	; 0x80
 8002c6c:	0112      	lsls	r2, r2, #4
 8002c6e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	685a      	ldr	r2, [r3, #4]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	491f      	ldr	r1, [pc, #124]	; (8002cf8 <HAL_I2C_Init+0x128>)
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	68da      	ldr	r2, [r3, #12]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	491a      	ldr	r1, [pc, #104]	; (8002cf4 <HAL_I2C_Init+0x124>)
 8002c8c:	400a      	ands	r2, r1
 8002c8e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	691a      	ldr	r2, [r3, #16]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	695b      	ldr	r3, [r3, #20]
 8002c98:	431a      	orrs	r2, r3
 8002c9a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	69d9      	ldr	r1, [r3, #28]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a1a      	ldr	r2, [r3, #32]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2101      	movs	r1, #1
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2241      	movs	r2, #65	; 0x41
 8002cd4:	2120      	movs	r1, #32
 8002cd6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2242      	movs	r2, #66	; 0x42
 8002ce2:	2100      	movs	r1, #0
 8002ce4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ce6:	2300      	movs	r3, #0
}
 8002ce8:	0018      	movs	r0, r3
 8002cea:	46bd      	mov	sp, r7
 8002cec:	b002      	add	sp, #8
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	f0ffffff 	.word	0xf0ffffff
 8002cf4:	ffff7fff 	.word	0xffff7fff
 8002cf8:	02008000 	.word	0x02008000

08002cfc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	699b      	ldr	r3, [r3, #24]
 8002d0a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d005      	beq.n	8002d28 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d20:	68ba      	ldr	r2, [r7, #8]
 8002d22:	68f9      	ldr	r1, [r7, #12]
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	4798      	blx	r3
  }
}
 8002d28:	46c0      	nop			; (mov r8, r8)
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	b004      	add	sp, #16
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b086      	sub	sp, #24
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	0a1b      	lsrs	r3, r3, #8
 8002d4c:	001a      	movs	r2, r3
 8002d4e:	2301      	movs	r3, #1
 8002d50:	4013      	ands	r3, r2
 8002d52:	d010      	beq.n	8002d76 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	09db      	lsrs	r3, r3, #7
 8002d58:	001a      	movs	r2, r3
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002d5e:	d00a      	beq.n	8002d76 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d64:	2201      	movs	r2, #1
 8002d66:	431a      	orrs	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2280      	movs	r2, #128	; 0x80
 8002d72:	0052      	lsls	r2, r2, #1
 8002d74:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	0a9b      	lsrs	r3, r3, #10
 8002d7a:	001a      	movs	r2, r3
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	4013      	ands	r3, r2
 8002d80:	d010      	beq.n	8002da4 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	09db      	lsrs	r3, r3, #7
 8002d86:	001a      	movs	r2, r3
 8002d88:	2301      	movs	r3, #1
 8002d8a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002d8c:	d00a      	beq.n	8002da4 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d92:	2208      	movs	r2, #8
 8002d94:	431a      	orrs	r2, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2280      	movs	r2, #128	; 0x80
 8002da0:	00d2      	lsls	r2, r2, #3
 8002da2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	0a5b      	lsrs	r3, r3, #9
 8002da8:	001a      	movs	r2, r3
 8002daa:	2301      	movs	r3, #1
 8002dac:	4013      	ands	r3, r2
 8002dae:	d010      	beq.n	8002dd2 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	09db      	lsrs	r3, r3, #7
 8002db4:	001a      	movs	r2, r3
 8002db6:	2301      	movs	r3, #1
 8002db8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002dba:	d00a      	beq.n	8002dd2 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc0:	2202      	movs	r2, #2
 8002dc2:	431a      	orrs	r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2280      	movs	r2, #128	; 0x80
 8002dce:	0092      	lsls	r2, r2, #2
 8002dd0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	220b      	movs	r2, #11
 8002ddc:	4013      	ands	r3, r2
 8002dde:	d005      	beq.n	8002dec <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8002de0:	68fa      	ldr	r2, [r7, #12]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	0011      	movs	r1, r2
 8002de6:	0018      	movs	r0, r3
 8002de8:	f000 fbd8 	bl	800359c <I2C_ITError>
  }
}
 8002dec:	46c0      	nop			; (mov r8, r8)
 8002dee:	46bd      	mov	sp, r7
 8002df0:	b006      	add	sp, #24
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002dfc:	46c0      	nop			; (mov r8, r8)
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	b002      	add	sp, #8
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002e0c:	46c0      	nop			; (mov r8, r8)
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	b002      	add	sp, #8
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	0008      	movs	r0, r1
 8002e1e:	0011      	movs	r1, r2
 8002e20:	1cfb      	adds	r3, r7, #3
 8002e22:	1c02      	adds	r2, r0, #0
 8002e24:	701a      	strb	r2, [r3, #0]
 8002e26:	003b      	movs	r3, r7
 8002e28:	1c0a      	adds	r2, r1, #0
 8002e2a:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002e2c:	46c0      	nop			; (mov r8, r8)
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	b002      	add	sp, #8
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002e3c:	46c0      	nop			; (mov r8, r8)
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	b002      	add	sp, #8
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002e4c:	46c0      	nop			; (mov r8, r8)
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	b002      	add	sp, #8
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002e5c:	46c0      	nop			; (mov r8, r8)
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	b002      	add	sp, #8
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b086      	sub	sp, #24
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e74:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2240      	movs	r2, #64	; 0x40
 8002e7e:	5c9b      	ldrb	r3, [r3, r2]
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d101      	bne.n	8002e88 <I2C_Slave_ISR_IT+0x24>
 8002e84:	2302      	movs	r3, #2
 8002e86:	e0fa      	b.n	800307e <I2C_Slave_ISR_IT+0x21a>
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2240      	movs	r2, #64	; 0x40
 8002e8c:	2101      	movs	r1, #1
 8002e8e:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	095b      	lsrs	r3, r3, #5
 8002e94:	001a      	movs	r2, r3
 8002e96:	2301      	movs	r3, #1
 8002e98:	4013      	ands	r3, r2
 8002e9a:	d00b      	beq.n	8002eb4 <I2C_Slave_ISR_IT+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	095b      	lsrs	r3, r3, #5
 8002ea0:	001a      	movs	r2, r3
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002ea6:	d005      	beq.n	8002eb4 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002ea8:	693a      	ldr	r2, [r7, #16]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	0011      	movs	r1, r2
 8002eae:	0018      	movs	r0, r3
 8002eb0:	f000 f9f6 	bl	80032a0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	091b      	lsrs	r3, r3, #4
 8002eb8:	001a      	movs	r2, r3
 8002eba:	2301      	movs	r3, #1
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	d054      	beq.n	8002f6a <I2C_Slave_ISR_IT+0x106>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	091b      	lsrs	r3, r3, #4
 8002ec4:	001a      	movs	r2, r3
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002eca:	d04e      	beq.n	8002f6a <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d12d      	bne.n	8002f32 <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2241      	movs	r2, #65	; 0x41
 8002eda:	5c9b      	ldrb	r3, [r3, r2]
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	2b28      	cmp	r3, #40	; 0x28
 8002ee0:	d10b      	bne.n	8002efa <I2C_Slave_ISR_IT+0x96>
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	2380      	movs	r3, #128	; 0x80
 8002ee6:	049b      	lsls	r3, r3, #18
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d106      	bne.n	8002efa <I2C_Slave_ISR_IT+0x96>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002eec:	693a      	ldr	r2, [r7, #16]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	0011      	movs	r1, r2
 8002ef2:	0018      	movs	r0, r3
 8002ef4:	f000 faf8 	bl	80034e8 <I2C_ITListenCplt>
 8002ef8:	e036      	b.n	8002f68 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2241      	movs	r2, #65	; 0x41
 8002efe:	5c9b      	ldrb	r3, [r3, r2]
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	2b29      	cmp	r3, #41	; 0x29
 8002f04:	d110      	bne.n	8002f28 <I2C_Slave_ISR_IT+0xc4>
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	4a5f      	ldr	r2, [pc, #380]	; (8003088 <I2C_Slave_ISR_IT+0x224>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d00c      	beq.n	8002f28 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2210      	movs	r2, #16
 8002f14:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	0018      	movs	r0, r3
 8002f1a:	f000 fc4a 	bl	80037b2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	0018      	movs	r0, r3
 8002f22:	f000 f957 	bl	80031d4 <I2C_ITSlaveSeqCplt>
 8002f26:	e01f      	b.n	8002f68 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2210      	movs	r2, #16
 8002f2e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002f30:	e09d      	b.n	800306e <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2210      	movs	r2, #16
 8002f38:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f3e:	2204      	movs	r2, #4
 8002f40:	431a      	orrs	r2, r3
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d005      	beq.n	8002f58 <I2C_Slave_ISR_IT+0xf4>
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	2380      	movs	r3, #128	; 0x80
 8002f50:	045b      	lsls	r3, r3, #17
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d000      	beq.n	8002f58 <I2C_Slave_ISR_IT+0xf4>
 8002f56:	e08a      	b.n	800306e <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	0011      	movs	r1, r2
 8002f60:	0018      	movs	r0, r3
 8002f62:	f000 fb1b 	bl	800359c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002f66:	e082      	b.n	800306e <I2C_Slave_ISR_IT+0x20a>
 8002f68:	e081      	b.n	800306e <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	089b      	lsrs	r3, r3, #2
 8002f6e:	001a      	movs	r2, r3
 8002f70:	2301      	movs	r3, #1
 8002f72:	4013      	ands	r3, r2
 8002f74:	d031      	beq.n	8002fda <I2C_Slave_ISR_IT+0x176>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	089b      	lsrs	r3, r3, #2
 8002f7a:	001a      	movs	r2, r3
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002f80:	d02b      	beq.n	8002fda <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d018      	beq.n	8002fbe <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f96:	b2d2      	uxtb	r2, r2
 8002f98:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9e:	1c5a      	adds	r2, r3, #1
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fa8:	3b01      	subs	r3, #1
 8002faa:	b29a      	uxth	r2, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	b29a      	uxth	r2, r3
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d154      	bne.n	8003072 <I2C_Slave_ISR_IT+0x20e>
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	4a2f      	ldr	r2, [pc, #188]	; (8003088 <I2C_Slave_ISR_IT+0x224>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d050      	beq.n	8003072 <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	0018      	movs	r0, r3
 8002fd4:	f000 f8fe 	bl	80031d4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002fd8:	e04b      	b.n	8003072 <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	08db      	lsrs	r3, r3, #3
 8002fde:	001a      	movs	r2, r3
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	d00c      	beq.n	8003000 <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	08db      	lsrs	r3, r3, #3
 8002fea:	001a      	movs	r2, r3
 8002fec:	2301      	movs	r3, #1
 8002fee:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002ff0:	d006      	beq.n	8003000 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002ff2:	693a      	ldr	r2, [r7, #16]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	0011      	movs	r1, r2
 8002ff8:	0018      	movs	r0, r3
 8002ffa:	f000 f847 	bl	800308c <I2C_ITAddrCplt>
 8002ffe:	e039      	b.n	8003074 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	085b      	lsrs	r3, r3, #1
 8003004:	001a      	movs	r2, r3
 8003006:	2301      	movs	r3, #1
 8003008:	4013      	ands	r3, r2
 800300a:	d033      	beq.n	8003074 <I2C_Slave_ISR_IT+0x210>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	085b      	lsrs	r3, r3, #1
 8003010:	001a      	movs	r2, r3
 8003012:	2301      	movs	r3, #1
 8003014:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003016:	d02d      	beq.n	8003074 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800301c:	b29b      	uxth	r3, r3
 800301e:	2b00      	cmp	r3, #0
 8003020:	d018      	beq.n	8003054 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003026:	781a      	ldrb	r2, [r3, #0]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003032:	1c5a      	adds	r2, r3, #1
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800303c:	b29b      	uxth	r3, r3
 800303e:	3b01      	subs	r3, #1
 8003040:	b29a      	uxth	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800304a:	3b01      	subs	r3, #1
 800304c:	b29a      	uxth	r2, r3
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	851a      	strh	r2, [r3, #40]	; 0x28
 8003052:	e00f      	b.n	8003074 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003054:	697a      	ldr	r2, [r7, #20]
 8003056:	2380      	movs	r3, #128	; 0x80
 8003058:	045b      	lsls	r3, r3, #17
 800305a:	429a      	cmp	r2, r3
 800305c:	d002      	beq.n	8003064 <I2C_Slave_ISR_IT+0x200>
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d107      	bne.n	8003074 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	0018      	movs	r0, r3
 8003068:	f000 f8b4 	bl	80031d4 <I2C_ITSlaveSeqCplt>
 800306c:	e002      	b.n	8003074 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 800306e:	46c0      	nop			; (mov r8, r8)
 8003070:	e000      	b.n	8003074 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 8003072:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2240      	movs	r2, #64	; 0x40
 8003078:	2100      	movs	r1, #0
 800307a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800307c:	2300      	movs	r3, #0
}
 800307e:	0018      	movs	r0, r3
 8003080:	46bd      	mov	sp, r7
 8003082:	b006      	add	sp, #24
 8003084:	bd80      	pop	{r7, pc}
 8003086:	46c0      	nop			; (mov r8, r8)
 8003088:	ffff0000 	.word	0xffff0000

0800308c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800308c:	b5b0      	push	{r4, r5, r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2241      	movs	r2, #65	; 0x41
 800309a:	5c9b      	ldrb	r3, [r3, r2]
 800309c:	b2db      	uxtb	r3, r3
 800309e:	001a      	movs	r2, r3
 80030a0:	2328      	movs	r3, #40	; 0x28
 80030a2:	4013      	ands	r3, r2
 80030a4:	2b28      	cmp	r3, #40	; 0x28
 80030a6:	d000      	beq.n	80030aa <I2C_ITAddrCplt+0x1e>
 80030a8:	e088      	b.n	80031bc <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	699b      	ldr	r3, [r3, #24]
 80030b0:	0c1b      	lsrs	r3, r3, #16
 80030b2:	b2da      	uxtb	r2, r3
 80030b4:	250f      	movs	r5, #15
 80030b6:	197b      	adds	r3, r7, r5
 80030b8:	2101      	movs	r1, #1
 80030ba:	400a      	ands	r2, r1
 80030bc:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	0c1b      	lsrs	r3, r3, #16
 80030c6:	b29a      	uxth	r2, r3
 80030c8:	200c      	movs	r0, #12
 80030ca:	183b      	adds	r3, r7, r0
 80030cc:	21fe      	movs	r1, #254	; 0xfe
 80030ce:	400a      	ands	r2, r1
 80030d0:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	b29a      	uxth	r2, r3
 80030da:	240a      	movs	r4, #10
 80030dc:	193b      	adds	r3, r7, r4
 80030de:	0592      	lsls	r2, r2, #22
 80030e0:	0d92      	lsrs	r2, r2, #22
 80030e2:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	b29a      	uxth	r2, r3
 80030ec:	2308      	movs	r3, #8
 80030ee:	18fb      	adds	r3, r7, r3
 80030f0:	21fe      	movs	r1, #254	; 0xfe
 80030f2:	400a      	ands	r2, r1
 80030f4:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d148      	bne.n	8003190 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80030fe:	0021      	movs	r1, r4
 8003100:	187b      	adds	r3, r7, r1
 8003102:	881b      	ldrh	r3, [r3, #0]
 8003104:	09db      	lsrs	r3, r3, #7
 8003106:	b29a      	uxth	r2, r3
 8003108:	183b      	adds	r3, r7, r0
 800310a:	881b      	ldrh	r3, [r3, #0]
 800310c:	4053      	eors	r3, r2
 800310e:	b29b      	uxth	r3, r3
 8003110:	001a      	movs	r2, r3
 8003112:	2306      	movs	r3, #6
 8003114:	4013      	ands	r3, r2
 8003116:	d120      	bne.n	800315a <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8003118:	183b      	adds	r3, r7, r0
 800311a:	187a      	adds	r2, r7, r1
 800311c:	8812      	ldrh	r2, [r2, #0]
 800311e:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003124:	1c5a      	adds	r2, r3, #1
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800312e:	2b02      	cmp	r3, #2
 8003130:	d14c      	bne.n	80031cc <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2208      	movs	r2, #8
 800313e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2240      	movs	r2, #64	; 0x40
 8003144:	2100      	movs	r1, #0
 8003146:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003148:	183b      	adds	r3, r7, r0
 800314a:	881a      	ldrh	r2, [r3, #0]
 800314c:	197b      	adds	r3, r7, r5
 800314e:	7819      	ldrb	r1, [r3, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	0018      	movs	r0, r3
 8003154:	f7ff fe5e 	bl	8002e14 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003158:	e038      	b.n	80031cc <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 800315a:	240c      	movs	r4, #12
 800315c:	193b      	adds	r3, r7, r4
 800315e:	2208      	movs	r2, #8
 8003160:	18ba      	adds	r2, r7, r2
 8003162:	8812      	ldrh	r2, [r2, #0]
 8003164:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003166:	2380      	movs	r3, #128	; 0x80
 8003168:	021a      	lsls	r2, r3, #8
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	0011      	movs	r1, r2
 800316e:	0018      	movs	r0, r3
 8003170:	f000 fb60 	bl	8003834 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2240      	movs	r2, #64	; 0x40
 8003178:	2100      	movs	r1, #0
 800317a:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800317c:	193b      	adds	r3, r7, r4
 800317e:	881a      	ldrh	r2, [r3, #0]
 8003180:	230f      	movs	r3, #15
 8003182:	18fb      	adds	r3, r7, r3
 8003184:	7819      	ldrb	r1, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	0018      	movs	r0, r3
 800318a:	f7ff fe43 	bl	8002e14 <HAL_I2C_AddrCallback>
}
 800318e:	e01d      	b.n	80031cc <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003190:	2380      	movs	r3, #128	; 0x80
 8003192:	021a      	lsls	r2, r3, #8
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	0011      	movs	r1, r2
 8003198:	0018      	movs	r0, r3
 800319a:	f000 fb4b 	bl	8003834 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2240      	movs	r2, #64	; 0x40
 80031a2:	2100      	movs	r1, #0
 80031a4:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80031a6:	230c      	movs	r3, #12
 80031a8:	18fb      	adds	r3, r7, r3
 80031aa:	881a      	ldrh	r2, [r3, #0]
 80031ac:	230f      	movs	r3, #15
 80031ae:	18fb      	adds	r3, r7, r3
 80031b0:	7819      	ldrb	r1, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	0018      	movs	r0, r3
 80031b6:	f7ff fe2d 	bl	8002e14 <HAL_I2C_AddrCallback>
}
 80031ba:	e007      	b.n	80031cc <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2208      	movs	r2, #8
 80031c2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2240      	movs	r2, #64	; 0x40
 80031c8:	2100      	movs	r1, #0
 80031ca:	5499      	strb	r1, [r3, r2]
}
 80031cc:	46c0      	nop			; (mov r8, r8)
 80031ce:	46bd      	mov	sp, r7
 80031d0:	b004      	add	sp, #16
 80031d2:	bdb0      	pop	{r4, r5, r7, pc}

080031d4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2242      	movs	r2, #66	; 0x42
 80031e8:	2100      	movs	r1, #0
 80031ea:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	0b9b      	lsrs	r3, r3, #14
 80031f0:	001a      	movs	r2, r3
 80031f2:	2301      	movs	r3, #1
 80031f4:	4013      	ands	r3, r2
 80031f6:	d008      	beq.n	800320a <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4925      	ldr	r1, [pc, #148]	; (8003298 <I2C_ITSlaveSeqCplt+0xc4>)
 8003204:	400a      	ands	r2, r1
 8003206:	601a      	str	r2, [r3, #0]
 8003208:	e00d      	b.n	8003226 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	0bdb      	lsrs	r3, r3, #15
 800320e:	001a      	movs	r2, r3
 8003210:	2301      	movs	r3, #1
 8003212:	4013      	ands	r3, r2
 8003214:	d007      	beq.n	8003226 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	491e      	ldr	r1, [pc, #120]	; (800329c <I2C_ITSlaveSeqCplt+0xc8>)
 8003222:	400a      	ands	r2, r1
 8003224:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2241      	movs	r2, #65	; 0x41
 800322a:	5c9b      	ldrb	r3, [r3, r2]
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2b29      	cmp	r3, #41	; 0x29
 8003230:	d114      	bne.n	800325c <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2241      	movs	r2, #65	; 0x41
 8003236:	2128      	movs	r1, #40	; 0x28
 8003238:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2221      	movs	r2, #33	; 0x21
 800323e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2101      	movs	r1, #1
 8003244:	0018      	movs	r0, r3
 8003246:	f000 faf5 	bl	8003834 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2240      	movs	r2, #64	; 0x40
 800324e:	2100      	movs	r1, #0
 8003250:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	0018      	movs	r0, r3
 8003256:	f7ff fdcd 	bl	8002df4 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800325a:	e019      	b.n	8003290 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2241      	movs	r2, #65	; 0x41
 8003260:	5c9b      	ldrb	r3, [r3, r2]
 8003262:	b2db      	uxtb	r3, r3
 8003264:	2b2a      	cmp	r3, #42	; 0x2a
 8003266:	d113      	bne.n	8003290 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2241      	movs	r2, #65	; 0x41
 800326c:	2128      	movs	r1, #40	; 0x28
 800326e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2222      	movs	r2, #34	; 0x22
 8003274:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2102      	movs	r1, #2
 800327a:	0018      	movs	r0, r3
 800327c:	f000 fada 	bl	8003834 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2240      	movs	r2, #64	; 0x40
 8003284:	2100      	movs	r1, #0
 8003286:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	0018      	movs	r0, r3
 800328c:	f7ff fdba 	bl	8002e04 <HAL_I2C_SlaveRxCpltCallback>
}
 8003290:	46c0      	nop			; (mov r8, r8)
 8003292:	46bd      	mov	sp, r7
 8003294:	b004      	add	sp, #16
 8003296:	bd80      	pop	{r7, pc}
 8003298:	ffffbfff 	.word	0xffffbfff
 800329c:	ffff7fff 	.word	0xffff7fff

080032a0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b086      	sub	sp, #24
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80032b6:	200f      	movs	r0, #15
 80032b8:	183b      	adds	r3, r7, r0
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	2141      	movs	r1, #65	; 0x41
 80032be:	5c52      	ldrb	r2, [r2, r1]
 80032c0:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2220      	movs	r2, #32
 80032c8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80032ca:	183b      	adds	r3, r7, r0
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	2b21      	cmp	r3, #33	; 0x21
 80032d0:	d003      	beq.n	80032da <I2C_ITSlaveCplt+0x3a>
 80032d2:	183b      	adds	r3, r7, r0
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	2b29      	cmp	r3, #41	; 0x29
 80032d8:	d109      	bne.n	80032ee <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80032da:	4a7d      	ldr	r2, [pc, #500]	; (80034d0 <I2C_ITSlaveCplt+0x230>)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	0011      	movs	r1, r2
 80032e0:	0018      	movs	r0, r3
 80032e2:	f000 faa7 	bl	8003834 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2221      	movs	r2, #33	; 0x21
 80032ea:	631a      	str	r2, [r3, #48]	; 0x30
 80032ec:	e011      	b.n	8003312 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80032ee:	220f      	movs	r2, #15
 80032f0:	18bb      	adds	r3, r7, r2
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	2b22      	cmp	r3, #34	; 0x22
 80032f6:	d003      	beq.n	8003300 <I2C_ITSlaveCplt+0x60>
 80032f8:	18bb      	adds	r3, r7, r2
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	2b2a      	cmp	r3, #42	; 0x2a
 80032fe:	d108      	bne.n	8003312 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003300:	4a74      	ldr	r2, [pc, #464]	; (80034d4 <I2C_ITSlaveCplt+0x234>)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	0011      	movs	r1, r2
 8003306:	0018      	movs	r0, r3
 8003308:	f000 fa94 	bl	8003834 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2222      	movs	r2, #34	; 0x22
 8003310:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	685a      	ldr	r2, [r3, #4]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2180      	movs	r1, #128	; 0x80
 800331e:	0209      	lsls	r1, r1, #8
 8003320:	430a      	orrs	r2, r1
 8003322:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	685a      	ldr	r2, [r3, #4]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	496a      	ldr	r1, [pc, #424]	; (80034d8 <I2C_ITSlaveCplt+0x238>)
 8003330:	400a      	ands	r2, r1
 8003332:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	0018      	movs	r0, r3
 8003338:	f000 fa3b 	bl	80037b2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	0b9b      	lsrs	r3, r3, #14
 8003340:	001a      	movs	r2, r3
 8003342:	2301      	movs	r3, #1
 8003344:	4013      	ands	r3, r2
 8003346:	d013      	beq.n	8003370 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4962      	ldr	r1, [pc, #392]	; (80034dc <I2C_ITSlaveCplt+0x23c>)
 8003354:	400a      	ands	r2, r1
 8003356:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800335c:	2b00      	cmp	r3, #0
 800335e:	d020      	beq.n	80033a2 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	b29a      	uxth	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800336e:	e018      	b.n	80033a2 <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	0bdb      	lsrs	r3, r3, #15
 8003374:	001a      	movs	r2, r3
 8003376:	2301      	movs	r3, #1
 8003378:	4013      	ands	r3, r2
 800337a:	d012      	beq.n	80033a2 <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4956      	ldr	r1, [pc, #344]	; (80034e0 <I2C_ITSlaveCplt+0x240>)
 8003388:	400a      	ands	r2, r1
 800338a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003390:	2b00      	cmp	r3, #0
 8003392:	d006      	beq.n	80033a2 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	b29a      	uxth	r2, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	089b      	lsrs	r3, r3, #2
 80033a6:	001a      	movs	r2, r3
 80033a8:	2301      	movs	r3, #1
 80033aa:	4013      	ands	r3, r2
 80033ac:	d020      	beq.n	80033f0 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	2204      	movs	r2, #4
 80033b2:	4393      	bics	r3, r2
 80033b4:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c0:	b2d2      	uxtb	r2, r2
 80033c2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c8:	1c5a      	adds	r2, r3, #1
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d00c      	beq.n	80033f0 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033da:	3b01      	subs	r3, #1
 80033dc:	b29a      	uxth	r2, r3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	3b01      	subs	r3, #1
 80033ea:	b29a      	uxth	r2, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d005      	beq.n	8003406 <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033fe:	2204      	movs	r2, #4
 8003400:	431a      	orrs	r2, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2242      	movs	r2, #66	; 0x42
 800340a:	2100      	movs	r1, #0
 800340c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003418:	2b00      	cmp	r3, #0
 800341a:	d013      	beq.n	8003444 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	0011      	movs	r1, r2
 8003424:	0018      	movs	r0, r3
 8003426:	f000 f8b9 	bl	800359c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2241      	movs	r2, #65	; 0x41
 800342e:	5c9b      	ldrb	r3, [r3, r2]
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b28      	cmp	r3, #40	; 0x28
 8003434:	d147      	bne.n	80034c6 <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003436:	697a      	ldr	r2, [r7, #20]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	0011      	movs	r1, r2
 800343c:	0018      	movs	r0, r3
 800343e:	f000 f853 	bl	80034e8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003442:	e040      	b.n	80034c6 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003448:	4a26      	ldr	r2, [pc, #152]	; (80034e4 <I2C_ITSlaveCplt+0x244>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d016      	beq.n	800347c <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	0018      	movs	r0, r3
 8003452:	f7ff febf 	bl	80031d4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a22      	ldr	r2, [pc, #136]	; (80034e4 <I2C_ITSlaveCplt+0x244>)
 800345a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2241      	movs	r2, #65	; 0x41
 8003460:	2120      	movs	r1, #32
 8003462:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2240      	movs	r2, #64	; 0x40
 800346e:	2100      	movs	r1, #0
 8003470:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	0018      	movs	r0, r3
 8003476:	f7ff fcdd 	bl	8002e34 <HAL_I2C_ListenCpltCallback>
}
 800347a:	e024      	b.n	80034c6 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2241      	movs	r2, #65	; 0x41
 8003480:	5c9b      	ldrb	r3, [r3, r2]
 8003482:	b2db      	uxtb	r3, r3
 8003484:	2b22      	cmp	r3, #34	; 0x22
 8003486:	d10f      	bne.n	80034a8 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2241      	movs	r2, #65	; 0x41
 800348c:	2120      	movs	r1, #32
 800348e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2240      	movs	r2, #64	; 0x40
 800349a:	2100      	movs	r1, #0
 800349c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	0018      	movs	r0, r3
 80034a2:	f7ff fcaf 	bl	8002e04 <HAL_I2C_SlaveRxCpltCallback>
}
 80034a6:	e00e      	b.n	80034c6 <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2241      	movs	r2, #65	; 0x41
 80034ac:	2120      	movs	r1, #32
 80034ae:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2240      	movs	r2, #64	; 0x40
 80034ba:	2100      	movs	r1, #0
 80034bc:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	0018      	movs	r0, r3
 80034c2:	f7ff fc97 	bl	8002df4 <HAL_I2C_SlaveTxCpltCallback>
}
 80034c6:	46c0      	nop			; (mov r8, r8)
 80034c8:	46bd      	mov	sp, r7
 80034ca:	b006      	add	sp, #24
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	46c0      	nop			; (mov r8, r8)
 80034d0:	00008001 	.word	0x00008001
 80034d4:	00008002 	.word	0x00008002
 80034d8:	fe00e800 	.word	0xfe00e800
 80034dc:	ffffbfff 	.word	0xffffbfff
 80034e0:	ffff7fff 	.word	0xffff7fff
 80034e4:	ffff0000 	.word	0xffff0000

080034e8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a27      	ldr	r2, [pc, #156]	; (8003594 <I2C_ITListenCplt+0xac>)
 80034f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2241      	movs	r2, #65	; 0x41
 8003502:	2120      	movs	r1, #32
 8003504:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2242      	movs	r2, #66	; 0x42
 800350a:	2100      	movs	r1, #0
 800350c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	089b      	lsrs	r3, r3, #2
 8003518:	001a      	movs	r2, r3
 800351a:	2301      	movs	r3, #1
 800351c:	4013      	ands	r3, r2
 800351e:	d022      	beq.n	8003566 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352a:	b2d2      	uxtb	r2, r2
 800352c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003532:	1c5a      	adds	r2, r3, #1
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800353c:	2b00      	cmp	r3, #0
 800353e:	d012      	beq.n	8003566 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003544:	3b01      	subs	r3, #1
 8003546:	b29a      	uxth	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003550:	b29b      	uxth	r3, r3
 8003552:	3b01      	subs	r3, #1
 8003554:	b29a      	uxth	r2, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355e:	2204      	movs	r2, #4
 8003560:	431a      	orrs	r2, r3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003566:	4a0c      	ldr	r2, [pc, #48]	; (8003598 <I2C_ITListenCplt+0xb0>)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	0011      	movs	r1, r2
 800356c:	0018      	movs	r0, r3
 800356e:	f000 f961 	bl	8003834 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2210      	movs	r2, #16
 8003578:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2240      	movs	r2, #64	; 0x40
 800357e:	2100      	movs	r1, #0
 8003580:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	0018      	movs	r0, r3
 8003586:	f7ff fc55 	bl	8002e34 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800358a:	46c0      	nop			; (mov r8, r8)
 800358c:	46bd      	mov	sp, r7
 800358e:	b002      	add	sp, #8
 8003590:	bd80      	pop	{r7, pc}
 8003592:	46c0      	nop			; (mov r8, r8)
 8003594:	ffff0000 	.word	0xffff0000
 8003598:	00008003 	.word	0x00008003

0800359c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80035a6:	200f      	movs	r0, #15
 80035a8:	183b      	adds	r3, r7, r0
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	2141      	movs	r1, #65	; 0x41
 80035ae:	5c52      	ldrb	r2, [r2, r1]
 80035b0:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2242      	movs	r2, #66	; 0x42
 80035b6:	2100      	movs	r1, #0
 80035b8:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a62      	ldr	r2, [pc, #392]	; (8003748 <I2C_ITError+0x1ac>)
 80035be:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	431a      	orrs	r2, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80035d2:	183b      	adds	r3, r7, r0
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	2b28      	cmp	r3, #40	; 0x28
 80035d8:	d007      	beq.n	80035ea <I2C_ITError+0x4e>
 80035da:	183b      	adds	r3, r7, r0
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	2b29      	cmp	r3, #41	; 0x29
 80035e0:	d003      	beq.n	80035ea <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80035e2:	183b      	adds	r3, r7, r0
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	2b2a      	cmp	r3, #42	; 0x2a
 80035e8:	d10c      	bne.n	8003604 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2103      	movs	r1, #3
 80035ee:	0018      	movs	r0, r3
 80035f0:	f000 f920 	bl	8003834 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2241      	movs	r2, #65	; 0x41
 80035f8:	2128      	movs	r1, #40	; 0x28
 80035fa:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a53      	ldr	r2, [pc, #332]	; (800374c <I2C_ITError+0x1b0>)
 8003600:	635a      	str	r2, [r3, #52]	; 0x34
 8003602:	e012      	b.n	800362a <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003604:	4a52      	ldr	r2, [pc, #328]	; (8003750 <I2C_ITError+0x1b4>)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	0011      	movs	r1, r2
 800360a:	0018      	movs	r0, r3
 800360c:	f000 f912 	bl	8003834 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2241      	movs	r2, #65	; 0x41
 8003614:	5c9b      	ldrb	r3, [r3, r2]
 8003616:	b2db      	uxtb	r3, r3
 8003618:	2b60      	cmp	r3, #96	; 0x60
 800361a:	d003      	beq.n	8003624 <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2241      	movs	r2, #65	; 0x41
 8003620:	2120      	movs	r1, #32
 8003622:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362e:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003634:	2b00      	cmp	r3, #0
 8003636:	d03b      	beq.n	80036b0 <I2C_ITError+0x114>
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	2b11      	cmp	r3, #17
 800363c:	d002      	beq.n	8003644 <I2C_ITError+0xa8>
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	2b21      	cmp	r3, #33	; 0x21
 8003642:	d135      	bne.n	80036b0 <I2C_ITError+0x114>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	2380      	movs	r3, #128	; 0x80
 800364c:	01db      	lsls	r3, r3, #7
 800364e:	401a      	ands	r2, r3
 8003650:	2380      	movs	r3, #128	; 0x80
 8003652:	01db      	lsls	r3, r3, #7
 8003654:	429a      	cmp	r2, r3
 8003656:	d107      	bne.n	8003668 <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	493c      	ldr	r1, [pc, #240]	; (8003754 <I2C_ITError+0x1b8>)
 8003664:	400a      	ands	r2, r1
 8003666:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800366c:	0018      	movs	r0, r3
 800366e:	f7ff f905 	bl	800287c <HAL_DMA_GetState>
 8003672:	0003      	movs	r3, r0
 8003674:	2b01      	cmp	r3, #1
 8003676:	d016      	beq.n	80036a6 <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800367c:	4a36      	ldr	r2, [pc, #216]	; (8003758 <I2C_ITError+0x1bc>)
 800367e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2240      	movs	r2, #64	; 0x40
 8003684:	2100      	movs	r1, #0
 8003686:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800368c:	0018      	movs	r0, r3
 800368e:	f7ff f88b 	bl	80027a8 <HAL_DMA_Abort_IT>
 8003692:	1e03      	subs	r3, r0, #0
 8003694:	d051      	beq.n	800373a <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800369a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a0:	0018      	movs	r0, r3
 80036a2:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80036a4:	e049      	b.n	800373a <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	0018      	movs	r0, r3
 80036aa:	f000 f859 	bl	8003760 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80036ae:	e044      	b.n	800373a <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d03b      	beq.n	8003730 <I2C_ITError+0x194>
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	2b12      	cmp	r3, #18
 80036bc:	d002      	beq.n	80036c4 <I2C_ITError+0x128>
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	2b22      	cmp	r3, #34	; 0x22
 80036c2:	d135      	bne.n	8003730 <I2C_ITError+0x194>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	2380      	movs	r3, #128	; 0x80
 80036cc:	021b      	lsls	r3, r3, #8
 80036ce:	401a      	ands	r2, r3
 80036d0:	2380      	movs	r3, #128	; 0x80
 80036d2:	021b      	lsls	r3, r3, #8
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d107      	bne.n	80036e8 <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	491e      	ldr	r1, [pc, #120]	; (800375c <I2C_ITError+0x1c0>)
 80036e4:	400a      	ands	r2, r1
 80036e6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ec:	0018      	movs	r0, r3
 80036ee:	f7ff f8c5 	bl	800287c <HAL_DMA_GetState>
 80036f2:	0003      	movs	r3, r0
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d016      	beq.n	8003726 <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036fc:	4a16      	ldr	r2, [pc, #88]	; (8003758 <I2C_ITError+0x1bc>)
 80036fe:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2240      	movs	r2, #64	; 0x40
 8003704:	2100      	movs	r1, #0
 8003706:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800370c:	0018      	movs	r0, r3
 800370e:	f7ff f84b 	bl	80027a8 <HAL_DMA_Abort_IT>
 8003712:	1e03      	subs	r3, r0, #0
 8003714:	d013      	beq.n	800373e <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800371a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003720:	0018      	movs	r0, r3
 8003722:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003724:	e00b      	b.n	800373e <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	0018      	movs	r0, r3
 800372a:	f000 f819 	bl	8003760 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800372e:	e006      	b.n	800373e <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	0018      	movs	r0, r3
 8003734:	f000 f814 	bl	8003760 <I2C_TreatErrorCallback>
  }
}
 8003738:	e002      	b.n	8003740 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800373a:	46c0      	nop			; (mov r8, r8)
 800373c:	e000      	b.n	8003740 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800373e:	46c0      	nop			; (mov r8, r8)
}
 8003740:	46c0      	nop			; (mov r8, r8)
 8003742:	46bd      	mov	sp, r7
 8003744:	b004      	add	sp, #16
 8003746:	bd80      	pop	{r7, pc}
 8003748:	ffff0000 	.word	0xffff0000
 800374c:	08002e65 	.word	0x08002e65
 8003750:	00008003 	.word	0x00008003
 8003754:	ffffbfff 	.word	0xffffbfff
 8003758:	080037f7 	.word	0x080037f7
 800375c:	ffff7fff 	.word	0xffff7fff

08003760 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2241      	movs	r2, #65	; 0x41
 800376c:	5c9b      	ldrb	r3, [r3, r2]
 800376e:	b2db      	uxtb	r3, r3
 8003770:	2b60      	cmp	r3, #96	; 0x60
 8003772:	d10f      	bne.n	8003794 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2241      	movs	r2, #65	; 0x41
 8003778:	2120      	movs	r1, #32
 800377a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2240      	movs	r2, #64	; 0x40
 8003786:	2100      	movs	r1, #0
 8003788:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	0018      	movs	r0, r3
 800378e:	f7ff fb61 	bl	8002e54 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003792:	e00a      	b.n	80037aa <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2240      	movs	r2, #64	; 0x40
 800379e:	2100      	movs	r1, #0
 80037a0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	0018      	movs	r0, r3
 80037a6:	f7ff fb4d 	bl	8002e44 <HAL_I2C_ErrorCallback>
}
 80037aa:	46c0      	nop			; (mov r8, r8)
 80037ac:	46bd      	mov	sp, r7
 80037ae:	b002      	add	sp, #8
 80037b0:	bd80      	pop	{r7, pc}

080037b2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80037b2:	b580      	push	{r7, lr}
 80037b4:	b082      	sub	sp, #8
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	699b      	ldr	r3, [r3, #24]
 80037c0:	2202      	movs	r2, #2
 80037c2:	4013      	ands	r3, r2
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d103      	bne.n	80037d0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2200      	movs	r2, #0
 80037ce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	2201      	movs	r2, #1
 80037d8:	4013      	ands	r3, r2
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d007      	beq.n	80037ee <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	699a      	ldr	r2, [r3, #24]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2101      	movs	r1, #1
 80037ea:	430a      	orrs	r2, r1
 80037ec:	619a      	str	r2, [r3, #24]
  }
}
 80037ee:	46c0      	nop			; (mov r8, r8)
 80037f0:	46bd      	mov	sp, r7
 80037f2:	b002      	add	sp, #8
 80037f4:	bd80      	pop	{r7, pc}

080037f6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80037f6:	b580      	push	{r7, lr}
 80037f8:	b084      	sub	sp, #16
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003802:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003808:	2b00      	cmp	r3, #0
 800380a:	d003      	beq.n	8003814 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003810:	2200      	movs	r2, #0
 8003812:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003818:	2b00      	cmp	r3, #0
 800381a:	d003      	beq.n	8003824 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003820:	2200      	movs	r2, #0
 8003822:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	0018      	movs	r0, r3
 8003828:	f7ff ff9a 	bl	8003760 <I2C_TreatErrorCallback>
}
 800382c:	46c0      	nop			; (mov r8, r8)
 800382e:	46bd      	mov	sp, r7
 8003830:	b004      	add	sp, #16
 8003832:	bd80      	pop	{r7, pc}

08003834 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	000a      	movs	r2, r1
 800383e:	1cbb      	adds	r3, r7, #2
 8003840:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8003842:	2300      	movs	r3, #0
 8003844:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003846:	1cbb      	adds	r3, r7, #2
 8003848:	881b      	ldrh	r3, [r3, #0]
 800384a:	2201      	movs	r2, #1
 800384c:	4013      	ands	r3, r2
 800384e:	d010      	beq.n	8003872 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2242      	movs	r2, #66	; 0x42
 8003854:	4313      	orrs	r3, r2
 8003856:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2241      	movs	r2, #65	; 0x41
 800385c:	5c9b      	ldrb	r3, [r3, r2]
 800385e:	b2db      	uxtb	r3, r3
 8003860:	001a      	movs	r2, r3
 8003862:	2328      	movs	r3, #40	; 0x28
 8003864:	4013      	ands	r3, r2
 8003866:	2b28      	cmp	r3, #40	; 0x28
 8003868:	d003      	beq.n	8003872 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	22b0      	movs	r2, #176	; 0xb0
 800386e:	4313      	orrs	r3, r2
 8003870:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003872:	1cbb      	adds	r3, r7, #2
 8003874:	881b      	ldrh	r3, [r3, #0]
 8003876:	2202      	movs	r2, #2
 8003878:	4013      	ands	r3, r2
 800387a:	d010      	beq.n	800389e <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2244      	movs	r2, #68	; 0x44
 8003880:	4313      	orrs	r3, r2
 8003882:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2241      	movs	r2, #65	; 0x41
 8003888:	5c9b      	ldrb	r3, [r3, r2]
 800388a:	b2db      	uxtb	r3, r3
 800388c:	001a      	movs	r2, r3
 800388e:	2328      	movs	r3, #40	; 0x28
 8003890:	4013      	ands	r3, r2
 8003892:	2b28      	cmp	r3, #40	; 0x28
 8003894:	d003      	beq.n	800389e <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	22b0      	movs	r2, #176	; 0xb0
 800389a:	4313      	orrs	r3, r2
 800389c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800389e:	1cbb      	adds	r3, r7, #2
 80038a0:	2200      	movs	r2, #0
 80038a2:	5e9b      	ldrsh	r3, [r3, r2]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	da03      	bge.n	80038b0 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	22b8      	movs	r2, #184	; 0xb8
 80038ac:	4313      	orrs	r3, r2
 80038ae:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80038b0:	1cbb      	adds	r3, r7, #2
 80038b2:	881b      	ldrh	r3, [r3, #0]
 80038b4:	2b10      	cmp	r3, #16
 80038b6:	d103      	bne.n	80038c0 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2290      	movs	r2, #144	; 0x90
 80038bc:	4313      	orrs	r3, r2
 80038be:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80038c0:	1cbb      	adds	r3, r7, #2
 80038c2:	881b      	ldrh	r3, [r3, #0]
 80038c4:	2b20      	cmp	r3, #32
 80038c6:	d103      	bne.n	80038d0 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2220      	movs	r2, #32
 80038cc:	4313      	orrs	r3, r2
 80038ce:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80038d0:	1cbb      	adds	r3, r7, #2
 80038d2:	881b      	ldrh	r3, [r3, #0]
 80038d4:	2b40      	cmp	r3, #64	; 0x40
 80038d6:	d103      	bne.n	80038e0 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2240      	movs	r2, #64	; 0x40
 80038dc:	4313      	orrs	r3, r2
 80038de:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	43d9      	mvns	r1, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	400a      	ands	r2, r1
 80038f0:	601a      	str	r2, [r3, #0]
}
 80038f2:	46c0      	nop			; (mov r8, r8)
 80038f4:	46bd      	mov	sp, r7
 80038f6:	b004      	add	sp, #16
 80038f8:	bd80      	pop	{r7, pc}
	...

080038fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2241      	movs	r2, #65	; 0x41
 800390a:	5c9b      	ldrb	r3, [r3, r2]
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b20      	cmp	r3, #32
 8003910:	d138      	bne.n	8003984 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2240      	movs	r2, #64	; 0x40
 8003916:	5c9b      	ldrb	r3, [r3, r2]
 8003918:	2b01      	cmp	r3, #1
 800391a:	d101      	bne.n	8003920 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800391c:	2302      	movs	r3, #2
 800391e:	e032      	b.n	8003986 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2240      	movs	r2, #64	; 0x40
 8003924:	2101      	movs	r1, #1
 8003926:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2241      	movs	r2, #65	; 0x41
 800392c:	2124      	movs	r1, #36	; 0x24
 800392e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2101      	movs	r1, #1
 800393c:	438a      	bics	r2, r1
 800393e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4911      	ldr	r1, [pc, #68]	; (8003990 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800394c:	400a      	ands	r2, r1
 800394e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	6819      	ldr	r1, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	683a      	ldr	r2, [r7, #0]
 800395c:	430a      	orrs	r2, r1
 800395e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2101      	movs	r1, #1
 800396c:	430a      	orrs	r2, r1
 800396e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2241      	movs	r2, #65	; 0x41
 8003974:	2120      	movs	r1, #32
 8003976:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2240      	movs	r2, #64	; 0x40
 800397c:	2100      	movs	r1, #0
 800397e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003980:	2300      	movs	r3, #0
 8003982:	e000      	b.n	8003986 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003984:	2302      	movs	r3, #2
  }
}
 8003986:	0018      	movs	r0, r3
 8003988:	46bd      	mov	sp, r7
 800398a:	b002      	add	sp, #8
 800398c:	bd80      	pop	{r7, pc}
 800398e:	46c0      	nop			; (mov r8, r8)
 8003990:	ffffefff 	.word	0xffffefff

08003994 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2241      	movs	r2, #65	; 0x41
 80039a2:	5c9b      	ldrb	r3, [r3, r2]
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	2b20      	cmp	r3, #32
 80039a8:	d139      	bne.n	8003a1e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2240      	movs	r2, #64	; 0x40
 80039ae:	5c9b      	ldrb	r3, [r3, r2]
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d101      	bne.n	80039b8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80039b4:	2302      	movs	r3, #2
 80039b6:	e033      	b.n	8003a20 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2240      	movs	r2, #64	; 0x40
 80039bc:	2101      	movs	r1, #1
 80039be:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2241      	movs	r2, #65	; 0x41
 80039c4:	2124      	movs	r1, #36	; 0x24
 80039c6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2101      	movs	r1, #1
 80039d4:	438a      	bics	r2, r1
 80039d6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	4a11      	ldr	r2, [pc, #68]	; (8003a28 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80039e4:	4013      	ands	r3, r2
 80039e6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	021b      	lsls	r3, r3, #8
 80039ec:	68fa      	ldr	r2, [r7, #12]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2101      	movs	r1, #1
 8003a06:	430a      	orrs	r2, r1
 8003a08:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2241      	movs	r2, #65	; 0x41
 8003a0e:	2120      	movs	r1, #32
 8003a10:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2240      	movs	r2, #64	; 0x40
 8003a16:	2100      	movs	r1, #0
 8003a18:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	e000      	b.n	8003a20 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003a1e:	2302      	movs	r3, #2
  }
}
 8003a20:	0018      	movs	r0, r3
 8003a22:	46bd      	mov	sp, r7
 8003a24:	b004      	add	sp, #16
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	fffff0ff 	.word	0xfffff0ff

08003a2c <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d101      	bne.n	8003a3e <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e03d      	b.n	8003aba <HAL_IWDG_Init+0x8e>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a20      	ldr	r2, [pc, #128]	; (8003ac4 <HAL_IWDG_Init+0x98>)
 8003a44:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a1f      	ldr	r2, [pc, #124]	; (8003ac8 <HAL_IWDG_Init+0x9c>)
 8003a4c:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	6852      	ldr	r2, [r2, #4]
 8003a56:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	6892      	ldr	r2, [r2, #8]
 8003a60:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8003a62:	f7fe fd77 	bl	8002554 <HAL_GetTick>
 8003a66:	0003      	movs	r3, r0
 8003a68:	60fb      	str	r3, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003a6a:	e00e      	b.n	8003a8a <HAL_IWDG_Init+0x5e>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8003a6c:	f7fe fd72 	bl	8002554 <HAL_GetTick>
 8003a70:	0002      	movs	r2, r0
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	2b31      	cmp	r3, #49	; 0x31
 8003a78:	d907      	bls.n	8003a8a <HAL_IWDG_Init+0x5e>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	2207      	movs	r2, #7
 8003a82:	4013      	ands	r3, r2
 8003a84:	d001      	beq.n	8003a8a <HAL_IWDG_Init+0x5e>
      {
        return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e017      	b.n	8003aba <HAL_IWDG_Init+0x8e>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	2207      	movs	r2, #7
 8003a92:	4013      	ands	r3, r2
 8003a94:	d1ea      	bne.n	8003a6c <HAL_IWDG_Init+0x40>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	691a      	ldr	r2, [r3, #16]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d005      	beq.n	8003ab0 <HAL_IWDG_Init+0x84>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	68d2      	ldr	r2, [r2, #12]
 8003aac:	611a      	str	r2, [r3, #16]
 8003aae:	e003      	b.n	8003ab8 <HAL_IWDG_Init+0x8c>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a05      	ldr	r2, [pc, #20]	; (8003acc <HAL_IWDG_Init+0xa0>)
 8003ab6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	0018      	movs	r0, r3
 8003abc:	46bd      	mov	sp, r7
 8003abe:	b004      	add	sp, #16
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	46c0      	nop			; (mov r8, r8)
 8003ac4:	0000cccc 	.word	0x0000cccc
 8003ac8:	00005555 	.word	0x00005555
 8003acc:	0000aaaa 	.word	0x0000aaaa

08003ad0 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a03      	ldr	r2, [pc, #12]	; (8003aec <HAL_IWDG_Refresh+0x1c>)
 8003ade:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	0018      	movs	r0, r3
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	b002      	add	sp, #8
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	46c0      	nop			; (mov r8, r8)
 8003aec:	0000aaaa 	.word	0x0000aaaa

08003af0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003af8:	4b19      	ldr	r3, [pc, #100]	; (8003b60 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a19      	ldr	r2, [pc, #100]	; (8003b64 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003afe:	4013      	ands	r3, r2
 8003b00:	0019      	movs	r1, r3
 8003b02:	4b17      	ldr	r3, [pc, #92]	; (8003b60 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	430a      	orrs	r2, r1
 8003b08:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	2380      	movs	r3, #128	; 0x80
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d11f      	bne.n	8003b54 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003b14:	4b14      	ldr	r3, [pc, #80]	; (8003b68 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	0013      	movs	r3, r2
 8003b1a:	005b      	lsls	r3, r3, #1
 8003b1c:	189b      	adds	r3, r3, r2
 8003b1e:	005b      	lsls	r3, r3, #1
 8003b20:	4912      	ldr	r1, [pc, #72]	; (8003b6c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003b22:	0018      	movs	r0, r3
 8003b24:	f7fc faec 	bl	8000100 <__udivsi3>
 8003b28:	0003      	movs	r3, r0
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b2e:	e008      	b.n	8003b42 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d003      	beq.n	8003b3e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	3b01      	subs	r3, #1
 8003b3a:	60fb      	str	r3, [r7, #12]
 8003b3c:	e001      	b.n	8003b42 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e009      	b.n	8003b56 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b42:	4b07      	ldr	r3, [pc, #28]	; (8003b60 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003b44:	695a      	ldr	r2, [r3, #20]
 8003b46:	2380      	movs	r3, #128	; 0x80
 8003b48:	00db      	lsls	r3, r3, #3
 8003b4a:	401a      	ands	r2, r3
 8003b4c:	2380      	movs	r3, #128	; 0x80
 8003b4e:	00db      	lsls	r3, r3, #3
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d0ed      	beq.n	8003b30 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	0018      	movs	r0, r3
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	b004      	add	sp, #16
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	46c0      	nop			; (mov r8, r8)
 8003b60:	40007000 	.word	0x40007000
 8003b64:	fffff9ff 	.word	0xfffff9ff
 8003b68:	2000013c 	.word	0x2000013c
 8003b6c:	000f4240 	.word	0x000f4240

08003b70 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b088      	sub	sp, #32
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d101      	bne.n	8003b82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e2f3      	b.n	800416a <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2201      	movs	r2, #1
 8003b88:	4013      	ands	r3, r2
 8003b8a:	d100      	bne.n	8003b8e <HAL_RCC_OscConfig+0x1e>
 8003b8c:	e07c      	b.n	8003c88 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b8e:	4bc3      	ldr	r3, [pc, #780]	; (8003e9c <HAL_RCC_OscConfig+0x32c>)
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	2238      	movs	r2, #56	; 0x38
 8003b94:	4013      	ands	r3, r2
 8003b96:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b98:	4bc0      	ldr	r3, [pc, #768]	; (8003e9c <HAL_RCC_OscConfig+0x32c>)
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	2203      	movs	r2, #3
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	2b10      	cmp	r3, #16
 8003ba6:	d102      	bne.n	8003bae <HAL_RCC_OscConfig+0x3e>
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	2b03      	cmp	r3, #3
 8003bac:	d002      	beq.n	8003bb4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	2b08      	cmp	r3, #8
 8003bb2:	d10b      	bne.n	8003bcc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bb4:	4bb9      	ldr	r3, [pc, #740]	; (8003e9c <HAL_RCC_OscConfig+0x32c>)
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	2380      	movs	r3, #128	; 0x80
 8003bba:	029b      	lsls	r3, r3, #10
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	d062      	beq.n	8003c86 <HAL_RCC_OscConfig+0x116>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d15e      	bne.n	8003c86 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e2ce      	b.n	800416a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685a      	ldr	r2, [r3, #4]
 8003bd0:	2380      	movs	r3, #128	; 0x80
 8003bd2:	025b      	lsls	r3, r3, #9
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d107      	bne.n	8003be8 <HAL_RCC_OscConfig+0x78>
 8003bd8:	4bb0      	ldr	r3, [pc, #704]	; (8003e9c <HAL_RCC_OscConfig+0x32c>)
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	4baf      	ldr	r3, [pc, #700]	; (8003e9c <HAL_RCC_OscConfig+0x32c>)
 8003bde:	2180      	movs	r1, #128	; 0x80
 8003be0:	0249      	lsls	r1, r1, #9
 8003be2:	430a      	orrs	r2, r1
 8003be4:	601a      	str	r2, [r3, #0]
 8003be6:	e020      	b.n	8003c2a <HAL_RCC_OscConfig+0xba>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685a      	ldr	r2, [r3, #4]
 8003bec:	23a0      	movs	r3, #160	; 0xa0
 8003bee:	02db      	lsls	r3, r3, #11
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d10e      	bne.n	8003c12 <HAL_RCC_OscConfig+0xa2>
 8003bf4:	4ba9      	ldr	r3, [pc, #676]	; (8003e9c <HAL_RCC_OscConfig+0x32c>)
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	4ba8      	ldr	r3, [pc, #672]	; (8003e9c <HAL_RCC_OscConfig+0x32c>)
 8003bfa:	2180      	movs	r1, #128	; 0x80
 8003bfc:	02c9      	lsls	r1, r1, #11
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	601a      	str	r2, [r3, #0]
 8003c02:	4ba6      	ldr	r3, [pc, #664]	; (8003e9c <HAL_RCC_OscConfig+0x32c>)
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	4ba5      	ldr	r3, [pc, #660]	; (8003e9c <HAL_RCC_OscConfig+0x32c>)
 8003c08:	2180      	movs	r1, #128	; 0x80
 8003c0a:	0249      	lsls	r1, r1, #9
 8003c0c:	430a      	orrs	r2, r1
 8003c0e:	601a      	str	r2, [r3, #0]
 8003c10:	e00b      	b.n	8003c2a <HAL_RCC_OscConfig+0xba>
 8003c12:	4ba2      	ldr	r3, [pc, #648]	; (8003e9c <HAL_RCC_OscConfig+0x32c>)
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	4ba1      	ldr	r3, [pc, #644]	; (8003e9c <HAL_RCC_OscConfig+0x32c>)
 8003c18:	49a1      	ldr	r1, [pc, #644]	; (8003ea0 <HAL_RCC_OscConfig+0x330>)
 8003c1a:	400a      	ands	r2, r1
 8003c1c:	601a      	str	r2, [r3, #0]
 8003c1e:	4b9f      	ldr	r3, [pc, #636]	; (8003e9c <HAL_RCC_OscConfig+0x32c>)
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	4b9e      	ldr	r3, [pc, #632]	; (8003e9c <HAL_RCC_OscConfig+0x32c>)
 8003c24:	499f      	ldr	r1, [pc, #636]	; (8003ea4 <HAL_RCC_OscConfig+0x334>)
 8003c26:	400a      	ands	r2, r1
 8003c28:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d014      	beq.n	8003c5c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c32:	f7fe fc8f 	bl	8002554 <HAL_GetTick>
 8003c36:	0003      	movs	r3, r0
 8003c38:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c3a:	e008      	b.n	8003c4e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c3c:	f7fe fc8a 	bl	8002554 <HAL_GetTick>
 8003c40:	0002      	movs	r2, r0
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	2b64      	cmp	r3, #100	; 0x64
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e28d      	b.n	800416a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c4e:	4b93      	ldr	r3, [pc, #588]	; (8003e9c <HAL_RCC_OscConfig+0x32c>)
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	2380      	movs	r3, #128	; 0x80
 8003c54:	029b      	lsls	r3, r3, #10
 8003c56:	4013      	ands	r3, r2
 8003c58:	d0f0      	beq.n	8003c3c <HAL_RCC_OscConfig+0xcc>
 8003c5a:	e015      	b.n	8003c88 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c5c:	f7fe fc7a 	bl	8002554 <HAL_GetTick>
 8003c60:	0003      	movs	r3, r0
 8003c62:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c64:	e008      	b.n	8003c78 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c66:	f7fe fc75 	bl	8002554 <HAL_GetTick>
 8003c6a:	0002      	movs	r2, r0
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	2b64      	cmp	r3, #100	; 0x64
 8003c72:	d901      	bls.n	8003c78 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e278      	b.n	800416a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c78:	4b88      	ldr	r3, [pc, #544]	; (8003e9c <HAL_RCC_OscConfig+0x32c>)
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	2380      	movs	r3, #128	; 0x80
 8003c7e:	029b      	lsls	r3, r3, #10
 8003c80:	4013      	ands	r3, r2
 8003c82:	d1f0      	bne.n	8003c66 <HAL_RCC_OscConfig+0xf6>
 8003c84:	e000      	b.n	8003c88 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c86:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2202      	movs	r2, #2
 8003c8e:	4013      	ands	r3, r2
 8003c90:	d100      	bne.n	8003c94 <HAL_RCC_OscConfig+0x124>
 8003c92:	e099      	b.n	8003dc8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c94:	4b81      	ldr	r3, [pc, #516]	; (8003e9c <HAL_RCC_OscConfig+0x32c>)
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	2238      	movs	r2, #56	; 0x38
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c9e:	4b7f      	ldr	r3, [pc, #508]	; (8003e9c <HAL_RCC_OscConfig+0x32c>)
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	2203      	movs	r2, #3
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	2b10      	cmp	r3, #16
 8003cac:	d102      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x144>
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d002      	beq.n	8003cba <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d135      	bne.n	8003d26 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cba:	4b78      	ldr	r3, [pc, #480]	; (8003e9c <HAL_RCC_OscConfig+0x32c>)
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	2380      	movs	r3, #128	; 0x80
 8003cc0:	00db      	lsls	r3, r3, #3
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	d005      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x162>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d101      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e24b      	b.n	800416a <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cd2:	4b72      	ldr	r3, [pc, #456]	; (8003e9c <HAL_RCC_OscConfig+0x32c>)
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	4a74      	ldr	r2, [pc, #464]	; (8003ea8 <HAL_RCC_OscConfig+0x338>)
 8003cd8:	4013      	ands	r3, r2
 8003cda:	0019      	movs	r1, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	695b      	ldr	r3, [r3, #20]
 8003ce0:	021a      	lsls	r2, r3, #8
 8003ce2:	4b6e      	ldr	r3, [pc, #440]	; (8003e9c <HAL_RCC_OscConfig+0x32c>)
 8003ce4:	430a      	orrs	r2, r1
 8003ce6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d112      	bne.n	8003d14 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003cee:	4b6b      	ldr	r3, [pc, #428]	; (8003e9c <HAL_RCC_OscConfig+0x32c>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a6e      	ldr	r2, [pc, #440]	; (8003eac <HAL_RCC_OscConfig+0x33c>)
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	0019      	movs	r1, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	691a      	ldr	r2, [r3, #16]
 8003cfc:	4b67      	ldr	r3, [pc, #412]	; (8003e9c <HAL_RCC_OscConfig+0x32c>)
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003d02:	4b66      	ldr	r3, [pc, #408]	; (8003e9c <HAL_RCC_OscConfig+0x32c>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	0adb      	lsrs	r3, r3, #11
 8003d08:	2207      	movs	r2, #7
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	4a68      	ldr	r2, [pc, #416]	; (8003eb0 <HAL_RCC_OscConfig+0x340>)
 8003d0e:	40da      	lsrs	r2, r3
 8003d10:	4b68      	ldr	r3, [pc, #416]	; (8003eb4 <HAL_RCC_OscConfig+0x344>)
 8003d12:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003d14:	4b68      	ldr	r3, [pc, #416]	; (8003eb8 <HAL_RCC_OscConfig+0x348>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	0018      	movs	r0, r3
 8003d1a:	f7fe fbbf 	bl	800249c <HAL_InitTick>
 8003d1e:	1e03      	subs	r3, r0, #0
 8003d20:	d051      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e221      	b.n	800416a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d030      	beq.n	8003d90 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003d2e:	4b5b      	ldr	r3, [pc, #364]	; (8003e9c <HAL_RCC_OscConfig+0x32c>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a5e      	ldr	r2, [pc, #376]	; (8003eac <HAL_RCC_OscConfig+0x33c>)
 8003d34:	4013      	ands	r3, r2
 8003d36:	0019      	movs	r1, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	691a      	ldr	r2, [r3, #16]
 8003d3c:	4b57      	ldr	r3, [pc, #348]	; (8003e9c <HAL_RCC_OscConfig+0x32c>)
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003d42:	4b56      	ldr	r3, [pc, #344]	; (8003e9c <HAL_RCC_OscConfig+0x32c>)
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	4b55      	ldr	r3, [pc, #340]	; (8003e9c <HAL_RCC_OscConfig+0x32c>)
 8003d48:	2180      	movs	r1, #128	; 0x80
 8003d4a:	0049      	lsls	r1, r1, #1
 8003d4c:	430a      	orrs	r2, r1
 8003d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d50:	f7fe fc00 	bl	8002554 <HAL_GetTick>
 8003d54:	0003      	movs	r3, r0
 8003d56:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d58:	e008      	b.n	8003d6c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d5a:	f7fe fbfb 	bl	8002554 <HAL_GetTick>
 8003d5e:	0002      	movs	r2, r0
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d901      	bls.n	8003d6c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e1fe      	b.n	800416a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d6c:	4b4b      	ldr	r3, [pc, #300]	; (8003e9c <HAL_RCC_OscConfig+0x32c>)
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	2380      	movs	r3, #128	; 0x80
 8003d72:	00db      	lsls	r3, r3, #3
 8003d74:	4013      	ands	r3, r2
 8003d76:	d0f0      	beq.n	8003d5a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d78:	4b48      	ldr	r3, [pc, #288]	; (8003e9c <HAL_RCC_OscConfig+0x32c>)
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	4a4a      	ldr	r2, [pc, #296]	; (8003ea8 <HAL_RCC_OscConfig+0x338>)
 8003d7e:	4013      	ands	r3, r2
 8003d80:	0019      	movs	r1, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	021a      	lsls	r2, r3, #8
 8003d88:	4b44      	ldr	r3, [pc, #272]	; (8003e9c <HAL_RCC_OscConfig+0x32c>)
 8003d8a:	430a      	orrs	r2, r1
 8003d8c:	605a      	str	r2, [r3, #4]
 8003d8e:	e01b      	b.n	8003dc8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003d90:	4b42      	ldr	r3, [pc, #264]	; (8003e9c <HAL_RCC_OscConfig+0x32c>)
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	4b41      	ldr	r3, [pc, #260]	; (8003e9c <HAL_RCC_OscConfig+0x32c>)
 8003d96:	4949      	ldr	r1, [pc, #292]	; (8003ebc <HAL_RCC_OscConfig+0x34c>)
 8003d98:	400a      	ands	r2, r1
 8003d9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d9c:	f7fe fbda 	bl	8002554 <HAL_GetTick>
 8003da0:	0003      	movs	r3, r0
 8003da2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003da4:	e008      	b.n	8003db8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003da6:	f7fe fbd5 	bl	8002554 <HAL_GetTick>
 8003daa:	0002      	movs	r2, r0
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d901      	bls.n	8003db8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e1d8      	b.n	800416a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003db8:	4b38      	ldr	r3, [pc, #224]	; (8003e9c <HAL_RCC_OscConfig+0x32c>)
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	2380      	movs	r3, #128	; 0x80
 8003dbe:	00db      	lsls	r3, r3, #3
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	d1f0      	bne.n	8003da6 <HAL_RCC_OscConfig+0x236>
 8003dc4:	e000      	b.n	8003dc8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003dc6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2208      	movs	r2, #8
 8003dce:	4013      	ands	r3, r2
 8003dd0:	d047      	beq.n	8003e62 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003dd2:	4b32      	ldr	r3, [pc, #200]	; (8003e9c <HAL_RCC_OscConfig+0x32c>)
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	2238      	movs	r2, #56	; 0x38
 8003dd8:	4013      	ands	r3, r2
 8003dda:	2b18      	cmp	r3, #24
 8003ddc:	d10a      	bne.n	8003df4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003dde:	4b2f      	ldr	r3, [pc, #188]	; (8003e9c <HAL_RCC_OscConfig+0x32c>)
 8003de0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003de2:	2202      	movs	r2, #2
 8003de4:	4013      	ands	r3, r2
 8003de6:	d03c      	beq.n	8003e62 <HAL_RCC_OscConfig+0x2f2>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	699b      	ldr	r3, [r3, #24]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d138      	bne.n	8003e62 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e1ba      	b.n	800416a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d019      	beq.n	8003e30 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003dfc:	4b27      	ldr	r3, [pc, #156]	; (8003e9c <HAL_RCC_OscConfig+0x32c>)
 8003dfe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003e00:	4b26      	ldr	r3, [pc, #152]	; (8003e9c <HAL_RCC_OscConfig+0x32c>)
 8003e02:	2101      	movs	r1, #1
 8003e04:	430a      	orrs	r2, r1
 8003e06:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e08:	f7fe fba4 	bl	8002554 <HAL_GetTick>
 8003e0c:	0003      	movs	r3, r0
 8003e0e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e10:	e008      	b.n	8003e24 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e12:	f7fe fb9f 	bl	8002554 <HAL_GetTick>
 8003e16:	0002      	movs	r2, r0
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d901      	bls.n	8003e24 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003e20:	2303      	movs	r3, #3
 8003e22:	e1a2      	b.n	800416a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e24:	4b1d      	ldr	r3, [pc, #116]	; (8003e9c <HAL_RCC_OscConfig+0x32c>)
 8003e26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e28:	2202      	movs	r2, #2
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	d0f1      	beq.n	8003e12 <HAL_RCC_OscConfig+0x2a2>
 8003e2e:	e018      	b.n	8003e62 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003e30:	4b1a      	ldr	r3, [pc, #104]	; (8003e9c <HAL_RCC_OscConfig+0x32c>)
 8003e32:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003e34:	4b19      	ldr	r3, [pc, #100]	; (8003e9c <HAL_RCC_OscConfig+0x32c>)
 8003e36:	2101      	movs	r1, #1
 8003e38:	438a      	bics	r2, r1
 8003e3a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e3c:	f7fe fb8a 	bl	8002554 <HAL_GetTick>
 8003e40:	0003      	movs	r3, r0
 8003e42:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e44:	e008      	b.n	8003e58 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e46:	f7fe fb85 	bl	8002554 <HAL_GetTick>
 8003e4a:	0002      	movs	r2, r0
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d901      	bls.n	8003e58 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e188      	b.n	800416a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e58:	4b10      	ldr	r3, [pc, #64]	; (8003e9c <HAL_RCC_OscConfig+0x32c>)
 8003e5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e5c:	2202      	movs	r2, #2
 8003e5e:	4013      	ands	r3, r2
 8003e60:	d1f1      	bne.n	8003e46 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2204      	movs	r2, #4
 8003e68:	4013      	ands	r3, r2
 8003e6a:	d100      	bne.n	8003e6e <HAL_RCC_OscConfig+0x2fe>
 8003e6c:	e0c6      	b.n	8003ffc <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e6e:	231f      	movs	r3, #31
 8003e70:	18fb      	adds	r3, r7, r3
 8003e72:	2200      	movs	r2, #0
 8003e74:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003e76:	4b09      	ldr	r3, [pc, #36]	; (8003e9c <HAL_RCC_OscConfig+0x32c>)
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	2238      	movs	r2, #56	; 0x38
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	2b20      	cmp	r3, #32
 8003e80:	d11e      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003e82:	4b06      	ldr	r3, [pc, #24]	; (8003e9c <HAL_RCC_OscConfig+0x32c>)
 8003e84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e86:	2202      	movs	r2, #2
 8003e88:	4013      	ands	r3, r2
 8003e8a:	d100      	bne.n	8003e8e <HAL_RCC_OscConfig+0x31e>
 8003e8c:	e0b6      	b.n	8003ffc <HAL_RCC_OscConfig+0x48c>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d000      	beq.n	8003e98 <HAL_RCC_OscConfig+0x328>
 8003e96:	e0b1      	b.n	8003ffc <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e166      	b.n	800416a <HAL_RCC_OscConfig+0x5fa>
 8003e9c:	40021000 	.word	0x40021000
 8003ea0:	fffeffff 	.word	0xfffeffff
 8003ea4:	fffbffff 	.word	0xfffbffff
 8003ea8:	ffff80ff 	.word	0xffff80ff
 8003eac:	ffffc7ff 	.word	0xffffc7ff
 8003eb0:	00f42400 	.word	0x00f42400
 8003eb4:	2000013c 	.word	0x2000013c
 8003eb8:	20000140 	.word	0x20000140
 8003ebc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003ec0:	4bac      	ldr	r3, [pc, #688]	; (8004174 <HAL_RCC_OscConfig+0x604>)
 8003ec2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ec4:	2380      	movs	r3, #128	; 0x80
 8003ec6:	055b      	lsls	r3, r3, #21
 8003ec8:	4013      	ands	r3, r2
 8003eca:	d101      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x360>
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e000      	b.n	8003ed2 <HAL_RCC_OscConfig+0x362>
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d011      	beq.n	8003efa <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003ed6:	4ba7      	ldr	r3, [pc, #668]	; (8004174 <HAL_RCC_OscConfig+0x604>)
 8003ed8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003eda:	4ba6      	ldr	r3, [pc, #664]	; (8004174 <HAL_RCC_OscConfig+0x604>)
 8003edc:	2180      	movs	r1, #128	; 0x80
 8003ede:	0549      	lsls	r1, r1, #21
 8003ee0:	430a      	orrs	r2, r1
 8003ee2:	63da      	str	r2, [r3, #60]	; 0x3c
 8003ee4:	4ba3      	ldr	r3, [pc, #652]	; (8004174 <HAL_RCC_OscConfig+0x604>)
 8003ee6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ee8:	2380      	movs	r3, #128	; 0x80
 8003eea:	055b      	lsls	r3, r3, #21
 8003eec:	4013      	ands	r3, r2
 8003eee:	60fb      	str	r3, [r7, #12]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003ef2:	231f      	movs	r3, #31
 8003ef4:	18fb      	adds	r3, r7, r3
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003efa:	4b9f      	ldr	r3, [pc, #636]	; (8004178 <HAL_RCC_OscConfig+0x608>)
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	2380      	movs	r3, #128	; 0x80
 8003f00:	005b      	lsls	r3, r3, #1
 8003f02:	4013      	ands	r3, r2
 8003f04:	d11a      	bne.n	8003f3c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f06:	4b9c      	ldr	r3, [pc, #624]	; (8004178 <HAL_RCC_OscConfig+0x608>)
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	4b9b      	ldr	r3, [pc, #620]	; (8004178 <HAL_RCC_OscConfig+0x608>)
 8003f0c:	2180      	movs	r1, #128	; 0x80
 8003f0e:	0049      	lsls	r1, r1, #1
 8003f10:	430a      	orrs	r2, r1
 8003f12:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003f14:	f7fe fb1e 	bl	8002554 <HAL_GetTick>
 8003f18:	0003      	movs	r3, r0
 8003f1a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f1c:	e008      	b.n	8003f30 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f1e:	f7fe fb19 	bl	8002554 <HAL_GetTick>
 8003f22:	0002      	movs	r2, r0
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d901      	bls.n	8003f30 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e11c      	b.n	800416a <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f30:	4b91      	ldr	r3, [pc, #580]	; (8004178 <HAL_RCC_OscConfig+0x608>)
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	2380      	movs	r3, #128	; 0x80
 8003f36:	005b      	lsls	r3, r3, #1
 8003f38:	4013      	ands	r3, r2
 8003f3a:	d0f0      	beq.n	8003f1e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d106      	bne.n	8003f52 <HAL_RCC_OscConfig+0x3e2>
 8003f44:	4b8b      	ldr	r3, [pc, #556]	; (8004174 <HAL_RCC_OscConfig+0x604>)
 8003f46:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003f48:	4b8a      	ldr	r3, [pc, #552]	; (8004174 <HAL_RCC_OscConfig+0x604>)
 8003f4a:	2101      	movs	r1, #1
 8003f4c:	430a      	orrs	r2, r1
 8003f4e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003f50:	e01c      	b.n	8003f8c <HAL_RCC_OscConfig+0x41c>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	2b05      	cmp	r3, #5
 8003f58:	d10c      	bne.n	8003f74 <HAL_RCC_OscConfig+0x404>
 8003f5a:	4b86      	ldr	r3, [pc, #536]	; (8004174 <HAL_RCC_OscConfig+0x604>)
 8003f5c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003f5e:	4b85      	ldr	r3, [pc, #532]	; (8004174 <HAL_RCC_OscConfig+0x604>)
 8003f60:	2104      	movs	r1, #4
 8003f62:	430a      	orrs	r2, r1
 8003f64:	65da      	str	r2, [r3, #92]	; 0x5c
 8003f66:	4b83      	ldr	r3, [pc, #524]	; (8004174 <HAL_RCC_OscConfig+0x604>)
 8003f68:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003f6a:	4b82      	ldr	r3, [pc, #520]	; (8004174 <HAL_RCC_OscConfig+0x604>)
 8003f6c:	2101      	movs	r1, #1
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	65da      	str	r2, [r3, #92]	; 0x5c
 8003f72:	e00b      	b.n	8003f8c <HAL_RCC_OscConfig+0x41c>
 8003f74:	4b7f      	ldr	r3, [pc, #508]	; (8004174 <HAL_RCC_OscConfig+0x604>)
 8003f76:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003f78:	4b7e      	ldr	r3, [pc, #504]	; (8004174 <HAL_RCC_OscConfig+0x604>)
 8003f7a:	2101      	movs	r1, #1
 8003f7c:	438a      	bics	r2, r1
 8003f7e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003f80:	4b7c      	ldr	r3, [pc, #496]	; (8004174 <HAL_RCC_OscConfig+0x604>)
 8003f82:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003f84:	4b7b      	ldr	r3, [pc, #492]	; (8004174 <HAL_RCC_OscConfig+0x604>)
 8003f86:	2104      	movs	r1, #4
 8003f88:	438a      	bics	r2, r1
 8003f8a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d014      	beq.n	8003fbe <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f94:	f7fe fade 	bl	8002554 <HAL_GetTick>
 8003f98:	0003      	movs	r3, r0
 8003f9a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f9c:	e009      	b.n	8003fb2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f9e:	f7fe fad9 	bl	8002554 <HAL_GetTick>
 8003fa2:	0002      	movs	r2, r0
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	4a74      	ldr	r2, [pc, #464]	; (800417c <HAL_RCC_OscConfig+0x60c>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d901      	bls.n	8003fb2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e0db      	b.n	800416a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fb2:	4b70      	ldr	r3, [pc, #448]	; (8004174 <HAL_RCC_OscConfig+0x604>)
 8003fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fb6:	2202      	movs	r2, #2
 8003fb8:	4013      	ands	r3, r2
 8003fba:	d0f0      	beq.n	8003f9e <HAL_RCC_OscConfig+0x42e>
 8003fbc:	e013      	b.n	8003fe6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fbe:	f7fe fac9 	bl	8002554 <HAL_GetTick>
 8003fc2:	0003      	movs	r3, r0
 8003fc4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003fc6:	e009      	b.n	8003fdc <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fc8:	f7fe fac4 	bl	8002554 <HAL_GetTick>
 8003fcc:	0002      	movs	r2, r0
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	4a6a      	ldr	r2, [pc, #424]	; (800417c <HAL_RCC_OscConfig+0x60c>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d901      	bls.n	8003fdc <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e0c6      	b.n	800416a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003fdc:	4b65      	ldr	r3, [pc, #404]	; (8004174 <HAL_RCC_OscConfig+0x604>)
 8003fde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fe0:	2202      	movs	r2, #2
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	d1f0      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003fe6:	231f      	movs	r3, #31
 8003fe8:	18fb      	adds	r3, r7, r3
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d105      	bne.n	8003ffc <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003ff0:	4b60      	ldr	r3, [pc, #384]	; (8004174 <HAL_RCC_OscConfig+0x604>)
 8003ff2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ff4:	4b5f      	ldr	r3, [pc, #380]	; (8004174 <HAL_RCC_OscConfig+0x604>)
 8003ff6:	4962      	ldr	r1, [pc, #392]	; (8004180 <HAL_RCC_OscConfig+0x610>)
 8003ff8:	400a      	ands	r2, r1
 8003ffa:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	69db      	ldr	r3, [r3, #28]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d100      	bne.n	8004006 <HAL_RCC_OscConfig+0x496>
 8004004:	e0b0      	b.n	8004168 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004006:	4b5b      	ldr	r3, [pc, #364]	; (8004174 <HAL_RCC_OscConfig+0x604>)
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	2238      	movs	r2, #56	; 0x38
 800400c:	4013      	ands	r3, r2
 800400e:	2b10      	cmp	r3, #16
 8004010:	d100      	bne.n	8004014 <HAL_RCC_OscConfig+0x4a4>
 8004012:	e078      	b.n	8004106 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	69db      	ldr	r3, [r3, #28]
 8004018:	2b02      	cmp	r3, #2
 800401a:	d153      	bne.n	80040c4 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800401c:	4b55      	ldr	r3, [pc, #340]	; (8004174 <HAL_RCC_OscConfig+0x604>)
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	4b54      	ldr	r3, [pc, #336]	; (8004174 <HAL_RCC_OscConfig+0x604>)
 8004022:	4958      	ldr	r1, [pc, #352]	; (8004184 <HAL_RCC_OscConfig+0x614>)
 8004024:	400a      	ands	r2, r1
 8004026:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004028:	f7fe fa94 	bl	8002554 <HAL_GetTick>
 800402c:	0003      	movs	r3, r0
 800402e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004030:	e008      	b.n	8004044 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004032:	f7fe fa8f 	bl	8002554 <HAL_GetTick>
 8004036:	0002      	movs	r2, r0
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	2b02      	cmp	r3, #2
 800403e:	d901      	bls.n	8004044 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	e092      	b.n	800416a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004044:	4b4b      	ldr	r3, [pc, #300]	; (8004174 <HAL_RCC_OscConfig+0x604>)
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	2380      	movs	r3, #128	; 0x80
 800404a:	049b      	lsls	r3, r3, #18
 800404c:	4013      	ands	r3, r2
 800404e:	d1f0      	bne.n	8004032 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004050:	4b48      	ldr	r3, [pc, #288]	; (8004174 <HAL_RCC_OscConfig+0x604>)
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	4a4c      	ldr	r2, [pc, #304]	; (8004188 <HAL_RCC_OscConfig+0x618>)
 8004056:	4013      	ands	r3, r2
 8004058:	0019      	movs	r1, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a1a      	ldr	r2, [r3, #32]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004062:	431a      	orrs	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004068:	021b      	lsls	r3, r3, #8
 800406a:	431a      	orrs	r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004070:	431a      	orrs	r2, r3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004076:	431a      	orrs	r2, r3
 8004078:	4b3e      	ldr	r3, [pc, #248]	; (8004174 <HAL_RCC_OscConfig+0x604>)
 800407a:	430a      	orrs	r2, r1
 800407c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800407e:	4b3d      	ldr	r3, [pc, #244]	; (8004174 <HAL_RCC_OscConfig+0x604>)
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	4b3c      	ldr	r3, [pc, #240]	; (8004174 <HAL_RCC_OscConfig+0x604>)
 8004084:	2180      	movs	r1, #128	; 0x80
 8004086:	0449      	lsls	r1, r1, #17
 8004088:	430a      	orrs	r2, r1
 800408a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800408c:	4b39      	ldr	r3, [pc, #228]	; (8004174 <HAL_RCC_OscConfig+0x604>)
 800408e:	68da      	ldr	r2, [r3, #12]
 8004090:	4b38      	ldr	r3, [pc, #224]	; (8004174 <HAL_RCC_OscConfig+0x604>)
 8004092:	2180      	movs	r1, #128	; 0x80
 8004094:	0549      	lsls	r1, r1, #21
 8004096:	430a      	orrs	r2, r1
 8004098:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800409a:	f7fe fa5b 	bl	8002554 <HAL_GetTick>
 800409e:	0003      	movs	r3, r0
 80040a0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040a2:	e008      	b.n	80040b6 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040a4:	f7fe fa56 	bl	8002554 <HAL_GetTick>
 80040a8:	0002      	movs	r2, r0
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d901      	bls.n	80040b6 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e059      	b.n	800416a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040b6:	4b2f      	ldr	r3, [pc, #188]	; (8004174 <HAL_RCC_OscConfig+0x604>)
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	2380      	movs	r3, #128	; 0x80
 80040bc:	049b      	lsls	r3, r3, #18
 80040be:	4013      	ands	r3, r2
 80040c0:	d0f0      	beq.n	80040a4 <HAL_RCC_OscConfig+0x534>
 80040c2:	e051      	b.n	8004168 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040c4:	4b2b      	ldr	r3, [pc, #172]	; (8004174 <HAL_RCC_OscConfig+0x604>)
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	4b2a      	ldr	r3, [pc, #168]	; (8004174 <HAL_RCC_OscConfig+0x604>)
 80040ca:	492e      	ldr	r1, [pc, #184]	; (8004184 <HAL_RCC_OscConfig+0x614>)
 80040cc:	400a      	ands	r2, r1
 80040ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d0:	f7fe fa40 	bl	8002554 <HAL_GetTick>
 80040d4:	0003      	movs	r3, r0
 80040d6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040d8:	e008      	b.n	80040ec <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040da:	f7fe fa3b 	bl	8002554 <HAL_GetTick>
 80040de:	0002      	movs	r2, r0
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	2b02      	cmp	r3, #2
 80040e6:	d901      	bls.n	80040ec <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e03e      	b.n	800416a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040ec:	4b21      	ldr	r3, [pc, #132]	; (8004174 <HAL_RCC_OscConfig+0x604>)
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	2380      	movs	r3, #128	; 0x80
 80040f2:	049b      	lsls	r3, r3, #18
 80040f4:	4013      	ands	r3, r2
 80040f6:	d1f0      	bne.n	80040da <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80040f8:	4b1e      	ldr	r3, [pc, #120]	; (8004174 <HAL_RCC_OscConfig+0x604>)
 80040fa:	68da      	ldr	r2, [r3, #12]
 80040fc:	4b1d      	ldr	r3, [pc, #116]	; (8004174 <HAL_RCC_OscConfig+0x604>)
 80040fe:	4923      	ldr	r1, [pc, #140]	; (800418c <HAL_RCC_OscConfig+0x61c>)
 8004100:	400a      	ands	r2, r1
 8004102:	60da      	str	r2, [r3, #12]
 8004104:	e030      	b.n	8004168 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	69db      	ldr	r3, [r3, #28]
 800410a:	2b01      	cmp	r3, #1
 800410c:	d101      	bne.n	8004112 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e02b      	b.n	800416a <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004112:	4b18      	ldr	r3, [pc, #96]	; (8004174 <HAL_RCC_OscConfig+0x604>)
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	2203      	movs	r2, #3
 800411c:	401a      	ands	r2, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a1b      	ldr	r3, [r3, #32]
 8004122:	429a      	cmp	r2, r3
 8004124:	d11e      	bne.n	8004164 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	2270      	movs	r2, #112	; 0x70
 800412a:	401a      	ands	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004130:	429a      	cmp	r2, r3
 8004132:	d117      	bne.n	8004164 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004134:	697a      	ldr	r2, [r7, #20]
 8004136:	23fe      	movs	r3, #254	; 0xfe
 8004138:	01db      	lsls	r3, r3, #7
 800413a:	401a      	ands	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004140:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004142:	429a      	cmp	r2, r3
 8004144:	d10e      	bne.n	8004164 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004146:	697a      	ldr	r2, [r7, #20]
 8004148:	23f8      	movs	r3, #248	; 0xf8
 800414a:	039b      	lsls	r3, r3, #14
 800414c:	401a      	ands	r2, r3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004152:	429a      	cmp	r2, r3
 8004154:	d106      	bne.n	8004164 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	0f5b      	lsrs	r3, r3, #29
 800415a:	075a      	lsls	r2, r3, #29
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004160:	429a      	cmp	r2, r3
 8004162:	d001      	beq.n	8004168 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e000      	b.n	800416a <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8004168:	2300      	movs	r3, #0
}
 800416a:	0018      	movs	r0, r3
 800416c:	46bd      	mov	sp, r7
 800416e:	b008      	add	sp, #32
 8004170:	bd80      	pop	{r7, pc}
 8004172:	46c0      	nop			; (mov r8, r8)
 8004174:	40021000 	.word	0x40021000
 8004178:	40007000 	.word	0x40007000
 800417c:	00001388 	.word	0x00001388
 8004180:	efffffff 	.word	0xefffffff
 8004184:	feffffff 	.word	0xfeffffff
 8004188:	1fc1808c 	.word	0x1fc1808c
 800418c:	effefffc 	.word	0xeffefffc

08004190 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d101      	bne.n	80041a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e0e9      	b.n	8004378 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041a4:	4b76      	ldr	r3, [pc, #472]	; (8004380 <HAL_RCC_ClockConfig+0x1f0>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2207      	movs	r2, #7
 80041aa:	4013      	ands	r3, r2
 80041ac:	683a      	ldr	r2, [r7, #0]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d91e      	bls.n	80041f0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041b2:	4b73      	ldr	r3, [pc, #460]	; (8004380 <HAL_RCC_ClockConfig+0x1f0>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2207      	movs	r2, #7
 80041b8:	4393      	bics	r3, r2
 80041ba:	0019      	movs	r1, r3
 80041bc:	4b70      	ldr	r3, [pc, #448]	; (8004380 <HAL_RCC_ClockConfig+0x1f0>)
 80041be:	683a      	ldr	r2, [r7, #0]
 80041c0:	430a      	orrs	r2, r1
 80041c2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80041c4:	f7fe f9c6 	bl	8002554 <HAL_GetTick>
 80041c8:	0003      	movs	r3, r0
 80041ca:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80041cc:	e009      	b.n	80041e2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041ce:	f7fe f9c1 	bl	8002554 <HAL_GetTick>
 80041d2:	0002      	movs	r2, r0
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	4a6a      	ldr	r2, [pc, #424]	; (8004384 <HAL_RCC_ClockConfig+0x1f4>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d901      	bls.n	80041e2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	e0ca      	b.n	8004378 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80041e2:	4b67      	ldr	r3, [pc, #412]	; (8004380 <HAL_RCC_ClockConfig+0x1f0>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	2207      	movs	r2, #7
 80041e8:	4013      	ands	r3, r2
 80041ea:	683a      	ldr	r2, [r7, #0]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d1ee      	bne.n	80041ce <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2202      	movs	r2, #2
 80041f6:	4013      	ands	r3, r2
 80041f8:	d015      	beq.n	8004226 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2204      	movs	r2, #4
 8004200:	4013      	ands	r3, r2
 8004202:	d006      	beq.n	8004212 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004204:	4b60      	ldr	r3, [pc, #384]	; (8004388 <HAL_RCC_ClockConfig+0x1f8>)
 8004206:	689a      	ldr	r2, [r3, #8]
 8004208:	4b5f      	ldr	r3, [pc, #380]	; (8004388 <HAL_RCC_ClockConfig+0x1f8>)
 800420a:	21e0      	movs	r1, #224	; 0xe0
 800420c:	01c9      	lsls	r1, r1, #7
 800420e:	430a      	orrs	r2, r1
 8004210:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004212:	4b5d      	ldr	r3, [pc, #372]	; (8004388 <HAL_RCC_ClockConfig+0x1f8>)
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	4a5d      	ldr	r2, [pc, #372]	; (800438c <HAL_RCC_ClockConfig+0x1fc>)
 8004218:	4013      	ands	r3, r2
 800421a:	0019      	movs	r1, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	689a      	ldr	r2, [r3, #8]
 8004220:	4b59      	ldr	r3, [pc, #356]	; (8004388 <HAL_RCC_ClockConfig+0x1f8>)
 8004222:	430a      	orrs	r2, r1
 8004224:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2201      	movs	r2, #1
 800422c:	4013      	ands	r3, r2
 800422e:	d057      	beq.n	80042e0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d107      	bne.n	8004248 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004238:	4b53      	ldr	r3, [pc, #332]	; (8004388 <HAL_RCC_ClockConfig+0x1f8>)
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	2380      	movs	r3, #128	; 0x80
 800423e:	029b      	lsls	r3, r3, #10
 8004240:	4013      	ands	r3, r2
 8004242:	d12b      	bne.n	800429c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e097      	b.n	8004378 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	2b02      	cmp	r3, #2
 800424e:	d107      	bne.n	8004260 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004250:	4b4d      	ldr	r3, [pc, #308]	; (8004388 <HAL_RCC_ClockConfig+0x1f8>)
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	2380      	movs	r3, #128	; 0x80
 8004256:	049b      	lsls	r3, r3, #18
 8004258:	4013      	ands	r3, r2
 800425a:	d11f      	bne.n	800429c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e08b      	b.n	8004378 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d107      	bne.n	8004278 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004268:	4b47      	ldr	r3, [pc, #284]	; (8004388 <HAL_RCC_ClockConfig+0x1f8>)
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	2380      	movs	r3, #128	; 0x80
 800426e:	00db      	lsls	r3, r3, #3
 8004270:	4013      	ands	r3, r2
 8004272:	d113      	bne.n	800429c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e07f      	b.n	8004378 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	2b03      	cmp	r3, #3
 800427e:	d106      	bne.n	800428e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004280:	4b41      	ldr	r3, [pc, #260]	; (8004388 <HAL_RCC_ClockConfig+0x1f8>)
 8004282:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004284:	2202      	movs	r2, #2
 8004286:	4013      	ands	r3, r2
 8004288:	d108      	bne.n	800429c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e074      	b.n	8004378 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800428e:	4b3e      	ldr	r3, [pc, #248]	; (8004388 <HAL_RCC_ClockConfig+0x1f8>)
 8004290:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004292:	2202      	movs	r2, #2
 8004294:	4013      	ands	r3, r2
 8004296:	d101      	bne.n	800429c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e06d      	b.n	8004378 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800429c:	4b3a      	ldr	r3, [pc, #232]	; (8004388 <HAL_RCC_ClockConfig+0x1f8>)
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	2207      	movs	r2, #7
 80042a2:	4393      	bics	r3, r2
 80042a4:	0019      	movs	r1, r3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685a      	ldr	r2, [r3, #4]
 80042aa:	4b37      	ldr	r3, [pc, #220]	; (8004388 <HAL_RCC_ClockConfig+0x1f8>)
 80042ac:	430a      	orrs	r2, r1
 80042ae:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042b0:	f7fe f950 	bl	8002554 <HAL_GetTick>
 80042b4:	0003      	movs	r3, r0
 80042b6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042b8:	e009      	b.n	80042ce <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042ba:	f7fe f94b 	bl	8002554 <HAL_GetTick>
 80042be:	0002      	movs	r2, r0
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	4a2f      	ldr	r2, [pc, #188]	; (8004384 <HAL_RCC_ClockConfig+0x1f4>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d901      	bls.n	80042ce <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e054      	b.n	8004378 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ce:	4b2e      	ldr	r3, [pc, #184]	; (8004388 <HAL_RCC_ClockConfig+0x1f8>)
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	2238      	movs	r2, #56	; 0x38
 80042d4:	401a      	ands	r2, r3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	00db      	lsls	r3, r3, #3
 80042dc:	429a      	cmp	r2, r3
 80042de:	d1ec      	bne.n	80042ba <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042e0:	4b27      	ldr	r3, [pc, #156]	; (8004380 <HAL_RCC_ClockConfig+0x1f0>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2207      	movs	r2, #7
 80042e6:	4013      	ands	r3, r2
 80042e8:	683a      	ldr	r2, [r7, #0]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d21e      	bcs.n	800432c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ee:	4b24      	ldr	r3, [pc, #144]	; (8004380 <HAL_RCC_ClockConfig+0x1f0>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2207      	movs	r2, #7
 80042f4:	4393      	bics	r3, r2
 80042f6:	0019      	movs	r1, r3
 80042f8:	4b21      	ldr	r3, [pc, #132]	; (8004380 <HAL_RCC_ClockConfig+0x1f0>)
 80042fa:	683a      	ldr	r2, [r7, #0]
 80042fc:	430a      	orrs	r2, r1
 80042fe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004300:	f7fe f928 	bl	8002554 <HAL_GetTick>
 8004304:	0003      	movs	r3, r0
 8004306:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004308:	e009      	b.n	800431e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800430a:	f7fe f923 	bl	8002554 <HAL_GetTick>
 800430e:	0002      	movs	r2, r0
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	4a1b      	ldr	r2, [pc, #108]	; (8004384 <HAL_RCC_ClockConfig+0x1f4>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d901      	bls.n	800431e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e02c      	b.n	8004378 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800431e:	4b18      	ldr	r3, [pc, #96]	; (8004380 <HAL_RCC_ClockConfig+0x1f0>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2207      	movs	r2, #7
 8004324:	4013      	ands	r3, r2
 8004326:	683a      	ldr	r2, [r7, #0]
 8004328:	429a      	cmp	r2, r3
 800432a:	d1ee      	bne.n	800430a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2204      	movs	r2, #4
 8004332:	4013      	ands	r3, r2
 8004334:	d009      	beq.n	800434a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004336:	4b14      	ldr	r3, [pc, #80]	; (8004388 <HAL_RCC_ClockConfig+0x1f8>)
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	4a15      	ldr	r2, [pc, #84]	; (8004390 <HAL_RCC_ClockConfig+0x200>)
 800433c:	4013      	ands	r3, r2
 800433e:	0019      	movs	r1, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	68da      	ldr	r2, [r3, #12]
 8004344:	4b10      	ldr	r3, [pc, #64]	; (8004388 <HAL_RCC_ClockConfig+0x1f8>)
 8004346:	430a      	orrs	r2, r1
 8004348:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800434a:	f000 f829 	bl	80043a0 <HAL_RCC_GetSysClockFreq>
 800434e:	0001      	movs	r1, r0
 8004350:	4b0d      	ldr	r3, [pc, #52]	; (8004388 <HAL_RCC_ClockConfig+0x1f8>)
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	0a1b      	lsrs	r3, r3, #8
 8004356:	220f      	movs	r2, #15
 8004358:	401a      	ands	r2, r3
 800435a:	4b0e      	ldr	r3, [pc, #56]	; (8004394 <HAL_RCC_ClockConfig+0x204>)
 800435c:	0092      	lsls	r2, r2, #2
 800435e:	58d3      	ldr	r3, [r2, r3]
 8004360:	221f      	movs	r2, #31
 8004362:	4013      	ands	r3, r2
 8004364:	000a      	movs	r2, r1
 8004366:	40da      	lsrs	r2, r3
 8004368:	4b0b      	ldr	r3, [pc, #44]	; (8004398 <HAL_RCC_ClockConfig+0x208>)
 800436a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800436c:	4b0b      	ldr	r3, [pc, #44]	; (800439c <HAL_RCC_ClockConfig+0x20c>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	0018      	movs	r0, r3
 8004372:	f7fe f893 	bl	800249c <HAL_InitTick>
 8004376:	0003      	movs	r3, r0
}
 8004378:	0018      	movs	r0, r3
 800437a:	46bd      	mov	sp, r7
 800437c:	b004      	add	sp, #16
 800437e:	bd80      	pop	{r7, pc}
 8004380:	40022000 	.word	0x40022000
 8004384:	00001388 	.word	0x00001388
 8004388:	40021000 	.word	0x40021000
 800438c:	fffff0ff 	.word	0xfffff0ff
 8004390:	ffff8fff 	.word	0xffff8fff
 8004394:	080048cc 	.word	0x080048cc
 8004398:	2000013c 	.word	0x2000013c
 800439c:	20000140 	.word	0x20000140

080043a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b086      	sub	sp, #24
 80043a4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80043a6:	4b3c      	ldr	r3, [pc, #240]	; (8004498 <HAL_RCC_GetSysClockFreq+0xf8>)
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	2238      	movs	r2, #56	; 0x38
 80043ac:	4013      	ands	r3, r2
 80043ae:	d10f      	bne.n	80043d0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80043b0:	4b39      	ldr	r3, [pc, #228]	; (8004498 <HAL_RCC_GetSysClockFreq+0xf8>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	0adb      	lsrs	r3, r3, #11
 80043b6:	2207      	movs	r2, #7
 80043b8:	4013      	ands	r3, r2
 80043ba:	2201      	movs	r2, #1
 80043bc:	409a      	lsls	r2, r3
 80043be:	0013      	movs	r3, r2
 80043c0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80043c2:	6839      	ldr	r1, [r7, #0]
 80043c4:	4835      	ldr	r0, [pc, #212]	; (800449c <HAL_RCC_GetSysClockFreq+0xfc>)
 80043c6:	f7fb fe9b 	bl	8000100 <__udivsi3>
 80043ca:	0003      	movs	r3, r0
 80043cc:	613b      	str	r3, [r7, #16]
 80043ce:	e05d      	b.n	800448c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80043d0:	4b31      	ldr	r3, [pc, #196]	; (8004498 <HAL_RCC_GetSysClockFreq+0xf8>)
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	2238      	movs	r2, #56	; 0x38
 80043d6:	4013      	ands	r3, r2
 80043d8:	2b08      	cmp	r3, #8
 80043da:	d102      	bne.n	80043e2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80043dc:	4b30      	ldr	r3, [pc, #192]	; (80044a0 <HAL_RCC_GetSysClockFreq+0x100>)
 80043de:	613b      	str	r3, [r7, #16]
 80043e0:	e054      	b.n	800448c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043e2:	4b2d      	ldr	r3, [pc, #180]	; (8004498 <HAL_RCC_GetSysClockFreq+0xf8>)
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	2238      	movs	r2, #56	; 0x38
 80043e8:	4013      	ands	r3, r2
 80043ea:	2b10      	cmp	r3, #16
 80043ec:	d138      	bne.n	8004460 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80043ee:	4b2a      	ldr	r3, [pc, #168]	; (8004498 <HAL_RCC_GetSysClockFreq+0xf8>)
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	2203      	movs	r2, #3
 80043f4:	4013      	ands	r3, r2
 80043f6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80043f8:	4b27      	ldr	r3, [pc, #156]	; (8004498 <HAL_RCC_GetSysClockFreq+0xf8>)
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	091b      	lsrs	r3, r3, #4
 80043fe:	2207      	movs	r2, #7
 8004400:	4013      	ands	r3, r2
 8004402:	3301      	adds	r3, #1
 8004404:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2b03      	cmp	r3, #3
 800440a:	d10d      	bne.n	8004428 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800440c:	68b9      	ldr	r1, [r7, #8]
 800440e:	4824      	ldr	r0, [pc, #144]	; (80044a0 <HAL_RCC_GetSysClockFreq+0x100>)
 8004410:	f7fb fe76 	bl	8000100 <__udivsi3>
 8004414:	0003      	movs	r3, r0
 8004416:	0019      	movs	r1, r3
 8004418:	4b1f      	ldr	r3, [pc, #124]	; (8004498 <HAL_RCC_GetSysClockFreq+0xf8>)
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	0a1b      	lsrs	r3, r3, #8
 800441e:	227f      	movs	r2, #127	; 0x7f
 8004420:	4013      	ands	r3, r2
 8004422:	434b      	muls	r3, r1
 8004424:	617b      	str	r3, [r7, #20]
        break;
 8004426:	e00d      	b.n	8004444 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004428:	68b9      	ldr	r1, [r7, #8]
 800442a:	481c      	ldr	r0, [pc, #112]	; (800449c <HAL_RCC_GetSysClockFreq+0xfc>)
 800442c:	f7fb fe68 	bl	8000100 <__udivsi3>
 8004430:	0003      	movs	r3, r0
 8004432:	0019      	movs	r1, r3
 8004434:	4b18      	ldr	r3, [pc, #96]	; (8004498 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	0a1b      	lsrs	r3, r3, #8
 800443a:	227f      	movs	r2, #127	; 0x7f
 800443c:	4013      	ands	r3, r2
 800443e:	434b      	muls	r3, r1
 8004440:	617b      	str	r3, [r7, #20]
        break;
 8004442:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004444:	4b14      	ldr	r3, [pc, #80]	; (8004498 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	0f5b      	lsrs	r3, r3, #29
 800444a:	2207      	movs	r2, #7
 800444c:	4013      	ands	r3, r2
 800444e:	3301      	adds	r3, #1
 8004450:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004452:	6879      	ldr	r1, [r7, #4]
 8004454:	6978      	ldr	r0, [r7, #20]
 8004456:	f7fb fe53 	bl	8000100 <__udivsi3>
 800445a:	0003      	movs	r3, r0
 800445c:	613b      	str	r3, [r7, #16]
 800445e:	e015      	b.n	800448c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004460:	4b0d      	ldr	r3, [pc, #52]	; (8004498 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	2238      	movs	r2, #56	; 0x38
 8004466:	4013      	ands	r3, r2
 8004468:	2b20      	cmp	r3, #32
 800446a:	d103      	bne.n	8004474 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800446c:	2380      	movs	r3, #128	; 0x80
 800446e:	021b      	lsls	r3, r3, #8
 8004470:	613b      	str	r3, [r7, #16]
 8004472:	e00b      	b.n	800448c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004474:	4b08      	ldr	r3, [pc, #32]	; (8004498 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	2238      	movs	r2, #56	; 0x38
 800447a:	4013      	ands	r3, r2
 800447c:	2b18      	cmp	r3, #24
 800447e:	d103      	bne.n	8004488 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004480:	23fa      	movs	r3, #250	; 0xfa
 8004482:	01db      	lsls	r3, r3, #7
 8004484:	613b      	str	r3, [r7, #16]
 8004486:	e001      	b.n	800448c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004488:	2300      	movs	r3, #0
 800448a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800448c:	693b      	ldr	r3, [r7, #16]
}
 800448e:	0018      	movs	r0, r3
 8004490:	46bd      	mov	sp, r7
 8004492:	b006      	add	sp, #24
 8004494:	bd80      	pop	{r7, pc}
 8004496:	46c0      	nop			; (mov r8, r8)
 8004498:	40021000 	.word	0x40021000
 800449c:	00f42400 	.word	0x00f42400
 80044a0:	007a1200 	.word	0x007a1200

080044a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b086      	sub	sp, #24
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80044ac:	2313      	movs	r3, #19
 80044ae:	18fb      	adds	r3, r7, r3
 80044b0:	2200      	movs	r2, #0
 80044b2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80044b4:	2312      	movs	r3, #18
 80044b6:	18fb      	adds	r3, r7, r3
 80044b8:	2200      	movs	r2, #0
 80044ba:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	2380      	movs	r3, #128	; 0x80
 80044c2:	029b      	lsls	r3, r3, #10
 80044c4:	4013      	ands	r3, r2
 80044c6:	d100      	bne.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x26>
 80044c8:	e0a3      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044ca:	2011      	movs	r0, #17
 80044cc:	183b      	adds	r3, r7, r0
 80044ce:	2200      	movs	r2, #0
 80044d0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044d2:	4b86      	ldr	r3, [pc, #536]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80044d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044d6:	2380      	movs	r3, #128	; 0x80
 80044d8:	055b      	lsls	r3, r3, #21
 80044da:	4013      	ands	r3, r2
 80044dc:	d110      	bne.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044de:	4b83      	ldr	r3, [pc, #524]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80044e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044e2:	4b82      	ldr	r3, [pc, #520]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80044e4:	2180      	movs	r1, #128	; 0x80
 80044e6:	0549      	lsls	r1, r1, #21
 80044e8:	430a      	orrs	r2, r1
 80044ea:	63da      	str	r2, [r3, #60]	; 0x3c
 80044ec:	4b7f      	ldr	r3, [pc, #508]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80044ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044f0:	2380      	movs	r3, #128	; 0x80
 80044f2:	055b      	lsls	r3, r3, #21
 80044f4:	4013      	ands	r3, r2
 80044f6:	60bb      	str	r3, [r7, #8]
 80044f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044fa:	183b      	adds	r3, r7, r0
 80044fc:	2201      	movs	r2, #1
 80044fe:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004500:	4b7b      	ldr	r3, [pc, #492]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	4b7a      	ldr	r3, [pc, #488]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004506:	2180      	movs	r1, #128	; 0x80
 8004508:	0049      	lsls	r1, r1, #1
 800450a:	430a      	orrs	r2, r1
 800450c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800450e:	f7fe f821 	bl	8002554 <HAL_GetTick>
 8004512:	0003      	movs	r3, r0
 8004514:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004516:	e00b      	b.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004518:	f7fe f81c 	bl	8002554 <HAL_GetTick>
 800451c:	0002      	movs	r2, r0
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	2b02      	cmp	r3, #2
 8004524:	d904      	bls.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004526:	2313      	movs	r3, #19
 8004528:	18fb      	adds	r3, r7, r3
 800452a:	2203      	movs	r2, #3
 800452c:	701a      	strb	r2, [r3, #0]
        break;
 800452e:	e005      	b.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004530:	4b6f      	ldr	r3, [pc, #444]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	2380      	movs	r3, #128	; 0x80
 8004536:	005b      	lsls	r3, r3, #1
 8004538:	4013      	ands	r3, r2
 800453a:	d0ed      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800453c:	2313      	movs	r3, #19
 800453e:	18fb      	adds	r3, r7, r3
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d154      	bne.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004546:	4b69      	ldr	r3, [pc, #420]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004548:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800454a:	23c0      	movs	r3, #192	; 0xc0
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	4013      	ands	r3, r2
 8004550:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d019      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	697a      	ldr	r2, [r7, #20]
 800455e:	429a      	cmp	r2, r3
 8004560:	d014      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004562:	4b62      	ldr	r3, [pc, #392]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004566:	4a63      	ldr	r2, [pc, #396]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004568:	4013      	ands	r3, r2
 800456a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800456c:	4b5f      	ldr	r3, [pc, #380]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800456e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004570:	4b5e      	ldr	r3, [pc, #376]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004572:	2180      	movs	r1, #128	; 0x80
 8004574:	0249      	lsls	r1, r1, #9
 8004576:	430a      	orrs	r2, r1
 8004578:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800457a:	4b5c      	ldr	r3, [pc, #368]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800457c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800457e:	4b5b      	ldr	r3, [pc, #364]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004580:	495d      	ldr	r1, [pc, #372]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004582:	400a      	ands	r2, r1
 8004584:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004586:	4b59      	ldr	r3, [pc, #356]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004588:	697a      	ldr	r2, [r7, #20]
 800458a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	2201      	movs	r2, #1
 8004590:	4013      	ands	r3, r2
 8004592:	d016      	beq.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004594:	f7fd ffde 	bl	8002554 <HAL_GetTick>
 8004598:	0003      	movs	r3, r0
 800459a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800459c:	e00c      	b.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800459e:	f7fd ffd9 	bl	8002554 <HAL_GetTick>
 80045a2:	0002      	movs	r2, r0
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	4a54      	ldr	r2, [pc, #336]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d904      	bls.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80045ae:	2313      	movs	r3, #19
 80045b0:	18fb      	adds	r3, r7, r3
 80045b2:	2203      	movs	r2, #3
 80045b4:	701a      	strb	r2, [r3, #0]
            break;
 80045b6:	e004      	b.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045b8:	4b4c      	ldr	r3, [pc, #304]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80045ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045bc:	2202      	movs	r2, #2
 80045be:	4013      	ands	r3, r2
 80045c0:	d0ed      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80045c2:	2313      	movs	r3, #19
 80045c4:	18fb      	adds	r3, r7, r3
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d10a      	bne.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045cc:	4b47      	ldr	r3, [pc, #284]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80045ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045d0:	4a48      	ldr	r2, [pc, #288]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80045d2:	4013      	ands	r3, r2
 80045d4:	0019      	movs	r1, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	699a      	ldr	r2, [r3, #24]
 80045da:	4b44      	ldr	r3, [pc, #272]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80045dc:	430a      	orrs	r2, r1
 80045de:	65da      	str	r2, [r3, #92]	; 0x5c
 80045e0:	e00c      	b.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80045e2:	2312      	movs	r3, #18
 80045e4:	18fb      	adds	r3, r7, r3
 80045e6:	2213      	movs	r2, #19
 80045e8:	18ba      	adds	r2, r7, r2
 80045ea:	7812      	ldrb	r2, [r2, #0]
 80045ec:	701a      	strb	r2, [r3, #0]
 80045ee:	e005      	b.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045f0:	2312      	movs	r3, #18
 80045f2:	18fb      	adds	r3, r7, r3
 80045f4:	2213      	movs	r2, #19
 80045f6:	18ba      	adds	r2, r7, r2
 80045f8:	7812      	ldrb	r2, [r2, #0]
 80045fa:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80045fc:	2311      	movs	r3, #17
 80045fe:	18fb      	adds	r3, r7, r3
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	2b01      	cmp	r3, #1
 8004604:	d105      	bne.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004606:	4b39      	ldr	r3, [pc, #228]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004608:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800460a:	4b38      	ldr	r3, [pc, #224]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800460c:	493c      	ldr	r1, [pc, #240]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800460e:	400a      	ands	r2, r1
 8004610:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	2201      	movs	r2, #1
 8004618:	4013      	ands	r3, r2
 800461a:	d009      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800461c:	4b33      	ldr	r3, [pc, #204]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800461e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004620:	2203      	movs	r2, #3
 8004622:	4393      	bics	r3, r2
 8004624:	0019      	movs	r1, r3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685a      	ldr	r2, [r3, #4]
 800462a:	4b30      	ldr	r3, [pc, #192]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800462c:	430a      	orrs	r2, r1
 800462e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2202      	movs	r2, #2
 8004636:	4013      	ands	r3, r2
 8004638:	d009      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800463a:	4b2c      	ldr	r3, [pc, #176]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800463c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800463e:	220c      	movs	r2, #12
 8004640:	4393      	bics	r3, r2
 8004642:	0019      	movs	r1, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	689a      	ldr	r2, [r3, #8]
 8004648:	4b28      	ldr	r3, [pc, #160]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800464a:	430a      	orrs	r2, r1
 800464c:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2220      	movs	r2, #32
 8004654:	4013      	ands	r3, r2
 8004656:	d009      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004658:	4b24      	ldr	r3, [pc, #144]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800465a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800465c:	4a29      	ldr	r2, [pc, #164]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800465e:	4013      	ands	r3, r2
 8004660:	0019      	movs	r1, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	68da      	ldr	r2, [r3, #12]
 8004666:	4b21      	ldr	r3, [pc, #132]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004668:	430a      	orrs	r2, r1
 800466a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	2380      	movs	r3, #128	; 0x80
 8004672:	01db      	lsls	r3, r3, #7
 8004674:	4013      	ands	r3, r2
 8004676:	d015      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004678:	4b1c      	ldr	r3, [pc, #112]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800467a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	0899      	lsrs	r1, r3, #2
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	695a      	ldr	r2, [r3, #20]
 8004684:	4b19      	ldr	r3, [pc, #100]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004686:	430a      	orrs	r2, r1
 8004688:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	695a      	ldr	r2, [r3, #20]
 800468e:	2380      	movs	r3, #128	; 0x80
 8004690:	05db      	lsls	r3, r3, #23
 8004692:	429a      	cmp	r2, r3
 8004694:	d106      	bne.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004696:	4b15      	ldr	r3, [pc, #84]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004698:	68da      	ldr	r2, [r3, #12]
 800469a:	4b14      	ldr	r3, [pc, #80]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800469c:	2180      	movs	r1, #128	; 0x80
 800469e:	0249      	lsls	r1, r1, #9
 80046a0:	430a      	orrs	r2, r1
 80046a2:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	2380      	movs	r3, #128	; 0x80
 80046aa:	011b      	lsls	r3, r3, #4
 80046ac:	4013      	ands	r3, r2
 80046ae:	d016      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80046b0:	4b0e      	ldr	r3, [pc, #56]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80046b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046b4:	4a14      	ldr	r2, [pc, #80]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80046b6:	4013      	ands	r3, r2
 80046b8:	0019      	movs	r1, r3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	691a      	ldr	r2, [r3, #16]
 80046be:	4b0b      	ldr	r3, [pc, #44]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80046c0:	430a      	orrs	r2, r1
 80046c2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	691a      	ldr	r2, [r3, #16]
 80046c8:	2380      	movs	r3, #128	; 0x80
 80046ca:	01db      	lsls	r3, r3, #7
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d106      	bne.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80046d0:	4b06      	ldr	r3, [pc, #24]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80046d2:	68da      	ldr	r2, [r3, #12]
 80046d4:	4b05      	ldr	r3, [pc, #20]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80046d6:	2180      	movs	r1, #128	; 0x80
 80046d8:	0249      	lsls	r1, r1, #9
 80046da:	430a      	orrs	r2, r1
 80046dc:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80046de:	2312      	movs	r3, #18
 80046e0:	18fb      	adds	r3, r7, r3
 80046e2:	781b      	ldrb	r3, [r3, #0]
}
 80046e4:	0018      	movs	r0, r3
 80046e6:	46bd      	mov	sp, r7
 80046e8:	b006      	add	sp, #24
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	40021000 	.word	0x40021000
 80046f0:	40007000 	.word	0x40007000
 80046f4:	fffffcff 	.word	0xfffffcff
 80046f8:	fffeffff 	.word	0xfffeffff
 80046fc:	00001388 	.word	0x00001388
 8004700:	efffffff 	.word	0xefffffff
 8004704:	ffffcfff 	.word	0xffffcfff
 8004708:	ffff3fff 	.word	0xffff3fff

0800470c <__libc_init_array>:
 800470c:	b570      	push	{r4, r5, r6, lr}
 800470e:	2600      	movs	r6, #0
 8004710:	4d0c      	ldr	r5, [pc, #48]	; (8004744 <__libc_init_array+0x38>)
 8004712:	4c0d      	ldr	r4, [pc, #52]	; (8004748 <__libc_init_array+0x3c>)
 8004714:	1b64      	subs	r4, r4, r5
 8004716:	10a4      	asrs	r4, r4, #2
 8004718:	42a6      	cmp	r6, r4
 800471a:	d109      	bne.n	8004730 <__libc_init_array+0x24>
 800471c:	2600      	movs	r6, #0
 800471e:	f000 f82b 	bl	8004778 <_init>
 8004722:	4d0a      	ldr	r5, [pc, #40]	; (800474c <__libc_init_array+0x40>)
 8004724:	4c0a      	ldr	r4, [pc, #40]	; (8004750 <__libc_init_array+0x44>)
 8004726:	1b64      	subs	r4, r4, r5
 8004728:	10a4      	asrs	r4, r4, #2
 800472a:	42a6      	cmp	r6, r4
 800472c:	d105      	bne.n	800473a <__libc_init_array+0x2e>
 800472e:	bd70      	pop	{r4, r5, r6, pc}
 8004730:	00b3      	lsls	r3, r6, #2
 8004732:	58eb      	ldr	r3, [r5, r3]
 8004734:	4798      	blx	r3
 8004736:	3601      	adds	r6, #1
 8004738:	e7ee      	b.n	8004718 <__libc_init_array+0xc>
 800473a:	00b3      	lsls	r3, r6, #2
 800473c:	58eb      	ldr	r3, [r5, r3]
 800473e:	4798      	blx	r3
 8004740:	3601      	adds	r6, #1
 8004742:	e7f2      	b.n	800472a <__libc_init_array+0x1e>
 8004744:	0800490c 	.word	0x0800490c
 8004748:	0800490c 	.word	0x0800490c
 800474c:	0800490c 	.word	0x0800490c
 8004750:	08004910 	.word	0x08004910

08004754 <memcpy>:
 8004754:	2300      	movs	r3, #0
 8004756:	b510      	push	{r4, lr}
 8004758:	429a      	cmp	r2, r3
 800475a:	d100      	bne.n	800475e <memcpy+0xa>
 800475c:	bd10      	pop	{r4, pc}
 800475e:	5ccc      	ldrb	r4, [r1, r3]
 8004760:	54c4      	strb	r4, [r0, r3]
 8004762:	3301      	adds	r3, #1
 8004764:	e7f8      	b.n	8004758 <memcpy+0x4>

08004766 <memset>:
 8004766:	0003      	movs	r3, r0
 8004768:	1882      	adds	r2, r0, r2
 800476a:	4293      	cmp	r3, r2
 800476c:	d100      	bne.n	8004770 <memset+0xa>
 800476e:	4770      	bx	lr
 8004770:	7019      	strb	r1, [r3, #0]
 8004772:	3301      	adds	r3, #1
 8004774:	e7f9      	b.n	800476a <memset+0x4>
	...

08004778 <_init>:
 8004778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800477a:	46c0      	nop			; (mov r8, r8)
 800477c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800477e:	bc08      	pop	{r3}
 8004780:	469e      	mov	lr, r3
 8004782:	4770      	bx	lr

08004784 <_fini>:
 8004784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004786:	46c0      	nop			; (mov r8, r8)
 8004788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800478a:	bc08      	pop	{r3}
 800478c:	469e      	mov	lr, r3
 800478e:	4770      	bx	lr
