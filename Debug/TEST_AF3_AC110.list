
TEST_AF3_AC110.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c3e4  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000508  0800c49c  0800c49c  0001c49c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c9a4  0800c9a4  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800c9a4  0800c9a4  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c9a4  0800c9a4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c9a4  0800c9a4  0001c9a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c9a8  0800c9a8  0001c9a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800c9ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000085c  20000074  0800ca20  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008d0  0800ca20  000208d0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00036025  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005072  00000000  00000000  000560c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001968  00000000  00000000  0005b138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001760  00000000  00000000  0005caa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cb3e  00000000  00000000  0005e200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000233a6  00000000  00000000  0007ad3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1c25  00000000  00000000  0009e0e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013fd09  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f7c  00000000  00000000  0013fd5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000074 	.word	0x20000074
 80000d8:	00000000 	.word	0x00000000
 80000dc:	0800c484 	.word	0x0800c484

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000078 	.word	0x20000078
 80000fc:	0800c484 	.word	0x0800c484

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_shi>:
 8000110:	b403      	push	{r0, r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0040      	lsls	r0, r0, #1
 8000118:	0049      	lsls	r1, r1, #1
 800011a:	5e09      	ldrsh	r1, [r1, r0]
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	448e      	add	lr, r1
 8000120:	bc03      	pop	{r0, r1}
 8000122:	4770      	bx	lr

08000124 <__udivsi3>:
 8000124:	2200      	movs	r2, #0
 8000126:	0843      	lsrs	r3, r0, #1
 8000128:	428b      	cmp	r3, r1
 800012a:	d374      	bcc.n	8000216 <__udivsi3+0xf2>
 800012c:	0903      	lsrs	r3, r0, #4
 800012e:	428b      	cmp	r3, r1
 8000130:	d35f      	bcc.n	80001f2 <__udivsi3+0xce>
 8000132:	0a03      	lsrs	r3, r0, #8
 8000134:	428b      	cmp	r3, r1
 8000136:	d344      	bcc.n	80001c2 <__udivsi3+0x9e>
 8000138:	0b03      	lsrs	r3, r0, #12
 800013a:	428b      	cmp	r3, r1
 800013c:	d328      	bcc.n	8000190 <__udivsi3+0x6c>
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d30d      	bcc.n	8000160 <__udivsi3+0x3c>
 8000144:	22ff      	movs	r2, #255	; 0xff
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	ba12      	rev	r2, r2
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d302      	bcc.n	8000156 <__udivsi3+0x32>
 8000150:	1212      	asrs	r2, r2, #8
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	d065      	beq.n	8000222 <__udivsi3+0xfe>
 8000156:	0b03      	lsrs	r3, r0, #12
 8000158:	428b      	cmp	r3, r1
 800015a:	d319      	bcc.n	8000190 <__udivsi3+0x6c>
 800015c:	e000      	b.n	8000160 <__udivsi3+0x3c>
 800015e:	0a09      	lsrs	r1, r1, #8
 8000160:	0bc3      	lsrs	r3, r0, #15
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x46>
 8000166:	03cb      	lsls	r3, r1, #15
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b83      	lsrs	r3, r0, #14
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x52>
 8000172:	038b      	lsls	r3, r1, #14
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b43      	lsrs	r3, r0, #13
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x5e>
 800017e:	034b      	lsls	r3, r1, #13
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b03      	lsrs	r3, r0, #12
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x6a>
 800018a:	030b      	lsls	r3, r1, #12
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0ac3      	lsrs	r3, r0, #11
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x76>
 8000196:	02cb      	lsls	r3, r1, #11
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a83      	lsrs	r3, r0, #10
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x82>
 80001a2:	028b      	lsls	r3, r1, #10
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a43      	lsrs	r3, r0, #9
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x8e>
 80001ae:	024b      	lsls	r3, r1, #9
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a03      	lsrs	r3, r0, #8
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x9a>
 80001ba:	020b      	lsls	r3, r1, #8
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	d2cd      	bcs.n	800015e <__udivsi3+0x3a>
 80001c2:	09c3      	lsrs	r3, r0, #7
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xa8>
 80001c8:	01cb      	lsls	r3, r1, #7
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0983      	lsrs	r3, r0, #6
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xb4>
 80001d4:	018b      	lsls	r3, r1, #6
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0943      	lsrs	r3, r0, #5
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xc0>
 80001e0:	014b      	lsls	r3, r1, #5
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0903      	lsrs	r3, r0, #4
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xcc>
 80001ec:	010b      	lsls	r3, r1, #4
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	08c3      	lsrs	r3, r0, #3
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xd8>
 80001f8:	00cb      	lsls	r3, r1, #3
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0883      	lsrs	r3, r0, #2
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xe4>
 8000204:	008b      	lsls	r3, r1, #2
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0843      	lsrs	r3, r0, #1
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xf0>
 8000210:	004b      	lsls	r3, r1, #1
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	1a41      	subs	r1, r0, r1
 8000218:	d200      	bcs.n	800021c <__udivsi3+0xf8>
 800021a:	4601      	mov	r1, r0
 800021c:	4152      	adcs	r2, r2
 800021e:	4610      	mov	r0, r2
 8000220:	4770      	bx	lr
 8000222:	e7ff      	b.n	8000224 <__udivsi3+0x100>
 8000224:	b501      	push	{r0, lr}
 8000226:	2000      	movs	r0, #0
 8000228:	f000 f8f0 	bl	800040c <__aeabi_idiv0>
 800022c:	bd02      	pop	{r1, pc}
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_uidivmod>:
 8000230:	2900      	cmp	r1, #0
 8000232:	d0f7      	beq.n	8000224 <__udivsi3+0x100>
 8000234:	e776      	b.n	8000124 <__udivsi3>
 8000236:	4770      	bx	lr

08000238 <__divsi3>:
 8000238:	4603      	mov	r3, r0
 800023a:	430b      	orrs	r3, r1
 800023c:	d47f      	bmi.n	800033e <__divsi3+0x106>
 800023e:	2200      	movs	r2, #0
 8000240:	0843      	lsrs	r3, r0, #1
 8000242:	428b      	cmp	r3, r1
 8000244:	d374      	bcc.n	8000330 <__divsi3+0xf8>
 8000246:	0903      	lsrs	r3, r0, #4
 8000248:	428b      	cmp	r3, r1
 800024a:	d35f      	bcc.n	800030c <__divsi3+0xd4>
 800024c:	0a03      	lsrs	r3, r0, #8
 800024e:	428b      	cmp	r3, r1
 8000250:	d344      	bcc.n	80002dc <__divsi3+0xa4>
 8000252:	0b03      	lsrs	r3, r0, #12
 8000254:	428b      	cmp	r3, r1
 8000256:	d328      	bcc.n	80002aa <__divsi3+0x72>
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d30d      	bcc.n	800027a <__divsi3+0x42>
 800025e:	22ff      	movs	r2, #255	; 0xff
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	ba12      	rev	r2, r2
 8000264:	0c03      	lsrs	r3, r0, #16
 8000266:	428b      	cmp	r3, r1
 8000268:	d302      	bcc.n	8000270 <__divsi3+0x38>
 800026a:	1212      	asrs	r2, r2, #8
 800026c:	0209      	lsls	r1, r1, #8
 800026e:	d065      	beq.n	800033c <__divsi3+0x104>
 8000270:	0b03      	lsrs	r3, r0, #12
 8000272:	428b      	cmp	r3, r1
 8000274:	d319      	bcc.n	80002aa <__divsi3+0x72>
 8000276:	e000      	b.n	800027a <__divsi3+0x42>
 8000278:	0a09      	lsrs	r1, r1, #8
 800027a:	0bc3      	lsrs	r3, r0, #15
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x4c>
 8000280:	03cb      	lsls	r3, r1, #15
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b83      	lsrs	r3, r0, #14
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x58>
 800028c:	038b      	lsls	r3, r1, #14
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b43      	lsrs	r3, r0, #13
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x64>
 8000298:	034b      	lsls	r3, r1, #13
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b03      	lsrs	r3, r0, #12
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x70>
 80002a4:	030b      	lsls	r3, r1, #12
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0ac3      	lsrs	r3, r0, #11
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x7c>
 80002b0:	02cb      	lsls	r3, r1, #11
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a83      	lsrs	r3, r0, #10
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x88>
 80002bc:	028b      	lsls	r3, r1, #10
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a43      	lsrs	r3, r0, #9
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x94>
 80002c8:	024b      	lsls	r3, r1, #9
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a03      	lsrs	r3, r0, #8
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0xa0>
 80002d4:	020b      	lsls	r3, r1, #8
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	d2cd      	bcs.n	8000278 <__divsi3+0x40>
 80002dc:	09c3      	lsrs	r3, r0, #7
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xae>
 80002e2:	01cb      	lsls	r3, r1, #7
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0983      	lsrs	r3, r0, #6
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xba>
 80002ee:	018b      	lsls	r3, r1, #6
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0943      	lsrs	r3, r0, #5
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xc6>
 80002fa:	014b      	lsls	r3, r1, #5
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0903      	lsrs	r3, r0, #4
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xd2>
 8000306:	010b      	lsls	r3, r1, #4
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	08c3      	lsrs	r3, r0, #3
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xde>
 8000312:	00cb      	lsls	r3, r1, #3
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0883      	lsrs	r3, r0, #2
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xea>
 800031e:	008b      	lsls	r3, r1, #2
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0843      	lsrs	r3, r0, #1
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xf6>
 800032a:	004b      	lsls	r3, r1, #1
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	1a41      	subs	r1, r0, r1
 8000332:	d200      	bcs.n	8000336 <__divsi3+0xfe>
 8000334:	4601      	mov	r1, r0
 8000336:	4152      	adcs	r2, r2
 8000338:	4610      	mov	r0, r2
 800033a:	4770      	bx	lr
 800033c:	e05d      	b.n	80003fa <__divsi3+0x1c2>
 800033e:	0fca      	lsrs	r2, r1, #31
 8000340:	d000      	beq.n	8000344 <__divsi3+0x10c>
 8000342:	4249      	negs	r1, r1
 8000344:	1003      	asrs	r3, r0, #32
 8000346:	d300      	bcc.n	800034a <__divsi3+0x112>
 8000348:	4240      	negs	r0, r0
 800034a:	4053      	eors	r3, r2
 800034c:	2200      	movs	r2, #0
 800034e:	469c      	mov	ip, r3
 8000350:	0903      	lsrs	r3, r0, #4
 8000352:	428b      	cmp	r3, r1
 8000354:	d32d      	bcc.n	80003b2 <__divsi3+0x17a>
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d312      	bcc.n	8000382 <__divsi3+0x14a>
 800035c:	22fc      	movs	r2, #252	; 0xfc
 800035e:	0189      	lsls	r1, r1, #6
 8000360:	ba12      	rev	r2, r2
 8000362:	0a03      	lsrs	r3, r0, #8
 8000364:	428b      	cmp	r3, r1
 8000366:	d30c      	bcc.n	8000382 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d308      	bcc.n	8000382 <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d304      	bcc.n	8000382 <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	d03a      	beq.n	80003f2 <__divsi3+0x1ba>
 800037c:	1192      	asrs	r2, r2, #6
 800037e:	e000      	b.n	8000382 <__divsi3+0x14a>
 8000380:	0989      	lsrs	r1, r1, #6
 8000382:	09c3      	lsrs	r3, r0, #7
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x154>
 8000388:	01cb      	lsls	r3, r1, #7
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0983      	lsrs	r3, r0, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x160>
 8000394:	018b      	lsls	r3, r1, #6
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0943      	lsrs	r3, r0, #5
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x16c>
 80003a0:	014b      	lsls	r3, r1, #5
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0903      	lsrs	r3, r0, #4
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x178>
 80003ac:	010b      	lsls	r3, r1, #4
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	08c3      	lsrs	r3, r0, #3
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x184>
 80003b8:	00cb      	lsls	r3, r1, #3
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0883      	lsrs	r3, r0, #2
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x190>
 80003c4:	008b      	lsls	r3, r1, #2
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	d2d9      	bcs.n	8000380 <__divsi3+0x148>
 80003cc:	0843      	lsrs	r3, r0, #1
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d301      	bcc.n	80003d6 <__divsi3+0x19e>
 80003d2:	004b      	lsls	r3, r1, #1
 80003d4:	1ac0      	subs	r0, r0, r3
 80003d6:	4152      	adcs	r2, r2
 80003d8:	1a41      	subs	r1, r0, r1
 80003da:	d200      	bcs.n	80003de <__divsi3+0x1a6>
 80003dc:	4601      	mov	r1, r0
 80003de:	4663      	mov	r3, ip
 80003e0:	4152      	adcs	r2, r2
 80003e2:	105b      	asrs	r3, r3, #1
 80003e4:	4610      	mov	r0, r2
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x1b4>
 80003e8:	4240      	negs	r0, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d500      	bpl.n	80003f0 <__divsi3+0x1b8>
 80003ee:	4249      	negs	r1, r1
 80003f0:	4770      	bx	lr
 80003f2:	4663      	mov	r3, ip
 80003f4:	105b      	asrs	r3, r3, #1
 80003f6:	d300      	bcc.n	80003fa <__divsi3+0x1c2>
 80003f8:	4240      	negs	r0, r0
 80003fa:	b501      	push	{r0, lr}
 80003fc:	2000      	movs	r0, #0
 80003fe:	f000 f805 	bl	800040c <__aeabi_idiv0>
 8000402:	bd02      	pop	{r1, pc}

08000404 <__aeabi_idivmod>:
 8000404:	2900      	cmp	r1, #0
 8000406:	d0f8      	beq.n	80003fa <__divsi3+0x1c2>
 8000408:	e716      	b.n	8000238 <__divsi3>
 800040a:	4770      	bx	lr

0800040c <__aeabi_idiv0>:
 800040c:	4770      	bx	lr
 800040e:	46c0      	nop			; (mov r8, r8)

08000410 <__aeabi_f2uiz>:
 8000410:	219e      	movs	r1, #158	; 0x9e
 8000412:	b510      	push	{r4, lr}
 8000414:	05c9      	lsls	r1, r1, #23
 8000416:	1c04      	adds	r4, r0, #0
 8000418:	f000 fe28 	bl	800106c <__aeabi_fcmpge>
 800041c:	2800      	cmp	r0, #0
 800041e:	d103      	bne.n	8000428 <__aeabi_f2uiz+0x18>
 8000420:	1c20      	adds	r0, r4, #0
 8000422:	f000 fd97 	bl	8000f54 <__aeabi_f2iz>
 8000426:	bd10      	pop	{r4, pc}
 8000428:	219e      	movs	r1, #158	; 0x9e
 800042a:	1c20      	adds	r0, r4, #0
 800042c:	05c9      	lsls	r1, r1, #23
 800042e:	f000 fbc9 	bl	8000bc4 <__aeabi_fsub>
 8000432:	f000 fd8f 	bl	8000f54 <__aeabi_f2iz>
 8000436:	2380      	movs	r3, #128	; 0x80
 8000438:	061b      	lsls	r3, r3, #24
 800043a:	469c      	mov	ip, r3
 800043c:	4460      	add	r0, ip
 800043e:	e7f2      	b.n	8000426 <__aeabi_f2uiz+0x16>

08000440 <__aeabi_fadd>:
 8000440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000442:	4646      	mov	r6, r8
 8000444:	46d6      	mov	lr, sl
 8000446:	464f      	mov	r7, r9
 8000448:	024d      	lsls	r5, r1, #9
 800044a:	0242      	lsls	r2, r0, #9
 800044c:	b5c0      	push	{r6, r7, lr}
 800044e:	0a52      	lsrs	r2, r2, #9
 8000450:	0a6e      	lsrs	r6, r5, #9
 8000452:	0047      	lsls	r7, r0, #1
 8000454:	46b0      	mov	r8, r6
 8000456:	0e3f      	lsrs	r7, r7, #24
 8000458:	004e      	lsls	r6, r1, #1
 800045a:	0fc4      	lsrs	r4, r0, #31
 800045c:	00d0      	lsls	r0, r2, #3
 800045e:	4694      	mov	ip, r2
 8000460:	003b      	movs	r3, r7
 8000462:	4682      	mov	sl, r0
 8000464:	0e36      	lsrs	r6, r6, #24
 8000466:	0fc9      	lsrs	r1, r1, #31
 8000468:	09ad      	lsrs	r5, r5, #6
 800046a:	428c      	cmp	r4, r1
 800046c:	d06d      	beq.n	800054a <__aeabi_fadd+0x10a>
 800046e:	1bb8      	subs	r0, r7, r6
 8000470:	4681      	mov	r9, r0
 8000472:	2800      	cmp	r0, #0
 8000474:	dd4d      	ble.n	8000512 <__aeabi_fadd+0xd2>
 8000476:	2e00      	cmp	r6, #0
 8000478:	d100      	bne.n	800047c <__aeabi_fadd+0x3c>
 800047a:	e088      	b.n	800058e <__aeabi_fadd+0x14e>
 800047c:	2fff      	cmp	r7, #255	; 0xff
 800047e:	d05a      	beq.n	8000536 <__aeabi_fadd+0xf6>
 8000480:	2380      	movs	r3, #128	; 0x80
 8000482:	04db      	lsls	r3, r3, #19
 8000484:	431d      	orrs	r5, r3
 8000486:	464b      	mov	r3, r9
 8000488:	2201      	movs	r2, #1
 800048a:	2b1b      	cmp	r3, #27
 800048c:	dc0a      	bgt.n	80004a4 <__aeabi_fadd+0x64>
 800048e:	002b      	movs	r3, r5
 8000490:	464a      	mov	r2, r9
 8000492:	4649      	mov	r1, r9
 8000494:	40d3      	lsrs	r3, r2
 8000496:	2220      	movs	r2, #32
 8000498:	1a52      	subs	r2, r2, r1
 800049a:	4095      	lsls	r5, r2
 800049c:	002a      	movs	r2, r5
 800049e:	1e55      	subs	r5, r2, #1
 80004a0:	41aa      	sbcs	r2, r5
 80004a2:	431a      	orrs	r2, r3
 80004a4:	4653      	mov	r3, sl
 80004a6:	1a9a      	subs	r2, r3, r2
 80004a8:	0153      	lsls	r3, r2, #5
 80004aa:	d400      	bmi.n	80004ae <__aeabi_fadd+0x6e>
 80004ac:	e0b9      	b.n	8000622 <__aeabi_fadd+0x1e2>
 80004ae:	0192      	lsls	r2, r2, #6
 80004b0:	0996      	lsrs	r6, r2, #6
 80004b2:	0030      	movs	r0, r6
 80004b4:	f000 fde4 	bl	8001080 <__clzsi2>
 80004b8:	3805      	subs	r0, #5
 80004ba:	4086      	lsls	r6, r0
 80004bc:	4287      	cmp	r7, r0
 80004be:	dd00      	ble.n	80004c2 <__aeabi_fadd+0x82>
 80004c0:	e0d4      	b.n	800066c <__aeabi_fadd+0x22c>
 80004c2:	0033      	movs	r3, r6
 80004c4:	1bc7      	subs	r7, r0, r7
 80004c6:	2020      	movs	r0, #32
 80004c8:	3701      	adds	r7, #1
 80004ca:	40fb      	lsrs	r3, r7
 80004cc:	1bc7      	subs	r7, r0, r7
 80004ce:	40be      	lsls	r6, r7
 80004d0:	0032      	movs	r2, r6
 80004d2:	1e56      	subs	r6, r2, #1
 80004d4:	41b2      	sbcs	r2, r6
 80004d6:	2700      	movs	r7, #0
 80004d8:	431a      	orrs	r2, r3
 80004da:	0753      	lsls	r3, r2, #29
 80004dc:	d004      	beq.n	80004e8 <__aeabi_fadd+0xa8>
 80004de:	230f      	movs	r3, #15
 80004e0:	4013      	ands	r3, r2
 80004e2:	2b04      	cmp	r3, #4
 80004e4:	d000      	beq.n	80004e8 <__aeabi_fadd+0xa8>
 80004e6:	3204      	adds	r2, #4
 80004e8:	0153      	lsls	r3, r2, #5
 80004ea:	d400      	bmi.n	80004ee <__aeabi_fadd+0xae>
 80004ec:	e09c      	b.n	8000628 <__aeabi_fadd+0x1e8>
 80004ee:	1c7b      	adds	r3, r7, #1
 80004f0:	2ffe      	cmp	r7, #254	; 0xfe
 80004f2:	d100      	bne.n	80004f6 <__aeabi_fadd+0xb6>
 80004f4:	e09a      	b.n	800062c <__aeabi_fadd+0x1ec>
 80004f6:	0192      	lsls	r2, r2, #6
 80004f8:	0a52      	lsrs	r2, r2, #9
 80004fa:	4694      	mov	ip, r2
 80004fc:	b2db      	uxtb	r3, r3
 80004fe:	05d8      	lsls	r0, r3, #23
 8000500:	4663      	mov	r3, ip
 8000502:	07e4      	lsls	r4, r4, #31
 8000504:	4318      	orrs	r0, r3
 8000506:	4320      	orrs	r0, r4
 8000508:	bce0      	pop	{r5, r6, r7}
 800050a:	46ba      	mov	sl, r7
 800050c:	46b1      	mov	r9, r6
 800050e:	46a8      	mov	r8, r5
 8000510:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000512:	2800      	cmp	r0, #0
 8000514:	d049      	beq.n	80005aa <__aeabi_fadd+0x16a>
 8000516:	1bf3      	subs	r3, r6, r7
 8000518:	2f00      	cmp	r7, #0
 800051a:	d000      	beq.n	800051e <__aeabi_fadd+0xde>
 800051c:	e0b6      	b.n	800068c <__aeabi_fadd+0x24c>
 800051e:	4652      	mov	r2, sl
 8000520:	2a00      	cmp	r2, #0
 8000522:	d060      	beq.n	80005e6 <__aeabi_fadd+0x1a6>
 8000524:	3b01      	subs	r3, #1
 8000526:	2b00      	cmp	r3, #0
 8000528:	d100      	bne.n	800052c <__aeabi_fadd+0xec>
 800052a:	e0fc      	b.n	8000726 <__aeabi_fadd+0x2e6>
 800052c:	2eff      	cmp	r6, #255	; 0xff
 800052e:	d000      	beq.n	8000532 <__aeabi_fadd+0xf2>
 8000530:	e0b4      	b.n	800069c <__aeabi_fadd+0x25c>
 8000532:	000c      	movs	r4, r1
 8000534:	4642      	mov	r2, r8
 8000536:	2a00      	cmp	r2, #0
 8000538:	d078      	beq.n	800062c <__aeabi_fadd+0x1ec>
 800053a:	2080      	movs	r0, #128	; 0x80
 800053c:	03c0      	lsls	r0, r0, #15
 800053e:	4310      	orrs	r0, r2
 8000540:	0242      	lsls	r2, r0, #9
 8000542:	0a53      	lsrs	r3, r2, #9
 8000544:	469c      	mov	ip, r3
 8000546:	23ff      	movs	r3, #255	; 0xff
 8000548:	e7d9      	b.n	80004fe <__aeabi_fadd+0xbe>
 800054a:	1bb9      	subs	r1, r7, r6
 800054c:	2900      	cmp	r1, #0
 800054e:	dd71      	ble.n	8000634 <__aeabi_fadd+0x1f4>
 8000550:	2e00      	cmp	r6, #0
 8000552:	d03f      	beq.n	80005d4 <__aeabi_fadd+0x194>
 8000554:	2fff      	cmp	r7, #255	; 0xff
 8000556:	d0ee      	beq.n	8000536 <__aeabi_fadd+0xf6>
 8000558:	2380      	movs	r3, #128	; 0x80
 800055a:	04db      	lsls	r3, r3, #19
 800055c:	431d      	orrs	r5, r3
 800055e:	2201      	movs	r2, #1
 8000560:	291b      	cmp	r1, #27
 8000562:	dc07      	bgt.n	8000574 <__aeabi_fadd+0x134>
 8000564:	002a      	movs	r2, r5
 8000566:	2320      	movs	r3, #32
 8000568:	40ca      	lsrs	r2, r1
 800056a:	1a59      	subs	r1, r3, r1
 800056c:	408d      	lsls	r5, r1
 800056e:	1e6b      	subs	r3, r5, #1
 8000570:	419d      	sbcs	r5, r3
 8000572:	432a      	orrs	r2, r5
 8000574:	4452      	add	r2, sl
 8000576:	0153      	lsls	r3, r2, #5
 8000578:	d553      	bpl.n	8000622 <__aeabi_fadd+0x1e2>
 800057a:	3701      	adds	r7, #1
 800057c:	2fff      	cmp	r7, #255	; 0xff
 800057e:	d055      	beq.n	800062c <__aeabi_fadd+0x1ec>
 8000580:	2301      	movs	r3, #1
 8000582:	497b      	ldr	r1, [pc, #492]	; (8000770 <__aeabi_fadd+0x330>)
 8000584:	4013      	ands	r3, r2
 8000586:	0852      	lsrs	r2, r2, #1
 8000588:	400a      	ands	r2, r1
 800058a:	431a      	orrs	r2, r3
 800058c:	e7a5      	b.n	80004da <__aeabi_fadd+0x9a>
 800058e:	2d00      	cmp	r5, #0
 8000590:	d02c      	beq.n	80005ec <__aeabi_fadd+0x1ac>
 8000592:	2301      	movs	r3, #1
 8000594:	425b      	negs	r3, r3
 8000596:	469c      	mov	ip, r3
 8000598:	44e1      	add	r9, ip
 800059a:	464b      	mov	r3, r9
 800059c:	2b00      	cmp	r3, #0
 800059e:	d100      	bne.n	80005a2 <__aeabi_fadd+0x162>
 80005a0:	e0ad      	b.n	80006fe <__aeabi_fadd+0x2be>
 80005a2:	2fff      	cmp	r7, #255	; 0xff
 80005a4:	d000      	beq.n	80005a8 <__aeabi_fadd+0x168>
 80005a6:	e76e      	b.n	8000486 <__aeabi_fadd+0x46>
 80005a8:	e7c5      	b.n	8000536 <__aeabi_fadd+0xf6>
 80005aa:	20fe      	movs	r0, #254	; 0xfe
 80005ac:	1c7e      	adds	r6, r7, #1
 80005ae:	4230      	tst	r0, r6
 80005b0:	d160      	bne.n	8000674 <__aeabi_fadd+0x234>
 80005b2:	2f00      	cmp	r7, #0
 80005b4:	d000      	beq.n	80005b8 <__aeabi_fadd+0x178>
 80005b6:	e093      	b.n	80006e0 <__aeabi_fadd+0x2a0>
 80005b8:	4652      	mov	r2, sl
 80005ba:	2a00      	cmp	r2, #0
 80005bc:	d100      	bne.n	80005c0 <__aeabi_fadd+0x180>
 80005be:	e0b6      	b.n	800072e <__aeabi_fadd+0x2ee>
 80005c0:	2d00      	cmp	r5, #0
 80005c2:	d09c      	beq.n	80004fe <__aeabi_fadd+0xbe>
 80005c4:	1b52      	subs	r2, r2, r5
 80005c6:	0150      	lsls	r0, r2, #5
 80005c8:	d400      	bmi.n	80005cc <__aeabi_fadd+0x18c>
 80005ca:	e0c3      	b.n	8000754 <__aeabi_fadd+0x314>
 80005cc:	4653      	mov	r3, sl
 80005ce:	000c      	movs	r4, r1
 80005d0:	1aea      	subs	r2, r5, r3
 80005d2:	e782      	b.n	80004da <__aeabi_fadd+0x9a>
 80005d4:	2d00      	cmp	r5, #0
 80005d6:	d009      	beq.n	80005ec <__aeabi_fadd+0x1ac>
 80005d8:	3901      	subs	r1, #1
 80005da:	2900      	cmp	r1, #0
 80005dc:	d100      	bne.n	80005e0 <__aeabi_fadd+0x1a0>
 80005de:	e08b      	b.n	80006f8 <__aeabi_fadd+0x2b8>
 80005e0:	2fff      	cmp	r7, #255	; 0xff
 80005e2:	d1bc      	bne.n	800055e <__aeabi_fadd+0x11e>
 80005e4:	e7a7      	b.n	8000536 <__aeabi_fadd+0xf6>
 80005e6:	000c      	movs	r4, r1
 80005e8:	4642      	mov	r2, r8
 80005ea:	0037      	movs	r7, r6
 80005ec:	2fff      	cmp	r7, #255	; 0xff
 80005ee:	d0a2      	beq.n	8000536 <__aeabi_fadd+0xf6>
 80005f0:	0252      	lsls	r2, r2, #9
 80005f2:	0a53      	lsrs	r3, r2, #9
 80005f4:	469c      	mov	ip, r3
 80005f6:	b2fb      	uxtb	r3, r7
 80005f8:	e781      	b.n	80004fe <__aeabi_fadd+0xbe>
 80005fa:	21fe      	movs	r1, #254	; 0xfe
 80005fc:	3701      	adds	r7, #1
 80005fe:	4239      	tst	r1, r7
 8000600:	d165      	bne.n	80006ce <__aeabi_fadd+0x28e>
 8000602:	2b00      	cmp	r3, #0
 8000604:	d17e      	bne.n	8000704 <__aeabi_fadd+0x2c4>
 8000606:	2800      	cmp	r0, #0
 8000608:	d100      	bne.n	800060c <__aeabi_fadd+0x1cc>
 800060a:	e0aa      	b.n	8000762 <__aeabi_fadd+0x322>
 800060c:	2d00      	cmp	r5, #0
 800060e:	d100      	bne.n	8000612 <__aeabi_fadd+0x1d2>
 8000610:	e775      	b.n	80004fe <__aeabi_fadd+0xbe>
 8000612:	002a      	movs	r2, r5
 8000614:	4452      	add	r2, sl
 8000616:	2700      	movs	r7, #0
 8000618:	0153      	lsls	r3, r2, #5
 800061a:	d502      	bpl.n	8000622 <__aeabi_fadd+0x1e2>
 800061c:	4b55      	ldr	r3, [pc, #340]	; (8000774 <__aeabi_fadd+0x334>)
 800061e:	3701      	adds	r7, #1
 8000620:	401a      	ands	r2, r3
 8000622:	0753      	lsls	r3, r2, #29
 8000624:	d000      	beq.n	8000628 <__aeabi_fadd+0x1e8>
 8000626:	e75a      	b.n	80004de <__aeabi_fadd+0x9e>
 8000628:	08d2      	lsrs	r2, r2, #3
 800062a:	e7df      	b.n	80005ec <__aeabi_fadd+0x1ac>
 800062c:	2200      	movs	r2, #0
 800062e:	23ff      	movs	r3, #255	; 0xff
 8000630:	4694      	mov	ip, r2
 8000632:	e764      	b.n	80004fe <__aeabi_fadd+0xbe>
 8000634:	2900      	cmp	r1, #0
 8000636:	d0e0      	beq.n	80005fa <__aeabi_fadd+0x1ba>
 8000638:	1bf3      	subs	r3, r6, r7
 800063a:	2f00      	cmp	r7, #0
 800063c:	d03e      	beq.n	80006bc <__aeabi_fadd+0x27c>
 800063e:	2eff      	cmp	r6, #255	; 0xff
 8000640:	d100      	bne.n	8000644 <__aeabi_fadd+0x204>
 8000642:	e777      	b.n	8000534 <__aeabi_fadd+0xf4>
 8000644:	2280      	movs	r2, #128	; 0x80
 8000646:	0001      	movs	r1, r0
 8000648:	04d2      	lsls	r2, r2, #19
 800064a:	4311      	orrs	r1, r2
 800064c:	468a      	mov	sl, r1
 800064e:	2201      	movs	r2, #1
 8000650:	2b1b      	cmp	r3, #27
 8000652:	dc08      	bgt.n	8000666 <__aeabi_fadd+0x226>
 8000654:	4652      	mov	r2, sl
 8000656:	2120      	movs	r1, #32
 8000658:	4650      	mov	r0, sl
 800065a:	40da      	lsrs	r2, r3
 800065c:	1acb      	subs	r3, r1, r3
 800065e:	4098      	lsls	r0, r3
 8000660:	1e43      	subs	r3, r0, #1
 8000662:	4198      	sbcs	r0, r3
 8000664:	4302      	orrs	r2, r0
 8000666:	0037      	movs	r7, r6
 8000668:	1952      	adds	r2, r2, r5
 800066a:	e784      	b.n	8000576 <__aeabi_fadd+0x136>
 800066c:	4a41      	ldr	r2, [pc, #260]	; (8000774 <__aeabi_fadd+0x334>)
 800066e:	1a3f      	subs	r7, r7, r0
 8000670:	4032      	ands	r2, r6
 8000672:	e732      	b.n	80004da <__aeabi_fadd+0x9a>
 8000674:	4653      	mov	r3, sl
 8000676:	1b5e      	subs	r6, r3, r5
 8000678:	0173      	lsls	r3, r6, #5
 800067a:	d42d      	bmi.n	80006d8 <__aeabi_fadd+0x298>
 800067c:	2e00      	cmp	r6, #0
 800067e:	d000      	beq.n	8000682 <__aeabi_fadd+0x242>
 8000680:	e717      	b.n	80004b2 <__aeabi_fadd+0x72>
 8000682:	2200      	movs	r2, #0
 8000684:	2400      	movs	r4, #0
 8000686:	2300      	movs	r3, #0
 8000688:	4694      	mov	ip, r2
 800068a:	e738      	b.n	80004fe <__aeabi_fadd+0xbe>
 800068c:	2eff      	cmp	r6, #255	; 0xff
 800068e:	d100      	bne.n	8000692 <__aeabi_fadd+0x252>
 8000690:	e74f      	b.n	8000532 <__aeabi_fadd+0xf2>
 8000692:	2280      	movs	r2, #128	; 0x80
 8000694:	4650      	mov	r0, sl
 8000696:	04d2      	lsls	r2, r2, #19
 8000698:	4310      	orrs	r0, r2
 800069a:	4682      	mov	sl, r0
 800069c:	2201      	movs	r2, #1
 800069e:	2b1b      	cmp	r3, #27
 80006a0:	dc08      	bgt.n	80006b4 <__aeabi_fadd+0x274>
 80006a2:	4652      	mov	r2, sl
 80006a4:	2420      	movs	r4, #32
 80006a6:	4650      	mov	r0, sl
 80006a8:	40da      	lsrs	r2, r3
 80006aa:	1ae3      	subs	r3, r4, r3
 80006ac:	4098      	lsls	r0, r3
 80006ae:	1e43      	subs	r3, r0, #1
 80006b0:	4198      	sbcs	r0, r3
 80006b2:	4302      	orrs	r2, r0
 80006b4:	000c      	movs	r4, r1
 80006b6:	0037      	movs	r7, r6
 80006b8:	1aaa      	subs	r2, r5, r2
 80006ba:	e6f5      	b.n	80004a8 <__aeabi_fadd+0x68>
 80006bc:	2800      	cmp	r0, #0
 80006be:	d093      	beq.n	80005e8 <__aeabi_fadd+0x1a8>
 80006c0:	3b01      	subs	r3, #1
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d04f      	beq.n	8000766 <__aeabi_fadd+0x326>
 80006c6:	2eff      	cmp	r6, #255	; 0xff
 80006c8:	d1c1      	bne.n	800064e <__aeabi_fadd+0x20e>
 80006ca:	4642      	mov	r2, r8
 80006cc:	e733      	b.n	8000536 <__aeabi_fadd+0xf6>
 80006ce:	2fff      	cmp	r7, #255	; 0xff
 80006d0:	d0ac      	beq.n	800062c <__aeabi_fadd+0x1ec>
 80006d2:	4455      	add	r5, sl
 80006d4:	086a      	lsrs	r2, r5, #1
 80006d6:	e7a4      	b.n	8000622 <__aeabi_fadd+0x1e2>
 80006d8:	4653      	mov	r3, sl
 80006da:	000c      	movs	r4, r1
 80006dc:	1aee      	subs	r6, r5, r3
 80006de:	e6e8      	b.n	80004b2 <__aeabi_fadd+0x72>
 80006e0:	4653      	mov	r3, sl
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d128      	bne.n	8000738 <__aeabi_fadd+0x2f8>
 80006e6:	2d00      	cmp	r5, #0
 80006e8:	d000      	beq.n	80006ec <__aeabi_fadd+0x2ac>
 80006ea:	e722      	b.n	8000532 <__aeabi_fadd+0xf2>
 80006ec:	2380      	movs	r3, #128	; 0x80
 80006ee:	03db      	lsls	r3, r3, #15
 80006f0:	469c      	mov	ip, r3
 80006f2:	2400      	movs	r4, #0
 80006f4:	23ff      	movs	r3, #255	; 0xff
 80006f6:	e702      	b.n	80004fe <__aeabi_fadd+0xbe>
 80006f8:	002a      	movs	r2, r5
 80006fa:	4452      	add	r2, sl
 80006fc:	e73b      	b.n	8000576 <__aeabi_fadd+0x136>
 80006fe:	4653      	mov	r3, sl
 8000700:	1b5a      	subs	r2, r3, r5
 8000702:	e6d1      	b.n	80004a8 <__aeabi_fadd+0x68>
 8000704:	2800      	cmp	r0, #0
 8000706:	d100      	bne.n	800070a <__aeabi_fadd+0x2ca>
 8000708:	e714      	b.n	8000534 <__aeabi_fadd+0xf4>
 800070a:	2d00      	cmp	r5, #0
 800070c:	d100      	bne.n	8000710 <__aeabi_fadd+0x2d0>
 800070e:	e712      	b.n	8000536 <__aeabi_fadd+0xf6>
 8000710:	2380      	movs	r3, #128	; 0x80
 8000712:	03db      	lsls	r3, r3, #15
 8000714:	421a      	tst	r2, r3
 8000716:	d100      	bne.n	800071a <__aeabi_fadd+0x2da>
 8000718:	e70d      	b.n	8000536 <__aeabi_fadd+0xf6>
 800071a:	4641      	mov	r1, r8
 800071c:	4219      	tst	r1, r3
 800071e:	d000      	beq.n	8000722 <__aeabi_fadd+0x2e2>
 8000720:	e709      	b.n	8000536 <__aeabi_fadd+0xf6>
 8000722:	4642      	mov	r2, r8
 8000724:	e707      	b.n	8000536 <__aeabi_fadd+0xf6>
 8000726:	000c      	movs	r4, r1
 8000728:	0037      	movs	r7, r6
 800072a:	1aaa      	subs	r2, r5, r2
 800072c:	e6bc      	b.n	80004a8 <__aeabi_fadd+0x68>
 800072e:	2d00      	cmp	r5, #0
 8000730:	d013      	beq.n	800075a <__aeabi_fadd+0x31a>
 8000732:	000c      	movs	r4, r1
 8000734:	46c4      	mov	ip, r8
 8000736:	e6e2      	b.n	80004fe <__aeabi_fadd+0xbe>
 8000738:	2d00      	cmp	r5, #0
 800073a:	d100      	bne.n	800073e <__aeabi_fadd+0x2fe>
 800073c:	e6fb      	b.n	8000536 <__aeabi_fadd+0xf6>
 800073e:	2380      	movs	r3, #128	; 0x80
 8000740:	03db      	lsls	r3, r3, #15
 8000742:	421a      	tst	r2, r3
 8000744:	d100      	bne.n	8000748 <__aeabi_fadd+0x308>
 8000746:	e6f6      	b.n	8000536 <__aeabi_fadd+0xf6>
 8000748:	4640      	mov	r0, r8
 800074a:	4218      	tst	r0, r3
 800074c:	d000      	beq.n	8000750 <__aeabi_fadd+0x310>
 800074e:	e6f2      	b.n	8000536 <__aeabi_fadd+0xf6>
 8000750:	000c      	movs	r4, r1
 8000752:	e6ef      	b.n	8000534 <__aeabi_fadd+0xf4>
 8000754:	2a00      	cmp	r2, #0
 8000756:	d000      	beq.n	800075a <__aeabi_fadd+0x31a>
 8000758:	e763      	b.n	8000622 <__aeabi_fadd+0x1e2>
 800075a:	2200      	movs	r2, #0
 800075c:	2400      	movs	r4, #0
 800075e:	4694      	mov	ip, r2
 8000760:	e6cd      	b.n	80004fe <__aeabi_fadd+0xbe>
 8000762:	46c4      	mov	ip, r8
 8000764:	e6cb      	b.n	80004fe <__aeabi_fadd+0xbe>
 8000766:	002a      	movs	r2, r5
 8000768:	0037      	movs	r7, r6
 800076a:	4452      	add	r2, sl
 800076c:	e703      	b.n	8000576 <__aeabi_fadd+0x136>
 800076e:	46c0      	nop			; (mov r8, r8)
 8000770:	7dffffff 	.word	0x7dffffff
 8000774:	fbffffff 	.word	0xfbffffff

08000778 <__aeabi_fdiv>:
 8000778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800077a:	464f      	mov	r7, r9
 800077c:	4646      	mov	r6, r8
 800077e:	46d6      	mov	lr, sl
 8000780:	0245      	lsls	r5, r0, #9
 8000782:	b5c0      	push	{r6, r7, lr}
 8000784:	0047      	lsls	r7, r0, #1
 8000786:	1c0c      	adds	r4, r1, #0
 8000788:	0a6d      	lsrs	r5, r5, #9
 800078a:	0e3f      	lsrs	r7, r7, #24
 800078c:	0fc6      	lsrs	r6, r0, #31
 800078e:	2f00      	cmp	r7, #0
 8000790:	d066      	beq.n	8000860 <__aeabi_fdiv+0xe8>
 8000792:	2fff      	cmp	r7, #255	; 0xff
 8000794:	d06c      	beq.n	8000870 <__aeabi_fdiv+0xf8>
 8000796:	2300      	movs	r3, #0
 8000798:	00ea      	lsls	r2, r5, #3
 800079a:	2580      	movs	r5, #128	; 0x80
 800079c:	4699      	mov	r9, r3
 800079e:	469a      	mov	sl, r3
 80007a0:	04ed      	lsls	r5, r5, #19
 80007a2:	4315      	orrs	r5, r2
 80007a4:	3f7f      	subs	r7, #127	; 0x7f
 80007a6:	0260      	lsls	r0, r4, #9
 80007a8:	0061      	lsls	r1, r4, #1
 80007aa:	0a43      	lsrs	r3, r0, #9
 80007ac:	4698      	mov	r8, r3
 80007ae:	0e09      	lsrs	r1, r1, #24
 80007b0:	0fe4      	lsrs	r4, r4, #31
 80007b2:	2900      	cmp	r1, #0
 80007b4:	d048      	beq.n	8000848 <__aeabi_fdiv+0xd0>
 80007b6:	29ff      	cmp	r1, #255	; 0xff
 80007b8:	d010      	beq.n	80007dc <__aeabi_fdiv+0x64>
 80007ba:	2280      	movs	r2, #128	; 0x80
 80007bc:	00d8      	lsls	r0, r3, #3
 80007be:	04d2      	lsls	r2, r2, #19
 80007c0:	4302      	orrs	r2, r0
 80007c2:	4690      	mov	r8, r2
 80007c4:	2000      	movs	r0, #0
 80007c6:	397f      	subs	r1, #127	; 0x7f
 80007c8:	464a      	mov	r2, r9
 80007ca:	0033      	movs	r3, r6
 80007cc:	1a7f      	subs	r7, r7, r1
 80007ce:	4302      	orrs	r2, r0
 80007d0:	496c      	ldr	r1, [pc, #432]	; (8000984 <__aeabi_fdiv+0x20c>)
 80007d2:	0092      	lsls	r2, r2, #2
 80007d4:	588a      	ldr	r2, [r1, r2]
 80007d6:	4063      	eors	r3, r4
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	4697      	mov	pc, r2
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d16d      	bne.n	80008bc <__aeabi_fdiv+0x144>
 80007e0:	2002      	movs	r0, #2
 80007e2:	3fff      	subs	r7, #255	; 0xff
 80007e4:	e033      	b.n	800084e <__aeabi_fdiv+0xd6>
 80007e6:	2300      	movs	r3, #0
 80007e8:	4698      	mov	r8, r3
 80007ea:	0026      	movs	r6, r4
 80007ec:	4645      	mov	r5, r8
 80007ee:	4682      	mov	sl, r0
 80007f0:	4653      	mov	r3, sl
 80007f2:	2b02      	cmp	r3, #2
 80007f4:	d100      	bne.n	80007f8 <__aeabi_fdiv+0x80>
 80007f6:	e07f      	b.n	80008f8 <__aeabi_fdiv+0x180>
 80007f8:	2b03      	cmp	r3, #3
 80007fa:	d100      	bne.n	80007fe <__aeabi_fdiv+0x86>
 80007fc:	e094      	b.n	8000928 <__aeabi_fdiv+0x1b0>
 80007fe:	2b01      	cmp	r3, #1
 8000800:	d017      	beq.n	8000832 <__aeabi_fdiv+0xba>
 8000802:	0038      	movs	r0, r7
 8000804:	307f      	adds	r0, #127	; 0x7f
 8000806:	2800      	cmp	r0, #0
 8000808:	dd5f      	ble.n	80008ca <__aeabi_fdiv+0x152>
 800080a:	076b      	lsls	r3, r5, #29
 800080c:	d004      	beq.n	8000818 <__aeabi_fdiv+0xa0>
 800080e:	230f      	movs	r3, #15
 8000810:	402b      	ands	r3, r5
 8000812:	2b04      	cmp	r3, #4
 8000814:	d000      	beq.n	8000818 <__aeabi_fdiv+0xa0>
 8000816:	3504      	adds	r5, #4
 8000818:	012b      	lsls	r3, r5, #4
 800081a:	d503      	bpl.n	8000824 <__aeabi_fdiv+0xac>
 800081c:	0038      	movs	r0, r7
 800081e:	4b5a      	ldr	r3, [pc, #360]	; (8000988 <__aeabi_fdiv+0x210>)
 8000820:	3080      	adds	r0, #128	; 0x80
 8000822:	401d      	ands	r5, r3
 8000824:	28fe      	cmp	r0, #254	; 0xfe
 8000826:	dc67      	bgt.n	80008f8 <__aeabi_fdiv+0x180>
 8000828:	01ad      	lsls	r5, r5, #6
 800082a:	0a6d      	lsrs	r5, r5, #9
 800082c:	b2c0      	uxtb	r0, r0
 800082e:	e002      	b.n	8000836 <__aeabi_fdiv+0xbe>
 8000830:	001e      	movs	r6, r3
 8000832:	2000      	movs	r0, #0
 8000834:	2500      	movs	r5, #0
 8000836:	05c0      	lsls	r0, r0, #23
 8000838:	4328      	orrs	r0, r5
 800083a:	07f6      	lsls	r6, r6, #31
 800083c:	4330      	orrs	r0, r6
 800083e:	bce0      	pop	{r5, r6, r7}
 8000840:	46ba      	mov	sl, r7
 8000842:	46b1      	mov	r9, r6
 8000844:	46a8      	mov	r8, r5
 8000846:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000848:	2b00      	cmp	r3, #0
 800084a:	d12b      	bne.n	80008a4 <__aeabi_fdiv+0x12c>
 800084c:	2001      	movs	r0, #1
 800084e:	464a      	mov	r2, r9
 8000850:	0033      	movs	r3, r6
 8000852:	494e      	ldr	r1, [pc, #312]	; (800098c <__aeabi_fdiv+0x214>)
 8000854:	4302      	orrs	r2, r0
 8000856:	0092      	lsls	r2, r2, #2
 8000858:	588a      	ldr	r2, [r1, r2]
 800085a:	4063      	eors	r3, r4
 800085c:	b2db      	uxtb	r3, r3
 800085e:	4697      	mov	pc, r2
 8000860:	2d00      	cmp	r5, #0
 8000862:	d113      	bne.n	800088c <__aeabi_fdiv+0x114>
 8000864:	2304      	movs	r3, #4
 8000866:	4699      	mov	r9, r3
 8000868:	3b03      	subs	r3, #3
 800086a:	2700      	movs	r7, #0
 800086c:	469a      	mov	sl, r3
 800086e:	e79a      	b.n	80007a6 <__aeabi_fdiv+0x2e>
 8000870:	2d00      	cmp	r5, #0
 8000872:	d105      	bne.n	8000880 <__aeabi_fdiv+0x108>
 8000874:	2308      	movs	r3, #8
 8000876:	4699      	mov	r9, r3
 8000878:	3b06      	subs	r3, #6
 800087a:	27ff      	movs	r7, #255	; 0xff
 800087c:	469a      	mov	sl, r3
 800087e:	e792      	b.n	80007a6 <__aeabi_fdiv+0x2e>
 8000880:	230c      	movs	r3, #12
 8000882:	4699      	mov	r9, r3
 8000884:	3b09      	subs	r3, #9
 8000886:	27ff      	movs	r7, #255	; 0xff
 8000888:	469a      	mov	sl, r3
 800088a:	e78c      	b.n	80007a6 <__aeabi_fdiv+0x2e>
 800088c:	0028      	movs	r0, r5
 800088e:	f000 fbf7 	bl	8001080 <__clzsi2>
 8000892:	2776      	movs	r7, #118	; 0x76
 8000894:	1f43      	subs	r3, r0, #5
 8000896:	409d      	lsls	r5, r3
 8000898:	2300      	movs	r3, #0
 800089a:	427f      	negs	r7, r7
 800089c:	4699      	mov	r9, r3
 800089e:	469a      	mov	sl, r3
 80008a0:	1a3f      	subs	r7, r7, r0
 80008a2:	e780      	b.n	80007a6 <__aeabi_fdiv+0x2e>
 80008a4:	0018      	movs	r0, r3
 80008a6:	f000 fbeb 	bl	8001080 <__clzsi2>
 80008aa:	4642      	mov	r2, r8
 80008ac:	1f43      	subs	r3, r0, #5
 80008ae:	2176      	movs	r1, #118	; 0x76
 80008b0:	409a      	lsls	r2, r3
 80008b2:	4249      	negs	r1, r1
 80008b4:	1a09      	subs	r1, r1, r0
 80008b6:	4690      	mov	r8, r2
 80008b8:	2000      	movs	r0, #0
 80008ba:	e785      	b.n	80007c8 <__aeabi_fdiv+0x50>
 80008bc:	21ff      	movs	r1, #255	; 0xff
 80008be:	2003      	movs	r0, #3
 80008c0:	e782      	b.n	80007c8 <__aeabi_fdiv+0x50>
 80008c2:	001e      	movs	r6, r3
 80008c4:	20ff      	movs	r0, #255	; 0xff
 80008c6:	2500      	movs	r5, #0
 80008c8:	e7b5      	b.n	8000836 <__aeabi_fdiv+0xbe>
 80008ca:	2301      	movs	r3, #1
 80008cc:	1a1b      	subs	r3, r3, r0
 80008ce:	2b1b      	cmp	r3, #27
 80008d0:	dcaf      	bgt.n	8000832 <__aeabi_fdiv+0xba>
 80008d2:	379e      	adds	r7, #158	; 0x9e
 80008d4:	0029      	movs	r1, r5
 80008d6:	40bd      	lsls	r5, r7
 80008d8:	40d9      	lsrs	r1, r3
 80008da:	1e6a      	subs	r2, r5, #1
 80008dc:	4195      	sbcs	r5, r2
 80008de:	430d      	orrs	r5, r1
 80008e0:	076b      	lsls	r3, r5, #29
 80008e2:	d004      	beq.n	80008ee <__aeabi_fdiv+0x176>
 80008e4:	230f      	movs	r3, #15
 80008e6:	402b      	ands	r3, r5
 80008e8:	2b04      	cmp	r3, #4
 80008ea:	d000      	beq.n	80008ee <__aeabi_fdiv+0x176>
 80008ec:	3504      	adds	r5, #4
 80008ee:	016b      	lsls	r3, r5, #5
 80008f0:	d544      	bpl.n	800097c <__aeabi_fdiv+0x204>
 80008f2:	2001      	movs	r0, #1
 80008f4:	2500      	movs	r5, #0
 80008f6:	e79e      	b.n	8000836 <__aeabi_fdiv+0xbe>
 80008f8:	20ff      	movs	r0, #255	; 0xff
 80008fa:	2500      	movs	r5, #0
 80008fc:	e79b      	b.n	8000836 <__aeabi_fdiv+0xbe>
 80008fe:	2580      	movs	r5, #128	; 0x80
 8000900:	2600      	movs	r6, #0
 8000902:	20ff      	movs	r0, #255	; 0xff
 8000904:	03ed      	lsls	r5, r5, #15
 8000906:	e796      	b.n	8000836 <__aeabi_fdiv+0xbe>
 8000908:	2300      	movs	r3, #0
 800090a:	4698      	mov	r8, r3
 800090c:	2080      	movs	r0, #128	; 0x80
 800090e:	03c0      	lsls	r0, r0, #15
 8000910:	4205      	tst	r5, r0
 8000912:	d009      	beq.n	8000928 <__aeabi_fdiv+0x1b0>
 8000914:	4643      	mov	r3, r8
 8000916:	4203      	tst	r3, r0
 8000918:	d106      	bne.n	8000928 <__aeabi_fdiv+0x1b0>
 800091a:	4645      	mov	r5, r8
 800091c:	4305      	orrs	r5, r0
 800091e:	026d      	lsls	r5, r5, #9
 8000920:	0026      	movs	r6, r4
 8000922:	20ff      	movs	r0, #255	; 0xff
 8000924:	0a6d      	lsrs	r5, r5, #9
 8000926:	e786      	b.n	8000836 <__aeabi_fdiv+0xbe>
 8000928:	2080      	movs	r0, #128	; 0x80
 800092a:	03c0      	lsls	r0, r0, #15
 800092c:	4305      	orrs	r5, r0
 800092e:	026d      	lsls	r5, r5, #9
 8000930:	20ff      	movs	r0, #255	; 0xff
 8000932:	0a6d      	lsrs	r5, r5, #9
 8000934:	e77f      	b.n	8000836 <__aeabi_fdiv+0xbe>
 8000936:	4641      	mov	r1, r8
 8000938:	016a      	lsls	r2, r5, #5
 800093a:	0148      	lsls	r0, r1, #5
 800093c:	4282      	cmp	r2, r0
 800093e:	d219      	bcs.n	8000974 <__aeabi_fdiv+0x1fc>
 8000940:	211b      	movs	r1, #27
 8000942:	2500      	movs	r5, #0
 8000944:	3f01      	subs	r7, #1
 8000946:	2601      	movs	r6, #1
 8000948:	0014      	movs	r4, r2
 800094a:	006d      	lsls	r5, r5, #1
 800094c:	0052      	lsls	r2, r2, #1
 800094e:	2c00      	cmp	r4, #0
 8000950:	db01      	blt.n	8000956 <__aeabi_fdiv+0x1de>
 8000952:	4290      	cmp	r0, r2
 8000954:	d801      	bhi.n	800095a <__aeabi_fdiv+0x1e2>
 8000956:	1a12      	subs	r2, r2, r0
 8000958:	4335      	orrs	r5, r6
 800095a:	3901      	subs	r1, #1
 800095c:	2900      	cmp	r1, #0
 800095e:	d1f3      	bne.n	8000948 <__aeabi_fdiv+0x1d0>
 8000960:	1e50      	subs	r0, r2, #1
 8000962:	4182      	sbcs	r2, r0
 8000964:	0038      	movs	r0, r7
 8000966:	307f      	adds	r0, #127	; 0x7f
 8000968:	001e      	movs	r6, r3
 800096a:	4315      	orrs	r5, r2
 800096c:	2800      	cmp	r0, #0
 800096e:	dd00      	ble.n	8000972 <__aeabi_fdiv+0x1fa>
 8000970:	e74b      	b.n	800080a <__aeabi_fdiv+0x92>
 8000972:	e7aa      	b.n	80008ca <__aeabi_fdiv+0x152>
 8000974:	211a      	movs	r1, #26
 8000976:	2501      	movs	r5, #1
 8000978:	1a12      	subs	r2, r2, r0
 800097a:	e7e4      	b.n	8000946 <__aeabi_fdiv+0x1ce>
 800097c:	01ad      	lsls	r5, r5, #6
 800097e:	2000      	movs	r0, #0
 8000980:	0a6d      	lsrs	r5, r5, #9
 8000982:	e758      	b.n	8000836 <__aeabi_fdiv+0xbe>
 8000984:	0800c6a4 	.word	0x0800c6a4
 8000988:	f7ffffff 	.word	0xf7ffffff
 800098c:	0800c6e4 	.word	0x0800c6e4

08000990 <__aeabi_fmul>:
 8000990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000992:	4657      	mov	r7, sl
 8000994:	464e      	mov	r6, r9
 8000996:	4645      	mov	r5, r8
 8000998:	46de      	mov	lr, fp
 800099a:	0244      	lsls	r4, r0, #9
 800099c:	b5e0      	push	{r5, r6, r7, lr}
 800099e:	0045      	lsls	r5, r0, #1
 80009a0:	1c0f      	adds	r7, r1, #0
 80009a2:	0a64      	lsrs	r4, r4, #9
 80009a4:	0e2d      	lsrs	r5, r5, #24
 80009a6:	0fc6      	lsrs	r6, r0, #31
 80009a8:	2d00      	cmp	r5, #0
 80009aa:	d047      	beq.n	8000a3c <__aeabi_fmul+0xac>
 80009ac:	2dff      	cmp	r5, #255	; 0xff
 80009ae:	d04d      	beq.n	8000a4c <__aeabi_fmul+0xbc>
 80009b0:	2300      	movs	r3, #0
 80009b2:	2080      	movs	r0, #128	; 0x80
 80009b4:	469a      	mov	sl, r3
 80009b6:	469b      	mov	fp, r3
 80009b8:	00e4      	lsls	r4, r4, #3
 80009ba:	04c0      	lsls	r0, r0, #19
 80009bc:	4304      	orrs	r4, r0
 80009be:	3d7f      	subs	r5, #127	; 0x7f
 80009c0:	0278      	lsls	r0, r7, #9
 80009c2:	0a43      	lsrs	r3, r0, #9
 80009c4:	4699      	mov	r9, r3
 80009c6:	007a      	lsls	r2, r7, #1
 80009c8:	0ffb      	lsrs	r3, r7, #31
 80009ca:	4698      	mov	r8, r3
 80009cc:	0e12      	lsrs	r2, r2, #24
 80009ce:	464b      	mov	r3, r9
 80009d0:	d044      	beq.n	8000a5c <__aeabi_fmul+0xcc>
 80009d2:	2aff      	cmp	r2, #255	; 0xff
 80009d4:	d011      	beq.n	80009fa <__aeabi_fmul+0x6a>
 80009d6:	00d8      	lsls	r0, r3, #3
 80009d8:	2380      	movs	r3, #128	; 0x80
 80009da:	04db      	lsls	r3, r3, #19
 80009dc:	4303      	orrs	r3, r0
 80009de:	4699      	mov	r9, r3
 80009e0:	2000      	movs	r0, #0
 80009e2:	3a7f      	subs	r2, #127	; 0x7f
 80009e4:	18ad      	adds	r5, r5, r2
 80009e6:	4647      	mov	r7, r8
 80009e8:	4653      	mov	r3, sl
 80009ea:	4077      	eors	r7, r6
 80009ec:	1c69      	adds	r1, r5, #1
 80009ee:	2b0f      	cmp	r3, #15
 80009f0:	d83f      	bhi.n	8000a72 <__aeabi_fmul+0xe2>
 80009f2:	4a72      	ldr	r2, [pc, #456]	; (8000bbc <__aeabi_fmul+0x22c>)
 80009f4:	009b      	lsls	r3, r3, #2
 80009f6:	58d3      	ldr	r3, [r2, r3]
 80009f8:	469f      	mov	pc, r3
 80009fa:	35ff      	adds	r5, #255	; 0xff
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d000      	beq.n	8000a02 <__aeabi_fmul+0x72>
 8000a00:	e079      	b.n	8000af6 <__aeabi_fmul+0x166>
 8000a02:	4652      	mov	r2, sl
 8000a04:	2302      	movs	r3, #2
 8000a06:	431a      	orrs	r2, r3
 8000a08:	4692      	mov	sl, r2
 8000a0a:	2002      	movs	r0, #2
 8000a0c:	e7eb      	b.n	80009e6 <__aeabi_fmul+0x56>
 8000a0e:	4647      	mov	r7, r8
 8000a10:	464c      	mov	r4, r9
 8000a12:	4683      	mov	fp, r0
 8000a14:	465b      	mov	r3, fp
 8000a16:	2b02      	cmp	r3, #2
 8000a18:	d028      	beq.n	8000a6c <__aeabi_fmul+0xdc>
 8000a1a:	2b03      	cmp	r3, #3
 8000a1c:	d100      	bne.n	8000a20 <__aeabi_fmul+0x90>
 8000a1e:	e0c6      	b.n	8000bae <__aeabi_fmul+0x21e>
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d14f      	bne.n	8000ac4 <__aeabi_fmul+0x134>
 8000a24:	2000      	movs	r0, #0
 8000a26:	2400      	movs	r4, #0
 8000a28:	05c0      	lsls	r0, r0, #23
 8000a2a:	07ff      	lsls	r7, r7, #31
 8000a2c:	4320      	orrs	r0, r4
 8000a2e:	4338      	orrs	r0, r7
 8000a30:	bcf0      	pop	{r4, r5, r6, r7}
 8000a32:	46bb      	mov	fp, r7
 8000a34:	46b2      	mov	sl, r6
 8000a36:	46a9      	mov	r9, r5
 8000a38:	46a0      	mov	r8, r4
 8000a3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a3c:	2c00      	cmp	r4, #0
 8000a3e:	d171      	bne.n	8000b24 <__aeabi_fmul+0x194>
 8000a40:	2304      	movs	r3, #4
 8000a42:	469a      	mov	sl, r3
 8000a44:	3b03      	subs	r3, #3
 8000a46:	2500      	movs	r5, #0
 8000a48:	469b      	mov	fp, r3
 8000a4a:	e7b9      	b.n	80009c0 <__aeabi_fmul+0x30>
 8000a4c:	2c00      	cmp	r4, #0
 8000a4e:	d163      	bne.n	8000b18 <__aeabi_fmul+0x188>
 8000a50:	2308      	movs	r3, #8
 8000a52:	469a      	mov	sl, r3
 8000a54:	3b06      	subs	r3, #6
 8000a56:	25ff      	movs	r5, #255	; 0xff
 8000a58:	469b      	mov	fp, r3
 8000a5a:	e7b1      	b.n	80009c0 <__aeabi_fmul+0x30>
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d150      	bne.n	8000b02 <__aeabi_fmul+0x172>
 8000a60:	4652      	mov	r2, sl
 8000a62:	3301      	adds	r3, #1
 8000a64:	431a      	orrs	r2, r3
 8000a66:	4692      	mov	sl, r2
 8000a68:	2001      	movs	r0, #1
 8000a6a:	e7bc      	b.n	80009e6 <__aeabi_fmul+0x56>
 8000a6c:	20ff      	movs	r0, #255	; 0xff
 8000a6e:	2400      	movs	r4, #0
 8000a70:	e7da      	b.n	8000a28 <__aeabi_fmul+0x98>
 8000a72:	4648      	mov	r0, r9
 8000a74:	0c26      	lsrs	r6, r4, #16
 8000a76:	0424      	lsls	r4, r4, #16
 8000a78:	0c22      	lsrs	r2, r4, #16
 8000a7a:	0404      	lsls	r4, r0, #16
 8000a7c:	0c24      	lsrs	r4, r4, #16
 8000a7e:	464b      	mov	r3, r9
 8000a80:	0020      	movs	r0, r4
 8000a82:	0c1b      	lsrs	r3, r3, #16
 8000a84:	4350      	muls	r0, r2
 8000a86:	4374      	muls	r4, r6
 8000a88:	435a      	muls	r2, r3
 8000a8a:	435e      	muls	r6, r3
 8000a8c:	1912      	adds	r2, r2, r4
 8000a8e:	0c03      	lsrs	r3, r0, #16
 8000a90:	189b      	adds	r3, r3, r2
 8000a92:	429c      	cmp	r4, r3
 8000a94:	d903      	bls.n	8000a9e <__aeabi_fmul+0x10e>
 8000a96:	2280      	movs	r2, #128	; 0x80
 8000a98:	0252      	lsls	r2, r2, #9
 8000a9a:	4694      	mov	ip, r2
 8000a9c:	4466      	add	r6, ip
 8000a9e:	0400      	lsls	r0, r0, #16
 8000aa0:	041a      	lsls	r2, r3, #16
 8000aa2:	0c00      	lsrs	r0, r0, #16
 8000aa4:	1812      	adds	r2, r2, r0
 8000aa6:	0194      	lsls	r4, r2, #6
 8000aa8:	1e60      	subs	r0, r4, #1
 8000aaa:	4184      	sbcs	r4, r0
 8000aac:	0c1b      	lsrs	r3, r3, #16
 8000aae:	0e92      	lsrs	r2, r2, #26
 8000ab0:	199b      	adds	r3, r3, r6
 8000ab2:	4314      	orrs	r4, r2
 8000ab4:	019b      	lsls	r3, r3, #6
 8000ab6:	431c      	orrs	r4, r3
 8000ab8:	011b      	lsls	r3, r3, #4
 8000aba:	d572      	bpl.n	8000ba2 <__aeabi_fmul+0x212>
 8000abc:	2001      	movs	r0, #1
 8000abe:	0863      	lsrs	r3, r4, #1
 8000ac0:	4004      	ands	r4, r0
 8000ac2:	431c      	orrs	r4, r3
 8000ac4:	0008      	movs	r0, r1
 8000ac6:	307f      	adds	r0, #127	; 0x7f
 8000ac8:	2800      	cmp	r0, #0
 8000aca:	dd3c      	ble.n	8000b46 <__aeabi_fmul+0x1b6>
 8000acc:	0763      	lsls	r3, r4, #29
 8000ace:	d004      	beq.n	8000ada <__aeabi_fmul+0x14a>
 8000ad0:	230f      	movs	r3, #15
 8000ad2:	4023      	ands	r3, r4
 8000ad4:	2b04      	cmp	r3, #4
 8000ad6:	d000      	beq.n	8000ada <__aeabi_fmul+0x14a>
 8000ad8:	3404      	adds	r4, #4
 8000ada:	0123      	lsls	r3, r4, #4
 8000adc:	d503      	bpl.n	8000ae6 <__aeabi_fmul+0x156>
 8000ade:	3180      	adds	r1, #128	; 0x80
 8000ae0:	0008      	movs	r0, r1
 8000ae2:	4b37      	ldr	r3, [pc, #220]	; (8000bc0 <__aeabi_fmul+0x230>)
 8000ae4:	401c      	ands	r4, r3
 8000ae6:	28fe      	cmp	r0, #254	; 0xfe
 8000ae8:	dcc0      	bgt.n	8000a6c <__aeabi_fmul+0xdc>
 8000aea:	01a4      	lsls	r4, r4, #6
 8000aec:	0a64      	lsrs	r4, r4, #9
 8000aee:	b2c0      	uxtb	r0, r0
 8000af0:	e79a      	b.n	8000a28 <__aeabi_fmul+0x98>
 8000af2:	0037      	movs	r7, r6
 8000af4:	e78e      	b.n	8000a14 <__aeabi_fmul+0x84>
 8000af6:	4652      	mov	r2, sl
 8000af8:	2303      	movs	r3, #3
 8000afa:	431a      	orrs	r2, r3
 8000afc:	4692      	mov	sl, r2
 8000afe:	2003      	movs	r0, #3
 8000b00:	e771      	b.n	80009e6 <__aeabi_fmul+0x56>
 8000b02:	4648      	mov	r0, r9
 8000b04:	f000 fabc 	bl	8001080 <__clzsi2>
 8000b08:	464a      	mov	r2, r9
 8000b0a:	1f43      	subs	r3, r0, #5
 8000b0c:	409a      	lsls	r2, r3
 8000b0e:	1a2d      	subs	r5, r5, r0
 8000b10:	4691      	mov	r9, r2
 8000b12:	2000      	movs	r0, #0
 8000b14:	3d76      	subs	r5, #118	; 0x76
 8000b16:	e766      	b.n	80009e6 <__aeabi_fmul+0x56>
 8000b18:	230c      	movs	r3, #12
 8000b1a:	469a      	mov	sl, r3
 8000b1c:	3b09      	subs	r3, #9
 8000b1e:	25ff      	movs	r5, #255	; 0xff
 8000b20:	469b      	mov	fp, r3
 8000b22:	e74d      	b.n	80009c0 <__aeabi_fmul+0x30>
 8000b24:	0020      	movs	r0, r4
 8000b26:	f000 faab 	bl	8001080 <__clzsi2>
 8000b2a:	2576      	movs	r5, #118	; 0x76
 8000b2c:	1f43      	subs	r3, r0, #5
 8000b2e:	409c      	lsls	r4, r3
 8000b30:	2300      	movs	r3, #0
 8000b32:	426d      	negs	r5, r5
 8000b34:	469a      	mov	sl, r3
 8000b36:	469b      	mov	fp, r3
 8000b38:	1a2d      	subs	r5, r5, r0
 8000b3a:	e741      	b.n	80009c0 <__aeabi_fmul+0x30>
 8000b3c:	2480      	movs	r4, #128	; 0x80
 8000b3e:	2700      	movs	r7, #0
 8000b40:	20ff      	movs	r0, #255	; 0xff
 8000b42:	03e4      	lsls	r4, r4, #15
 8000b44:	e770      	b.n	8000a28 <__aeabi_fmul+0x98>
 8000b46:	2301      	movs	r3, #1
 8000b48:	1a1b      	subs	r3, r3, r0
 8000b4a:	2b1b      	cmp	r3, #27
 8000b4c:	dd00      	ble.n	8000b50 <__aeabi_fmul+0x1c0>
 8000b4e:	e769      	b.n	8000a24 <__aeabi_fmul+0x94>
 8000b50:	319e      	adds	r1, #158	; 0x9e
 8000b52:	0020      	movs	r0, r4
 8000b54:	408c      	lsls	r4, r1
 8000b56:	40d8      	lsrs	r0, r3
 8000b58:	1e63      	subs	r3, r4, #1
 8000b5a:	419c      	sbcs	r4, r3
 8000b5c:	4304      	orrs	r4, r0
 8000b5e:	0763      	lsls	r3, r4, #29
 8000b60:	d004      	beq.n	8000b6c <__aeabi_fmul+0x1dc>
 8000b62:	230f      	movs	r3, #15
 8000b64:	4023      	ands	r3, r4
 8000b66:	2b04      	cmp	r3, #4
 8000b68:	d000      	beq.n	8000b6c <__aeabi_fmul+0x1dc>
 8000b6a:	3404      	adds	r4, #4
 8000b6c:	0163      	lsls	r3, r4, #5
 8000b6e:	d51a      	bpl.n	8000ba6 <__aeabi_fmul+0x216>
 8000b70:	2001      	movs	r0, #1
 8000b72:	2400      	movs	r4, #0
 8000b74:	e758      	b.n	8000a28 <__aeabi_fmul+0x98>
 8000b76:	2080      	movs	r0, #128	; 0x80
 8000b78:	03c0      	lsls	r0, r0, #15
 8000b7a:	4204      	tst	r4, r0
 8000b7c:	d009      	beq.n	8000b92 <__aeabi_fmul+0x202>
 8000b7e:	464b      	mov	r3, r9
 8000b80:	4203      	tst	r3, r0
 8000b82:	d106      	bne.n	8000b92 <__aeabi_fmul+0x202>
 8000b84:	464c      	mov	r4, r9
 8000b86:	4304      	orrs	r4, r0
 8000b88:	0264      	lsls	r4, r4, #9
 8000b8a:	4647      	mov	r7, r8
 8000b8c:	20ff      	movs	r0, #255	; 0xff
 8000b8e:	0a64      	lsrs	r4, r4, #9
 8000b90:	e74a      	b.n	8000a28 <__aeabi_fmul+0x98>
 8000b92:	2080      	movs	r0, #128	; 0x80
 8000b94:	03c0      	lsls	r0, r0, #15
 8000b96:	4304      	orrs	r4, r0
 8000b98:	0264      	lsls	r4, r4, #9
 8000b9a:	0037      	movs	r7, r6
 8000b9c:	20ff      	movs	r0, #255	; 0xff
 8000b9e:	0a64      	lsrs	r4, r4, #9
 8000ba0:	e742      	b.n	8000a28 <__aeabi_fmul+0x98>
 8000ba2:	0029      	movs	r1, r5
 8000ba4:	e78e      	b.n	8000ac4 <__aeabi_fmul+0x134>
 8000ba6:	01a4      	lsls	r4, r4, #6
 8000ba8:	2000      	movs	r0, #0
 8000baa:	0a64      	lsrs	r4, r4, #9
 8000bac:	e73c      	b.n	8000a28 <__aeabi_fmul+0x98>
 8000bae:	2080      	movs	r0, #128	; 0x80
 8000bb0:	03c0      	lsls	r0, r0, #15
 8000bb2:	4304      	orrs	r4, r0
 8000bb4:	0264      	lsls	r4, r4, #9
 8000bb6:	20ff      	movs	r0, #255	; 0xff
 8000bb8:	0a64      	lsrs	r4, r4, #9
 8000bba:	e735      	b.n	8000a28 <__aeabi_fmul+0x98>
 8000bbc:	0800c724 	.word	0x0800c724
 8000bc0:	f7ffffff 	.word	0xf7ffffff

08000bc4 <__aeabi_fsub>:
 8000bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bc6:	4646      	mov	r6, r8
 8000bc8:	46d6      	mov	lr, sl
 8000bca:	464f      	mov	r7, r9
 8000bcc:	0243      	lsls	r3, r0, #9
 8000bce:	0a5b      	lsrs	r3, r3, #9
 8000bd0:	00da      	lsls	r2, r3, #3
 8000bd2:	4694      	mov	ip, r2
 8000bd4:	024a      	lsls	r2, r1, #9
 8000bd6:	b5c0      	push	{r6, r7, lr}
 8000bd8:	0044      	lsls	r4, r0, #1
 8000bda:	0a56      	lsrs	r6, r2, #9
 8000bdc:	1c05      	adds	r5, r0, #0
 8000bde:	46b0      	mov	r8, r6
 8000be0:	0e24      	lsrs	r4, r4, #24
 8000be2:	004e      	lsls	r6, r1, #1
 8000be4:	0992      	lsrs	r2, r2, #6
 8000be6:	001f      	movs	r7, r3
 8000be8:	0020      	movs	r0, r4
 8000bea:	4692      	mov	sl, r2
 8000bec:	0fed      	lsrs	r5, r5, #31
 8000bee:	0e36      	lsrs	r6, r6, #24
 8000bf0:	0fc9      	lsrs	r1, r1, #31
 8000bf2:	2eff      	cmp	r6, #255	; 0xff
 8000bf4:	d100      	bne.n	8000bf8 <__aeabi_fsub+0x34>
 8000bf6:	e07f      	b.n	8000cf8 <__aeabi_fsub+0x134>
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	4051      	eors	r1, r2
 8000bfc:	428d      	cmp	r5, r1
 8000bfe:	d051      	beq.n	8000ca4 <__aeabi_fsub+0xe0>
 8000c00:	1ba2      	subs	r2, r4, r6
 8000c02:	4691      	mov	r9, r2
 8000c04:	2a00      	cmp	r2, #0
 8000c06:	dc00      	bgt.n	8000c0a <__aeabi_fsub+0x46>
 8000c08:	e07e      	b.n	8000d08 <__aeabi_fsub+0x144>
 8000c0a:	2e00      	cmp	r6, #0
 8000c0c:	d100      	bne.n	8000c10 <__aeabi_fsub+0x4c>
 8000c0e:	e099      	b.n	8000d44 <__aeabi_fsub+0x180>
 8000c10:	2cff      	cmp	r4, #255	; 0xff
 8000c12:	d100      	bne.n	8000c16 <__aeabi_fsub+0x52>
 8000c14:	e08c      	b.n	8000d30 <__aeabi_fsub+0x16c>
 8000c16:	2380      	movs	r3, #128	; 0x80
 8000c18:	4652      	mov	r2, sl
 8000c1a:	04db      	lsls	r3, r3, #19
 8000c1c:	431a      	orrs	r2, r3
 8000c1e:	4692      	mov	sl, r2
 8000c20:	464a      	mov	r2, r9
 8000c22:	2301      	movs	r3, #1
 8000c24:	2a1b      	cmp	r2, #27
 8000c26:	dc08      	bgt.n	8000c3a <__aeabi_fsub+0x76>
 8000c28:	4653      	mov	r3, sl
 8000c2a:	2120      	movs	r1, #32
 8000c2c:	40d3      	lsrs	r3, r2
 8000c2e:	1a89      	subs	r1, r1, r2
 8000c30:	4652      	mov	r2, sl
 8000c32:	408a      	lsls	r2, r1
 8000c34:	1e51      	subs	r1, r2, #1
 8000c36:	418a      	sbcs	r2, r1
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	4662      	mov	r2, ip
 8000c3c:	1ad3      	subs	r3, r2, r3
 8000c3e:	015a      	lsls	r2, r3, #5
 8000c40:	d400      	bmi.n	8000c44 <__aeabi_fsub+0x80>
 8000c42:	e0f3      	b.n	8000e2c <__aeabi_fsub+0x268>
 8000c44:	019b      	lsls	r3, r3, #6
 8000c46:	099e      	lsrs	r6, r3, #6
 8000c48:	0030      	movs	r0, r6
 8000c4a:	f000 fa19 	bl	8001080 <__clzsi2>
 8000c4e:	3805      	subs	r0, #5
 8000c50:	4086      	lsls	r6, r0
 8000c52:	4284      	cmp	r4, r0
 8000c54:	dd00      	ble.n	8000c58 <__aeabi_fsub+0x94>
 8000c56:	e0f7      	b.n	8000e48 <__aeabi_fsub+0x284>
 8000c58:	0032      	movs	r2, r6
 8000c5a:	1b04      	subs	r4, r0, r4
 8000c5c:	2020      	movs	r0, #32
 8000c5e:	3401      	adds	r4, #1
 8000c60:	40e2      	lsrs	r2, r4
 8000c62:	1b04      	subs	r4, r0, r4
 8000c64:	40a6      	lsls	r6, r4
 8000c66:	0033      	movs	r3, r6
 8000c68:	1e5e      	subs	r6, r3, #1
 8000c6a:	41b3      	sbcs	r3, r6
 8000c6c:	2400      	movs	r4, #0
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	075a      	lsls	r2, r3, #29
 8000c72:	d004      	beq.n	8000c7e <__aeabi_fsub+0xba>
 8000c74:	220f      	movs	r2, #15
 8000c76:	401a      	ands	r2, r3
 8000c78:	2a04      	cmp	r2, #4
 8000c7a:	d000      	beq.n	8000c7e <__aeabi_fsub+0xba>
 8000c7c:	3304      	adds	r3, #4
 8000c7e:	015a      	lsls	r2, r3, #5
 8000c80:	d400      	bmi.n	8000c84 <__aeabi_fsub+0xc0>
 8000c82:	e0d6      	b.n	8000e32 <__aeabi_fsub+0x26e>
 8000c84:	1c62      	adds	r2, r4, #1
 8000c86:	2cfe      	cmp	r4, #254	; 0xfe
 8000c88:	d100      	bne.n	8000c8c <__aeabi_fsub+0xc8>
 8000c8a:	e0da      	b.n	8000e42 <__aeabi_fsub+0x27e>
 8000c8c:	019b      	lsls	r3, r3, #6
 8000c8e:	0a5f      	lsrs	r7, r3, #9
 8000c90:	b2d0      	uxtb	r0, r2
 8000c92:	05c0      	lsls	r0, r0, #23
 8000c94:	4338      	orrs	r0, r7
 8000c96:	07ed      	lsls	r5, r5, #31
 8000c98:	4328      	orrs	r0, r5
 8000c9a:	bce0      	pop	{r5, r6, r7}
 8000c9c:	46ba      	mov	sl, r7
 8000c9e:	46b1      	mov	r9, r6
 8000ca0:	46a8      	mov	r8, r5
 8000ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ca4:	1ba2      	subs	r2, r4, r6
 8000ca6:	4691      	mov	r9, r2
 8000ca8:	2a00      	cmp	r2, #0
 8000caa:	dd63      	ble.n	8000d74 <__aeabi_fsub+0x1b0>
 8000cac:	2e00      	cmp	r6, #0
 8000cae:	d100      	bne.n	8000cb2 <__aeabi_fsub+0xee>
 8000cb0:	e099      	b.n	8000de6 <__aeabi_fsub+0x222>
 8000cb2:	2cff      	cmp	r4, #255	; 0xff
 8000cb4:	d03c      	beq.n	8000d30 <__aeabi_fsub+0x16c>
 8000cb6:	2380      	movs	r3, #128	; 0x80
 8000cb8:	4652      	mov	r2, sl
 8000cba:	04db      	lsls	r3, r3, #19
 8000cbc:	431a      	orrs	r2, r3
 8000cbe:	4692      	mov	sl, r2
 8000cc0:	464a      	mov	r2, r9
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	2a1b      	cmp	r2, #27
 8000cc6:	dc08      	bgt.n	8000cda <__aeabi_fsub+0x116>
 8000cc8:	4653      	mov	r3, sl
 8000cca:	2120      	movs	r1, #32
 8000ccc:	40d3      	lsrs	r3, r2
 8000cce:	1a89      	subs	r1, r1, r2
 8000cd0:	4652      	mov	r2, sl
 8000cd2:	408a      	lsls	r2, r1
 8000cd4:	1e51      	subs	r1, r2, #1
 8000cd6:	418a      	sbcs	r2, r1
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	4463      	add	r3, ip
 8000cdc:	015a      	lsls	r2, r3, #5
 8000cde:	d400      	bmi.n	8000ce2 <__aeabi_fsub+0x11e>
 8000ce0:	e0a4      	b.n	8000e2c <__aeabi_fsub+0x268>
 8000ce2:	3401      	adds	r4, #1
 8000ce4:	2cff      	cmp	r4, #255	; 0xff
 8000ce6:	d100      	bne.n	8000cea <__aeabi_fsub+0x126>
 8000ce8:	e0ab      	b.n	8000e42 <__aeabi_fsub+0x27e>
 8000cea:	2201      	movs	r2, #1
 8000cec:	4997      	ldr	r1, [pc, #604]	; (8000f4c <__aeabi_fsub+0x388>)
 8000cee:	401a      	ands	r2, r3
 8000cf0:	085b      	lsrs	r3, r3, #1
 8000cf2:	400b      	ands	r3, r1
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	e7bb      	b.n	8000c70 <__aeabi_fsub+0xac>
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	d032      	beq.n	8000d62 <__aeabi_fsub+0x19e>
 8000cfc:	428d      	cmp	r5, r1
 8000cfe:	d035      	beq.n	8000d6c <__aeabi_fsub+0x1a8>
 8000d00:	22ff      	movs	r2, #255	; 0xff
 8000d02:	4252      	negs	r2, r2
 8000d04:	4691      	mov	r9, r2
 8000d06:	44a1      	add	r9, r4
 8000d08:	464a      	mov	r2, r9
 8000d0a:	2a00      	cmp	r2, #0
 8000d0c:	d051      	beq.n	8000db2 <__aeabi_fsub+0x1ee>
 8000d0e:	1b30      	subs	r0, r6, r4
 8000d10:	2c00      	cmp	r4, #0
 8000d12:	d000      	beq.n	8000d16 <__aeabi_fsub+0x152>
 8000d14:	e09c      	b.n	8000e50 <__aeabi_fsub+0x28c>
 8000d16:	4663      	mov	r3, ip
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d100      	bne.n	8000d1e <__aeabi_fsub+0x15a>
 8000d1c:	e0df      	b.n	8000ede <__aeabi_fsub+0x31a>
 8000d1e:	3801      	subs	r0, #1
 8000d20:	2800      	cmp	r0, #0
 8000d22:	d100      	bne.n	8000d26 <__aeabi_fsub+0x162>
 8000d24:	e0f7      	b.n	8000f16 <__aeabi_fsub+0x352>
 8000d26:	2eff      	cmp	r6, #255	; 0xff
 8000d28:	d000      	beq.n	8000d2c <__aeabi_fsub+0x168>
 8000d2a:	e099      	b.n	8000e60 <__aeabi_fsub+0x29c>
 8000d2c:	000d      	movs	r5, r1
 8000d2e:	4643      	mov	r3, r8
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d100      	bne.n	8000d36 <__aeabi_fsub+0x172>
 8000d34:	e085      	b.n	8000e42 <__aeabi_fsub+0x27e>
 8000d36:	2780      	movs	r7, #128	; 0x80
 8000d38:	03ff      	lsls	r7, r7, #15
 8000d3a:	431f      	orrs	r7, r3
 8000d3c:	027f      	lsls	r7, r7, #9
 8000d3e:	20ff      	movs	r0, #255	; 0xff
 8000d40:	0a7f      	lsrs	r7, r7, #9
 8000d42:	e7a6      	b.n	8000c92 <__aeabi_fsub+0xce>
 8000d44:	4652      	mov	r2, sl
 8000d46:	2a00      	cmp	r2, #0
 8000d48:	d074      	beq.n	8000e34 <__aeabi_fsub+0x270>
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	4252      	negs	r2, r2
 8000d4e:	4690      	mov	r8, r2
 8000d50:	44c1      	add	r9, r8
 8000d52:	464a      	mov	r2, r9
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	d100      	bne.n	8000d5a <__aeabi_fsub+0x196>
 8000d58:	e0c8      	b.n	8000eec <__aeabi_fsub+0x328>
 8000d5a:	2cff      	cmp	r4, #255	; 0xff
 8000d5c:	d000      	beq.n	8000d60 <__aeabi_fsub+0x19c>
 8000d5e:	e75f      	b.n	8000c20 <__aeabi_fsub+0x5c>
 8000d60:	e7e6      	b.n	8000d30 <__aeabi_fsub+0x16c>
 8000d62:	2201      	movs	r2, #1
 8000d64:	4051      	eors	r1, r2
 8000d66:	42a9      	cmp	r1, r5
 8000d68:	d000      	beq.n	8000d6c <__aeabi_fsub+0x1a8>
 8000d6a:	e749      	b.n	8000c00 <__aeabi_fsub+0x3c>
 8000d6c:	22ff      	movs	r2, #255	; 0xff
 8000d6e:	4252      	negs	r2, r2
 8000d70:	4691      	mov	r9, r2
 8000d72:	44a1      	add	r9, r4
 8000d74:	464a      	mov	r2, r9
 8000d76:	2a00      	cmp	r2, #0
 8000d78:	d043      	beq.n	8000e02 <__aeabi_fsub+0x23e>
 8000d7a:	1b31      	subs	r1, r6, r4
 8000d7c:	2c00      	cmp	r4, #0
 8000d7e:	d100      	bne.n	8000d82 <__aeabi_fsub+0x1be>
 8000d80:	e08c      	b.n	8000e9c <__aeabi_fsub+0x2d8>
 8000d82:	2eff      	cmp	r6, #255	; 0xff
 8000d84:	d100      	bne.n	8000d88 <__aeabi_fsub+0x1c4>
 8000d86:	e092      	b.n	8000eae <__aeabi_fsub+0x2ea>
 8000d88:	2380      	movs	r3, #128	; 0x80
 8000d8a:	4662      	mov	r2, ip
 8000d8c:	04db      	lsls	r3, r3, #19
 8000d8e:	431a      	orrs	r2, r3
 8000d90:	4694      	mov	ip, r2
 8000d92:	2301      	movs	r3, #1
 8000d94:	291b      	cmp	r1, #27
 8000d96:	dc09      	bgt.n	8000dac <__aeabi_fsub+0x1e8>
 8000d98:	2020      	movs	r0, #32
 8000d9a:	4663      	mov	r3, ip
 8000d9c:	4662      	mov	r2, ip
 8000d9e:	40cb      	lsrs	r3, r1
 8000da0:	1a41      	subs	r1, r0, r1
 8000da2:	408a      	lsls	r2, r1
 8000da4:	0011      	movs	r1, r2
 8000da6:	1e48      	subs	r0, r1, #1
 8000da8:	4181      	sbcs	r1, r0
 8000daa:	430b      	orrs	r3, r1
 8000dac:	0034      	movs	r4, r6
 8000dae:	4453      	add	r3, sl
 8000db0:	e794      	b.n	8000cdc <__aeabi_fsub+0x118>
 8000db2:	22fe      	movs	r2, #254	; 0xfe
 8000db4:	1c66      	adds	r6, r4, #1
 8000db6:	4232      	tst	r2, r6
 8000db8:	d164      	bne.n	8000e84 <__aeabi_fsub+0x2c0>
 8000dba:	2c00      	cmp	r4, #0
 8000dbc:	d000      	beq.n	8000dc0 <__aeabi_fsub+0x1fc>
 8000dbe:	e082      	b.n	8000ec6 <__aeabi_fsub+0x302>
 8000dc0:	4663      	mov	r3, ip
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d100      	bne.n	8000dc8 <__aeabi_fsub+0x204>
 8000dc6:	e0ab      	b.n	8000f20 <__aeabi_fsub+0x35c>
 8000dc8:	4653      	mov	r3, sl
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d100      	bne.n	8000dd0 <__aeabi_fsub+0x20c>
 8000dce:	e760      	b.n	8000c92 <__aeabi_fsub+0xce>
 8000dd0:	4663      	mov	r3, ip
 8000dd2:	4652      	mov	r2, sl
 8000dd4:	1a9b      	subs	r3, r3, r2
 8000dd6:	015a      	lsls	r2, r3, #5
 8000dd8:	d400      	bmi.n	8000ddc <__aeabi_fsub+0x218>
 8000dda:	e0aa      	b.n	8000f32 <__aeabi_fsub+0x36e>
 8000ddc:	4663      	mov	r3, ip
 8000dde:	4652      	mov	r2, sl
 8000de0:	000d      	movs	r5, r1
 8000de2:	1ad3      	subs	r3, r2, r3
 8000de4:	e744      	b.n	8000c70 <__aeabi_fsub+0xac>
 8000de6:	4652      	mov	r2, sl
 8000de8:	2a00      	cmp	r2, #0
 8000dea:	d023      	beq.n	8000e34 <__aeabi_fsub+0x270>
 8000dec:	2201      	movs	r2, #1
 8000dee:	4252      	negs	r2, r2
 8000df0:	4690      	mov	r8, r2
 8000df2:	44c1      	add	r9, r8
 8000df4:	464a      	mov	r2, r9
 8000df6:	2a00      	cmp	r2, #0
 8000df8:	d075      	beq.n	8000ee6 <__aeabi_fsub+0x322>
 8000dfa:	2cff      	cmp	r4, #255	; 0xff
 8000dfc:	d000      	beq.n	8000e00 <__aeabi_fsub+0x23c>
 8000dfe:	e75f      	b.n	8000cc0 <__aeabi_fsub+0xfc>
 8000e00:	e796      	b.n	8000d30 <__aeabi_fsub+0x16c>
 8000e02:	26fe      	movs	r6, #254	; 0xfe
 8000e04:	3401      	adds	r4, #1
 8000e06:	4226      	tst	r6, r4
 8000e08:	d153      	bne.n	8000eb2 <__aeabi_fsub+0x2ee>
 8000e0a:	2800      	cmp	r0, #0
 8000e0c:	d172      	bne.n	8000ef4 <__aeabi_fsub+0x330>
 8000e0e:	4663      	mov	r3, ip
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d100      	bne.n	8000e16 <__aeabi_fsub+0x252>
 8000e14:	e093      	b.n	8000f3e <__aeabi_fsub+0x37a>
 8000e16:	4653      	mov	r3, sl
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d100      	bne.n	8000e1e <__aeabi_fsub+0x25a>
 8000e1c:	e739      	b.n	8000c92 <__aeabi_fsub+0xce>
 8000e1e:	4463      	add	r3, ip
 8000e20:	2400      	movs	r4, #0
 8000e22:	015a      	lsls	r2, r3, #5
 8000e24:	d502      	bpl.n	8000e2c <__aeabi_fsub+0x268>
 8000e26:	4a4a      	ldr	r2, [pc, #296]	; (8000f50 <__aeabi_fsub+0x38c>)
 8000e28:	3401      	adds	r4, #1
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	075a      	lsls	r2, r3, #29
 8000e2e:	d000      	beq.n	8000e32 <__aeabi_fsub+0x26e>
 8000e30:	e720      	b.n	8000c74 <__aeabi_fsub+0xb0>
 8000e32:	08db      	lsrs	r3, r3, #3
 8000e34:	2cff      	cmp	r4, #255	; 0xff
 8000e36:	d100      	bne.n	8000e3a <__aeabi_fsub+0x276>
 8000e38:	e77a      	b.n	8000d30 <__aeabi_fsub+0x16c>
 8000e3a:	025b      	lsls	r3, r3, #9
 8000e3c:	0a5f      	lsrs	r7, r3, #9
 8000e3e:	b2e0      	uxtb	r0, r4
 8000e40:	e727      	b.n	8000c92 <__aeabi_fsub+0xce>
 8000e42:	20ff      	movs	r0, #255	; 0xff
 8000e44:	2700      	movs	r7, #0
 8000e46:	e724      	b.n	8000c92 <__aeabi_fsub+0xce>
 8000e48:	4b41      	ldr	r3, [pc, #260]	; (8000f50 <__aeabi_fsub+0x38c>)
 8000e4a:	1a24      	subs	r4, r4, r0
 8000e4c:	4033      	ands	r3, r6
 8000e4e:	e70f      	b.n	8000c70 <__aeabi_fsub+0xac>
 8000e50:	2eff      	cmp	r6, #255	; 0xff
 8000e52:	d100      	bne.n	8000e56 <__aeabi_fsub+0x292>
 8000e54:	e76a      	b.n	8000d2c <__aeabi_fsub+0x168>
 8000e56:	2380      	movs	r3, #128	; 0x80
 8000e58:	4662      	mov	r2, ip
 8000e5a:	04db      	lsls	r3, r3, #19
 8000e5c:	431a      	orrs	r2, r3
 8000e5e:	4694      	mov	ip, r2
 8000e60:	2301      	movs	r3, #1
 8000e62:	281b      	cmp	r0, #27
 8000e64:	dc09      	bgt.n	8000e7a <__aeabi_fsub+0x2b6>
 8000e66:	2420      	movs	r4, #32
 8000e68:	4663      	mov	r3, ip
 8000e6a:	4662      	mov	r2, ip
 8000e6c:	40c3      	lsrs	r3, r0
 8000e6e:	1a20      	subs	r0, r4, r0
 8000e70:	4082      	lsls	r2, r0
 8000e72:	0010      	movs	r0, r2
 8000e74:	1e44      	subs	r4, r0, #1
 8000e76:	41a0      	sbcs	r0, r4
 8000e78:	4303      	orrs	r3, r0
 8000e7a:	4652      	mov	r2, sl
 8000e7c:	000d      	movs	r5, r1
 8000e7e:	0034      	movs	r4, r6
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	e6dc      	b.n	8000c3e <__aeabi_fsub+0x7a>
 8000e84:	4663      	mov	r3, ip
 8000e86:	4652      	mov	r2, sl
 8000e88:	1a9e      	subs	r6, r3, r2
 8000e8a:	0173      	lsls	r3, r6, #5
 8000e8c:	d417      	bmi.n	8000ebe <__aeabi_fsub+0x2fa>
 8000e8e:	2e00      	cmp	r6, #0
 8000e90:	d000      	beq.n	8000e94 <__aeabi_fsub+0x2d0>
 8000e92:	e6d9      	b.n	8000c48 <__aeabi_fsub+0x84>
 8000e94:	2500      	movs	r5, #0
 8000e96:	2000      	movs	r0, #0
 8000e98:	2700      	movs	r7, #0
 8000e9a:	e6fa      	b.n	8000c92 <__aeabi_fsub+0xce>
 8000e9c:	4663      	mov	r3, ip
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d044      	beq.n	8000f2c <__aeabi_fsub+0x368>
 8000ea2:	3901      	subs	r1, #1
 8000ea4:	2900      	cmp	r1, #0
 8000ea6:	d04c      	beq.n	8000f42 <__aeabi_fsub+0x37e>
 8000ea8:	2eff      	cmp	r6, #255	; 0xff
 8000eaa:	d000      	beq.n	8000eae <__aeabi_fsub+0x2ea>
 8000eac:	e771      	b.n	8000d92 <__aeabi_fsub+0x1ce>
 8000eae:	4643      	mov	r3, r8
 8000eb0:	e73e      	b.n	8000d30 <__aeabi_fsub+0x16c>
 8000eb2:	2cff      	cmp	r4, #255	; 0xff
 8000eb4:	d0c5      	beq.n	8000e42 <__aeabi_fsub+0x27e>
 8000eb6:	4652      	mov	r2, sl
 8000eb8:	4462      	add	r2, ip
 8000eba:	0853      	lsrs	r3, r2, #1
 8000ebc:	e7b6      	b.n	8000e2c <__aeabi_fsub+0x268>
 8000ebe:	4663      	mov	r3, ip
 8000ec0:	000d      	movs	r5, r1
 8000ec2:	1ad6      	subs	r6, r2, r3
 8000ec4:	e6c0      	b.n	8000c48 <__aeabi_fsub+0x84>
 8000ec6:	4662      	mov	r2, ip
 8000ec8:	2a00      	cmp	r2, #0
 8000eca:	d116      	bne.n	8000efa <__aeabi_fsub+0x336>
 8000ecc:	4653      	mov	r3, sl
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d000      	beq.n	8000ed4 <__aeabi_fsub+0x310>
 8000ed2:	e72b      	b.n	8000d2c <__aeabi_fsub+0x168>
 8000ed4:	2780      	movs	r7, #128	; 0x80
 8000ed6:	2500      	movs	r5, #0
 8000ed8:	20ff      	movs	r0, #255	; 0xff
 8000eda:	03ff      	lsls	r7, r7, #15
 8000edc:	e6d9      	b.n	8000c92 <__aeabi_fsub+0xce>
 8000ede:	000d      	movs	r5, r1
 8000ee0:	4643      	mov	r3, r8
 8000ee2:	0034      	movs	r4, r6
 8000ee4:	e7a6      	b.n	8000e34 <__aeabi_fsub+0x270>
 8000ee6:	4653      	mov	r3, sl
 8000ee8:	4463      	add	r3, ip
 8000eea:	e6f7      	b.n	8000cdc <__aeabi_fsub+0x118>
 8000eec:	4663      	mov	r3, ip
 8000eee:	4652      	mov	r2, sl
 8000ef0:	1a9b      	subs	r3, r3, r2
 8000ef2:	e6a4      	b.n	8000c3e <__aeabi_fsub+0x7a>
 8000ef4:	4662      	mov	r2, ip
 8000ef6:	2a00      	cmp	r2, #0
 8000ef8:	d0d9      	beq.n	8000eae <__aeabi_fsub+0x2ea>
 8000efa:	4652      	mov	r2, sl
 8000efc:	2a00      	cmp	r2, #0
 8000efe:	d100      	bne.n	8000f02 <__aeabi_fsub+0x33e>
 8000f00:	e716      	b.n	8000d30 <__aeabi_fsub+0x16c>
 8000f02:	2280      	movs	r2, #128	; 0x80
 8000f04:	03d2      	lsls	r2, r2, #15
 8000f06:	4213      	tst	r3, r2
 8000f08:	d100      	bne.n	8000f0c <__aeabi_fsub+0x348>
 8000f0a:	e711      	b.n	8000d30 <__aeabi_fsub+0x16c>
 8000f0c:	4640      	mov	r0, r8
 8000f0e:	4210      	tst	r0, r2
 8000f10:	d000      	beq.n	8000f14 <__aeabi_fsub+0x350>
 8000f12:	e70d      	b.n	8000d30 <__aeabi_fsub+0x16c>
 8000f14:	e70a      	b.n	8000d2c <__aeabi_fsub+0x168>
 8000f16:	4652      	mov	r2, sl
 8000f18:	000d      	movs	r5, r1
 8000f1a:	0034      	movs	r4, r6
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	e68e      	b.n	8000c3e <__aeabi_fsub+0x7a>
 8000f20:	4653      	mov	r3, sl
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d008      	beq.n	8000f38 <__aeabi_fsub+0x374>
 8000f26:	000d      	movs	r5, r1
 8000f28:	4647      	mov	r7, r8
 8000f2a:	e6b2      	b.n	8000c92 <__aeabi_fsub+0xce>
 8000f2c:	4643      	mov	r3, r8
 8000f2e:	0034      	movs	r4, r6
 8000f30:	e780      	b.n	8000e34 <__aeabi_fsub+0x270>
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d000      	beq.n	8000f38 <__aeabi_fsub+0x374>
 8000f36:	e779      	b.n	8000e2c <__aeabi_fsub+0x268>
 8000f38:	2500      	movs	r5, #0
 8000f3a:	2700      	movs	r7, #0
 8000f3c:	e6a9      	b.n	8000c92 <__aeabi_fsub+0xce>
 8000f3e:	4647      	mov	r7, r8
 8000f40:	e6a7      	b.n	8000c92 <__aeabi_fsub+0xce>
 8000f42:	4653      	mov	r3, sl
 8000f44:	0034      	movs	r4, r6
 8000f46:	4463      	add	r3, ip
 8000f48:	e6c8      	b.n	8000cdc <__aeabi_fsub+0x118>
 8000f4a:	46c0      	nop			; (mov r8, r8)
 8000f4c:	7dffffff 	.word	0x7dffffff
 8000f50:	fbffffff 	.word	0xfbffffff

08000f54 <__aeabi_f2iz>:
 8000f54:	0241      	lsls	r1, r0, #9
 8000f56:	0042      	lsls	r2, r0, #1
 8000f58:	0fc3      	lsrs	r3, r0, #31
 8000f5a:	0a49      	lsrs	r1, r1, #9
 8000f5c:	2000      	movs	r0, #0
 8000f5e:	0e12      	lsrs	r2, r2, #24
 8000f60:	2a7e      	cmp	r2, #126	; 0x7e
 8000f62:	d903      	bls.n	8000f6c <__aeabi_f2iz+0x18>
 8000f64:	2a9d      	cmp	r2, #157	; 0x9d
 8000f66:	d902      	bls.n	8000f6e <__aeabi_f2iz+0x1a>
 8000f68:	4a09      	ldr	r2, [pc, #36]	; (8000f90 <__aeabi_f2iz+0x3c>)
 8000f6a:	1898      	adds	r0, r3, r2
 8000f6c:	4770      	bx	lr
 8000f6e:	2080      	movs	r0, #128	; 0x80
 8000f70:	0400      	lsls	r0, r0, #16
 8000f72:	4301      	orrs	r1, r0
 8000f74:	2a95      	cmp	r2, #149	; 0x95
 8000f76:	dc07      	bgt.n	8000f88 <__aeabi_f2iz+0x34>
 8000f78:	2096      	movs	r0, #150	; 0x96
 8000f7a:	1a82      	subs	r2, r0, r2
 8000f7c:	40d1      	lsrs	r1, r2
 8000f7e:	4248      	negs	r0, r1
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d1f3      	bne.n	8000f6c <__aeabi_f2iz+0x18>
 8000f84:	0008      	movs	r0, r1
 8000f86:	e7f1      	b.n	8000f6c <__aeabi_f2iz+0x18>
 8000f88:	3a96      	subs	r2, #150	; 0x96
 8000f8a:	4091      	lsls	r1, r2
 8000f8c:	e7f7      	b.n	8000f7e <__aeabi_f2iz+0x2a>
 8000f8e:	46c0      	nop			; (mov r8, r8)
 8000f90:	7fffffff 	.word	0x7fffffff

08000f94 <__aeabi_ui2f>:
 8000f94:	b570      	push	{r4, r5, r6, lr}
 8000f96:	1e05      	subs	r5, r0, #0
 8000f98:	d00e      	beq.n	8000fb8 <__aeabi_ui2f+0x24>
 8000f9a:	f000 f871 	bl	8001080 <__clzsi2>
 8000f9e:	239e      	movs	r3, #158	; 0x9e
 8000fa0:	0004      	movs	r4, r0
 8000fa2:	1a1b      	subs	r3, r3, r0
 8000fa4:	2b96      	cmp	r3, #150	; 0x96
 8000fa6:	dc0c      	bgt.n	8000fc2 <__aeabi_ui2f+0x2e>
 8000fa8:	2808      	cmp	r0, #8
 8000faa:	dd01      	ble.n	8000fb0 <__aeabi_ui2f+0x1c>
 8000fac:	3c08      	subs	r4, #8
 8000fae:	40a5      	lsls	r5, r4
 8000fb0:	026d      	lsls	r5, r5, #9
 8000fb2:	0a6d      	lsrs	r5, r5, #9
 8000fb4:	b2d8      	uxtb	r0, r3
 8000fb6:	e001      	b.n	8000fbc <__aeabi_ui2f+0x28>
 8000fb8:	2000      	movs	r0, #0
 8000fba:	2500      	movs	r5, #0
 8000fbc:	05c0      	lsls	r0, r0, #23
 8000fbe:	4328      	orrs	r0, r5
 8000fc0:	bd70      	pop	{r4, r5, r6, pc}
 8000fc2:	2b99      	cmp	r3, #153	; 0x99
 8000fc4:	dd09      	ble.n	8000fda <__aeabi_ui2f+0x46>
 8000fc6:	0002      	movs	r2, r0
 8000fc8:	0029      	movs	r1, r5
 8000fca:	321b      	adds	r2, #27
 8000fcc:	4091      	lsls	r1, r2
 8000fce:	1e4a      	subs	r2, r1, #1
 8000fd0:	4191      	sbcs	r1, r2
 8000fd2:	2205      	movs	r2, #5
 8000fd4:	1a12      	subs	r2, r2, r0
 8000fd6:	40d5      	lsrs	r5, r2
 8000fd8:	430d      	orrs	r5, r1
 8000fda:	2c05      	cmp	r4, #5
 8000fdc:	dd01      	ble.n	8000fe2 <__aeabi_ui2f+0x4e>
 8000fde:	1f62      	subs	r2, r4, #5
 8000fe0:	4095      	lsls	r5, r2
 8000fe2:	0029      	movs	r1, r5
 8000fe4:	4e08      	ldr	r6, [pc, #32]	; (8001008 <__aeabi_ui2f+0x74>)
 8000fe6:	4031      	ands	r1, r6
 8000fe8:	076a      	lsls	r2, r5, #29
 8000fea:	d009      	beq.n	8001000 <__aeabi_ui2f+0x6c>
 8000fec:	200f      	movs	r0, #15
 8000fee:	4028      	ands	r0, r5
 8000ff0:	2804      	cmp	r0, #4
 8000ff2:	d005      	beq.n	8001000 <__aeabi_ui2f+0x6c>
 8000ff4:	3104      	adds	r1, #4
 8000ff6:	014a      	lsls	r2, r1, #5
 8000ff8:	d502      	bpl.n	8001000 <__aeabi_ui2f+0x6c>
 8000ffa:	239f      	movs	r3, #159	; 0x9f
 8000ffc:	4031      	ands	r1, r6
 8000ffe:	1b1b      	subs	r3, r3, r4
 8001000:	0189      	lsls	r1, r1, #6
 8001002:	0a4d      	lsrs	r5, r1, #9
 8001004:	b2d8      	uxtb	r0, r3
 8001006:	e7d9      	b.n	8000fbc <__aeabi_ui2f+0x28>
 8001008:	fbffffff 	.word	0xfbffffff

0800100c <__aeabi_cfrcmple>:
 800100c:	4684      	mov	ip, r0
 800100e:	1c08      	adds	r0, r1, #0
 8001010:	4661      	mov	r1, ip
 8001012:	e7ff      	b.n	8001014 <__aeabi_cfcmpeq>

08001014 <__aeabi_cfcmpeq>:
 8001014:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001016:	f000 f8c5 	bl	80011a4 <__lesf2>
 800101a:	2800      	cmp	r0, #0
 800101c:	d401      	bmi.n	8001022 <__aeabi_cfcmpeq+0xe>
 800101e:	2100      	movs	r1, #0
 8001020:	42c8      	cmn	r0, r1
 8001022:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001024 <__aeabi_fcmpeq>:
 8001024:	b510      	push	{r4, lr}
 8001026:	f000 f849 	bl	80010bc <__eqsf2>
 800102a:	4240      	negs	r0, r0
 800102c:	3001      	adds	r0, #1
 800102e:	bd10      	pop	{r4, pc}

08001030 <__aeabi_fcmplt>:
 8001030:	b510      	push	{r4, lr}
 8001032:	f000 f8b7 	bl	80011a4 <__lesf2>
 8001036:	2800      	cmp	r0, #0
 8001038:	db01      	blt.n	800103e <__aeabi_fcmplt+0xe>
 800103a:	2000      	movs	r0, #0
 800103c:	bd10      	pop	{r4, pc}
 800103e:	2001      	movs	r0, #1
 8001040:	bd10      	pop	{r4, pc}
 8001042:	46c0      	nop			; (mov r8, r8)

08001044 <__aeabi_fcmple>:
 8001044:	b510      	push	{r4, lr}
 8001046:	f000 f8ad 	bl	80011a4 <__lesf2>
 800104a:	2800      	cmp	r0, #0
 800104c:	dd01      	ble.n	8001052 <__aeabi_fcmple+0xe>
 800104e:	2000      	movs	r0, #0
 8001050:	bd10      	pop	{r4, pc}
 8001052:	2001      	movs	r0, #1
 8001054:	bd10      	pop	{r4, pc}
 8001056:	46c0      	nop			; (mov r8, r8)

08001058 <__aeabi_fcmpgt>:
 8001058:	b510      	push	{r4, lr}
 800105a:	f000 f857 	bl	800110c <__gesf2>
 800105e:	2800      	cmp	r0, #0
 8001060:	dc01      	bgt.n	8001066 <__aeabi_fcmpgt+0xe>
 8001062:	2000      	movs	r0, #0
 8001064:	bd10      	pop	{r4, pc}
 8001066:	2001      	movs	r0, #1
 8001068:	bd10      	pop	{r4, pc}
 800106a:	46c0      	nop			; (mov r8, r8)

0800106c <__aeabi_fcmpge>:
 800106c:	b510      	push	{r4, lr}
 800106e:	f000 f84d 	bl	800110c <__gesf2>
 8001072:	2800      	cmp	r0, #0
 8001074:	da01      	bge.n	800107a <__aeabi_fcmpge+0xe>
 8001076:	2000      	movs	r0, #0
 8001078:	bd10      	pop	{r4, pc}
 800107a:	2001      	movs	r0, #1
 800107c:	bd10      	pop	{r4, pc}
 800107e:	46c0      	nop			; (mov r8, r8)

08001080 <__clzsi2>:
 8001080:	211c      	movs	r1, #28
 8001082:	2301      	movs	r3, #1
 8001084:	041b      	lsls	r3, r3, #16
 8001086:	4298      	cmp	r0, r3
 8001088:	d301      	bcc.n	800108e <__clzsi2+0xe>
 800108a:	0c00      	lsrs	r0, r0, #16
 800108c:	3910      	subs	r1, #16
 800108e:	0a1b      	lsrs	r3, r3, #8
 8001090:	4298      	cmp	r0, r3
 8001092:	d301      	bcc.n	8001098 <__clzsi2+0x18>
 8001094:	0a00      	lsrs	r0, r0, #8
 8001096:	3908      	subs	r1, #8
 8001098:	091b      	lsrs	r3, r3, #4
 800109a:	4298      	cmp	r0, r3
 800109c:	d301      	bcc.n	80010a2 <__clzsi2+0x22>
 800109e:	0900      	lsrs	r0, r0, #4
 80010a0:	3904      	subs	r1, #4
 80010a2:	a202      	add	r2, pc, #8	; (adr r2, 80010ac <__clzsi2+0x2c>)
 80010a4:	5c10      	ldrb	r0, [r2, r0]
 80010a6:	1840      	adds	r0, r0, r1
 80010a8:	4770      	bx	lr
 80010aa:	46c0      	nop			; (mov r8, r8)
 80010ac:	02020304 	.word	0x02020304
 80010b0:	01010101 	.word	0x01010101
	...

080010bc <__eqsf2>:
 80010bc:	b570      	push	{r4, r5, r6, lr}
 80010be:	0042      	lsls	r2, r0, #1
 80010c0:	024e      	lsls	r6, r1, #9
 80010c2:	004c      	lsls	r4, r1, #1
 80010c4:	0245      	lsls	r5, r0, #9
 80010c6:	0a6d      	lsrs	r5, r5, #9
 80010c8:	0e12      	lsrs	r2, r2, #24
 80010ca:	0fc3      	lsrs	r3, r0, #31
 80010cc:	0a76      	lsrs	r6, r6, #9
 80010ce:	0e24      	lsrs	r4, r4, #24
 80010d0:	0fc9      	lsrs	r1, r1, #31
 80010d2:	2aff      	cmp	r2, #255	; 0xff
 80010d4:	d00f      	beq.n	80010f6 <__eqsf2+0x3a>
 80010d6:	2cff      	cmp	r4, #255	; 0xff
 80010d8:	d011      	beq.n	80010fe <__eqsf2+0x42>
 80010da:	2001      	movs	r0, #1
 80010dc:	42a2      	cmp	r2, r4
 80010de:	d000      	beq.n	80010e2 <__eqsf2+0x26>
 80010e0:	bd70      	pop	{r4, r5, r6, pc}
 80010e2:	42b5      	cmp	r5, r6
 80010e4:	d1fc      	bne.n	80010e0 <__eqsf2+0x24>
 80010e6:	428b      	cmp	r3, r1
 80010e8:	d00d      	beq.n	8001106 <__eqsf2+0x4a>
 80010ea:	2a00      	cmp	r2, #0
 80010ec:	d1f8      	bne.n	80010e0 <__eqsf2+0x24>
 80010ee:	0028      	movs	r0, r5
 80010f0:	1e45      	subs	r5, r0, #1
 80010f2:	41a8      	sbcs	r0, r5
 80010f4:	e7f4      	b.n	80010e0 <__eqsf2+0x24>
 80010f6:	2001      	movs	r0, #1
 80010f8:	2d00      	cmp	r5, #0
 80010fa:	d1f1      	bne.n	80010e0 <__eqsf2+0x24>
 80010fc:	e7eb      	b.n	80010d6 <__eqsf2+0x1a>
 80010fe:	2001      	movs	r0, #1
 8001100:	2e00      	cmp	r6, #0
 8001102:	d1ed      	bne.n	80010e0 <__eqsf2+0x24>
 8001104:	e7e9      	b.n	80010da <__eqsf2+0x1e>
 8001106:	2000      	movs	r0, #0
 8001108:	e7ea      	b.n	80010e0 <__eqsf2+0x24>
 800110a:	46c0      	nop			; (mov r8, r8)

0800110c <__gesf2>:
 800110c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800110e:	0042      	lsls	r2, r0, #1
 8001110:	0246      	lsls	r6, r0, #9
 8001112:	024d      	lsls	r5, r1, #9
 8001114:	004c      	lsls	r4, r1, #1
 8001116:	0fc3      	lsrs	r3, r0, #31
 8001118:	0a76      	lsrs	r6, r6, #9
 800111a:	0e12      	lsrs	r2, r2, #24
 800111c:	0a6d      	lsrs	r5, r5, #9
 800111e:	0e24      	lsrs	r4, r4, #24
 8001120:	0fc8      	lsrs	r0, r1, #31
 8001122:	2aff      	cmp	r2, #255	; 0xff
 8001124:	d01f      	beq.n	8001166 <__gesf2+0x5a>
 8001126:	2cff      	cmp	r4, #255	; 0xff
 8001128:	d010      	beq.n	800114c <__gesf2+0x40>
 800112a:	2a00      	cmp	r2, #0
 800112c:	d11f      	bne.n	800116e <__gesf2+0x62>
 800112e:	4271      	negs	r1, r6
 8001130:	4171      	adcs	r1, r6
 8001132:	2c00      	cmp	r4, #0
 8001134:	d101      	bne.n	800113a <__gesf2+0x2e>
 8001136:	2d00      	cmp	r5, #0
 8001138:	d01e      	beq.n	8001178 <__gesf2+0x6c>
 800113a:	2900      	cmp	r1, #0
 800113c:	d10e      	bne.n	800115c <__gesf2+0x50>
 800113e:	4283      	cmp	r3, r0
 8001140:	d01e      	beq.n	8001180 <__gesf2+0x74>
 8001142:	2102      	movs	r1, #2
 8001144:	1e58      	subs	r0, r3, #1
 8001146:	4008      	ands	r0, r1
 8001148:	3801      	subs	r0, #1
 800114a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800114c:	2d00      	cmp	r5, #0
 800114e:	d126      	bne.n	800119e <__gesf2+0x92>
 8001150:	2a00      	cmp	r2, #0
 8001152:	d1f4      	bne.n	800113e <__gesf2+0x32>
 8001154:	4271      	negs	r1, r6
 8001156:	4171      	adcs	r1, r6
 8001158:	2900      	cmp	r1, #0
 800115a:	d0f0      	beq.n	800113e <__gesf2+0x32>
 800115c:	2800      	cmp	r0, #0
 800115e:	d1f4      	bne.n	800114a <__gesf2+0x3e>
 8001160:	2001      	movs	r0, #1
 8001162:	4240      	negs	r0, r0
 8001164:	e7f1      	b.n	800114a <__gesf2+0x3e>
 8001166:	2e00      	cmp	r6, #0
 8001168:	d119      	bne.n	800119e <__gesf2+0x92>
 800116a:	2cff      	cmp	r4, #255	; 0xff
 800116c:	d0ee      	beq.n	800114c <__gesf2+0x40>
 800116e:	2c00      	cmp	r4, #0
 8001170:	d1e5      	bne.n	800113e <__gesf2+0x32>
 8001172:	2d00      	cmp	r5, #0
 8001174:	d1e3      	bne.n	800113e <__gesf2+0x32>
 8001176:	e7e4      	b.n	8001142 <__gesf2+0x36>
 8001178:	2000      	movs	r0, #0
 800117a:	2e00      	cmp	r6, #0
 800117c:	d0e5      	beq.n	800114a <__gesf2+0x3e>
 800117e:	e7e0      	b.n	8001142 <__gesf2+0x36>
 8001180:	42a2      	cmp	r2, r4
 8001182:	dc05      	bgt.n	8001190 <__gesf2+0x84>
 8001184:	dbea      	blt.n	800115c <__gesf2+0x50>
 8001186:	42ae      	cmp	r6, r5
 8001188:	d802      	bhi.n	8001190 <__gesf2+0x84>
 800118a:	d3e7      	bcc.n	800115c <__gesf2+0x50>
 800118c:	2000      	movs	r0, #0
 800118e:	e7dc      	b.n	800114a <__gesf2+0x3e>
 8001190:	4241      	negs	r1, r0
 8001192:	4141      	adcs	r1, r0
 8001194:	4248      	negs	r0, r1
 8001196:	2102      	movs	r1, #2
 8001198:	4008      	ands	r0, r1
 800119a:	3801      	subs	r0, #1
 800119c:	e7d5      	b.n	800114a <__gesf2+0x3e>
 800119e:	2002      	movs	r0, #2
 80011a0:	4240      	negs	r0, r0
 80011a2:	e7d2      	b.n	800114a <__gesf2+0x3e>

080011a4 <__lesf2>:
 80011a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011a6:	0042      	lsls	r2, r0, #1
 80011a8:	0246      	lsls	r6, r0, #9
 80011aa:	024d      	lsls	r5, r1, #9
 80011ac:	004c      	lsls	r4, r1, #1
 80011ae:	0fc3      	lsrs	r3, r0, #31
 80011b0:	0a76      	lsrs	r6, r6, #9
 80011b2:	0e12      	lsrs	r2, r2, #24
 80011b4:	0a6d      	lsrs	r5, r5, #9
 80011b6:	0e24      	lsrs	r4, r4, #24
 80011b8:	0fc8      	lsrs	r0, r1, #31
 80011ba:	2aff      	cmp	r2, #255	; 0xff
 80011bc:	d00d      	beq.n	80011da <__lesf2+0x36>
 80011be:	2cff      	cmp	r4, #255	; 0xff
 80011c0:	d00f      	beq.n	80011e2 <__lesf2+0x3e>
 80011c2:	2a00      	cmp	r2, #0
 80011c4:	d123      	bne.n	800120e <__lesf2+0x6a>
 80011c6:	4271      	negs	r1, r6
 80011c8:	4171      	adcs	r1, r6
 80011ca:	2c00      	cmp	r4, #0
 80011cc:	d10f      	bne.n	80011ee <__lesf2+0x4a>
 80011ce:	2d00      	cmp	r5, #0
 80011d0:	d10d      	bne.n	80011ee <__lesf2+0x4a>
 80011d2:	2000      	movs	r0, #0
 80011d4:	2e00      	cmp	r6, #0
 80011d6:	d014      	beq.n	8001202 <__lesf2+0x5e>
 80011d8:	e00d      	b.n	80011f6 <__lesf2+0x52>
 80011da:	2e00      	cmp	r6, #0
 80011dc:	d110      	bne.n	8001200 <__lesf2+0x5c>
 80011de:	2cff      	cmp	r4, #255	; 0xff
 80011e0:	d115      	bne.n	800120e <__lesf2+0x6a>
 80011e2:	2d00      	cmp	r5, #0
 80011e4:	d10c      	bne.n	8001200 <__lesf2+0x5c>
 80011e6:	2a00      	cmp	r2, #0
 80011e8:	d103      	bne.n	80011f2 <__lesf2+0x4e>
 80011ea:	4271      	negs	r1, r6
 80011ec:	4171      	adcs	r1, r6
 80011ee:	2900      	cmp	r1, #0
 80011f0:	d108      	bne.n	8001204 <__lesf2+0x60>
 80011f2:	4283      	cmp	r3, r0
 80011f4:	d010      	beq.n	8001218 <__lesf2+0x74>
 80011f6:	2102      	movs	r1, #2
 80011f8:	1e58      	subs	r0, r3, #1
 80011fa:	4008      	ands	r0, r1
 80011fc:	3801      	subs	r0, #1
 80011fe:	e000      	b.n	8001202 <__lesf2+0x5e>
 8001200:	2002      	movs	r0, #2
 8001202:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001204:	2800      	cmp	r0, #0
 8001206:	d1fc      	bne.n	8001202 <__lesf2+0x5e>
 8001208:	2001      	movs	r0, #1
 800120a:	4240      	negs	r0, r0
 800120c:	e7f9      	b.n	8001202 <__lesf2+0x5e>
 800120e:	2c00      	cmp	r4, #0
 8001210:	d1ef      	bne.n	80011f2 <__lesf2+0x4e>
 8001212:	2d00      	cmp	r5, #0
 8001214:	d1ed      	bne.n	80011f2 <__lesf2+0x4e>
 8001216:	e7ee      	b.n	80011f6 <__lesf2+0x52>
 8001218:	42a2      	cmp	r2, r4
 800121a:	dc05      	bgt.n	8001228 <__lesf2+0x84>
 800121c:	dbf2      	blt.n	8001204 <__lesf2+0x60>
 800121e:	42ae      	cmp	r6, r5
 8001220:	d802      	bhi.n	8001228 <__lesf2+0x84>
 8001222:	d3ef      	bcc.n	8001204 <__lesf2+0x60>
 8001224:	2000      	movs	r0, #0
 8001226:	e7ec      	b.n	8001202 <__lesf2+0x5e>
 8001228:	4241      	negs	r1, r0
 800122a:	4141      	adcs	r1, r0
 800122c:	4248      	negs	r0, r1
 800122e:	2102      	movs	r1, #2
 8001230:	4008      	ands	r0, r1
 8001232:	3801      	subs	r0, #1
 8001234:	e7e5      	b.n	8001202 <__lesf2+0x5e>
 8001236:	46c0      	nop			; (mov r8, r8)

08001238 <km_init>:
/* Kalman Filter FUNCTIONS ====================================================================================================== */
static void km_init(struct Str_Kalman *kalman, float _varP, float _varM, float _initial);
static float km_process(struct Str_Kalman *kalman, float input);

static void km_init(struct Str_Kalman *kalman, float _varP, float _varM, float _initial)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
 8001244:	603b      	str	r3, [r7, #0]
	kalman->varP = _varP;	  // Giá trị ước tính sai số
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	68ba      	ldr	r2, [r7, #8]
 800124a:	601a      	str	r2, [r3, #0]
	kalman->varM = _varM;	  // Giá trị ước tính sai số do nhiễu
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	605a      	str	r2, [r3, #4]
	kalman->value = _initial; // Giá trị khởi tạo ban đầu
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	683a      	ldr	r2, [r7, #0]
 8001256:	609a      	str	r2, [r3, #8]
	kalman->p = 1;			  //Ã†Â°Ã¡Â»â€ºc lÃ†Â°Ã¡Â»Â£ng sai sÃ¡Â»â€˜
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	22fe      	movs	r2, #254	; 0xfe
 800125c:	0592      	lsls	r2, r2, #22
 800125e:	60da      	str	r2, [r3, #12]
	kalman->k = 1;			  //Ã„â€˜Ã¡Â»â„¢ lÃ¡Â»Â£i
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	22fe      	movs	r2, #254	; 0xfe
 8001264:	0592      	lsls	r2, r2, #22
 8001266:	611a      	str	r2, [r3, #16]
}
 8001268:	46c0      	nop			; (mov r8, r8)
 800126a:	46bd      	mov	sp, r7
 800126c:	b004      	add	sp, #16
 800126e:	bd80      	pop	{r7, pc}

08001270 <km_process>:

static float km_process(struct Str_Kalman *kalman, float input)
{
 8001270:	b5b0      	push	{r4, r5, r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	6039      	str	r1, [r7, #0]
	// compute the value
	kalman->p = kalman->p + kalman->varP;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	68da      	ldr	r2, [r3, #12]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	1c19      	adds	r1, r3, #0
 8001284:	1c10      	adds	r0, r2, #0
 8001286:	f7ff f8db 	bl	8000440 <__aeabi_fadd>
 800128a:	1c03      	adds	r3, r0, #0
 800128c:	1c1a      	adds	r2, r3, #0
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	60da      	str	r2, [r3, #12]
	kalman->k = kalman->p / (kalman->p + kalman->varM);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	68dc      	ldr	r4, [r3, #12]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	68da      	ldr	r2, [r3, #12]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	1c19      	adds	r1, r3, #0
 80012a0:	1c10      	adds	r0, r2, #0
 80012a2:	f7ff f8cd 	bl	8000440 <__aeabi_fadd>
 80012a6:	1c03      	adds	r3, r0, #0
 80012a8:	1c19      	adds	r1, r3, #0
 80012aa:	1c20      	adds	r0, r4, #0
 80012ac:	f7ff fa64 	bl	8000778 <__aeabi_fdiv>
 80012b0:	1c03      	adds	r3, r0, #0
 80012b2:	1c1a      	adds	r2, r3, #0
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	611a      	str	r2, [r3, #16]
	kalman->value = kalman->value + kalman->k * (input - kalman->value);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	689c      	ldr	r4, [r3, #8]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	691d      	ldr	r5, [r3, #16]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	1c19      	adds	r1, r3, #0
 80012c6:	6838      	ldr	r0, [r7, #0]
 80012c8:	f7ff fc7c 	bl	8000bc4 <__aeabi_fsub>
 80012cc:	1c03      	adds	r3, r0, #0
 80012ce:	1c19      	adds	r1, r3, #0
 80012d0:	1c28      	adds	r0, r5, #0
 80012d2:	f7ff fb5d 	bl	8000990 <__aeabi_fmul>
 80012d6:	1c03      	adds	r3, r0, #0
 80012d8:	1c19      	adds	r1, r3, #0
 80012da:	1c20      	adds	r0, r4, #0
 80012dc:	f7ff f8b0 	bl	8000440 <__aeabi_fadd>
 80012e0:	1c03      	adds	r3, r0, #0
 80012e2:	1c1a      	adds	r2, r3, #0
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	609a      	str	r2, [r3, #8]

	// update the estimates => Giá trị ước tính
	kalman->p = (1 - kalman->k) * kalman->p;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	691b      	ldr	r3, [r3, #16]
 80012ec:	1c19      	adds	r1, r3, #0
 80012ee:	20fe      	movs	r0, #254	; 0xfe
 80012f0:	0580      	lsls	r0, r0, #22
 80012f2:	f7ff fc67 	bl	8000bc4 <__aeabi_fsub>
 80012f6:	1c03      	adds	r3, r0, #0
 80012f8:	1c1a      	adds	r2, r3, #0
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	68db      	ldr	r3, [r3, #12]
 80012fe:	1c19      	adds	r1, r3, #0
 8001300:	1c10      	adds	r0, r2, #0
 8001302:	f7ff fb45 	bl	8000990 <__aeabi_fmul>
 8001306:	1c03      	adds	r3, r0, #0
 8001308:	1c1a      	adds	r2, r3, #0
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	60da      	str	r2, [r3, #12]

	return kalman->value;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	689b      	ldr	r3, [r3, #8]
}
 8001312:	1c18      	adds	r0, r3, #0
 8001314:	46bd      	mov	sp, r7
 8001316:	b002      	add	sp, #8
 8001318:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800131c <ADC_Init_KalmanFilter>:

// Put in Init MCU
void ADC_Init_KalmanFilter()
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
	km_init(&Kalman_ProbesWter, 0.01, 20, 4050);   // ADC
 8001320:	4b0a      	ldr	r3, [pc, #40]	; (800134c <ADC_Init_KalmanFilter+0x30>)
 8001322:	4a0b      	ldr	r2, [pc, #44]	; (8001350 <ADC_Init_KalmanFilter+0x34>)
 8001324:	490b      	ldr	r1, [pc, #44]	; (8001354 <ADC_Init_KalmanFilter+0x38>)
 8001326:	480c      	ldr	r0, [pc, #48]	; (8001358 <ADC_Init_KalmanFilter+0x3c>)
 8001328:	f7ff ff86 	bl	8001238 <km_init>
	km_init(&Kalman_PTC_HeatSink, 0.01, 20, 2031); // ADC of 25 do C
 800132c:	4b0b      	ldr	r3, [pc, #44]	; (800135c <ADC_Init_KalmanFilter+0x40>)
 800132e:	4a08      	ldr	r2, [pc, #32]	; (8001350 <ADC_Init_KalmanFilter+0x34>)
 8001330:	4908      	ldr	r1, [pc, #32]	; (8001354 <ADC_Init_KalmanFilter+0x38>)
 8001332:	480b      	ldr	r0, [pc, #44]	; (8001360 <ADC_Init_KalmanFilter+0x44>)
 8001334:	f7ff ff80 	bl	8001238 <km_init>
	km_init(&Kalman_PTC_Boiler, 0.01, 20, 2031);   // ADC of 25 do C
 8001338:	4b08      	ldr	r3, [pc, #32]	; (800135c <ADC_Init_KalmanFilter+0x40>)
 800133a:	4a05      	ldr	r2, [pc, #20]	; (8001350 <ADC_Init_KalmanFilter+0x34>)
 800133c:	4905      	ldr	r1, [pc, #20]	; (8001354 <ADC_Init_KalmanFilter+0x38>)
 800133e:	4809      	ldr	r0, [pc, #36]	; (8001364 <ADC_Init_KalmanFilter+0x48>)
 8001340:	f7ff ff7a 	bl	8001238 <km_init>
}
 8001344:	46c0      	nop			; (mov r8, r8)
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	46c0      	nop			; (mov r8, r8)
 800134c:	457d2000 	.word	0x457d2000
 8001350:	41a00000 	.word	0x41a00000
 8001354:	3c23d70a 	.word	0x3c23d70a
 8001358:	200000ec 	.word	0x200000ec
 800135c:	44fde000 	.word	0x44fde000
 8001360:	2000011c 	.word	0x2000011c
 8001364:	20000100 	.word	0x20000100

08001368 <ADC_Calculate_AVG>:

///* =============================================== ADC FUNCTIONS =============================================== */
void ADC_Calculate_AVG(__IO uint16_t *InPut, __IO uint16_t *OutPut, uint16_t num_Samples /*x10*/)
{
 8001368:	b590      	push	{r4, r7, lr}
 800136a:	b087      	sub	sp, #28
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	1dbb      	adds	r3, r7, #6
 8001374:	801a      	strh	r2, [r3, #0]
	uint8_t i = 0;
 8001376:	2117      	movs	r1, #23
 8001378:	187b      	adds	r3, r7, r1
 800137a:	2200      	movs	r2, #0
 800137c:	701a      	strb	r2, [r3, #0]
	static uint16_t c = 0;
	static uint32_t _total[_ID_ADC_TOTAL];

	if (++c <= num_Samples)
 800137e:	4b68      	ldr	r3, [pc, #416]	; (8001520 <ADC_Calculate_AVG+0x1b8>)
 8001380:	881b      	ldrh	r3, [r3, #0]
 8001382:	3301      	adds	r3, #1
 8001384:	b29a      	uxth	r2, r3
 8001386:	4b66      	ldr	r3, [pc, #408]	; (8001520 <ADC_Calculate_AVG+0x1b8>)
 8001388:	801a      	strh	r2, [r3, #0]
 800138a:	4b65      	ldr	r3, [pc, #404]	; (8001520 <ADC_Calculate_AVG+0x1b8>)
 800138c:	881b      	ldrh	r3, [r3, #0]
 800138e:	1dba      	adds	r2, r7, #6
 8001390:	8812      	ldrh	r2, [r2, #0]
 8001392:	429a      	cmp	r2, r3
 8001394:	d34b      	bcc.n	800142e <ADC_Calculate_AVG+0xc6>
	{
		for (i = 0; i < _ID_ADC_TOTAL; i++)
 8001396:	187b      	adds	r3, r7, r1
 8001398:	2200      	movs	r2, #0
 800139a:	701a      	strb	r2, [r3, #0]
 800139c:	e018      	b.n	80013d0 <ADC_Calculate_AVG+0x68>
			_total[i] += (uint32_t)InPut[i];
 800139e:	2017      	movs	r0, #23
 80013a0:	183b      	adds	r3, r7, r0
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	68fa      	ldr	r2, [r7, #12]
 80013a8:	18d3      	adds	r3, r2, r3
 80013aa:	881b      	ldrh	r3, [r3, #0]
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	0019      	movs	r1, r3
 80013b0:	183b      	adds	r3, r7, r0
 80013b2:	781a      	ldrb	r2, [r3, #0]
 80013b4:	4b5b      	ldr	r3, [pc, #364]	; (8001524 <ADC_Calculate_AVG+0x1bc>)
 80013b6:	0092      	lsls	r2, r2, #2
 80013b8:	58d3      	ldr	r3, [r2, r3]
 80013ba:	183a      	adds	r2, r7, r0
 80013bc:	7812      	ldrb	r2, [r2, #0]
 80013be:	18c9      	adds	r1, r1, r3
 80013c0:	4b58      	ldr	r3, [pc, #352]	; (8001524 <ADC_Calculate_AVG+0x1bc>)
 80013c2:	0092      	lsls	r2, r2, #2
 80013c4:	50d1      	str	r1, [r2, r3]
		for (i = 0; i < _ID_ADC_TOTAL; i++)
 80013c6:	183b      	adds	r3, r7, r0
 80013c8:	781a      	ldrb	r2, [r3, #0]
 80013ca:	183b      	adds	r3, r7, r0
 80013cc:	3201      	adds	r2, #1
 80013ce:	701a      	strb	r2, [r3, #0]
 80013d0:	2317      	movs	r3, #23
 80013d2:	18fb      	adds	r3, r7, r3
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2b03      	cmp	r3, #3
 80013d8:	d9e1      	bls.n	800139e <ADC_Calculate_AVG+0x36>

		// Lay ket qua ADC_CURRENT som hon 1/10 so voi cac ADC khac
		if ((c % (num_Samples / 10)) == 0)
 80013da:	4b51      	ldr	r3, [pc, #324]	; (8001520 <ADC_Calculate_AVG+0x1b8>)
 80013dc:	881c      	ldrh	r4, [r3, #0]
 80013de:	1dbb      	adds	r3, r7, #6
 80013e0:	881b      	ldrh	r3, [r3, #0]
 80013e2:	210a      	movs	r1, #10
 80013e4:	0018      	movs	r0, r3
 80013e6:	f7fe fe9d 	bl	8000124 <__udivsi3>
 80013ea:	0003      	movs	r3, r0
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	0019      	movs	r1, r3
 80013f0:	0020      	movs	r0, r4
 80013f2:	f7fe ff1d 	bl	8000230 <__aeabi_uidivmod>
 80013f6:	000b      	movs	r3, r1
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d000      	beq.n	8001400 <ADC_Calculate_AVG+0x98>
 80013fe:	e08b      	b.n	8001518 <ADC_Calculate_AVG+0x1b0>
		{
			OutPut[_ID_ADC_CURRENT] = _total[_ID_ADC_CURRENT] * 10 / num_Samples;
 8001400:	4b48      	ldr	r3, [pc, #288]	; (8001524 <ADC_Calculate_AVG+0x1bc>)
 8001402:	68da      	ldr	r2, [r3, #12]
 8001404:	0013      	movs	r3, r2
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	189b      	adds	r3, r3, r2
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	001a      	movs	r2, r3
 800140e:	1dbb      	adds	r3, r7, #6
 8001410:	881b      	ldrh	r3, [r3, #0]
 8001412:	0019      	movs	r1, r3
 8001414:	0010      	movs	r0, r2
 8001416:	f7fe fe85 	bl	8000124 <__udivsi3>
 800141a:	0003      	movs	r3, r0
 800141c:	001a      	movs	r2, r3
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	3306      	adds	r3, #6
 8001422:	b292      	uxth	r2, r2
 8001424:	801a      	strh	r2, [r3, #0]
			_total[_ID_ADC_CURRENT] = 0;
 8001426:	4b3f      	ldr	r3, [pc, #252]	; (8001524 <ADC_Calculate_AVG+0x1bc>)
 8001428:	2200      	movs	r2, #0
 800142a:	60da      	str	r2, [r3, #12]
		}
		return;
 800142c:	e074      	b.n	8001518 <ADC_Calculate_AVG+0x1b0>
	}
	else
	{
		for (i = 0; i < _ID_ADC_TOTAL; i++)
 800142e:	2317      	movs	r3, #23
 8001430:	18fb      	adds	r3, r7, r3
 8001432:	2200      	movs	r2, #0
 8001434:	701a      	strb	r2, [r3, #0]
 8001436:	e026      	b.n	8001486 <ADC_Calculate_AVG+0x11e>
		{
			if (i == _ID_ADC_CURRENT)
 8001438:	2417      	movs	r4, #23
 800143a:	193b      	adds	r3, r7, r4
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	2b03      	cmp	r3, #3
 8001440:	d01a      	beq.n	8001478 <ADC_Calculate_AVG+0x110>
				continue;
			OutPut[i] = (uint16_t)(_total[i] / num_Samples);
 8001442:	193b      	adds	r3, r7, r4
 8001444:	781a      	ldrb	r2, [r3, #0]
 8001446:	4b37      	ldr	r3, [pc, #220]	; (8001524 <ADC_Calculate_AVG+0x1bc>)
 8001448:	0092      	lsls	r2, r2, #2
 800144a:	58d2      	ldr	r2, [r2, r3]
 800144c:	1dbb      	adds	r3, r7, #6
 800144e:	881b      	ldrh	r3, [r3, #0]
 8001450:	0019      	movs	r1, r3
 8001452:	0010      	movs	r0, r2
 8001454:	f7fe fe66 	bl	8000124 <__udivsi3>
 8001458:	0003      	movs	r3, r0
 800145a:	0019      	movs	r1, r3
 800145c:	193b      	adds	r3, r7, r4
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	68ba      	ldr	r2, [r7, #8]
 8001464:	18d3      	adds	r3, r2, r3
 8001466:	b28a      	uxth	r2, r1
 8001468:	801a      	strh	r2, [r3, #0]
			_total[i] = 0;
 800146a:	193b      	adds	r3, r7, r4
 800146c:	781a      	ldrb	r2, [r3, #0]
 800146e:	4b2d      	ldr	r3, [pc, #180]	; (8001524 <ADC_Calculate_AVG+0x1bc>)
 8001470:	0092      	lsls	r2, r2, #2
 8001472:	2100      	movs	r1, #0
 8001474:	50d1      	str	r1, [r2, r3]
 8001476:	e000      	b.n	800147a <ADC_Calculate_AVG+0x112>
				continue;
 8001478:	46c0      	nop			; (mov r8, r8)
		for (i = 0; i < _ID_ADC_TOTAL; i++)
 800147a:	2117      	movs	r1, #23
 800147c:	187b      	adds	r3, r7, r1
 800147e:	781a      	ldrb	r2, [r3, #0]
 8001480:	187b      	adds	r3, r7, r1
 8001482:	3201      	adds	r2, #1
 8001484:	701a      	strb	r2, [r3, #0]
 8001486:	2317      	movs	r3, #23
 8001488:	18fb      	adds	r3, r7, r3
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	2b03      	cmp	r3, #3
 800148e:	d9d3      	bls.n	8001438 <ADC_Calculate_AVG+0xd0>
		}
		c = 0;
 8001490:	4b23      	ldr	r3, [pc, #140]	; (8001520 <ADC_Calculate_AVG+0x1b8>)
 8001492:	2200      	movs	r2, #0
 8001494:	801a      	strh	r2, [r3, #0]

		// Kalman filter
		OutPut[_ID_ADC_PROBE_WSENSOR] = (uint16_t)(km_process(&Kalman_ProbesWter, (float)OutPut[_ID_ADC_PROBE_WSENSOR]));
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	881b      	ldrh	r3, [r3, #0]
 800149a:	b29b      	uxth	r3, r3
 800149c:	0018      	movs	r0, r3
 800149e:	f7ff fd79 	bl	8000f94 <__aeabi_ui2f>
 80014a2:	1c02      	adds	r2, r0, #0
 80014a4:	4b20      	ldr	r3, [pc, #128]	; (8001528 <ADC_Calculate_AVG+0x1c0>)
 80014a6:	1c11      	adds	r1, r2, #0
 80014a8:	0018      	movs	r0, r3
 80014aa:	f7ff fee1 	bl	8001270 <km_process>
 80014ae:	1c03      	adds	r3, r0, #0
 80014b0:	1c18      	adds	r0, r3, #0
 80014b2:	f7fe ffad 	bl	8000410 <__aeabi_f2uiz>
 80014b6:	0003      	movs	r3, r0
 80014b8:	b29a      	uxth	r2, r3
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	801a      	strh	r2, [r3, #0]
		OutPut[_ID_ADC_PTC_DIODE] = (uint16_t)(km_process(&Kalman_PTC_HeatSink, (float)OutPut[_ID_ADC_PTC_DIODE]));
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	3302      	adds	r3, #2
 80014c2:	881b      	ldrh	r3, [r3, #0]
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	0018      	movs	r0, r3
 80014c8:	f7ff fd64 	bl	8000f94 <__aeabi_ui2f>
 80014cc:	1c02      	adds	r2, r0, #0
 80014ce:	4b17      	ldr	r3, [pc, #92]	; (800152c <ADC_Calculate_AVG+0x1c4>)
 80014d0:	1c11      	adds	r1, r2, #0
 80014d2:	0018      	movs	r0, r3
 80014d4:	f7ff fecc 	bl	8001270 <km_process>
 80014d8:	1c02      	adds	r2, r0, #0
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	1c9c      	adds	r4, r3, #2
 80014de:	1c10      	adds	r0, r2, #0
 80014e0:	f7fe ff96 	bl	8000410 <__aeabi_f2uiz>
 80014e4:	0003      	movs	r3, r0
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	8023      	strh	r3, [r4, #0]
		OutPut[_ID_ADC_PTC_BOILER] = (uint16_t)(km_process(&Kalman_PTC_Boiler, (float)OutPut[_ID_ADC_PTC_BOILER]));
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	3304      	adds	r3, #4
 80014ee:	881b      	ldrh	r3, [r3, #0]
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	0018      	movs	r0, r3
 80014f4:	f7ff fd4e 	bl	8000f94 <__aeabi_ui2f>
 80014f8:	1c02      	adds	r2, r0, #0
 80014fa:	4b0d      	ldr	r3, [pc, #52]	; (8001530 <ADC_Calculate_AVG+0x1c8>)
 80014fc:	1c11      	adds	r1, r2, #0
 80014fe:	0018      	movs	r0, r3
 8001500:	f7ff feb6 	bl	8001270 <km_process>
 8001504:	1c02      	adds	r2, r0, #0
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	1d1c      	adds	r4, r3, #4
 800150a:	1c10      	adds	r0, r2, #0
 800150c:	f7fe ff80 	bl	8000410 <__aeabi_f2uiz>
 8001510:	0003      	movs	r3, r0
 8001512:	b29b      	uxth	r3, r3
 8001514:	8023      	strh	r3, [r4, #0]
 8001516:	e000      	b.n	800151a <ADC_Calculate_AVG+0x1b2>
		return;
 8001518:	46c0      	nop			; (mov r8, r8)
	}
}
 800151a:	46bd      	mov	sp, r7
 800151c:	b007      	add	sp, #28
 800151e:	bd90      	pop	{r4, r7, pc}
 8001520:	20000090 	.word	0x20000090
 8001524:	20000094 	.word	0x20000094
 8001528:	200000ec 	.word	0x200000ec
 800152c:	2000011c 	.word	0x2000011c
 8001530:	20000100 	.word	0x20000100

08001534 <ADC_2CurrentAC>:
void ADC_2CurrentAC(uint8_t param_TimeHalfCycle,
					uint16_t param_ZeroCurrentADC,
					__IO uint16_t paramCurrentADC,
					__IO uint16_t *OutPut_mA,
					__IO Current_Shape_t *OutPut_Shape)
{
 8001534:	b590      	push	{r4, r7, lr}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	0004      	movs	r4, r0
 800153c:	0008      	movs	r0, r1
 800153e:	0011      	movs	r1, r2
 8001540:	607b      	str	r3, [r7, #4]
 8001542:	230f      	movs	r3, #15
 8001544:	18fb      	adds	r3, r7, r3
 8001546:	1c22      	adds	r2, r4, #0
 8001548:	701a      	strb	r2, [r3, #0]
 800154a:	230c      	movs	r3, #12
 800154c:	18fb      	adds	r3, r7, r3
 800154e:	1c02      	adds	r2, r0, #0
 8001550:	801a      	strh	r2, [r3, #0]
 8001552:	230a      	movs	r3, #10
 8001554:	18fb      	adds	r3, r7, r3
 8001556:	1c0a      	adds	r2, r1, #0
 8001558:	801a      	strh	r2, [r3, #0]

	static MeasureCurrState_TypeDef state = 0;
	static uint8_t cnt_Samples, get_HalfCycle_AC;
	static uint32_t Pos_ADC_total = 0, Neg_ADC_total = 0;

	switch (state)
 800155a:	4b61      	ldr	r3, [pc, #388]	; (80016e0 <ADC_2CurrentAC+0x1ac>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	2b02      	cmp	r3, #2
 8001560:	d05a      	beq.n	8001618 <ADC_2CurrentAC+0xe4>
 8001562:	dd00      	ble.n	8001566 <ADC_2CurrentAC+0x32>
 8001564:	e0b8      	b.n	80016d8 <ADC_2CurrentAC+0x1a4>
 8001566:	2b00      	cmp	r3, #0
 8001568:	d002      	beq.n	8001570 <ADC_2CurrentAC+0x3c>
 800156a:	2b01      	cmp	r3, #1
 800156c:	d021      	beq.n	80015b2 <ADC_2CurrentAC+0x7e>
		else
			*OutPut_Shape = _CURRENT_SHAPE_SINE;

		break;
	}
}
 800156e:	e0b3      	b.n	80016d8 <ADC_2CurrentAC+0x1a4>
		if (_LIMIT(param_TimeHalfCycle,90,110))
 8001570:	220f      	movs	r2, #15
 8001572:	18bb      	adds	r3, r7, r2
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	2b59      	cmp	r3, #89	; 0x59
 8001578:	d908      	bls.n	800158c <ADC_2CurrentAC+0x58>
 800157a:	18bb      	adds	r3, r7, r2
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	2b6e      	cmp	r3, #110	; 0x6e
 8001580:	d804      	bhi.n	800158c <ADC_2CurrentAC+0x58>
			get_HalfCycle_AC = param_TimeHalfCycle; //~98
 8001582:	4b58      	ldr	r3, [pc, #352]	; (80016e4 <ADC_2CurrentAC+0x1b0>)
 8001584:	18ba      	adds	r2, r7, r2
 8001586:	7812      	ldrb	r2, [r2, #0]
 8001588:	701a      	strb	r2, [r3, #0]
 800158a:	e002      	b.n	8001592 <ADC_2CurrentAC+0x5e>
			get_HalfCycle_AC = 100; // default for Lexor
 800158c:	4b55      	ldr	r3, [pc, #340]	; (80016e4 <ADC_2CurrentAC+0x1b0>)
 800158e:	2264      	movs	r2, #100	; 0x64
 8001590:	701a      	strb	r2, [r3, #0]
		cnt_Samples = 2 * get_HalfCycle_AC; // biến lấy mẫu full duty cua Sinwave
 8001592:	4b54      	ldr	r3, [pc, #336]	; (80016e4 <ADC_2CurrentAC+0x1b0>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	18db      	adds	r3, r3, r3
 8001598:	b2da      	uxtb	r2, r3
 800159a:	4b53      	ldr	r3, [pc, #332]	; (80016e8 <ADC_2CurrentAC+0x1b4>)
 800159c:	701a      	strb	r2, [r3, #0]
		Pos_ADC_total = 0;
 800159e:	4b53      	ldr	r3, [pc, #332]	; (80016ec <ADC_2CurrentAC+0x1b8>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
		Neg_ADC_total = 0;
 80015a4:	4b52      	ldr	r3, [pc, #328]	; (80016f0 <ADC_2CurrentAC+0x1bc>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	601a      	str	r2, [r3, #0]
		state = _Measure_Curr_Start;
 80015aa:	4b4d      	ldr	r3, [pc, #308]	; (80016e0 <ADC_2CurrentAC+0x1ac>)
 80015ac:	2201      	movs	r2, #1
 80015ae:	701a      	strb	r2, [r3, #0]
		break;
 80015b0:	e092      	b.n	80016d8 <ADC_2CurrentAC+0x1a4>
		if (paramCurrentADC > param_ZeroCurrentADC)
 80015b2:	210a      	movs	r1, #10
 80015b4:	187b      	adds	r3, r7, r1
 80015b6:	881b      	ldrh	r3, [r3, #0]
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	200c      	movs	r0, #12
 80015bc:	183a      	adds	r2, r7, r0
 80015be:	8812      	ldrh	r2, [r2, #0]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d20d      	bcs.n	80015e0 <ADC_2CurrentAC+0xac>
			Pos_ADC_total += (paramCurrentADC - param_ZeroCurrentADC);
 80015c4:	187b      	adds	r3, r7, r1
 80015c6:	881b      	ldrh	r3, [r3, #0]
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	001a      	movs	r2, r3
 80015cc:	183b      	adds	r3, r7, r0
 80015ce:	881b      	ldrh	r3, [r3, #0]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	001a      	movs	r2, r3
 80015d4:	4b45      	ldr	r3, [pc, #276]	; (80016ec <ADC_2CurrentAC+0x1b8>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	18d2      	adds	r2, r2, r3
 80015da:	4b44      	ldr	r3, [pc, #272]	; (80016ec <ADC_2CurrentAC+0x1b8>)
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	e00d      	b.n	80015fc <ADC_2CurrentAC+0xc8>
			Neg_ADC_total += (param_ZeroCurrentADC - paramCurrentADC);
 80015e0:	230c      	movs	r3, #12
 80015e2:	18fb      	adds	r3, r7, r3
 80015e4:	881b      	ldrh	r3, [r3, #0]
 80015e6:	220a      	movs	r2, #10
 80015e8:	18ba      	adds	r2, r7, r2
 80015ea:	8812      	ldrh	r2, [r2, #0]
 80015ec:	b292      	uxth	r2, r2
 80015ee:	1a9b      	subs	r3, r3, r2
 80015f0:	001a      	movs	r2, r3
 80015f2:	4b3f      	ldr	r3, [pc, #252]	; (80016f0 <ADC_2CurrentAC+0x1bc>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	18d2      	adds	r2, r2, r3
 80015f8:	4b3d      	ldr	r3, [pc, #244]	; (80016f0 <ADC_2CurrentAC+0x1bc>)
 80015fa:	601a      	str	r2, [r3, #0]
		if (--cnt_Samples == 0)
 80015fc:	4b3a      	ldr	r3, [pc, #232]	; (80016e8 <ADC_2CurrentAC+0x1b4>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	3b01      	subs	r3, #1
 8001602:	b2da      	uxtb	r2, r3
 8001604:	4b38      	ldr	r3, [pc, #224]	; (80016e8 <ADC_2CurrentAC+0x1b4>)
 8001606:	701a      	strb	r2, [r3, #0]
 8001608:	4b37      	ldr	r3, [pc, #220]	; (80016e8 <ADC_2CurrentAC+0x1b4>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d162      	bne.n	80016d6 <ADC_2CurrentAC+0x1a2>
			state = _Measure_Curr_Done;
 8001610:	4b33      	ldr	r3, [pc, #204]	; (80016e0 <ADC_2CurrentAC+0x1ac>)
 8001612:	2202      	movs	r2, #2
 8001614:	701a      	strb	r2, [r3, #0]
		break;
 8001616:	e05e      	b.n	80016d6 <ADC_2CurrentAC+0x1a2>
		Pos_ADC_total = (uint16_t)(Pos_ADC_total / (2 * get_HalfCycle_AC));
 8001618:	4b34      	ldr	r3, [pc, #208]	; (80016ec <ADC_2CurrentAC+0x1b8>)
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	4b31      	ldr	r3, [pc, #196]	; (80016e4 <ADC_2CurrentAC+0x1b0>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	0019      	movs	r1, r3
 8001624:	0010      	movs	r0, r2
 8001626:	f7fe fd7d 	bl	8000124 <__udivsi3>
 800162a:	0003      	movs	r3, r0
 800162c:	b29b      	uxth	r3, r3
 800162e:	001a      	movs	r2, r3
 8001630:	4b2e      	ldr	r3, [pc, #184]	; (80016ec <ADC_2CurrentAC+0x1b8>)
 8001632:	601a      	str	r2, [r3, #0]
		Neg_ADC_total = (uint16_t)(Neg_ADC_total / (2 * get_HalfCycle_AC));
 8001634:	4b2e      	ldr	r3, [pc, #184]	; (80016f0 <ADC_2CurrentAC+0x1bc>)
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	4b2a      	ldr	r3, [pc, #168]	; (80016e4 <ADC_2CurrentAC+0x1b0>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	0019      	movs	r1, r3
 8001640:	0010      	movs	r0, r2
 8001642:	f7fe fd6f 	bl	8000124 <__udivsi3>
 8001646:	0003      	movs	r3, r0
 8001648:	b29b      	uxth	r3, r3
 800164a:	001a      	movs	r2, r3
 800164c:	4b28      	ldr	r3, [pc, #160]	; (80016f0 <ADC_2CurrentAC+0x1bc>)
 800164e:	601a      	str	r2, [r3, #0]
		*OutPut_mA = (uint16_t)((Pos_ADC_total + Neg_ADC_total) * 35 * _AMPS_PP / 4095);
 8001650:	4b26      	ldr	r3, [pc, #152]	; (80016ec <ADC_2CurrentAC+0x1b8>)
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	4b26      	ldr	r3, [pc, #152]	; (80016f0 <ADC_2CurrentAC+0x1bc>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	18d3      	adds	r3, r2, r3
 800165a:	4a26      	ldr	r2, [pc, #152]	; (80016f4 <ADC_2CurrentAC+0x1c0>)
 800165c:	4353      	muls	r3, r2
 800165e:	4926      	ldr	r1, [pc, #152]	; (80016f8 <ADC_2CurrentAC+0x1c4>)
 8001660:	0018      	movs	r0, r3
 8001662:	f7fe fd5f 	bl	8000124 <__udivsi3>
 8001666:	0003      	movs	r3, r0
 8001668:	b29a      	uxth	r2, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	801a      	strh	r2, [r3, #0]
		if(*OutPut_mA < 80)*OutPut_mA=0;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	881b      	ldrh	r3, [r3, #0]
 8001672:	b29b      	uxth	r3, r3
 8001674:	2b4f      	cmp	r3, #79	; 0x4f
 8001676:	d802      	bhi.n	800167e <ADC_2CurrentAC+0x14a>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2200      	movs	r2, #0
 800167c:	801a      	strh	r2, [r3, #0]
		state = _Measure_Curr_None;
 800167e:	4b18      	ldr	r3, [pc, #96]	; (80016e0 <ADC_2CurrentAC+0x1ac>)
 8001680:	2200      	movs	r2, #0
 8001682:	701a      	strb	r2, [r3, #0]
		if ((Pos_ADC_total < 5) && (Neg_ADC_total < 5))
 8001684:	4b19      	ldr	r3, [pc, #100]	; (80016ec <ADC_2CurrentAC+0x1b8>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2b04      	cmp	r3, #4
 800168a:	d807      	bhi.n	800169c <ADC_2CurrentAC+0x168>
 800168c:	4b18      	ldr	r3, [pc, #96]	; (80016f0 <ADC_2CurrentAC+0x1bc>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2b04      	cmp	r3, #4
 8001692:	d803      	bhi.n	800169c <ADC_2CurrentAC+0x168>
			*OutPut_Shape = _CURRENT_SHAPE_NONE;
 8001694:	6a3b      	ldr	r3, [r7, #32]
 8001696:	2200      	movs	r2, #0
 8001698:	701a      	strb	r2, [r3, #0]
 800169a:	e01b      	b.n	80016d4 <ADC_2CurrentAC+0x1a0>
		else if ((Pos_ADC_total < 5) && (Neg_ADC_total > 5))
 800169c:	4b13      	ldr	r3, [pc, #76]	; (80016ec <ADC_2CurrentAC+0x1b8>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2b04      	cmp	r3, #4
 80016a2:	d807      	bhi.n	80016b4 <ADC_2CurrentAC+0x180>
 80016a4:	4b12      	ldr	r3, [pc, #72]	; (80016f0 <ADC_2CurrentAC+0x1bc>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2b05      	cmp	r3, #5
 80016aa:	d903      	bls.n	80016b4 <ADC_2CurrentAC+0x180>
			*OutPut_Shape = _CURRENT_SHAPE_NEG;
 80016ac:	6a3b      	ldr	r3, [r7, #32]
 80016ae:	2202      	movs	r2, #2
 80016b0:	701a      	strb	r2, [r3, #0]
 80016b2:	e00f      	b.n	80016d4 <ADC_2CurrentAC+0x1a0>
		else if ((Pos_ADC_total > 5) && (Neg_ADC_total < 5))
 80016b4:	4b0d      	ldr	r3, [pc, #52]	; (80016ec <ADC_2CurrentAC+0x1b8>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2b05      	cmp	r3, #5
 80016ba:	d907      	bls.n	80016cc <ADC_2CurrentAC+0x198>
 80016bc:	4b0c      	ldr	r3, [pc, #48]	; (80016f0 <ADC_2CurrentAC+0x1bc>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2b04      	cmp	r3, #4
 80016c2:	d803      	bhi.n	80016cc <ADC_2CurrentAC+0x198>
			*OutPut_Shape = _CURRENT_SHAPE_POS;
 80016c4:	6a3b      	ldr	r3, [r7, #32]
 80016c6:	2201      	movs	r2, #1
 80016c8:	701a      	strb	r2, [r3, #0]
 80016ca:	e003      	b.n	80016d4 <ADC_2CurrentAC+0x1a0>
			*OutPut_Shape = _CURRENT_SHAPE_SINE;
 80016cc:	6a3b      	ldr	r3, [r7, #32]
 80016ce:	2203      	movs	r2, #3
 80016d0:	701a      	strb	r2, [r3, #0]
		break;
 80016d2:	e001      	b.n	80016d8 <ADC_2CurrentAC+0x1a4>
 80016d4:	e000      	b.n	80016d8 <ADC_2CurrentAC+0x1a4>
		break;
 80016d6:	46c0      	nop			; (mov r8, r8)
}
 80016d8:	46c0      	nop			; (mov r8, r8)
 80016da:	46bd      	mov	sp, r7
 80016dc:	b005      	add	sp, #20
 80016de:	bd90      	pop	{r4, r7, pc}
 80016e0:	200000a4 	.word	0x200000a4
 80016e4:	200000a5 	.word	0x200000a5
 80016e8:	200000a6 	.word	0x200000a6
 80016ec:	200000a8 	.word	0x200000a8
 80016f0:	200000ac 	.word	0x200000ac
 80016f4:	000088b8 	.word	0x000088b8
 80016f8:	00000fff 	.word	0x00000fff

080016fc <btn_progress_loop>:
#include <button.h>
#include "timer.h"

void btn_progress_loop(button_t *btn){
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b088      	sub	sp, #32
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]

	if(btn->pinStt==0)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d100      	bne.n	800170e <btn_progress_loop+0x12>
 800170c:	e114      	b.n	8001938 <btn_progress_loop+0x23c>
		return;

	  //is press
	  if(btn->pinStt()){
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	4798      	blx	r3
 8001714:	1e03      	subs	r3, r0, #0
 8001716:	d100      	bne.n	800171a <btn_progress_loop+0x1e>
 8001718:	e090      	b.n	800183c <btn_progress_loop+0x140>
		 switch(btn->state){
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	2b07      	cmp	r3, #7
 8001720:	d900      	bls.n	8001724 <btn_progress_loop+0x28>
 8001722:	e07f      	b.n	8001824 <btn_progress_loop+0x128>
 8001724:	009a      	lsls	r2, r3, #2
 8001726:	4b89      	ldr	r3, [pc, #548]	; (800194c <btn_progress_loop+0x250>)
 8001728:	18d3      	adds	r3, r2, r3
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	469f      	mov	pc, r3
			 case _BTN_null:
				 btn->state=_BTN_init;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2201      	movs	r2, #1
 8001732:	701a      	strb	r2, [r3, #0]
			      timer_set(&btn->process._timeout,_TIME_INIT_PRESS);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	3310      	adds	r3, #16
 8001738:	2105      	movs	r1, #5
 800173a:	0018      	movs	r0, r3
 800173c:	f002 fba0 	bl	8003e80 <timer_set>
			      btn->process._timeBeginHold = timer_getTick();
 8001740:	f002 fb88 	bl	8003e54 <timer_getTick>
 8001744:	0002      	movs	r2, r0
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	621a      	str	r2, [r3, #32]
			      break;
 800174a:	e076      	b.n	800183a <btn_progress_loop+0x13e>

			case _BTN_init:
				 if (timer_expired(&btn->process._timeout))
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	3310      	adds	r3, #16
 8001750:	0018      	movs	r0, r3
 8001752:	f002 fbd1 	bl	8003ef8 <timer_expired>
 8001756:	1e03      	subs	r3, r0, #0
 8001758:	d066      	beq.n	8001828 <btn_progress_loop+0x12c>
					 btn->state=_BTN_isPress;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2202      	movs	r2, #2
 800175e:	701a      	strb	r2, [r3, #0]
				 break;
 8001760:	e062      	b.n	8001828 <btn_progress_loop+0x12c>

			case _BTN_isPress:
				btn->state=_BTN_wait_hold;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2203      	movs	r2, #3
 8001766:	701a      	strb	r2, [r3, #0]
			     timer_set(&btn->process._timeout,_TIME_HOLD_ACTIVE);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	3310      	adds	r3, #16
 800176c:	2164      	movs	r1, #100	; 0x64
 800176e:	0018      	movs	r0, r3
 8001770:	f002 fb86 	bl	8003e80 <timer_set>

			     //callback Press
			     if(btn->cb_function){
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d057      	beq.n	800182c <btn_progress_loop+0x130>
			    	 button_typeArg_t ArgValue;
			    	 ArgValue.event = BUTTON_PRESS;
 800177c:	231c      	movs	r3, #28
 800177e:	18fb      	adds	r3, r7, r3
 8001780:	2201      	movs	r2, #1
 8001782:	701a      	strb	r2, [r3, #0]
			    	 btn->cb_function(_BUTTON_FUNC_EVENT, ArgValue);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	69fa      	ldr	r2, [r7, #28]
 800178a:	0011      	movs	r1, r2
 800178c:	2000      	movs	r0, #0
 800178e:	4798      	blx	r3
			     }

			     break;
 8001790:	e04c      	b.n	800182c <btn_progress_loop+0x130>

			case _BTN_wait_hold :
				if (timer_expired(&btn->process._timeout)){
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	3310      	adds	r3, #16
 8001796:	0018      	movs	r0, r3
 8001798:	f002 fbae 	bl	8003ef8 <timer_expired>
 800179c:	1e03      	subs	r3, r0, #0
 800179e:	d047      	beq.n	8001830 <btn_progress_loop+0x134>
					btn->state=_BTN_isHold;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2204      	movs	r2, #4
 80017a4:	701a      	strb	r2, [r3, #0]
				      //callbak hold Release
				      if(btn->cb_function){
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d040      	beq.n	8001830 <btn_progress_loop+0x134>
				    	  button_typeArg_t ArgValue;
				    	  ArgValue.event = BUTTON_HOLD_PRESS;
 80017ae:	2318      	movs	r3, #24
 80017b0:	18fb      	adds	r3, r7, r3
 80017b2:	2204      	movs	r2, #4
 80017b4:	701a      	strb	r2, [r3, #0]
				    	  btn->cb_function(_BUTTON_FUNC_EVENT, ArgValue);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	0011      	movs	r1, r2
 80017be:	2000      	movs	r0, #0
 80017c0:	4798      	blx	r3
				      }
				}
				break;
 80017c2:	e035      	b.n	8001830 <btn_progress_loop+0x134>

			case _BTN_wait_clrMultiClick:
		    	//restart init ...
		    	if (!timer_expired(&btn->process._timeout)) {
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	3310      	adds	r3, #16
 80017c8:	0018      	movs	r0, r3
 80017ca:	f002 fb95 	bl	8003ef8 <timer_expired>
 80017ce:	1e03      	subs	r3, r0, #0
 80017d0:	d130      	bne.n	8001834 <btn_progress_loop+0x138>
		    		btn->state=_BTN_init;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2201      	movs	r2, #1
 80017d6:	701a      	strb	r2, [r3, #0]
		    		timer_set(&btn->process._timeout,_TIME_INIT_PRESS);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	3310      	adds	r3, #16
 80017dc:	2105      	movs	r1, #5
 80017de:	0018      	movs	r0, r3
 80017e0:	f002 fb4e 	bl	8003e80 <timer_set>
		    		btn->process._timeBeginHold=timer_getTick();
 80017e4:	f002 fb36 	bl	8003e54 <timer_getTick>
 80017e8:	0002      	movs	r2, r0
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	621a      	str	r2, [r3, #32]
		    	}
		    	break;
 80017ee:	e021      	b.n	8001834 <btn_progress_loop+0x138>

			case _BTN_isHold:
				btn->timeHold = timer_getTick()-btn->process._timeBeginHold;
 80017f0:	f002 fb30 	bl	8003e54 <timer_getTick>
 80017f4:	0002      	movs	r2, r0
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a1b      	ldr	r3, [r3, #32]
 80017fa:	1ad2      	subs	r2, r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	605a      	str	r2, [r3, #4]

				//callback Hold on
				if(btn->cb_function){
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d017      	beq.n	8001838 <btn_progress_loop+0x13c>
					button_typeArg_t ArgValue;
			    	ArgValue.holdInterval_ms = 10*btn->timeHold;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685a      	ldr	r2, [r3, #4]
 800180c:	0013      	movs	r3, r2
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	189b      	adds	r3, r3, r2
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	617b      	str	r3, [r7, #20]
					btn->cb_function(_BUTTON_FUNC_HOLD, ArgValue);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	697a      	ldr	r2, [r7, #20]
 800181c:	0011      	movs	r1, r2
 800181e:	2002      	movs	r0, #2
 8001820:	4798      	blx	r3
				}

				break;
 8001822:	e009      	b.n	8001838 <btn_progress_loop+0x13c>

			default : break;
 8001824:	46c0      	nop			; (mov r8, r8)
 8001826:	e08e      	b.n	8001946 <btn_progress_loop+0x24a>
				 break;
 8001828:	46c0      	nop			; (mov r8, r8)
 800182a:	e08c      	b.n	8001946 <btn_progress_loop+0x24a>
			     break;
 800182c:	46c0      	nop			; (mov r8, r8)
 800182e:	e08a      	b.n	8001946 <btn_progress_loop+0x24a>
				break;
 8001830:	46c0      	nop			; (mov r8, r8)
 8001832:	e088      	b.n	8001946 <btn_progress_loop+0x24a>
		    	break;
 8001834:	46c0      	nop			; (mov r8, r8)
 8001836:	e086      	b.n	8001946 <btn_progress_loop+0x24a>
				break;
 8001838:	46c0      	nop			; (mov r8, r8)
		 }
		 return;
 800183a:	e084      	b.n	8001946 <btn_progress_loop+0x24a>
	  }
	  //is release
	  else
	  {
		  switch(btn->state){
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	3b03      	subs	r3, #3
 8001842:	2b04      	cmp	r3, #4
 8001844:	d900      	bls.n	8001848 <btn_progress_loop+0x14c>
 8001846:	e073      	b.n	8001930 <btn_progress_loop+0x234>
 8001848:	009a      	lsls	r2, r3, #2
 800184a:	4b41      	ldr	r3, [pc, #260]	; (8001950 <btn_progress_loop+0x254>)
 800184c:	18d3      	adds	r3, r2, r3
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	469f      	mov	pc, r3
			  case _BTN_wait_hold:
				  btn->state=_BTN_isRelease;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2205      	movs	r2, #5
 8001856:	701a      	strb	r2, [r3, #0]
			      timer_set(&btn->process._timeout,_TIME_INIT_RELEASE);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	3310      	adds	r3, #16
 800185c:	2105      	movs	r1, #5
 800185e:	0018      	movs	r0, r3
 8001860:	f002 fb0e 	bl	8003e80 <timer_set>
			      break;
 8001864:	e06f      	b.n	8001946 <btn_progress_loop+0x24a>

			  case _BTN_isRelease:
			      if (timer_expired(&btn->process._timeout)){
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	3310      	adds	r3, #16
 800186a:	0018      	movs	r0, r3
 800186c:	f002 fb44 	bl	8003ef8 <timer_expired>
 8001870:	1e03      	subs	r3, r0, #0
 8001872:	d063      	beq.n	800193c <btn_progress_loop+0x240>
			    	  btn->state=_BTN_isClick;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2206      	movs	r2, #6
 8001878:	701a      	strb	r2, [r3, #0]
			    	  btn->multiClick++;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	785b      	ldrb	r3, [r3, #1]
 800187e:	3301      	adds	r3, #1
 8001880:	b2da      	uxtb	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	705a      	strb	r2, [r3, #1]

					//callback every click
					if(btn->cb_function){
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d009      	beq.n	80018a2 <btn_progress_loop+0x1a6>
						button_typeArg_t ArgValue;
						ArgValue.event = BUTTON_ONECLICK;
 800188e:	2310      	movs	r3, #16
 8001890:	18fb      	adds	r3, r7, r3
 8001892:	2203      	movs	r2, #3
 8001894:	701a      	strb	r2, [r3, #0]
						btn->cb_function(_BUTTON_FUNC_EVENT, ArgValue);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	0011      	movs	r1, r2
 800189e:	2000      	movs	r0, #0
 80018a0:	4798      	blx	r3
					}


					//callback multiClick
					if(btn->cb_function){
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d048      	beq.n	800193c <btn_progress_loop+0x240>
						button_typeArg_t ArgValue;
						ArgValue.numClick = btn->multiClick;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	785a      	ldrb	r2, [r3, #1]
 80018ae:	230c      	movs	r3, #12
 80018b0:	18fb      	adds	r3, r7, r3
 80018b2:	701a      	strb	r2, [r3, #0]
						//if( btn->multiClick > 2)
						btn->cb_function(_BUTTON_FUNC_MULCLICK, ArgValue);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	68fa      	ldr	r2, [r7, #12]
 80018ba:	0011      	movs	r1, r2
 80018bc:	2001      	movs	r0, #1
 80018be:	4798      	blx	r3
					}
			      }

			      break;
 80018c0:	e03c      	b.n	800193c <btn_progress_loop+0x240>

			  case  _BTN_isHold:
				  btn->state=_BTN_hold_pass;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2209      	movs	r2, #9
 80018c6:	701a      	strb	r2, [r3, #0]
			      timer_stop(&btn->process._timeout);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	3310      	adds	r3, #16
 80018cc:	0018      	movs	r0, r3
 80018ce:	f002 fb33 	bl	8003f38 <timer_stop>
			      btn->multiClick=0;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	705a      	strb	r2, [r3, #1]

			      //callbak hold Release
			      if(btn->cb_function){
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d02f      	beq.n	8001940 <btn_progress_loop+0x244>
			    	  button_typeArg_t ArgValue;
			    	  ArgValue.event = BUTTON_HOLD_RELEASE;
 80018e0:	2308      	movs	r3, #8
 80018e2:	18fb      	adds	r3, r7, r3
 80018e4:	2205      	movs	r2, #5
 80018e6:	701a      	strb	r2, [r3, #0]
			    	  btn->cb_function(_BUTTON_FUNC_EVENT, ArgValue);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	68ba      	ldr	r2, [r7, #8]
 80018ee:	0011      	movs	r1, r2
 80018f0:	2000      	movs	r0, #0
 80018f2:	4798      	blx	r3
			      }

			      break;
 80018f4:	e024      	b.n	8001940 <btn_progress_loop+0x244>

			  case _BTN_isClick:
				btn->state=_BTN_wait_clrMultiClick;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2207      	movs	r2, #7
 80018fa:	701a      	strb	r2, [r3, #0]
			    timer_set(&btn->process._timeout,_TIMEOUT_MULTICLICK);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	3310      	adds	r3, #16
 8001900:	2132      	movs	r1, #50	; 0x32
 8001902:	0018      	movs	r0, r3
 8001904:	f002 fabc 	bl	8003e80 <timer_set>

			    break;
 8001908:	e01d      	b.n	8001946 <btn_progress_loop+0x24a>

			  case _BTN_wait_clrMultiClick:
			    if (timer_expired(&btn->process._timeout)){
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	3310      	adds	r3, #16
 800190e:	0018      	movs	r0, r3
 8001910:	f002 faf2 	bl	8003ef8 <timer_expired>
 8001914:	1e03      	subs	r3, r0, #0
 8001916:	d015      	beq.n	8001944 <btn_progress_loop+0x248>
			    	btn->state=_BTN_null;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2200      	movs	r2, #0
 800191c:	701a      	strb	r2, [r3, #0]
			    	timer_stop(&btn->process._timeout);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	3310      	adds	r3, #16
 8001922:	0018      	movs	r0, r3
 8001924:	f002 fb08 	bl	8003f38 <timer_stop>
			    	 btn->multiClick=0;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	705a      	strb	r2, [r3, #1]
			    }
			    break;
 800192e:	e009      	b.n	8001944 <btn_progress_loop+0x248>

			  default : btn->state=_BTN_null;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2200      	movs	r2, #0
 8001934:	701a      	strb	r2, [r3, #0]
 8001936:	e006      	b.n	8001946 <btn_progress_loop+0x24a>
		return;
 8001938:	46c0      	nop			; (mov r8, r8)
 800193a:	e004      	b.n	8001946 <btn_progress_loop+0x24a>
			      break;
 800193c:	46c0      	nop			; (mov r8, r8)
 800193e:	e002      	b.n	8001946 <btn_progress_loop+0x24a>
			      break;
 8001940:	46c0      	nop			; (mov r8, r8)
 8001942:	e000      	b.n	8001946 <btn_progress_loop+0x24a>
			    break;
 8001944:	46c0      	nop			; (mov r8, r8)
		  }
	  }
}
 8001946:	46bd      	mov	sp, r7
 8001948:	b008      	add	sp, #32
 800194a:	bd80      	pop	{r7, pc}
 800194c:	0800c764 	.word	0x0800c764
 8001950:	0800c784 	.word	0x0800c784

08001954 <Str2HexChar>:
 *Tham so truyen: *str , HexChar
 *Gia tri thay doi: *HexChar
 *Tra ve: 1-True,    0-False
 */
uint8_t Str2HexChar(char *str, uint8_t *HexChar)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	6039      	str	r1, [r7, #0]
  uint8_t base;
  if ((str[0] >= 97) && (str[0] < 103))
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	2b60      	cmp	r3, #96	; 0x60
 8001964:	d908      	bls.n	8001978 <Str2HexChar+0x24>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	2b66      	cmp	r3, #102	; 0x66
 800196c:	d804      	bhi.n	8001978 <Str2HexChar+0x24>
    base = 97 - 10; // a-f
 800196e:	230f      	movs	r3, #15
 8001970:	18fb      	adds	r3, r7, r3
 8001972:	2257      	movs	r2, #87	; 0x57
 8001974:	701a      	strb	r2, [r3, #0]
 8001976:	e01b      	b.n	80019b0 <Str2HexChar+0x5c>
  else if ((str[0] >= 65) && (str[0] < 71))
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	2b40      	cmp	r3, #64	; 0x40
 800197e:	d908      	bls.n	8001992 <Str2HexChar+0x3e>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	2b46      	cmp	r3, #70	; 0x46
 8001986:	d804      	bhi.n	8001992 <Str2HexChar+0x3e>
    base = 65 - 10; // A-F
 8001988:	230f      	movs	r3, #15
 800198a:	18fb      	adds	r3, r7, r3
 800198c:	2237      	movs	r2, #55	; 0x37
 800198e:	701a      	strb	r2, [r3, #0]
 8001990:	e00e      	b.n	80019b0 <Str2HexChar+0x5c>
  else if ((str[0] >= 48) && (str[0] < 58))
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	2b2f      	cmp	r3, #47	; 0x2f
 8001998:	d908      	bls.n	80019ac <Str2HexChar+0x58>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	2b39      	cmp	r3, #57	; 0x39
 80019a0:	d804      	bhi.n	80019ac <Str2HexChar+0x58>
    base = 48; // 0-9
 80019a2:	230f      	movs	r3, #15
 80019a4:	18fb      	adds	r3, r7, r3
 80019a6:	2230      	movs	r2, #48	; 0x30
 80019a8:	701a      	strb	r2, [r3, #0]
 80019aa:	e001      	b.n	80019b0 <Str2HexChar+0x5c>
  else
    return 0; // err hex char
 80019ac:	2300      	movs	r3, #0
 80019ae:	e048      	b.n	8001a42 <Str2HexChar+0xee>
  *HexChar = 16 * (str[0] - base);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	001a      	movs	r2, r3
 80019b6:	210f      	movs	r1, #15
 80019b8:	187b      	adds	r3, r7, r1
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	011b      	lsls	r3, r3, #4
 80019c2:	b2da      	uxtb	r2, r3
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	701a      	strb	r2, [r3, #0]
  if ((str[1] >= 97) && (str[1] < 103))
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	3301      	adds	r3, #1
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	2b60      	cmp	r3, #96	; 0x60
 80019d0:	d908      	bls.n	80019e4 <Str2HexChar+0x90>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	3301      	adds	r3, #1
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b66      	cmp	r3, #102	; 0x66
 80019da:	d803      	bhi.n	80019e4 <Str2HexChar+0x90>
    base = 97 - 10;
 80019dc:	187b      	adds	r3, r7, r1
 80019de:	2257      	movs	r2, #87	; 0x57
 80019e0:	701a      	strb	r2, [r3, #0]
 80019e2:	e01f      	b.n	8001a24 <Str2HexChar+0xd0>
  else if ((str[1] >= 65) && (str[1] < 71))
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	3301      	adds	r3, #1
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	2b40      	cmp	r3, #64	; 0x40
 80019ec:	d909      	bls.n	8001a02 <Str2HexChar+0xae>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	3301      	adds	r3, #1
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	2b46      	cmp	r3, #70	; 0x46
 80019f6:	d804      	bhi.n	8001a02 <Str2HexChar+0xae>
    base = 65 - 10;
 80019f8:	230f      	movs	r3, #15
 80019fa:	18fb      	adds	r3, r7, r3
 80019fc:	2237      	movs	r2, #55	; 0x37
 80019fe:	701a      	strb	r2, [r3, #0]
 8001a00:	e010      	b.n	8001a24 <Str2HexChar+0xd0>
  else if ((str[1] >= 48) && (str[1] < 58))
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	3301      	adds	r3, #1
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	2b2f      	cmp	r3, #47	; 0x2f
 8001a0a:	d909      	bls.n	8001a20 <Str2HexChar+0xcc>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	2b39      	cmp	r3, #57	; 0x39
 8001a14:	d804      	bhi.n	8001a20 <Str2HexChar+0xcc>
    base = 48;
 8001a16:	230f      	movs	r3, #15
 8001a18:	18fb      	adds	r3, r7, r3
 8001a1a:	2230      	movs	r2, #48	; 0x30
 8001a1c:	701a      	strb	r2, [r3, #0]
 8001a1e:	e001      	b.n	8001a24 <Str2HexChar+0xd0>
  else
    return 0; // err hex char
 8001a20:	2300      	movs	r3, #0
 8001a22:	e00e      	b.n	8001a42 <Str2HexChar+0xee>
  *HexChar += (str[1] - base);
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	781a      	ldrb	r2, [r3, #0]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	7819      	ldrb	r1, [r3, #0]
 8001a2e:	230f      	movs	r3, #15
 8001a30:	18fb      	adds	r3, r7, r3
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	1acb      	subs	r3, r1, r3
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	18d3      	adds	r3, r2, r3
 8001a3a:	b2da      	uxtb	r2, r3
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	701a      	strb	r2, [r3, #0]
  return 1;
 8001a40:	2301      	movs	r3, #1
}
 8001a42:	0018      	movs	r0, r3
 8001a44:	46bd      	mov	sp, r7
 8001a46:	b004      	add	sp, #16
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <HexChar2Str>:
 *Tham so truyen: *str , HexChar
 *Gia tri thay doi: *str
 *Tra ve: khong
 */
void HexChar2Str(char *str, uint8_t HexChar)
{
 8001a4a:	b590      	push	{r4, r7, lr}
 8001a4c:	b085      	sub	sp, #20
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
 8001a52:	000a      	movs	r2, r1
 8001a54:	1cfb      	adds	r3, r7, #3
 8001a56:	701a      	strb	r2, [r3, #0]
  uint8_t Shift_Byte = 0, base;
 8001a58:	210e      	movs	r1, #14
 8001a5a:	187b      	adds	r3, r7, r1
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	701a      	strb	r2, [r3, #0]
  Shift_Byte = (HexChar >> 4) & 0x0F;
 8001a60:	187b      	adds	r3, r7, r1
 8001a62:	1cfa      	adds	r2, r7, #3
 8001a64:	7812      	ldrb	r2, [r2, #0]
 8001a66:	0912      	lsrs	r2, r2, #4
 8001a68:	701a      	strb	r2, [r3, #0]
  if (Shift_Byte >= 0 && Shift_Byte <= 9)
 8001a6a:	187b      	adds	r3, r7, r1
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	2b09      	cmp	r3, #9
 8001a70:	d804      	bhi.n	8001a7c <HexChar2Str+0x32>
    base = '0' - 0;
 8001a72:	230f      	movs	r3, #15
 8001a74:	18fb      	adds	r3, r7, r3
 8001a76:	2230      	movs	r2, #48	; 0x30
 8001a78:	701a      	strb	r2, [r3, #0]
 8001a7a:	e003      	b.n	8001a84 <HexChar2Str+0x3a>
  else
    base = 'A' - 0x0A;
 8001a7c:	230f      	movs	r3, #15
 8001a7e:	18fb      	adds	r3, r7, r3
 8001a80:	2237      	movs	r2, #55	; 0x37
 8001a82:	701a      	strb	r2, [r3, #0]
  str[0] = Shift_Byte + base;
 8001a84:	210e      	movs	r1, #14
 8001a86:	187a      	adds	r2, r7, r1
 8001a88:	240f      	movs	r4, #15
 8001a8a:	193b      	adds	r3, r7, r4
 8001a8c:	7812      	ldrb	r2, [r2, #0]
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	18d3      	adds	r3, r2, r3
 8001a92:	b2da      	uxtb	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	701a      	strb	r2, [r3, #0]
  Shift_Byte = HexChar & 0x0F;
 8001a98:	0008      	movs	r0, r1
 8001a9a:	187b      	adds	r3, r7, r1
 8001a9c:	1cfa      	adds	r2, r7, #3
 8001a9e:	7812      	ldrb	r2, [r2, #0]
 8001aa0:	210f      	movs	r1, #15
 8001aa2:	400a      	ands	r2, r1
 8001aa4:	701a      	strb	r2, [r3, #0]
  if (Shift_Byte >= 0 && Shift_Byte <= 9)
 8001aa6:	183b      	adds	r3, r7, r0
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	2b09      	cmp	r3, #9
 8001aac:	d803      	bhi.n	8001ab6 <HexChar2Str+0x6c>
    base = '0' - 0;
 8001aae:	193b      	adds	r3, r7, r4
 8001ab0:	2230      	movs	r2, #48	; 0x30
 8001ab2:	701a      	strb	r2, [r3, #0]
 8001ab4:	e003      	b.n	8001abe <HexChar2Str+0x74>
  else
    base = 'A' - 0x0A;
 8001ab6:	230f      	movs	r3, #15
 8001ab8:	18fb      	adds	r3, r7, r3
 8001aba:	2237      	movs	r2, #55	; 0x37
 8001abc:	701a      	strb	r2, [r3, #0]
  str[1] = Shift_Byte + base;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	220e      	movs	r2, #14
 8001ac4:	18b9      	adds	r1, r7, r2
 8001ac6:	220f      	movs	r2, #15
 8001ac8:	18ba      	adds	r2, r7, r2
 8001aca:	7809      	ldrb	r1, [r1, #0]
 8001acc:	7812      	ldrb	r2, [r2, #0]
 8001ace:	188a      	adds	r2, r1, r2
 8001ad0:	b2d2      	uxtb	r2, r2
 8001ad2:	701a      	strb	r2, [r3, #0]
}
 8001ad4:	46c0      	nop			; (mov r8, r8)
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	b005      	add	sp, #20
 8001ada:	bd90      	pop	{r4, r7, pc}

08001adc <Get_Edge>:
  } while ((str2[i] != 0) && (++i < n));
  str1[i] = 0;
}

Edge_ReturnStatus Get_Edge(uint8_t Pin_stt)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	0002      	movs	r2, r0
 8001ae4:	1dfb      	adds	r3, r7, #7
 8001ae6:	701a      	strb	r2, [r3, #0]
  uint8_t result;
  static uint8_t Pin_stt_old;

  if (Pin_stt == Pin_stt_old)
 8001ae8:	4b0f      	ldr	r3, [pc, #60]	; (8001b28 <Get_Edge+0x4c>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	1dfa      	adds	r2, r7, #7
 8001aee:	7812      	ldrb	r2, [r2, #0]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d101      	bne.n	8001af8 <Get_Edge+0x1c>
    return _NONE;
 8001af4:	2300      	movs	r3, #0
 8001af6:	e013      	b.n	8001b20 <Get_Edge+0x44>

  if (Pin_stt == 0)
 8001af8:	1dfb      	adds	r3, r7, #7
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d104      	bne.n	8001b0a <Get_Edge+0x2e>
    result = _FALLING;
 8001b00:	230f      	movs	r3, #15
 8001b02:	18fb      	adds	r3, r7, r3
 8001b04:	2202      	movs	r2, #2
 8001b06:	701a      	strb	r2, [r3, #0]
 8001b08:	e003      	b.n	8001b12 <Get_Edge+0x36>
  else
    result = _RISING;
 8001b0a:	230f      	movs	r3, #15
 8001b0c:	18fb      	adds	r3, r7, r3
 8001b0e:	2201      	movs	r2, #1
 8001b10:	701a      	strb	r2, [r3, #0]

  Pin_stt_old = Pin_stt;
 8001b12:	4b05      	ldr	r3, [pc, #20]	; (8001b28 <Get_Edge+0x4c>)
 8001b14:	1dfa      	adds	r2, r7, #7
 8001b16:	7812      	ldrb	r2, [r2, #0]
 8001b18:	701a      	strb	r2, [r3, #0]
  return result;
 8001b1a:	230f      	movs	r3, #15
 8001b1c:	18fb      	adds	r3, r7, r3
 8001b1e:	781b      	ldrb	r3, [r3, #0]
}
 8001b20:	0018      	movs	r0, r3
 8001b22:	46bd      	mov	sp, r7
 8001b24:	b004      	add	sp, #16
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	200000b0 	.word	0x200000b0

08001b2c <convert_dec>:
 * This is the dividers to convert a decimal value into the char needed. Uses the UART while doing so.
 * INPUT: number to convert and divider array.
 * RETURN: None
 */
void convert_dec(unsigned long x, const unsigned long *dp)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
    char c;
    unsigned long d;
    if (x)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d02b      	beq.n	8001b94 <convert_dec+0x68>
    {
        while (x < *dp)
 8001b3c:	e002      	b.n	8001b44 <convert_dec+0x18>
            ++dp;
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	3304      	adds	r3, #4
 8001b42:	603b      	str	r3, [r7, #0]
        while (x < *dp)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d3f7      	bcc.n	8001b3e <convert_dec+0x12>
        do
        {
            d = *dp++;
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	1d1a      	adds	r2, r3, #4
 8001b52:	603a      	str	r2, [r7, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	60bb      	str	r3, [r7, #8]
            c = '0';
 8001b58:	230f      	movs	r3, #15
 8001b5a:	18fb      	adds	r3, r7, r3
 8001b5c:	2230      	movs	r2, #48	; 0x30
 8001b5e:	701a      	strb	r2, [r3, #0]
            while (x >= d)
 8001b60:	e009      	b.n	8001b76 <convert_dec+0x4a>
                ++c, x -= d;
 8001b62:	220f      	movs	r2, #15
 8001b64:	18bb      	adds	r3, r7, r2
 8001b66:	18ba      	adds	r2, r7, r2
 8001b68:	7812      	ldrb	r2, [r2, #0]
 8001b6a:	3201      	adds	r2, #1
 8001b6c:	701a      	strb	r2, [r3, #0]
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	607b      	str	r3, [r7, #4]
            while (x >= d)
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d2f1      	bcs.n	8001b62 <convert_dec+0x36>

            uart_putc(c);
 8001b7e:	230f      	movs	r3, #15
 8001b80:	18fb      	adds	r3, r7, r3
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	0018      	movs	r0, r3
 8001b86:	f000 fd47 	bl	8002618 <uart3_putc>
        } while (!(d & 1));
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	4013      	ands	r3, r2
 8001b90:	d0dd      	beq.n	8001b4e <convert_dec+0x22>
    }
    else
    {
        uart_putc('0');
    }
    return;
 8001b92:	e003      	b.n	8001b9c <convert_dec+0x70>
        uart_putc('0');
 8001b94:	2030      	movs	r0, #48	; 0x30
 8001b96:	f000 fd3f 	bl	8002618 <uart3_putc>
    return;
 8001b9a:	46c0      	nop			; (mov r8, r8)
}
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	b004      	add	sp, #16
 8001ba0:	bd80      	pop	{r7, pc}
	...

08001ba4 <convert_hex>:
 * Hex look up table for converting.
 * INPUT: number to convert.
 * RETURN: number converted.
 */
unsigned convert_hex(unsigned n)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
    static const char hex[16] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};

    return hex[n & 15];
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	220f      	movs	r2, #15
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	4a03      	ldr	r2, [pc, #12]	; (8001bc0 <convert_hex+0x1c>)
 8001bb4:	5cd3      	ldrb	r3, [r2, r3]
}
 8001bb6:	0018      	movs	r0, r3
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	b002      	add	sp, #8
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	46c0      	nop			; (mov r8, r8)
 8001bc0:	0800c818 	.word	0x0800c818

08001bc4 <Own_printf>:
 *Converts and formats values to be sent via char UART. Works similar to normal printf function.
 *INPUT: Char* EX: uart_printf("DATA: %i\r\n", datvar);
 *RETURN: None
 */
void Own_printf(char *format, ...)
{
 8001bc4:	b40f      	push	{r0, r1, r2, r3}
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b086      	sub	sp, #24
 8001bca:	af00      	add	r7, sp, #0

    if (Debugv_EN == 0)
        return;

    va_list list; // Make the arguement list
    va_start(list, format);
 8001bcc:	2324      	movs	r3, #36	; 0x24
 8001bce:	18fb      	adds	r3, r7, r3
 8001bd0:	607b      	str	r3, [r7, #4]

    start_stick = HAL_GetTick();
 8001bd2:	f003 fc03 	bl	80053dc <HAL_GetTick>
 8001bd6:	0003      	movs	r3, r0
 8001bd8:	60fb      	str	r3, [r7, #12]
    while ((c = *format++)) // run through the input till the end.
 8001bda:	e11f      	b.n	8001e1c <Own_printf+0x258>
    {
        if ((HAL_GetTick() - start_stick) > 1000 /*ms*/)
 8001bdc:	f003 fbfe 	bl	80053dc <HAL_GetTick>
 8001be0:	0002      	movs	r2, r0
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	1ad2      	subs	r2, r2, r3
 8001be6:	23fa      	movs	r3, #250	; 0xfa
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d900      	bls.n	8001bf0 <Own_printf+0x2c>
 8001bee:	e122      	b.n	8001e36 <Own_printf+0x272>
            return; // time_out limit

        if (c == '%') //% denotes the variable format character
 8001bf0:	210b      	movs	r1, #11
 8001bf2:	187b      	adds	r3, r7, r1
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	2b25      	cmp	r3, #37	; 0x25
 8001bf8:	d000      	beq.n	8001bfc <Own_printf+0x38>
 8001bfa:	e109      	b.n	8001e10 <Own_printf+0x24c>
        {
            switch (c = *format++)
 8001bfc:	6a3b      	ldr	r3, [r7, #32]
 8001bfe:	1c5a      	adds	r2, r3, #1
 8001c00:	623a      	str	r2, [r7, #32]
 8001c02:	187a      	adds	r2, r7, r1
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	7013      	strb	r3, [r2, #0]
 8001c08:	187b      	adds	r3, r7, r1
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d100      	bne.n	8001c12 <Own_printf+0x4e>
 8001c10:	e113      	b.n	8001e3a <Own_printf+0x276>
 8001c12:	da00      	bge.n	8001c16 <Own_printf+0x52>
 8001c14:	e0f5      	b.n	8001e02 <Own_printf+0x23e>
 8001c16:	2b78      	cmp	r3, #120	; 0x78
 8001c18:	dd00      	ble.n	8001c1c <Own_printf+0x58>
 8001c1a:	e0f2      	b.n	8001e02 <Own_printf+0x23e>
 8001c1c:	2b63      	cmp	r3, #99	; 0x63
 8001c1e:	da00      	bge.n	8001c22 <Own_printf+0x5e>
 8001c20:	e0ef      	b.n	8001e02 <Own_printf+0x23e>
 8001c22:	3b63      	subs	r3, #99	; 0x63
 8001c24:	2b15      	cmp	r3, #21
 8001c26:	d900      	bls.n	8001c2a <Own_printf+0x66>
 8001c28:	e0eb      	b.n	8001e02 <Own_printf+0x23e>
 8001c2a:	009a      	lsls	r2, r3, #2
 8001c2c:	4b86      	ldr	r3, [pc, #536]	; (8001e48 <Own_printf+0x284>)
 8001c2e:	18d3      	adds	r3, r2, r3
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	469f      	mov	pc, r3
            {
            case 's': // strings
                uart_puts(va_arg(list, char *));
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	1d1a      	adds	r2, r3, #4
 8001c38:	607a      	str	r2, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	0018      	movs	r0, r3
 8001c3e:	f000 fd17 	bl	8002670 <uart3_puts>
                break;
 8001c42:	e0eb      	b.n	8001e1c <Own_printf+0x258>
 8001c44:	deff      	udf	#255	; 0xff
            case 'c': // chars
                uart_putc(va_arg(list, char));
                break;

            case 'i': // signed ints
                i = va_arg(list, int);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	1d1a      	adds	r2, r3, #4
 8001c4a:	607a      	str	r2, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	617b      	str	r3, [r7, #20]
                if (i < 0)
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	da05      	bge.n	8001c62 <Own_printf+0x9e>
                {
                    i = -i;
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	425b      	negs	r3, r3
 8001c5a:	617b      	str	r3, [r7, #20]
                    uart_putc('-');
 8001c5c:	202d      	movs	r0, #45	; 0x2d
 8001c5e:	f000 fcdb 	bl	8002618 <uart3_putc>
                }
                convert_dec((unsigned)i, divider + 5);
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	4a79      	ldr	r2, [pc, #484]	; (8001e4c <Own_printf+0x288>)
 8001c66:	0011      	movs	r1, r2
 8001c68:	0018      	movs	r0, r3
 8001c6a:	f7ff ff5f 	bl	8001b2c <convert_dec>
                break;
 8001c6e:	e0d5      	b.n	8001e1c <Own_printf+0x258>

            case 'u': // unsigned ints
                i = va_arg(list, int);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	1d1a      	adds	r2, r3, #4
 8001c74:	607a      	str	r2, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	617b      	str	r3, [r7, #20]
                convert_dec((unsigned)i, divider + 5);
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	4a73      	ldr	r2, [pc, #460]	; (8001e4c <Own_printf+0x288>)
 8001c7e:	0011      	movs	r1, r2
 8001c80:	0018      	movs	r0, r3
 8001c82:	f7ff ff53 	bl	8001b2c <convert_dec>
                break;
 8001c86:	e0c9      	b.n	8001e1c <Own_printf+0x258>

            case 'l': // signed longs
                l = va_arg(list, long);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	1d1a      	adds	r2, r3, #4
 8001c8c:	607a      	str	r2, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	613b      	str	r3, [r7, #16]
                if (l < 0)
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	da05      	bge.n	8001ca4 <Own_printf+0xe0>
                {
                    l = -l;
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	425b      	negs	r3, r3
 8001c9c:	613b      	str	r3, [r7, #16]
                    uart_putc('-');
 8001c9e:	202d      	movs	r0, #45	; 0x2d
 8001ca0:	f000 fcba 	bl	8002618 <uart3_putc>
                }
                convert_dec((unsigned long)l, divider);
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	4a6a      	ldr	r2, [pc, #424]	; (8001e50 <Own_printf+0x28c>)
 8001ca8:	0011      	movs	r1, r2
 8001caa:	0018      	movs	r0, r3
 8001cac:	f7ff ff3e 	bl	8001b2c <convert_dec>
                break;
 8001cb0:	e0b4      	b.n	8001e1c <Own_printf+0x258>

            case 'n': // unsigned longs
                l = va_arg(list, long);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	1d1a      	adds	r2, r3, #4
 8001cb6:	607a      	str	r2, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	613b      	str	r3, [r7, #16]
                convert_dec((unsigned long)l, divider);
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	4a64      	ldr	r2, [pc, #400]	; (8001e50 <Own_printf+0x28c>)
 8001cc0:	0011      	movs	r1, r2
 8001cc2:	0018      	movs	r0, r3
 8001cc4:	f7ff ff32 	bl	8001b2c <convert_dec>
                break;
 8001cc8:	e0a8      	b.n	8001e1c <Own_printf+0x258>

            case 'x':
                i = va_arg(list, long);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	1d1a      	adds	r2, r3, #4
 8001cce:	607a      	str	r2, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	617b      	str	r3, [r7, #20]
                if (i <= 0xFF)
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	2bff      	cmp	r3, #255	; 0xff
 8001cd8:	dc13      	bgt.n	8001d02 <Own_printf+0x13e>
                { // 8 Bit
                    uart_putc(convert_hex(i >> 4));
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	111b      	asrs	r3, r3, #4
 8001cde:	0018      	movs	r0, r3
 8001ce0:	f7ff ff60 	bl	8001ba4 <convert_hex>
 8001ce4:	0003      	movs	r3, r0
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	0018      	movs	r0, r3
 8001cea:	f000 fc95 	bl	8002618 <uart3_putc>
                    uart_putc(convert_hex(i));
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	0018      	movs	r0, r3
 8001cf2:	f7ff ff57 	bl	8001ba4 <convert_hex>
 8001cf6:	0003      	movs	r3, r0
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	0018      	movs	r0, r3
 8001cfc:	f000 fc8c 	bl	8002618 <uart3_putc>
                    uart_putc(convert_hex(i >> 12));
                    uart_putc(convert_hex(i >> 8));
                    uart_putc(convert_hex(i >> 4));
                    uart_putc(convert_hex(i));
                }
                break;
 8001d00:	e08c      	b.n	8001e1c <Own_printf+0x258>
                else if (i > 0xFF && i <= 0xFFFF)
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	2bff      	cmp	r3, #255	; 0xff
 8001d06:	dd2c      	ble.n	8001d62 <Own_printf+0x19e>
 8001d08:	697a      	ldr	r2, [r7, #20]
 8001d0a:	2380      	movs	r3, #128	; 0x80
 8001d0c:	025b      	lsls	r3, r3, #9
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	da27      	bge.n	8001d62 <Own_printf+0x19e>
                    uart_putc(convert_hex(i >> 12));
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	131b      	asrs	r3, r3, #12
 8001d16:	0018      	movs	r0, r3
 8001d18:	f7ff ff44 	bl	8001ba4 <convert_hex>
 8001d1c:	0003      	movs	r3, r0
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	0018      	movs	r0, r3
 8001d22:	f000 fc79 	bl	8002618 <uart3_putc>
                    uart_putc(convert_hex(i >> 8));
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	121b      	asrs	r3, r3, #8
 8001d2a:	0018      	movs	r0, r3
 8001d2c:	f7ff ff3a 	bl	8001ba4 <convert_hex>
 8001d30:	0003      	movs	r3, r0
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	0018      	movs	r0, r3
 8001d36:	f000 fc6f 	bl	8002618 <uart3_putc>
                    uart_putc(convert_hex(i >> 4));
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	111b      	asrs	r3, r3, #4
 8001d3e:	0018      	movs	r0, r3
 8001d40:	f7ff ff30 	bl	8001ba4 <convert_hex>
 8001d44:	0003      	movs	r3, r0
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	0018      	movs	r0, r3
 8001d4a:	f000 fc65 	bl	8002618 <uart3_putc>
                    uart_putc(convert_hex(i));
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	0018      	movs	r0, r3
 8001d52:	f7ff ff27 	bl	8001ba4 <convert_hex>
 8001d56:	0003      	movs	r3, r0
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	0018      	movs	r0, r3
 8001d5c:	f000 fc5c 	bl	8002618 <uart3_putc>
                break;
 8001d60:	e05c      	b.n	8001e1c <Own_printf+0x258>
                    uart_putc(convert_hex(i >> 28));
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	171b      	asrs	r3, r3, #28
 8001d66:	0018      	movs	r0, r3
 8001d68:	f7ff ff1c 	bl	8001ba4 <convert_hex>
 8001d6c:	0003      	movs	r3, r0
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	0018      	movs	r0, r3
 8001d72:	f000 fc51 	bl	8002618 <uart3_putc>
                    uart_putc(convert_hex(i >> 24));
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	161b      	asrs	r3, r3, #24
 8001d7a:	0018      	movs	r0, r3
 8001d7c:	f7ff ff12 	bl	8001ba4 <convert_hex>
 8001d80:	0003      	movs	r3, r0
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	0018      	movs	r0, r3
 8001d86:	f000 fc47 	bl	8002618 <uart3_putc>
                    uart_putc(convert_hex(i >> 20));
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	151b      	asrs	r3, r3, #20
 8001d8e:	0018      	movs	r0, r3
 8001d90:	f7ff ff08 	bl	8001ba4 <convert_hex>
 8001d94:	0003      	movs	r3, r0
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	0018      	movs	r0, r3
 8001d9a:	f000 fc3d 	bl	8002618 <uart3_putc>
                    uart_putc(convert_hex(i >> 16));
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	141b      	asrs	r3, r3, #16
 8001da2:	0018      	movs	r0, r3
 8001da4:	f7ff fefe 	bl	8001ba4 <convert_hex>
 8001da8:	0003      	movs	r3, r0
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	0018      	movs	r0, r3
 8001dae:	f000 fc33 	bl	8002618 <uart3_putc>
                    uart_putc(convert_hex(i >> 12));
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	131b      	asrs	r3, r3, #12
 8001db6:	0018      	movs	r0, r3
 8001db8:	f7ff fef4 	bl	8001ba4 <convert_hex>
 8001dbc:	0003      	movs	r3, r0
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	0018      	movs	r0, r3
 8001dc2:	f000 fc29 	bl	8002618 <uart3_putc>
                    uart_putc(convert_hex(i >> 8));
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	121b      	asrs	r3, r3, #8
 8001dca:	0018      	movs	r0, r3
 8001dcc:	f7ff feea 	bl	8001ba4 <convert_hex>
 8001dd0:	0003      	movs	r3, r0
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	0018      	movs	r0, r3
 8001dd6:	f000 fc1f 	bl	8002618 <uart3_putc>
                    uart_putc(convert_hex(i >> 4));
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	111b      	asrs	r3, r3, #4
 8001dde:	0018      	movs	r0, r3
 8001de0:	f7ff fee0 	bl	8001ba4 <convert_hex>
 8001de4:	0003      	movs	r3, r0
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	0018      	movs	r0, r3
 8001dea:	f000 fc15 	bl	8002618 <uart3_putc>
                    uart_putc(convert_hex(i));
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	0018      	movs	r0, r3
 8001df2:	f7ff fed7 	bl	8001ba4 <convert_hex>
 8001df6:	0003      	movs	r3, r0
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	0018      	movs	r0, r3
 8001dfc:	f000 fc0c 	bl	8002618 <uart3_putc>
                break;
 8001e00:	e00c      	b.n	8001e1c <Own_printf+0x258>

            case 0:
                return;
            default:
                uart_putc(c); // can't find formating. just print it.
 8001e02:	230b      	movs	r3, #11
 8001e04:	18fb      	adds	r3, r7, r3
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	0018      	movs	r0, r3
 8001e0a:	f000 fc05 	bl	8002618 <uart3_putc>
 8001e0e:	e005      	b.n	8001e1c <Own_printf+0x258>
            }
        }
        else
        {
            uart_putc(c);
 8001e10:	230b      	movs	r3, #11
 8001e12:	18fb      	adds	r3, r7, r3
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	0018      	movs	r0, r3
 8001e18:	f000 fbfe 	bl	8002618 <uart3_putc>
    while ((c = *format++)) // run through the input till the end.
 8001e1c:	6a3b      	ldr	r3, [r7, #32]
 8001e1e:	1c5a      	adds	r2, r3, #1
 8001e20:	623a      	str	r2, [r7, #32]
 8001e22:	210b      	movs	r1, #11
 8001e24:	187a      	adds	r2, r7, r1
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	7013      	strb	r3, [r2, #0]
 8001e2a:	187b      	adds	r3, r7, r1
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d000      	beq.n	8001e34 <Own_printf+0x270>
 8001e32:	e6d3      	b.n	8001bdc <Own_printf+0x18>
        }
    }
    va_end(list);
    return;
 8001e34:	e002      	b.n	8001e3c <Own_printf+0x278>
            return; // time_out limit
 8001e36:	46c0      	nop			; (mov r8, r8)
 8001e38:	e000      	b.n	8001e3c <Own_printf+0x278>
                return;
 8001e3a:	46c0      	nop			; (mov r8, r8)
}
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	b006      	add	sp, #24
 8001e40:	bc80      	pop	{r7}
 8001e42:	bc08      	pop	{r3}
 8001e44:	b004      	add	sp, #16
 8001e46:	4718      	bx	r3
 8001e48:	0800c7c0 	.word	0x0800c7c0
 8001e4c:	0800c7ac 	.word	0x0800c7ac
 8001e50:	0800c798 	.word	0x0800c798

08001e54 <get_string_get_input>:


#include "get_string.h"

//ghi tuần tự byte vào 2 bộ đệm
void get_string_get_input(get_string_str *sGS, char byte){
 8001e54:	b590      	push	{r4, r7, lr}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	000a      	movs	r2, r1
 8001e5e:	1cfb      	adds	r3, r7, #3
 8001e60:	701a      	strb	r2, [r3, #0]
	sGS->string[sGS->id_read][sGS->count[sGS->id_read]++] = byte; //ghi byte nhận được vào buffer Read
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	8a9b      	ldrh	r3, [r3, #20]
 8001e66:	0018      	movs	r0, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	8a9b      	ldrh	r3, [r3, #20]
 8001e6c:	001a      	movs	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	0011      	movs	r1, r2
 8001e72:	310c      	adds	r1, #12
 8001e74:	0049      	lsls	r1, r1, #1
 8001e76:	5acb      	ldrh	r3, [r1, r3]
 8001e78:	1c59      	adds	r1, r3, #1
 8001e7a:	b28c      	uxth	r4, r1
 8001e7c:	6879      	ldr	r1, [r7, #4]
 8001e7e:	320c      	adds	r2, #12
 8001e80:	0052      	lsls	r2, r2, #1
 8001e82:	5254      	strh	r4, [r2, r1]
 8001e84:	0019      	movs	r1, r3
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	0003      	movs	r3, r0
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	181b      	adds	r3, r3, r0
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	18d3      	adds	r3, r2, r3
 8001e92:	1cfa      	adds	r2, r7, #3
 8001e94:	7812      	ldrb	r2, [r2, #0]
 8001e96:	545a      	strb	r2, [r3, r1]
//		timer_stop(&sGS->timeout);
//		return;
//	}

	//tràn bộ đệm
	if(sGS->count[sGS->id_read] == MAX_LEN_STRING)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	8a9b      	ldrh	r3, [r3, #20]
 8001e9c:	001a      	movs	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	320c      	adds	r2, #12
 8001ea2:	0052      	lsls	r2, r2, #1
 8001ea4:	5ad3      	ldrh	r3, [r2, r3]
 8001ea6:	2b0a      	cmp	r3, #10
 8001ea8:	d107      	bne.n	8001eba <get_string_get_input+0x66>
		sGS->count[sGS->id_read] = MAX_LEN_STRING - 1;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	8a9b      	ldrh	r3, [r3, #20]
 8001eae:	001a      	movs	r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	320c      	adds	r2, #12
 8001eb4:	0052      	lsls	r2, r2, #1
 8001eb6:	2109      	movs	r1, #9
 8001eb8:	52d1      	strh	r1, [r2, r3]
	//timeout của byte tiếp theo => nếu quá timeout này xem như đã nhận đủ
	timer_set(&sGS->timeout, TIMEOUT_STRING);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	331c      	adds	r3, #28
 8001ebe:	2102      	movs	r1, #2
 8001ec0:	0018      	movs	r0, r3
 8001ec2:	f001 ffdd 	bl	8003e80 <timer_set>
}
 8001ec6:	46c0      	nop			; (mov r8, r8)
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	b003      	add	sp, #12
 8001ecc:	bd90      	pop	{r4, r7, pc}

08001ece <get_string_init_notify>:

void get_string_init_notify(get_string_str *sGS, void (*void_get_string_notify)(char *string, uint16_t size)){
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b082      	sub	sp, #8
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
 8001ed6:	6039      	str	r1, [r7, #0]
	sGS->void_notify = void_get_string_notify;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	683a      	ldr	r2, [r7, #0]
 8001edc:	62da      	str	r2, [r3, #44]	; 0x2c
	sGS->flag_notify = 1; //đã init hàm void_get_string_notify
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2230      	movs	r2, #48	; 0x30
 8001ee2:	5c99      	ldrb	r1, [r3, r2]
 8001ee4:	2001      	movs	r0, #1
 8001ee6:	4301      	orrs	r1, r0
 8001ee8:	5499      	strb	r1, [r3, r2]
}
 8001eea:	46c0      	nop			; (mov r8, r8)
 8001eec:	46bd      	mov	sp, r7
 8001eee:	b002      	add	sp, #8
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <get_string_loop_manage>:

void get_string_loop_manage(get_string_str *sGS){
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b082      	sub	sp, #8
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
	//Khi id_write != id_read => nghĩa đã có bộ đệm có dữ liệu
	if(sGS->id_write != sGS->id_read){
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	8ada      	ldrh	r2, [r3, #22]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	8a9b      	ldrh	r3, [r3, #20]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d03b      	beq.n	8001f7e <get_string_loop_manage+0x8c>
		sGS->string[sGS->id_write][sGS->count[sGS->id_write]] = 0;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	8adb      	ldrh	r3, [r3, #22]
 8001f0a:	0019      	movs	r1, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	8adb      	ldrh	r3, [r3, #22]
 8001f10:	001a      	movs	r2, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	320c      	adds	r2, #12
 8001f16:	0052      	lsls	r2, r2, #1
 8001f18:	5ad3      	ldrh	r3, [r2, r3]
 8001f1a:	0018      	movs	r0, r3
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	000b      	movs	r3, r1
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	185b      	adds	r3, r3, r1
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	18d3      	adds	r3, r2, r3
 8001f28:	2200      	movs	r2, #0
 8001f2a:	541a      	strb	r2, [r3, r0]
		//đã init hàm void_notify => gọi hàm này để xử lí (tham số là sGS->string[sGS->id_write] , length là sGS->count[sGS->id_write]
		if(sGS->flag_notify == 1){
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2230      	movs	r2, #48	; 0x30
 8001f30:	5c9b      	ldrb	r3, [r3, r2]
 8001f32:	2201      	movs	r2, #1
 8001f34:	4013      	ands	r3, r2
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d013      	beq.n	8001f64 <get_string_loop_manage+0x72>
			sGS->void_notify(sGS->string[sGS->id_write], sGS->count[sGS->id_write]);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	8adb      	ldrh	r3, [r3, #22]
 8001f44:	0019      	movs	r1, r3
 8001f46:	000b      	movs	r3, r1
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	185b      	adds	r3, r3, r1
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	6879      	ldr	r1, [r7, #4]
 8001f50:	18c8      	adds	r0, r1, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	8adb      	ldrh	r3, [r3, #22]
 8001f56:	0019      	movs	r1, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	310c      	adds	r1, #12
 8001f5c:	0049      	lsls	r1, r1, #1
 8001f5e:	5acb      	ldrh	r3, [r1, r3]
 8001f60:	0019      	movs	r1, r3
 8001f62:	4790      	blx	r2
		}
		//xử lí xong thì ++ => lúc này : id_write == id_read nếu ko nhận đc chuỗi mới
		if(++sGS->id_write >= MAX_STRING)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	8adb      	ldrh	r3, [r3, #22]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	82da      	strh	r2, [r3, #22]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	8adb      	ldrh	r3, [r3, #22]
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d902      	bls.n	8001f7e <get_string_loop_manage+0x8c>
			sGS->id_write = 0;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	82da      	strh	r2, [r3, #22]
	}

	//cứ hết timeout 1 byte thì nhảy qua buffer khác
	if(timer_expired(&sGS->timeout)){
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	331c      	adds	r3, #28
 8001f82:	0018      	movs	r0, r3
 8001f84:	f001 ffb8 	bl	8003ef8 <timer_expired>
 8001f88:	1e03      	subs	r3, r0, #0
 8001f8a:	d019      	beq.n	8001fc0 <get_string_loop_manage+0xce>
		if(++sGS->id_read >= MAX_STRING)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	8a9b      	ldrh	r3, [r3, #20]
 8001f90:	3301      	adds	r3, #1
 8001f92:	b29a      	uxth	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	829a      	strh	r2, [r3, #20]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	8a9b      	ldrh	r3, [r3, #20]
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d902      	bls.n	8001fa6 <get_string_loop_manage+0xb4>
			sGS->id_read = 0;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	829a      	strh	r2, [r3, #20]
		sGS->count[sGS->id_read] = 0;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	8a9b      	ldrh	r3, [r3, #20]
 8001faa:	001a      	movs	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	320c      	adds	r2, #12
 8001fb0:	0052      	lsls	r2, r2, #1
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	52d1      	strh	r1, [r2, r3]
		timer_stop(&sGS->timeout);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	331c      	adds	r3, #28
 8001fba:	0018      	movs	r0, r3
 8001fbc:	f001 ffbc 	bl	8003f38 <timer_stop>
	}
}
 8001fc0:	46c0      	nop			; (mov r8, r8)
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	b002      	add	sp, #8
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <init_callback>:
#include "common.h"
#include "printf.h"

void (*callback_rawData)(uint8_t TxAddr,uint8_t RxCmd,uint8_t RxData);

void init_callback(void (*void_callback)(uint8_t SlaveAddr,uint8_t RxCmd,uint8_t RxData)){
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
	callback_rawData = void_callback;
 8001fd0:	4b03      	ldr	r3, [pc, #12]	; (8001fe0 <init_callback+0x18>)
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	601a      	str	r2, [r3, #0]
}
 8001fd6:	46c0      	nop			; (mov r8, r8)
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	b002      	add	sp, #8
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	46c0      	nop			; (mov r8, r8)
 8001fe0:	2000013c 	.word	0x2000013c

08001fe4 <raw_data>:

int raw_data(com_protocol_t *data, uint16_t length)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	000a      	movs	r2, r1
 8001fee:	1cbb      	adds	r3, r7, #2
 8001ff0:	801a      	strh	r2, [r3, #0]
	//debug
//	for(uint8_t i=0;i<length;i++)debug_rs232("0x%x ",data[i]);
//	debug_rs232("\n\r");

	// nếu lỗi quá độ dài
	if (length > COM_PROTOCOL_LEN)
 8001ff2:	1cbb      	adds	r3, r7, #2
 8001ff4:	881b      	ldrh	r3, [r3, #0]
 8001ff6:	2b08      	cmp	r3, #8
 8001ff8:	d902      	bls.n	8002000 <raw_data+0x1c>
	{
		//dbg_com("length error %u", length);
		return -1;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	425b      	negs	r3, r3
 8001ffe:	e04a      	b.n	8002096 <raw_data+0xb2>
	}
	// nếu lỗi sai format
	if (data->STX != 0x1E || data->ETX != 0x1F)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	2b1e      	cmp	r3, #30
 8002006:	d103      	bne.n	8002010 <raw_data+0x2c>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	79db      	ldrb	r3, [r3, #7]
 800200c:	2b1f      	cmp	r3, #31
 800200e:	d002      	beq.n	8002016 <raw_data+0x32>
	{
		//dbg_com("header error %u-%u", data->STX, data->ETX);
		return -1;
 8002010:	2301      	movs	r3, #1
 8002012:	425b      	negs	r3, r3
 8002014:	e03f      	b.n	8002096 <raw_data+0xb2>
	}

	str[0]=data->cmd[0];//string
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	78da      	ldrb	r2, [r3, #3]
 800201a:	210c      	movs	r1, #12
 800201c:	187b      	adds	r3, r7, r1
 800201e:	701a      	strb	r2, [r3, #0]
	str[1]=data->cmd[1];
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	791a      	ldrb	r2, [r3, #4]
 8002024:	187b      	adds	r3, r7, r1
 8002026:	705a      	strb	r2, [r3, #1]
	str[2]=0;
 8002028:	187b      	adds	r3, r7, r1
 800202a:	2200      	movs	r2, #0
 800202c:	709a      	strb	r2, [r3, #2]
	if(Str2HexChar(str,&cmd_hex)==0)
 800202e:	230b      	movs	r3, #11
 8002030:	18fa      	adds	r2, r7, r3
 8002032:	187b      	adds	r3, r7, r1
 8002034:	0011      	movs	r1, r2
 8002036:	0018      	movs	r0, r3
 8002038:	f7ff fc8c 	bl	8001954 <Str2HexChar>
 800203c:	1e03      	subs	r3, r0, #0
 800203e:	d102      	bne.n	8002046 <raw_data+0x62>
		return -1;
 8002040:	2301      	movs	r3, #1
 8002042:	425b      	negs	r3, r3
 8002044:	e027      	b.n	8002096 <raw_data+0xb2>
	str[0]=data->data[0];
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	795a      	ldrb	r2, [r3, #5]
 800204a:	210c      	movs	r1, #12
 800204c:	187b      	adds	r3, r7, r1
 800204e:	701a      	strb	r2, [r3, #0]
	str[1]=data->data[1];
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	799a      	ldrb	r2, [r3, #6]
 8002054:	187b      	adds	r3, r7, r1
 8002056:	705a      	strb	r2, [r3, #1]
	str[2]=0;
 8002058:	187b      	adds	r3, r7, r1
 800205a:	2200      	movs	r2, #0
 800205c:	709a      	strb	r2, [r3, #2]
	if(Str2HexChar(str,&data_hex)==0)
 800205e:	230a      	movs	r3, #10
 8002060:	18fa      	adds	r2, r7, r3
 8002062:	187b      	adds	r3, r7, r1
 8002064:	0011      	movs	r1, r2
 8002066:	0018      	movs	r0, r3
 8002068:	f7ff fc74 	bl	8001954 <Str2HexChar>
 800206c:	1e03      	subs	r3, r0, #0
 800206e:	d102      	bne.n	8002076 <raw_data+0x92>
		return -1;
 8002070:	2301      	movs	r3, #1
 8002072:	425b      	negs	r3, r3
 8002074:	e00f      	b.n	8002096 <raw_data+0xb2>

	if(callback_rawData!=0)
 8002076:	4b0a      	ldr	r3, [pc, #40]	; (80020a0 <raw_data+0xbc>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d00a      	beq.n	8002094 <raw_data+0xb0>
		callback_rawData(data->TX_Addr,cmd_hex,data_hex);
 800207e:	4b08      	ldr	r3, [pc, #32]	; (80020a0 <raw_data+0xbc>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	7890      	ldrb	r0, [r2, #2]
 8002086:	220b      	movs	r2, #11
 8002088:	18ba      	adds	r2, r7, r2
 800208a:	7811      	ldrb	r1, [r2, #0]
 800208c:	220a      	movs	r2, #10
 800208e:	18ba      	adds	r2, r7, r2
 8002090:	7812      	ldrb	r2, [r2, #0]
 8002092:	4798      	blx	r3

	return 1;
 8002094:	2301      	movs	r3, #1
}
 8002096:	0018      	movs	r0, r3
 8002098:	46bd      	mov	sp, r7
 800209a:	b004      	add	sp, #16
 800209c:	bd80      	pop	{r7, pc}
 800209e:	46c0      	nop			; (mov r8, r8)
 80020a0:	2000013c 	.word	0x2000013c

080020a4 <init_RxCallback>:
RS232_Master_Struct_t Main_rs232;

void (*callback_RxString)(Slave_state_e Rep_Up,uint8_t TxAddr,uint8_t RxCmd,uint8_t RxData);

//Hàm lấy dữ liệu từ Slave gửi lên và nhận biết là Slave đang Reply hay Update
void init_RxCallback(void (*void_callback)(Slave_state_e Rep_up,uint8_t TxAddr,uint8_t RxCmd,uint8_t RxData)){
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
	callback_RxString = void_callback;
 80020ac:	4b03      	ldr	r3, [pc, #12]	; (80020bc <init_RxCallback+0x18>)
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	601a      	str	r2, [r3, #0]
}
 80020b2:	46c0      	nop			; (mov r8, r8)
 80020b4:	46bd      	mov	sp, r7
 80020b6:	b002      	add	sp, #8
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	46c0      	nop			; (mov r8, r8)
 80020bc:	20000170 	.word	0x20000170

080020c0 <master_Rx>:

//call back init in getstring
void master_Rx(uint8_t SlaveAddr,uint8_t RxCmd,uint8_t RxData){
 80020c0:	b590      	push	{r4, r7, lr}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	0004      	movs	r4, r0
 80020c8:	0008      	movs	r0, r1
 80020ca:	0011      	movs	r1, r2
 80020cc:	1dfb      	adds	r3, r7, #7
 80020ce:	1c22      	adds	r2, r4, #0
 80020d0:	701a      	strb	r2, [r3, #0]
 80020d2:	1dbb      	adds	r3, r7, #6
 80020d4:	1c02      	adds	r2, r0, #0
 80020d6:	701a      	strb	r2, [r3, #0]
 80020d8:	1d7b      	adds	r3, r7, #5
 80020da:	1c0a      	adds	r2, r1, #0
 80020dc:	701a      	strb	r2, [r3, #0]
	Main_rs232.RXD.f_notify=1;
 80020de:	4b0a      	ldr	r3, [pc, #40]	; (8002108 <master_Rx+0x48>)
 80020e0:	7e1a      	ldrb	r2, [r3, #24]
 80020e2:	2101      	movs	r1, #1
 80020e4:	430a      	orrs	r2, r1
 80020e6:	761a      	strb	r2, [r3, #24]
	Main_rs232.RXD.Addr = SlaveAddr;
 80020e8:	4b07      	ldr	r3, [pc, #28]	; (8002108 <master_Rx+0x48>)
 80020ea:	1dfa      	adds	r2, r7, #7
 80020ec:	7812      	ldrb	r2, [r2, #0]
 80020ee:	76da      	strb	r2, [r3, #27]
	Main_rs232.RXD.cmd = RxCmd;
 80020f0:	4b05      	ldr	r3, [pc, #20]	; (8002108 <master_Rx+0x48>)
 80020f2:	1dba      	adds	r2, r7, #6
 80020f4:	7812      	ldrb	r2, [r2, #0]
 80020f6:	765a      	strb	r2, [r3, #25]
	Main_rs232.RXD.data = RxData;
 80020f8:	4b03      	ldr	r3, [pc, #12]	; (8002108 <master_Rx+0x48>)
 80020fa:	1d7a      	adds	r2, r7, #5
 80020fc:	7812      	ldrb	r2, [r2, #0]
 80020fe:	769a      	strb	r2, [r3, #26]
}
 8002100:	46c0      	nop			; (mov r8, r8)
 8002102:	46bd      	mov	sp, r7
 8002104:	b003      	add	sp, #12
 8002106:	bd90      	pop	{r4, r7, pc}
 8002108:	20000140 	.word	0x20000140

0800210c <master_TX>:

uint8_t master_TX(RS232_Master_Struct_t *rs232, uint8_t slaveAddr, uint8_t cmd, uint8_t data, uint32_t time_out)
{
 800210c:	b590      	push	{r4, r7, lr}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	000c      	movs	r4, r1
 8002116:	0010      	movs	r0, r2
 8002118:	0019      	movs	r1, r3
 800211a:	1cfb      	adds	r3, r7, #3
 800211c:	1c22      	adds	r2, r4, #0
 800211e:	701a      	strb	r2, [r3, #0]
 8002120:	1cbb      	adds	r3, r7, #2
 8002122:	1c02      	adds	r2, r0, #0
 8002124:	701a      	strb	r2, [r3, #0]
 8002126:	1c7b      	adds	r3, r7, #1
 8002128:	1c0a      	adds	r2, r1, #0
 800212a:	701a      	strb	r2, [r3, #0]
    // if(!_LIMIT(cmd,0x20,0x3F))return 0;
    // if(rs232->state != _RS232LL_NONE)return 0;
	rs232->TXD.f_notify =1;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	781a      	ldrb	r2, [r3, #0]
 8002130:	2101      	movs	r1, #1
 8002132:	430a      	orrs	r2, r1
 8002134:	701a      	strb	r2, [r3, #0]
    rs232->TXD.Addr = slaveAddr;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	1cfa      	adds	r2, r7, #3
 800213a:	7812      	ldrb	r2, [r2, #0]
 800213c:	70da      	strb	r2, [r3, #3]
    rs232->TXD.cmd = cmd;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	1cba      	adds	r2, r7, #2
 8002142:	7812      	ldrb	r2, [r2, #0]
 8002144:	705a      	strb	r2, [r3, #1]
    rs232->TXD.data = data;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	1c7a      	adds	r2, r7, #1
 800214a:	7812      	ldrb	r2, [r2, #0]
 800214c:	709a      	strb	r2, [r3, #2]

    //nếu timeout = 0 thì ko cần retry
    if(time_out==0){
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d108      	bne.n	8002166 <master_TX+0x5a>
    	timer_stop(&rs232->TXD._timeout);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	3308      	adds	r3, #8
 8002158:	0018      	movs	r0, r3
 800215a:	f001 feed 	bl	8003f38 <timer_stop>
    	rs232->TXD.retry = 0;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	711a      	strb	r2, [r3, #4]
 8002164:	e009      	b.n	800217a <master_TX+0x6e>
    }else {
    	timer_set(&rs232->TXD._timeout, time_out);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	3308      	adds	r3, #8
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	0011      	movs	r1, r2
 800216e:	0018      	movs	r0, r3
 8002170:	f001 fe86 	bl	8003e80 <timer_set>
    	rs232->TXD.retry = _RETRY_RS232;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	711a      	strb	r2, [r3, #4]
    }

    RS232LL_TxRequest(rs232->TXD.Addr, rs232->TXD.cmd, rs232->TXD.data);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	78d8      	ldrb	r0, [r3, #3]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	7859      	ldrb	r1, [r3, #1]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	789b      	ldrb	r3, [r3, #2]
 8002186:	001a      	movs	r2, r3
 8002188:	f000 ffbe 	bl	8003108 <RS232LL_TxRequest>
    return (rs232->TXD.cmd);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	785b      	ldrb	r3, [r3, #1]
}
 8002190:	0018      	movs	r0, r3
 8002192:	46bd      	mov	sp, r7
 8002194:	b003      	add	sp, #12
 8002196:	bd90      	pop	{r4, r7, pc}

08002198 <master_ClearTXD>:

void master_ClearTXD(RS232_Master_Struct_t *rs232)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
    memset(&rs232->TXD,0,MASTER_TXRX_SIZE);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2218      	movs	r2, #24
 80021a4:	2100      	movs	r1, #0
 80021a6:	0018      	movs	r0, r3
 80021a8:	f009 fd3e 	bl	800bc28 <memset>
}
 80021ac:	46c0      	nop			; (mov r8, r8)
 80021ae:	46bd      	mov	sp, r7
 80021b0:	b002      	add	sp, #8
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <master_ClearRXD>:
void master_ClearRXD(RS232_Master_Struct_t *rs232)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
    memset(&rs232->RXD,0,MASTER_TXRX_SIZE);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	3318      	adds	r3, #24
 80021c0:	2218      	movs	r2, #24
 80021c2:	2100      	movs	r1, #0
 80021c4:	0018      	movs	r0, r3
 80021c6:	f009 fd2f 	bl	800bc28 <memset>
}
 80021ca:	46c0      	nop			; (mov r8, r8)
 80021cc:	46bd      	mov	sp, r7
 80021ce:	b002      	add	sp, #8
 80021d0:	bd80      	pop	{r7, pc}
	...

080021d4 <master_Handle>:

void master_Handle(RS232_Master_Struct_t *rs232){
 80021d4:	b590      	push	{r4, r7, lr}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]

	//nếu RX có nhận đc dữ liệu
	if(rs232->RXD.f_notify==1){
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	7e1b      	ldrb	r3, [r3, #24]
 80021e0:	2201      	movs	r2, #1
 80021e2:	4013      	ands	r3, r2
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d041      	beq.n	800226e <master_Handle+0x9a>
		rs232->RXD.f_notify=0;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	7e1a      	ldrb	r2, [r3, #24]
 80021ee:	2101      	movs	r1, #1
 80021f0:	438a      	bics	r2, r1
 80021f2:	761a      	strb	r2, [r3, #24]
		//debug_rs232("Rx->Slave[%x][%x][%x]",rs232->RXD.Addr,rs232->RXD.cmd,rs232->RXD.data);

		//phát hiện Slave nào đó gửi dữ liệu lên
		if(rs232->RXD.cmd != rs232->TXD.cmd){
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	7e5a      	ldrb	r2, [r3, #25]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	785b      	ldrb	r3, [r3, #1]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d01b      	beq.n	8002238 <master_Handle+0x64>
			/*Slave update dữ liệu lên nhưng ko bik Slave nào*/
			//.. kiểm tra slave Addr vào lưu lại dữ liệu
			if(callback_RxString!=0)
 8002200:	4b38      	ldr	r3, [pc, #224]	; (80022e4 <master_Handle+0x110>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d009      	beq.n	800221c <master_Handle+0x48>
				callback_RxString(_SLAVE_UPDATE,rs232->RXD.Addr,rs232->RXD.cmd,rs232->RXD.data);
 8002208:	4b36      	ldr	r3, [pc, #216]	; (80022e4 <master_Handle+0x110>)
 800220a:	681c      	ldr	r4, [r3, #0]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	7ed9      	ldrb	r1, [r3, #27]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	7e5a      	ldrb	r2, [r3, #25]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	7e9b      	ldrb	r3, [r3, #26]
 8002218:	2002      	movs	r0, #2
 800221a:	47a0      	blx	r4

			//trả lời lại y chang
			RS232LL_TxRequest(rs232->RXD.Addr, rs232->RXD.cmd, rs232->RXD.data);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	7ed8      	ldrb	r0, [r3, #27]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	7e59      	ldrb	r1, [r3, #25]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	7e9b      	ldrb	r3, [r3, #26]
 8002228:	001a      	movs	r2, r3
 800222a:	f000 ff6d 	bl	8003108 <RS232LL_TxRequest>

			master_ClearRXD(rs232);/*làm xong thì Xóa bộ đêm Rx đi*/
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	0018      	movs	r0, r3
 8002232:	f7ff ffbf 	bl	80021b4 <master_ClearRXD>
			return;
 8002236:	e051      	b.n	80022dc <master_Handle+0x108>
		}

		//ngược lại nếu lệnh gửi đi và lệnh nhận về giống nhau (cmd)
		/*tắt timer retry*/
		timer_stop(&rs232->TXD._timeout);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	3308      	adds	r3, #8
 800223c:	0018      	movs	r0, r3
 800223e:	f001 fe7b 	bl	8003f38 <timer_stop>
		/*Lấy dữ liệu trả lời từ Slave*/
		//.. kiểm tra slave Addr vào lưu lại dữ liệu
		if(callback_RxString!=0)
 8002242:	4b28      	ldr	r3, [pc, #160]	; (80022e4 <master_Handle+0x110>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d009      	beq.n	800225e <master_Handle+0x8a>
			callback_RxString(_SLAVE_REPLY,rs232->RXD.Addr,rs232->RXD.cmd,rs232->RXD.data);
 800224a:	4b26      	ldr	r3, [pc, #152]	; (80022e4 <master_Handle+0x110>)
 800224c:	681c      	ldr	r4, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	7ed9      	ldrb	r1, [r3, #27]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	7e5a      	ldrb	r2, [r3, #25]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	7e9b      	ldrb	r3, [r3, #26]
 800225a:	2001      	movs	r0, #1
 800225c:	47a0      	blx	r4

		//debug_rs232("Rx->Slave[%x][%x][%x]",rs232->TXD.Addr,rs232->TXD.cmd,rs232->TXD.data);

		//xử lý dữ liệu này
		master_ClearRXD(rs232);//xóa bộ đệm RXD cũ
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	0018      	movs	r0, r3
 8002262:	f7ff ffa7 	bl	80021b4 <master_ClearRXD>
		master_ClearTXD(rs232);//xóa bộ đệm TXD cũ
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	0018      	movs	r0, r3
 800226a:	f7ff ff95 	bl	8002198 <master_ClearTXD>
	}

	//tự động retry lệnh Tx cũ
	if(timer_expired(&rs232->TXD._timeout)){
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	3308      	adds	r3, #8
 8002272:	0018      	movs	r0, r3
 8002274:	f001 fe40 	bl	8003ef8 <timer_expired>
 8002278:	1e03      	subs	r3, r0, #0
 800227a:	d02f      	beq.n	80022dc <master_Handle+0x108>
		if(rs232->TXD.f_notify==0 || rs232->TXD.retry==0){
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	2201      	movs	r2, #1
 8002282:	4013      	ands	r3, r2
 8002284:	b2db      	uxtb	r3, r3
 8002286:	2b00      	cmp	r3, #0
 8002288:	d003      	beq.n	8002292 <master_Handle+0xbe>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	791b      	ldrb	r3, [r3, #4]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d109      	bne.n	80022a6 <master_Handle+0xd2>
			timer_stop(&rs232->TXD._timeout);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	3308      	adds	r3, #8
 8002296:	0018      	movs	r0, r3
 8002298:	f001 fe4e 	bl	8003f38 <timer_stop>
			master_ClearTXD(rs232);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	0018      	movs	r0, r3
 80022a0:	f7ff ff7a 	bl	8002198 <master_ClearTXD>
			return ;
 80022a4:	e01a      	b.n	80022dc <master_Handle+0x108>
		}
		timer_restart(&rs232->TXD._timeout);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	3308      	adds	r3, #8
 80022aa:	0018      	movs	r0, r3
 80022ac:	f001 fe12 	bl	8003ed4 <timer_restart>
		RS232LL_TxRequest(rs232->TXD.Addr,rs232->TXD.cmd,rs232->TXD.data);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	78d8      	ldrb	r0, [r3, #3]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	7859      	ldrb	r1, [r3, #1]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	789b      	ldrb	r3, [r3, #2]
 80022bc:	001a      	movs	r2, r3
 80022be:	f000 ff23 	bl	8003108 <RS232LL_TxRequest>
		if(--rs232->TXD.retry > _RETRY_RS232)rs232->TXD.retry=0;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	791b      	ldrb	r3, [r3, #4]
 80022c6:	3b01      	subs	r3, #1
 80022c8:	b2da      	uxtb	r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	711a      	strb	r2, [r3, #4]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	791b      	ldrb	r3, [r3, #4]
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d902      	bls.n	80022dc <master_Handle+0x108>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	711a      	strb	r2, [r3, #4]

		//debug_rs232("Tx[%u]->Slave[%x][%x][%x]",rs232->TXD.retry,rs232->TXD.Addr,rs232->TXD.cmd,rs232->TXD.data);
	}
}
 80022dc:	46bd      	mov	sp, r7
 80022de:	b003      	add	sp, #12
 80022e0:	bd90      	pop	{r4, r7, pc}
 80022e2:	46c0      	nop			; (mov r8, r8)
 80022e4:	20000170 	.word	0x20000170

080022e8 <LED1_BaseCtrl>:
static TIMER_t _timer_Debugv;
extern __IO Current_Shape_t Cur_Shape;

/*FUNCTIONS COMMON */
void LED1_BaseCtrl(uint8_t ON_OFF)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	0002      	movs	r2, r0
 80022f0:	1dfb      	adds	r3, r7, #7
 80022f2:	701a      	strb	r2, [r3, #0]
	if (ON_OFF)
 80022f4:	1dfb      	adds	r3, r7, #7
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d006      	beq.n	800230a <LED1_BaseCtrl+0x22>
		LED1_ON;
 80022fc:	4b08      	ldr	r3, [pc, #32]	; (8002320 <LED1_BaseCtrl+0x38>)
 80022fe:	2201      	movs	r2, #1
 8002300:	2108      	movs	r1, #8
 8002302:	0018      	movs	r0, r3
 8002304:	f004 ffbd 	bl	8007282 <HAL_GPIO_WritePin>
	else
		LED1_OFF;
}
 8002308:	e005      	b.n	8002316 <LED1_BaseCtrl+0x2e>
		LED1_OFF;
 800230a:	4b05      	ldr	r3, [pc, #20]	; (8002320 <LED1_BaseCtrl+0x38>)
 800230c:	2200      	movs	r2, #0
 800230e:	2108      	movs	r1, #8
 8002310:	0018      	movs	r0, r3
 8002312:	f004 ffb6 	bl	8007282 <HAL_GPIO_WritePin>
}
 8002316:	46c0      	nop			; (mov r8, r8)
 8002318:	46bd      	mov	sp, r7
 800231a:	b002      	add	sp, #8
 800231c:	bd80      	pop	{r7, pc}
 800231e:	46c0      	nop			; (mov r8, r8)
 8002320:	50000800 	.word	0x50000800

08002324 <LED2_BaseCtrl>:

void LED2_BaseCtrl(uint8_t ON_OFF)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	0002      	movs	r2, r0
 800232c:	1dfb      	adds	r3, r7, #7
 800232e:	701a      	strb	r2, [r3, #0]
	if (ON_OFF)
 8002330:	1dfb      	adds	r3, r7, #7
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d006      	beq.n	8002346 <LED2_BaseCtrl+0x22>
		LED2_ON;
 8002338:	4b08      	ldr	r3, [pc, #32]	; (800235c <LED2_BaseCtrl+0x38>)
 800233a:	2201      	movs	r2, #1
 800233c:	2102      	movs	r1, #2
 800233e:	0018      	movs	r0, r3
 8002340:	f004 ff9f 	bl	8007282 <HAL_GPIO_WritePin>
	else
		LED2_OFF;
}
 8002344:	e005      	b.n	8002352 <LED2_BaseCtrl+0x2e>
		LED2_OFF;
 8002346:	4b05      	ldr	r3, [pc, #20]	; (800235c <LED2_BaseCtrl+0x38>)
 8002348:	2200      	movs	r2, #0
 800234a:	2102      	movs	r1, #2
 800234c:	0018      	movs	r0, r3
 800234e:	f004 ff98 	bl	8007282 <HAL_GPIO_WritePin>
}
 8002352:	46c0      	nop			; (mov r8, r8)
 8002354:	46bd      	mov	sp, r7
 8002356:	b002      	add	sp, #8
 8002358:	bd80      	pop	{r7, pc}
 800235a:	46c0      	nop			; (mov r8, r8)
 800235c:	50000800 	.word	0x50000800

08002360 <BUZ_BaseCtrl>:

void BUZ_BaseCtrl(uint8_t ON_OFF)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	0002      	movs	r2, r0
 8002368:	1dfb      	adds	r3, r7, #7
 800236a:	701a      	strb	r2, [r3, #0]
	if (ON_OFF)
 800236c:	1dfb      	adds	r3, r7, #7
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d006      	beq.n	8002382 <BUZ_BaseCtrl+0x22>
		BUZ_ON;
 8002374:	4b08      	ldr	r3, [pc, #32]	; (8002398 <BUZ_BaseCtrl+0x38>)
 8002376:	2201      	movs	r2, #1
 8002378:	2104      	movs	r1, #4
 800237a:	0018      	movs	r0, r3
 800237c:	f004 ff81 	bl	8007282 <HAL_GPIO_WritePin>
	else
		BUZ_OFF;
}
 8002380:	e005      	b.n	800238e <BUZ_BaseCtrl+0x2e>
		BUZ_OFF;
 8002382:	4b05      	ldr	r3, [pc, #20]	; (8002398 <BUZ_BaseCtrl+0x38>)
 8002384:	2200      	movs	r2, #0
 8002386:	2104      	movs	r1, #4
 8002388:	0018      	movs	r0, r3
 800238a:	f004 ff7a 	bl	8007282 <HAL_GPIO_WritePin>
}
 800238e:	46c0      	nop			; (mov r8, r8)
 8002390:	46bd      	mov	sp, r7
 8002392:	b002      	add	sp, #8
 8002394:	bd80      	pop	{r7, pc}
 8002396:	46c0      	nop			; (mov r8, r8)
 8002398:	50000800 	.word	0x50000800

0800239c <AF_RLCOM_BaseCtrl>:
void AF_RLCOM_BaseCtrl(uint8_t ON_OFF)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	0002      	movs	r2, r0
 80023a4:	1dfb      	adds	r3, r7, #7
 80023a6:	701a      	strb	r2, [r3, #0]
	if (ON_OFF)
 80023a8:	1dfb      	adds	r3, r7, #7
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d007      	beq.n	80023c0 <AF_RLCOM_BaseCtrl+0x24>
		RL_COM_ON;
 80023b0:	2380      	movs	r3, #128	; 0x80
 80023b2:	015b      	lsls	r3, r3, #5
 80023b4:	4808      	ldr	r0, [pc, #32]	; (80023d8 <AF_RLCOM_BaseCtrl+0x3c>)
 80023b6:	2201      	movs	r2, #1
 80023b8:	0019      	movs	r1, r3
 80023ba:	f004 ff62 	bl	8007282 <HAL_GPIO_WritePin>
	else
		RL_COM_OFF;
}
 80023be:	e006      	b.n	80023ce <AF_RLCOM_BaseCtrl+0x32>
		RL_COM_OFF;
 80023c0:	2380      	movs	r3, #128	; 0x80
 80023c2:	015b      	lsls	r3, r3, #5
 80023c4:	4804      	ldr	r0, [pc, #16]	; (80023d8 <AF_RLCOM_BaseCtrl+0x3c>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	0019      	movs	r1, r3
 80023ca:	f004 ff5a 	bl	8007282 <HAL_GPIO_WritePin>
}
 80023ce:	46c0      	nop			; (mov r8, r8)
 80023d0:	46bd      	mov	sp, r7
 80023d2:	b002      	add	sp, #8
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	46c0      	nop			; (mov r8, r8)
 80023d8:	50000400 	.word	0x50000400

080023dc <AF_WHIRL_BaseCtrl>:
	else
		FET_SOL_AF_OFF;
}

void AF_WHIRL_BaseCtrl(uint8_t ON_OFF)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	0002      	movs	r2, r0
 80023e4:	1dfb      	adds	r3, r7, #7
 80023e6:	701a      	strb	r2, [r3, #0]
	if (ON_OFF)
 80023e8:	1dfb      	adds	r3, r7, #7
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d006      	beq.n	80023fe <AF_WHIRL_BaseCtrl+0x22>
		RL_WHIRL_On;
 80023f0:	4b08      	ldr	r3, [pc, #32]	; (8002414 <AF_WHIRL_BaseCtrl+0x38>)
 80023f2:	2201      	movs	r2, #1
 80023f4:	2102      	movs	r1, #2
 80023f6:	0018      	movs	r0, r3
 80023f8:	f004 ff43 	bl	8007282 <HAL_GPIO_WritePin>
	else
		RL_WHIRL_Off;
}
 80023fc:	e005      	b.n	800240a <AF_WHIRL_BaseCtrl+0x2e>
		RL_WHIRL_Off;
 80023fe:	4b05      	ldr	r3, [pc, #20]	; (8002414 <AF_WHIRL_BaseCtrl+0x38>)
 8002400:	2200      	movs	r2, #0
 8002402:	2102      	movs	r1, #2
 8002404:	0018      	movs	r0, r3
 8002406:	f004 ff3c 	bl	8007282 <HAL_GPIO_WritePin>
}
 800240a:	46c0      	nop			; (mov r8, r8)
 800240c:	46bd      	mov	sp, r7
 800240e:	b002      	add	sp, #8
 8002410:	bd80      	pop	{r7, pc}
 8002412:	46c0      	nop			; (mov r8, r8)
 8002414:	50000400 	.word	0x50000400

08002418 <AF_DRAIN_BaseCtrl>:

void AF_DRAIN_BaseCtrl(uint8_t ON_OFF)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	0002      	movs	r2, r0
 8002420:	1dfb      	adds	r3, r7, #7
 8002422:	701a      	strb	r2, [r3, #0]
	if (ON_OFF)
 8002424:	1dfb      	adds	r3, r7, #7
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d006      	beq.n	800243a <AF_DRAIN_BaseCtrl+0x22>
		RL_DRAIN_On;
 800242c:	4b08      	ldr	r3, [pc, #32]	; (8002450 <AF_DRAIN_BaseCtrl+0x38>)
 800242e:	2201      	movs	r2, #1
 8002430:	2101      	movs	r1, #1
 8002432:	0018      	movs	r0, r3
 8002434:	f004 ff25 	bl	8007282 <HAL_GPIO_WritePin>
	else
		RL_DRAIN_Off;
}
 8002438:	e005      	b.n	8002446 <AF_DRAIN_BaseCtrl+0x2e>
		RL_DRAIN_Off;
 800243a:	4b05      	ldr	r3, [pc, #20]	; (8002450 <AF_DRAIN_BaseCtrl+0x38>)
 800243c:	2200      	movs	r2, #0
 800243e:	2101      	movs	r1, #1
 8002440:	0018      	movs	r0, r3
 8002442:	f004 ff1e 	bl	8007282 <HAL_GPIO_WritePin>
}
 8002446:	46c0      	nop			; (mov r8, r8)
 8002448:	46bd      	mov	sp, r7
 800244a:	b002      	add	sp, #8
 800244c:	bd80      	pop	{r7, pc}
 800244e:	46c0      	nop			; (mov r8, r8)
 8002450:	50000400 	.word	0x50000400

08002454 <ST_RLOldSS_BaseCtrl>:

void ST_RLOldSS_BaseCtrl(uint8_t ON_OFF)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	0002      	movs	r2, r0
 800245c:	1dfb      	adds	r3, r7, #7
 800245e:	701a      	strb	r2, [r3, #0]
	if (ON_OFF)
 8002460:	1dfb      	adds	r3, r7, #7
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d007      	beq.n	8002478 <ST_RLOldSS_BaseCtrl+0x24>
		RL_SS_STEAM_ON;
 8002468:	23a0      	movs	r3, #160	; 0xa0
 800246a:	05db      	lsls	r3, r3, #23
 800246c:	2201      	movs	r2, #1
 800246e:	2180      	movs	r1, #128	; 0x80
 8002470:	0018      	movs	r0, r3
 8002472:	f004 ff06 	bl	8007282 <HAL_GPIO_WritePin>
	else
		RL_SS_STEAM_OFF;
}
 8002476:	e006      	b.n	8002486 <ST_RLOldSS_BaseCtrl+0x32>
		RL_SS_STEAM_OFF;
 8002478:	23a0      	movs	r3, #160	; 0xa0
 800247a:	05db      	lsls	r3, r3, #23
 800247c:	2200      	movs	r2, #0
 800247e:	2180      	movs	r1, #128	; 0x80
 8002480:	0018      	movs	r0, r3
 8002482:	f004 fefe 	bl	8007282 <HAL_GPIO_WritePin>
}
 8002486:	46c0      	nop			; (mov r8, r8)
 8002488:	46bd      	mov	sp, r7
 800248a:	b002      	add	sp, #8
 800248c:	bd80      	pop	{r7, pc}
	...

08002490 <ST_AIRPUMP_BaseCtrl>:
	else
		FET_SOL_STEAM_OFF;
}

void ST_AIRPUMP_BaseCtrl(uint8_t ON_OFF)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	0002      	movs	r2, r0
 8002498:	1dfb      	adds	r3, r7, #7
 800249a:	701a      	strb	r2, [r3, #0]
	if (ON_OFF)
 800249c:	1dfb      	adds	r3, r7, #7
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d006      	beq.n	80024b2 <ST_AIRPUMP_BaseCtrl+0x22>
		RL_AIR_ON;
 80024a4:	4b08      	ldr	r3, [pc, #32]	; (80024c8 <ST_AIRPUMP_BaseCtrl+0x38>)
 80024a6:	2201      	movs	r2, #1
 80024a8:	2104      	movs	r1, #4
 80024aa:	0018      	movs	r0, r3
 80024ac:	f004 fee9 	bl	8007282 <HAL_GPIO_WritePin>
	else
		RL_AIR_OFF;
}
 80024b0:	e005      	b.n	80024be <ST_AIRPUMP_BaseCtrl+0x2e>
		RL_AIR_OFF;
 80024b2:	4b05      	ldr	r3, [pc, #20]	; (80024c8 <ST_AIRPUMP_BaseCtrl+0x38>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	2104      	movs	r1, #4
 80024b8:	0018      	movs	r0, r3
 80024ba:	f004 fee2 	bl	8007282 <HAL_GPIO_WritePin>
}
 80024be:	46c0      	nop			; (mov r8, r8)
 80024c0:	46bd      	mov	sp, r7
 80024c2:	b002      	add	sp, #8
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	46c0      	nop			; (mov r8, r8)
 80024c8:	50000400 	.word	0x50000400

080024cc <init_MCU_TIM>:
	else
		RL_STEAM100_OFF;
}
//=============================================FUNCTIONS INIT MCU ========================*/
void init_MCU_TIM()
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&_USER_DEFINE_TIM_DIMER_TRIAC);
 80024d0:	4b03      	ldr	r3, [pc, #12]	; (80024e0 <init_MCU_TIM+0x14>)
 80024d2:	0018      	movs	r0, r3
 80024d4:	f006 fa3e 	bl	8008954 <HAL_TIM_Base_Start_IT>
}
 80024d8:	46c0      	nop			; (mov r8, r8)
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	46c0      	nop			; (mov r8, r8)
 80024e0:	20000870 	.word	0x20000870

080024e4 <CtrlRLAC_periodic_poll>:
{
	*out_MAC = Flash_ReadDWord(ADR);
}

void CtrlRLAC_periodic_poll(__IO uint16_t AC_Zero_point, __IO uint8_t RLAC_Manager_Var)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	0002      	movs	r2, r0
 80024ec:	1dbb      	adds	r3, r7, #6
 80024ee:	801a      	strh	r2, [r3, #0]
 80024f0:	1d7b      	adds	r3, r7, #5
 80024f2:	1c0a      	adds	r2, r1, #0
 80024f4:	701a      	strb	r2, [r3, #0]
//	if (AC_Zero_point != ZeroPulse_delay)
//		return;
	AF_WHIRL_BaseCtrl(rbi(RLAC_Manager_Var, _RLWHIRL_Bit));
 80024f6:	1d7b      	adds	r3, r7, #5
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	085b      	lsrs	r3, r3, #1
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	2201      	movs	r2, #1
 8002502:	4013      	ands	r3, r2
 8002504:	b2db      	uxtb	r3, r3
 8002506:	0018      	movs	r0, r3
 8002508:	f7ff ff68 	bl	80023dc <AF_WHIRL_BaseCtrl>
	AF_DRAIN_BaseCtrl(rbi(RLAC_Manager_Var, _RLDRAIN_Bit));
 800250c:	1d7b      	adds	r3, r7, #5
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	b2db      	uxtb	r3, r3
 8002512:	089b      	lsrs	r3, r3, #2
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2201      	movs	r2, #1
 8002518:	4013      	ands	r3, r2
 800251a:	b2db      	uxtb	r3, r3
 800251c:	0018      	movs	r0, r3
 800251e:	f7ff ff7b 	bl	8002418 <AF_DRAIN_BaseCtrl>
	ST_AIRPUMP_BaseCtrl(rbi(RLAC_Manager_Var, _RLAIR_Bit));
 8002522:	1d7b      	adds	r3, r7, #5
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	b2db      	uxtb	r3, r3
 8002528:	08db      	lsrs	r3, r3, #3
 800252a:	b2db      	uxtb	r3, r3
 800252c:	2201      	movs	r2, #1
 800252e:	4013      	ands	r3, r2
 8002530:	b2db      	uxtb	r3, r3
 8002532:	0018      	movs	r0, r3
 8002534:	f7ff ffac 	bl	8002490 <ST_AIRPUMP_BaseCtrl>
}
 8002538:	46c0      	nop			; (mov r8, r8)
 800253a:	46bd      	mov	sp, r7
 800253c:	b002      	add	sp, #8
 800253e:	bd80      	pop	{r7, pc}

08002540 <init_MCU_UART>:
/****
 * Description : hàm khởi tạo Uart , sử dụng define để chỉ khởi tạo Uart nào cần dùng
 * Postion : đặt trong trước while(1)
 */
void init_MCU_UART(UART_HandleTypeDef *huart)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
		__HAL_UART_ENABLE_IT(&huart2, UART_IT_TC);
	}
#endif

#ifdef _INIT_USE_UART3
	if (huart->Instance == huart3.Instance)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	4b20      	ldr	r3, [pc, #128]	; (80025d0 <init_MCU_UART+0x90>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	429a      	cmp	r2, r3
 8002552:	d119      	bne.n	8002588 <init_MCU_UART+0x48>
	{
		HAL_UART_Init(&huart3);
 8002554:	4b1e      	ldr	r3, [pc, #120]	; (80025d0 <init_MCU_UART+0x90>)
 8002556:	0018      	movs	r0, r3
 8002558:	f007 fa30 	bl	80099bc <HAL_UART_Init>
		HAL_UART_Receive_IT(&huart3, &Uart3_RX, 1);
 800255c:	491d      	ldr	r1, [pc, #116]	; (80025d4 <init_MCU_UART+0x94>)
 800255e:	4b1c      	ldr	r3, [pc, #112]	; (80025d0 <init_MCU_UART+0x90>)
 8002560:	2201      	movs	r2, #1
 8002562:	0018      	movs	r0, r3
 8002564:	f007 fb3c 	bl	8009be0 <HAL_UART_Receive_IT>
		__HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 8002568:	4b19      	ldr	r3, [pc, #100]	; (80025d0 <init_MCU_UART+0x90>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	4b18      	ldr	r3, [pc, #96]	; (80025d0 <init_MCU_UART+0x90>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2120      	movs	r1, #32
 8002574:	430a      	orrs	r2, r1
 8002576:	601a      	str	r2, [r3, #0]
		__HAL_UART_ENABLE_IT(&huart3, UART_IT_TC);
 8002578:	4b15      	ldr	r3, [pc, #84]	; (80025d0 <init_MCU_UART+0x90>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	4b14      	ldr	r3, [pc, #80]	; (80025d0 <init_MCU_UART+0x90>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2140      	movs	r1, #64	; 0x40
 8002584:	430a      	orrs	r2, r1
 8002586:	601a      	str	r2, [r3, #0]
	}
#endif

#ifdef _INIT_USE_UART4
	if (huart->Instance == huart4.Instance)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	4b12      	ldr	r3, [pc, #72]	; (80025d8 <init_MCU_UART+0x98>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	429a      	cmp	r2, r3
 8002592:	d119      	bne.n	80025c8 <init_MCU_UART+0x88>
	{
		HAL_UART_Init(&huart4);
 8002594:	4b10      	ldr	r3, [pc, #64]	; (80025d8 <init_MCU_UART+0x98>)
 8002596:	0018      	movs	r0, r3
 8002598:	f007 fa10 	bl	80099bc <HAL_UART_Init>
		HAL_UART_Receive_IT(&huart4, &Uart4_RX, 1);
 800259c:	490f      	ldr	r1, [pc, #60]	; (80025dc <init_MCU_UART+0x9c>)
 800259e:	4b0e      	ldr	r3, [pc, #56]	; (80025d8 <init_MCU_UART+0x98>)
 80025a0:	2201      	movs	r2, #1
 80025a2:	0018      	movs	r0, r3
 80025a4:	f007 fb1c 	bl	8009be0 <HAL_UART_Receive_IT>
		__HAL_UART_ENABLE_IT(&huart4, UART_IT_RXNE);
 80025a8:	4b0b      	ldr	r3, [pc, #44]	; (80025d8 <init_MCU_UART+0x98>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	4b0a      	ldr	r3, [pc, #40]	; (80025d8 <init_MCU_UART+0x98>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2120      	movs	r1, #32
 80025b4:	430a      	orrs	r2, r1
 80025b6:	601a      	str	r2, [r3, #0]
		__HAL_UART_ENABLE_IT(&huart4, UART_IT_TC);
 80025b8:	4b07      	ldr	r3, [pc, #28]	; (80025d8 <init_MCU_UART+0x98>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	4b06      	ldr	r3, [pc, #24]	; (80025d8 <init_MCU_UART+0x98>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2140      	movs	r1, #64	; 0x40
 80025c4:	430a      	orrs	r2, r1
 80025c6:	601a      	str	r2, [r3, #0]
	}
#endif
}
 80025c8:	46c0      	nop			; (mov r8, r8)
 80025ca:	46bd      	mov	sp, r7
 80025cc:	b002      	add	sp, #8
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	20000420 	.word	0x20000420
 80025d4:	20000327 	.word	0x20000327
 80025d8:	20000704 	.word	0x20000704
 80025dc:	20000326 	.word	0x20000326

080025e0 <init_MCU_ADC1_DMA>:
 * Description:	Ham khoi tao DMA of ADC
 * Param : 		none
 * Postion:		truoc While
 */
void init_MCU_ADC1_DMA()
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
	if (HAL_ADCEx_Calibration_Start(&hadc1) != HAL_OK)
 80025e4:	4b0a      	ldr	r3, [pc, #40]	; (8002610 <init_MCU_ADC1_DMA+0x30>)
 80025e6:	0018      	movs	r0, r3
 80025e8:	f003 ffd0 	bl	800658c <HAL_ADCEx_Calibration_Start>
 80025ec:	1e03      	subs	r3, r0, #0
 80025ee:	d001      	beq.n	80025f4 <init_MCU_ADC1_DMA+0x14>
		Error_Handler();
 80025f0:	f002 fa4a 	bl	8004a88 <Error_Handler>
	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ADC_Arr, _ID_ADC_TOTAL) != HAL_OK)
 80025f4:	4907      	ldr	r1, [pc, #28]	; (8002614 <init_MCU_ADC1_DMA+0x34>)
 80025f6:	4b06      	ldr	r3, [pc, #24]	; (8002610 <init_MCU_ADC1_DMA+0x30>)
 80025f8:	2204      	movs	r2, #4
 80025fa:	0018      	movs	r0, r3
 80025fc:	f003 fa3e 	bl	8005a7c <HAL_ADC_Start_DMA>
 8002600:	1e03      	subs	r3, r0, #0
 8002602:	d001      	beq.n	8002608 <init_MCU_ADC1_DMA+0x28>
		Error_Handler();
 8002604:	f002 fa40 	bl	8004a88 <Error_Handler>
}
 8002608:	46c0      	nop			; (mov r8, r8)
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	46c0      	nop			; (mov r8, r8)
 8002610:	20000558 	.word	0x20000558
 8002614:	20000130 	.word	0x20000130

08002618 <uart3_putc>:
}
#endif

#ifdef _INIT_USE_UART3
int uart3_putc(char c)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	0002      	movs	r2, r0
 8002620:	1dfb      	adds	r3, r7, #7
 8002622:	701a      	strb	r2, [r3, #0]
	uint32_t start_stick;

	start_stick = HAL_GetTick();
 8002624:	f002 feda 	bl	80053dc <HAL_GetTick>
 8002628:	0003      	movs	r3, r0
 800262a:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit_IT(&huart3, (uint8_t *)&c, 1);
 800262c:	1df9      	adds	r1, r7, #7
 800262e:	4b0e      	ldr	r3, [pc, #56]	; (8002668 <uart3_putc+0x50>)
 8002630:	2201      	movs	r2, #1
 8002632:	0018      	movs	r0, r3
 8002634:	f007 fa18 	bl	8009a68 <HAL_UART_Transmit_IT>
	while (Uart3_Ready != SET)
 8002638:	e006      	b.n	8002648 <uart3_putc+0x30>
	{
		if ((HAL_GetTick() - start_stick) > 100 /*ms*/)
 800263a:	f002 fecf 	bl	80053dc <HAL_GetTick>
 800263e:	0002      	movs	r2, r0
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	2b64      	cmp	r3, #100	; 0x64
 8002646:	d805      	bhi.n	8002654 <uart3_putc+0x3c>
	while (Uart3_Ready != SET)
 8002648:	4b08      	ldr	r3, [pc, #32]	; (800266c <uart3_putc+0x54>)
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b01      	cmp	r3, #1
 8002650:	d1f3      	bne.n	800263a <uart3_putc+0x22>
 8002652:	e000      	b.n	8002656 <uart3_putc+0x3e>
			break;
 8002654:	46c0      	nop			; (mov r8, r8)
	}
	Uart3_Ready = RESET;
 8002656:	4b05      	ldr	r3, [pc, #20]	; (800266c <uart3_putc+0x54>)
 8002658:	2200      	movs	r2, #0
 800265a:	701a      	strb	r2, [r3, #0]
	return ((int)c);
 800265c:	1dfb      	adds	r3, r7, #7
 800265e:	781b      	ldrb	r3, [r3, #0]
}
 8002660:	0018      	movs	r0, r3
 8002662:	46bd      	mov	sp, r7
 8002664:	b004      	add	sp, #16
 8002666:	bd80      	pop	{r7, pc}
 8002668:	20000420 	.word	0x20000420
 800266c:	200000b4 	.word	0x200000b4

08002670 <uart3_puts>:

int uart3_puts(char *s)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
	uint32_t start_stick;

	start_stick = HAL_GetTick();
 8002678:	f002 feb0 	bl	80053dc <HAL_GetTick>
 800267c:	0003      	movs	r3, r0
 800267e:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit_IT(&huart3, (uint8_t *)s, strlen(s));
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	0018      	movs	r0, r3
 8002684:	f7fd fd3c 	bl	8000100 <strlen>
 8002688:	0003      	movs	r3, r0
 800268a:	b29a      	uxth	r2, r3
 800268c:	6879      	ldr	r1, [r7, #4]
 800268e:	4b0f      	ldr	r3, [pc, #60]	; (80026cc <uart3_puts+0x5c>)
 8002690:	0018      	movs	r0, r3
 8002692:	f007 f9e9 	bl	8009a68 <HAL_UART_Transmit_IT>
	while (Uart3_Ready != SET)
 8002696:	e006      	b.n	80026a6 <uart3_puts+0x36>
	{
		if ((HAL_GetTick() - start_stick) > 100 /*ms*/)
 8002698:	f002 fea0 	bl	80053dc <HAL_GetTick>
 800269c:	0002      	movs	r2, r0
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b64      	cmp	r3, #100	; 0x64
 80026a4:	d805      	bhi.n	80026b2 <uart3_puts+0x42>
	while (Uart3_Ready != SET)
 80026a6:	4b0a      	ldr	r3, [pc, #40]	; (80026d0 <uart3_puts+0x60>)
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d1f3      	bne.n	8002698 <uart3_puts+0x28>
 80026b0:	e000      	b.n	80026b4 <uart3_puts+0x44>
			break;
 80026b2:	46c0      	nop			; (mov r8, r8)
	}
	Uart3_Ready = RESET;
 80026b4:	4b06      	ldr	r3, [pc, #24]	; (80026d0 <uart3_puts+0x60>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	701a      	strb	r2, [r3, #0]
	return strlen(s);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	0018      	movs	r0, r3
 80026be:	f7fd fd1f 	bl	8000100 <strlen>
 80026c2:	0003      	movs	r3, r0
}
 80026c4:	0018      	movs	r0, r3
 80026c6:	46bd      	mov	sp, r7
 80026c8:	b004      	add	sp, #16
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	20000420 	.word	0x20000420
 80026d0:	200000b4 	.word	0x200000b4

080026d4 <uart4_putc>:
#endif

#ifdef _INIT_USE_UART4
int uart4_putc(char c)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	0002      	movs	r2, r0
 80026dc:	1dfb      	adds	r3, r7, #7
 80026de:	701a      	strb	r2, [r3, #0]
	uint32_t start_stick;

	start_stick = HAL_GetTick();
 80026e0:	f002 fe7c 	bl	80053dc <HAL_GetTick>
 80026e4:	0003      	movs	r3, r0
 80026e6:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit_IT(&huart4, (uint8_t *)&c, 1);
 80026e8:	1df9      	adds	r1, r7, #7
 80026ea:	4b0e      	ldr	r3, [pc, #56]	; (8002724 <uart4_putc+0x50>)
 80026ec:	2201      	movs	r2, #1
 80026ee:	0018      	movs	r0, r3
 80026f0:	f007 f9ba 	bl	8009a68 <HAL_UART_Transmit_IT>
	while (Uart4_Ready != SET)
 80026f4:	e006      	b.n	8002704 <uart4_putc+0x30>
	{
		if ((HAL_GetTick() - start_stick) > 100 /*ms*/)
 80026f6:	f002 fe71 	bl	80053dc <HAL_GetTick>
 80026fa:	0002      	movs	r2, r0
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	2b64      	cmp	r3, #100	; 0x64
 8002702:	d805      	bhi.n	8002710 <uart4_putc+0x3c>
	while (Uart4_Ready != SET)
 8002704:	4b08      	ldr	r3, [pc, #32]	; (8002728 <uart4_putc+0x54>)
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	b2db      	uxtb	r3, r3
 800270a:	2b01      	cmp	r3, #1
 800270c:	d1f3      	bne.n	80026f6 <uart4_putc+0x22>
 800270e:	e000      	b.n	8002712 <uart4_putc+0x3e>
			break;
 8002710:	46c0      	nop			; (mov r8, r8)
	}
	Uart4_Ready = RESET;
 8002712:	4b05      	ldr	r3, [pc, #20]	; (8002728 <uart4_putc+0x54>)
 8002714:	2200      	movs	r2, #0
 8002716:	701a      	strb	r2, [r3, #0]
	return ((int)c);
 8002718:	1dfb      	adds	r3, r7, #7
 800271a:	781b      	ldrb	r3, [r3, #0]
}
 800271c:	0018      	movs	r0, r3
 800271e:	46bd      	mov	sp, r7
 8002720:	b004      	add	sp, #16
 8002722:	bd80      	pop	{r7, pc}
 8002724:	20000704 	.word	0x20000704
 8002728:	200000b5 	.word	0x200000b5

0800272c <uart4_puts>:

int uart4_puts(char *s)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
	uint32_t start_stick;

	start_stick = HAL_GetTick();
 8002734:	f002 fe52 	bl	80053dc <HAL_GetTick>
 8002738:	0003      	movs	r3, r0
 800273a:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit_IT(&huart4, (uint8_t *)s, strlen(s));
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	0018      	movs	r0, r3
 8002740:	f7fd fcde 	bl	8000100 <strlen>
 8002744:	0003      	movs	r3, r0
 8002746:	b29a      	uxth	r2, r3
 8002748:	6879      	ldr	r1, [r7, #4]
 800274a:	4b0f      	ldr	r3, [pc, #60]	; (8002788 <uart4_puts+0x5c>)
 800274c:	0018      	movs	r0, r3
 800274e:	f007 f98b 	bl	8009a68 <HAL_UART_Transmit_IT>
	while (Uart4_Ready != SET)
 8002752:	e006      	b.n	8002762 <uart4_puts+0x36>
	{
		if ((HAL_GetTick() - start_stick) > 100 /*ms*/)
 8002754:	f002 fe42 	bl	80053dc <HAL_GetTick>
 8002758:	0002      	movs	r2, r0
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b64      	cmp	r3, #100	; 0x64
 8002760:	d805      	bhi.n	800276e <uart4_puts+0x42>
	while (Uart4_Ready != SET)
 8002762:	4b0a      	ldr	r3, [pc, #40]	; (800278c <uart4_puts+0x60>)
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	b2db      	uxtb	r3, r3
 8002768:	2b01      	cmp	r3, #1
 800276a:	d1f3      	bne.n	8002754 <uart4_puts+0x28>
 800276c:	e000      	b.n	8002770 <uart4_puts+0x44>
			break;
 800276e:	46c0      	nop			; (mov r8, r8)
	}
	Uart4_Ready = RESET;
 8002770:	4b06      	ldr	r3, [pc, #24]	; (800278c <uart4_puts+0x60>)
 8002772:	2200      	movs	r2, #0
 8002774:	701a      	strb	r2, [r3, #0]
	return strlen(s);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	0018      	movs	r0, r3
 800277a:	f7fd fcc1 	bl	8000100 <strlen>
 800277e:	0003      	movs	r3, r0
}
 8002780:	0018      	movs	r0, r3
 8002782:	46bd      	mov	sp, r7
 8002784:	b004      	add	sp, #16
 8002786:	bd80      	pop	{r7, pc}
 8002788:	20000704 	.word	0x20000704
 800278c:	200000b5 	.word	0x200000b5

08002790 <HAL_UART_TxCpltCallback>:
 * Description : hàm Interrupt Tx Uart (khi có sự kiện ngắt Tx Uart nào đó đều nhảy vào đây thực hiện)
 * Param : tham số là con trỏ huart
 * Postion : ở đây
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart2.Instance)
		Uart2_Ready = SET;
#endif

#ifdef _INIT_USE_UART3
	if (huart->Instance == huart3.Instance)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	4b09      	ldr	r3, [pc, #36]	; (80027c4 <HAL_UART_TxCpltCallback+0x34>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d102      	bne.n	80027aa <HAL_UART_TxCpltCallback+0x1a>
		Uart3_Ready = SET;
 80027a4:	4b08      	ldr	r3, [pc, #32]	; (80027c8 <HAL_UART_TxCpltCallback+0x38>)
 80027a6:	2201      	movs	r2, #1
 80027a8:	701a      	strb	r2, [r3, #0]
#endif

#ifdef _INIT_USE_UART4
	if (huart->Instance == huart4.Instance)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	4b07      	ldr	r3, [pc, #28]	; (80027cc <HAL_UART_TxCpltCallback+0x3c>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d102      	bne.n	80027bc <HAL_UART_TxCpltCallback+0x2c>
		Uart4_Ready = SET;
 80027b6:	4b06      	ldr	r3, [pc, #24]	; (80027d0 <HAL_UART_TxCpltCallback+0x40>)
 80027b8:	2201      	movs	r2, #1
 80027ba:	701a      	strb	r2, [r3, #0]
#endif
}
 80027bc:	46c0      	nop			; (mov r8, r8)
 80027be:	46bd      	mov	sp, r7
 80027c0:	b002      	add	sp, #8
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	20000420 	.word	0x20000420
 80027c8:	200000b4 	.word	0x200000b4
 80027cc:	20000704 	.word	0x20000704
 80027d0:	200000b5 	.word	0x200000b5

080027d4 <HAL_UART_RxCpltCallback>:
 * @brief  Rx Transfer completed callback.
 * @param  huart UART handle.
 * @retval None
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
		HAL_UART_Receive_IT(&huart2, &Uart2_RX, 1);
	}
#endif

#ifdef _INIT_USE_UART3
	if (huart->Instance == _USER_DEFINE_UART_BLEHC05.Instance)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	4b10      	ldr	r3, [pc, #64]	; (8002824 <HAL_UART_RxCpltCallback+0x50>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d105      	bne.n	80027f4 <HAL_UART_RxCpltCallback+0x20>
	{
		HAL_UART_Receive_IT(&_USER_DEFINE_UART_BLEHC05, &Uart3_RX, 1);
 80027e8:	490f      	ldr	r1, [pc, #60]	; (8002828 <HAL_UART_RxCpltCallback+0x54>)
 80027ea:	4b0e      	ldr	r3, [pc, #56]	; (8002824 <HAL_UART_RxCpltCallback+0x50>)
 80027ec:	2201      	movs	r2, #1
 80027ee:	0018      	movs	r0, r3
 80027f0:	f007 f9f6 	bl	8009be0 <HAL_UART_Receive_IT>
	}
#endif

#ifdef _INIT_USE_UART4
	if (huart->Instance == _USER_DEFINE_UART_RS232.Instance)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	4b0c      	ldr	r3, [pc, #48]	; (800282c <HAL_UART_RxCpltCallback+0x58>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d10c      	bne.n	800281a <HAL_UART_RxCpltCallback+0x46>
	{
		HAL_UART_Receive_IT(&_USER_DEFINE_UART_RS232, &Uart4_RX, 1);
 8002800:	490b      	ldr	r1, [pc, #44]	; (8002830 <HAL_UART_RxCpltCallback+0x5c>)
 8002802:	4b0a      	ldr	r3, [pc, #40]	; (800282c <HAL_UART_RxCpltCallback+0x58>)
 8002804:	2201      	movs	r2, #1
 8002806:	0018      	movs	r0, r3
 8002808:	f007 f9ea 	bl	8009be0 <HAL_UART_Receive_IT>
		get_string_get_input(&Uart4_StrBuff, Uart4_RX);
 800280c:	4b08      	ldr	r3, [pc, #32]	; (8002830 <HAL_UART_RxCpltCallback+0x5c>)
 800280e:	781a      	ldrb	r2, [r3, #0]
 8002810:	4b08      	ldr	r3, [pc, #32]	; (8002834 <HAL_UART_RxCpltCallback+0x60>)
 8002812:	0011      	movs	r1, r2
 8002814:	0018      	movs	r0, r3
 8002816:	f7ff fb1d 	bl	8001e54 <get_string_get_input>
	}
#endif
}
 800281a:	46c0      	nop			; (mov r8, r8)
 800281c:	46bd      	mov	sp, r7
 800281e:	b002      	add	sp, #8
 8002820:	bd80      	pop	{r7, pc}
 8002822:	46c0      	nop			; (mov r8, r8)
 8002824:	20000420 	.word	0x20000420
 8002828:	20000327 	.word	0x20000327
 800282c:	20000704 	.word	0x20000704
 8002830:	20000326 	.word	0x20000326
 8002834:	200003c4 	.word	0x200003c4

08002838 <HAL_ADC_ConvCpltCallback>:
 * @brief  Conversion complete callback in non-blocking mode.
 * @param hadc ADC handle
 * @retval None
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
	//~170 us
	if (hadc->Instance == hadc1.Instance)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	4b06      	ldr	r3, [pc, #24]	; (8002860 <HAL_ADC_ConvCpltCallback+0x28>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	429a      	cmp	r2, r3
 800284a:	d105      	bne.n	8002858 <HAL_ADC_ConvCpltCallback+0x20>
	{
		// Average Filter
		ADC_Calculate_AVG(ADC_Arr, ADC_Avg_Arr, _ADC_SAMPLE_NUM);
 800284c:	4905      	ldr	r1, [pc, #20]	; (8002864 <HAL_ADC_ConvCpltCallback+0x2c>)
 800284e:	4b06      	ldr	r3, [pc, #24]	; (8002868 <HAL_ADC_ConvCpltCallback+0x30>)
 8002850:	221e      	movs	r2, #30
 8002852:	0018      	movs	r0, r3
 8002854:	f7fe fd88 	bl	8001368 <ADC_Calculate_AVG>
	}
}
 8002858:	46c0      	nop			; (mov r8, r8)
 800285a:	46bd      	mov	sp, r7
 800285c:	b002      	add	sp, #8
 800285e:	bd80      	pop	{r7, pc}
 8002860:	20000558 	.word	0x20000558
 8002864:	20000114 	.word	0x20000114
 8002868:	20000130 	.word	0x20000130

0800286c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800286c:	b590      	push	{r4, r7, lr}
 800286e:	b085      	sub	sp, #20
 8002870:	af02      	add	r7, sp, #8
 8002872:	6078      	str	r0, [r7, #4]
	// 100us
	if (htim->Instance == _USER_DEFINE_TIM_DIMER_TRIAC.Instance)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	4b10      	ldr	r3, [pc, #64]	; (80028bc <HAL_TIM_PeriodElapsedCallback+0x50>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	429a      	cmp	r2, r3
 800287e:	d118      	bne.n	80028b2 <HAL_TIM_PeriodElapsedCallback+0x46>
	{
		CtrlRLAC_periodic_poll(100, Global_RLAC_Manager);
 8002880:	4b0f      	ldr	r3, [pc, #60]	; (80028c0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	b2db      	uxtb	r3, r3
 8002886:	0019      	movs	r1, r3
 8002888:	2064      	movs	r0, #100	; 0x64
 800288a:	f7ff fe2b 	bl	80024e4 <CtrlRLAC_periodic_poll>
		ADC_2CurrentAC(TEST_KIT.AC_Duty, ADC_Calib0mA, ADC_Avg_Arr[_ID_ADC_CURRENT], &TotalCurrent_mA, &Cur_Shape);
 800288e:	4b0d      	ldr	r3, [pc, #52]	; (80028c4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8002890:	7858      	ldrb	r0, [r3, #1]
 8002892:	4b0d      	ldr	r3, [pc, #52]	; (80028c8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8002894:	881b      	ldrh	r3, [r3, #0]
 8002896:	b299      	uxth	r1, r3
 8002898:	4b0c      	ldr	r3, [pc, #48]	; (80028cc <HAL_TIM_PeriodElapsedCallback+0x60>)
 800289a:	88db      	ldrh	r3, [r3, #6]
 800289c:	b29a      	uxth	r2, r3
 800289e:	4c0c      	ldr	r4, [pc, #48]	; (80028d0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80028a0:	4b0c      	ldr	r3, [pc, #48]	; (80028d4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80028a2:	9300      	str	r3, [sp, #0]
 80028a4:	0023      	movs	r3, r4
 80028a6:	f7fe fe45 	bl	8001534 <ADC_2CurrentAC>
		test_ac_ReadAcDuty100us_poll(&TEST_KIT);
 80028aa:	4b06      	ldr	r3, [pc, #24]	; (80028c4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80028ac:	0018      	movs	r0, r3
 80028ae:	f000 fefc 	bl	80036aa <test_ac_ReadAcDuty100us_poll>
	}

}
 80028b2:	46c0      	nop			; (mov r8, r8)
 80028b4:	46bd      	mov	sp, r7
 80028b6:	b003      	add	sp, #12
 80028b8:	bd90      	pop	{r4, r7, pc}
 80028ba:	46c0      	nop			; (mov r8, r8)
 80028bc:	20000870 	.word	0x20000870
 80028c0:	200000b1 	.word	0x200000b1
 80028c4:	2000036c 	.word	0x2000036c
 80028c8:	20000000 	.word	0x20000000
 80028cc:	20000114 	.word	0x20000114
 80028d0:	200000b2 	.word	0x200000b2
 80028d4:	20000325 	.word	0x20000325

080028d8 <HAL_SYSTICK_Callback>:
/**
 * @brief  SYSTICK callback - 1ms.
 * @retval None
 */
void HAL_SYSTICK_Callback(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
	static uint8_t tx10;

	// 10ms
	if (++tx10 >= 10)
 80028dc:	4b09      	ldr	r3, [pc, #36]	; (8002904 <HAL_SYSTICK_Callback+0x2c>)
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	3301      	adds	r3, #1
 80028e2:	b2da      	uxtb	r2, r3
 80028e4:	4b07      	ldr	r3, [pc, #28]	; (8002904 <HAL_SYSTICK_Callback+0x2c>)
 80028e6:	701a      	strb	r2, [r3, #0]
 80028e8:	4b06      	ldr	r3, [pc, #24]	; (8002904 <HAL_SYSTICK_Callback+0x2c>)
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	2b09      	cmp	r3, #9
 80028ee:	d906      	bls.n	80028fe <HAL_SYSTICK_Callback+0x26>
	{
		tx10 = 0;
 80028f0:	4b04      	ldr	r3, [pc, #16]	; (8002904 <HAL_SYSTICK_Callback+0x2c>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	701a      	strb	r2, [r3, #0]
		timer_periodic_poll();
 80028f6:	f001 fab7 	bl	8003e68 <timer_periodic_poll>
		OUTPUT_periodic_poll();
 80028fa:	f000 fa4d 	bl	8002d98 <OUTPUT_periodic_poll>
	}
}
 80028fe:	46c0      	nop			; (mov r8, r8)
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	200000b6 	.word	0x200000b6

08002908 <CLCD_Delay>:

CLCD_I2C_Name LCD1;

//************************** Low Level Function ****************************************************************//
static void CLCD_Delay(uint16_t Time)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	0002      	movs	r2, r0
 8002910:	1dbb      	adds	r3, r7, #6
 8002912:	801a      	strh	r2, [r3, #0]
	HAL_Delay(Time);
 8002914:	1dbb      	adds	r3, r7, #6
 8002916:	881b      	ldrh	r3, [r3, #0]
 8002918:	0018      	movs	r0, r3
 800291a:	f002 fd69 	bl	80053f0 <HAL_Delay>
}
 800291e:	46c0      	nop			; (mov r8, r8)
 8002920:	46bd      	mov	sp, r7
 8002922:	b002      	add	sp, #8
 8002924:	bd80      	pop	{r7, pc}

08002926 <CLCD_WriteI2C>:
static void CLCD_WriteI2C(CLCD_I2C_Name* LCD, uint8_t Data, uint8_t Mode)
{
 8002926:	b5b0      	push	{r4, r5, r7, lr}
 8002928:	b086      	sub	sp, #24
 800292a:	af02      	add	r7, sp, #8
 800292c:	6078      	str	r0, [r7, #4]
 800292e:	0008      	movs	r0, r1
 8002930:	0011      	movs	r1, r2
 8002932:	1cfb      	adds	r3, r7, #3
 8002934:	1c02      	adds	r2, r0, #0
 8002936:	701a      	strb	r2, [r3, #0]
 8002938:	1cbb      	adds	r3, r7, #2
 800293a:	1c0a      	adds	r2, r1, #0
 800293c:	701a      	strb	r2, [r3, #0]
	char Data_H;
	char Data_L;
	uint8_t Data_I2C[4];
	Data_H = Data&0xF0;
 800293e:	200f      	movs	r0, #15
 8002940:	183b      	adds	r3, r7, r0
 8002942:	1cfa      	adds	r2, r7, #3
 8002944:	7812      	ldrb	r2, [r2, #0]
 8002946:	210f      	movs	r1, #15
 8002948:	438a      	bics	r2, r1
 800294a:	701a      	strb	r2, [r3, #0]
	Data_L = (Data<<4)&0xF0;
 800294c:	1cfb      	adds	r3, r7, #3
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	011a      	lsls	r2, r3, #4
 8002952:	240e      	movs	r4, #14
 8002954:	193b      	adds	r3, r7, r4
 8002956:	701a      	strb	r2, [r3, #0]
	if(LCD->BACKLIGHT)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	7adb      	ldrb	r3, [r3, #11]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d00b      	beq.n	8002978 <CLCD_WriteI2C+0x52>
	{
		Data_H |= LCD_BACKLIGHT;
 8002960:	183b      	adds	r3, r7, r0
 8002962:	183a      	adds	r2, r7, r0
 8002964:	7812      	ldrb	r2, [r2, #0]
 8002966:	2108      	movs	r1, #8
 8002968:	430a      	orrs	r2, r1
 800296a:	701a      	strb	r2, [r3, #0]
		Data_L |= LCD_BACKLIGHT;
 800296c:	193b      	adds	r3, r7, r4
 800296e:	193a      	adds	r2, r7, r4
 8002970:	7812      	ldrb	r2, [r2, #0]
 8002972:	2108      	movs	r1, #8
 8002974:	430a      	orrs	r2, r1
 8002976:	701a      	strb	r2, [r3, #0]
	}
	if(Mode == CLCD_DATA)
 8002978:	1cbb      	adds	r3, r7, #2
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d10e      	bne.n	800299e <CLCD_WriteI2C+0x78>
	{
		Data_H |= LCD_RS;
 8002980:	220f      	movs	r2, #15
 8002982:	18bb      	adds	r3, r7, r2
 8002984:	18ba      	adds	r2, r7, r2
 8002986:	7812      	ldrb	r2, [r2, #0]
 8002988:	2101      	movs	r1, #1
 800298a:	430a      	orrs	r2, r1
 800298c:	701a      	strb	r2, [r3, #0]
		Data_L |= LCD_RS;
 800298e:	220e      	movs	r2, #14
 8002990:	18bb      	adds	r3, r7, r2
 8002992:	18ba      	adds	r2, r7, r2
 8002994:	7812      	ldrb	r2, [r2, #0]
 8002996:	2101      	movs	r1, #1
 8002998:	430a      	orrs	r2, r1
 800299a:	701a      	strb	r2, [r3, #0]
 800299c:	e011      	b.n	80029c2 <CLCD_WriteI2C+0x9c>
	}
	else if(Mode == CLCD_COMMAND)
 800299e:	1cbb      	adds	r3, r7, #2
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d10d      	bne.n	80029c2 <CLCD_WriteI2C+0x9c>
	{
		Data_H &= ~LCD_RS;
 80029a6:	220f      	movs	r2, #15
 80029a8:	18bb      	adds	r3, r7, r2
 80029aa:	18ba      	adds	r2, r7, r2
 80029ac:	7812      	ldrb	r2, [r2, #0]
 80029ae:	2101      	movs	r1, #1
 80029b0:	438a      	bics	r2, r1
 80029b2:	701a      	strb	r2, [r3, #0]
		Data_L &= ~LCD_RS;
 80029b4:	220e      	movs	r2, #14
 80029b6:	18bb      	adds	r3, r7, r2
 80029b8:	18ba      	adds	r2, r7, r2
 80029ba:	7812      	ldrb	r2, [r2, #0]
 80029bc:	2101      	movs	r1, #1
 80029be:	438a      	bics	r2, r1
 80029c0:	701a      	strb	r2, [r3, #0]
	}
	Data_I2C[0] = Data_H|LCD_EN;
 80029c2:	250f      	movs	r5, #15
 80029c4:	197b      	adds	r3, r7, r5
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	2204      	movs	r2, #4
 80029ca:	4313      	orrs	r3, r2
 80029cc:	b2da      	uxtb	r2, r3
 80029ce:	2408      	movs	r4, #8
 80029d0:	193b      	adds	r3, r7, r4
 80029d2:	701a      	strb	r2, [r3, #0]
	CLCD_Delay(1);
 80029d4:	2001      	movs	r0, #1
 80029d6:	f7ff ff97 	bl	8002908 <CLCD_Delay>
	Data_I2C[1] = Data_H;
 80029da:	0021      	movs	r1, r4
 80029dc:	187b      	adds	r3, r7, r1
 80029de:	197a      	adds	r2, r7, r5
 80029e0:	7812      	ldrb	r2, [r2, #0]
 80029e2:	705a      	strb	r2, [r3, #1]
	Data_I2C[2] = Data_L|LCD_EN;
 80029e4:	250e      	movs	r5, #14
 80029e6:	197b      	adds	r3, r7, r5
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	2204      	movs	r2, #4
 80029ec:	4313      	orrs	r3, r2
 80029ee:	b2da      	uxtb	r2, r3
 80029f0:	000c      	movs	r4, r1
 80029f2:	193b      	adds	r3, r7, r4
 80029f4:	709a      	strb	r2, [r3, #2]
	CLCD_Delay(1);
 80029f6:	2001      	movs	r0, #1
 80029f8:	f7ff ff86 	bl	8002908 <CLCD_Delay>
	Data_I2C[3] = Data_L;
 80029fc:	193b      	adds	r3, r7, r4
 80029fe:	197a      	adds	r2, r7, r5
 8002a00:	7812      	ldrb	r2, [r2, #0]
 8002a02:	70da      	strb	r2, [r3, #3]
	HAL_I2C_Master_Transmit(LCD->I2C, LCD->ADDRESS, (uint8_t *)Data_I2C, sizeof(Data_I2C), 1000);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6818      	ldr	r0, [r3, #0]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	791b      	ldrb	r3, [r3, #4]
 8002a0c:	b299      	uxth	r1, r3
 8002a0e:	193a      	adds	r2, r7, r4
 8002a10:	23fa      	movs	r3, #250	; 0xfa
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	9300      	str	r3, [sp, #0]
 8002a16:	2304      	movs	r3, #4
 8002a18:	f004 fce6 	bl	80073e8 <HAL_I2C_Master_Transmit>
}
 8002a1c:	46c0      	nop			; (mov r8, r8)
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	b004      	add	sp, #16
 8002a22:	bdb0      	pop	{r4, r5, r7, pc}

08002a24 <CLCD_I2C_Init>:


//************************** High Level Function ****************************************************************//
void CLCD_I2C_Init(CLCD_I2C_Name* LCD, I2C_HandleTypeDef* hi2c_CLCD, uint8_t Address, uint8_t Colums, uint8_t Rows)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	0019      	movs	r1, r3
 8002a30:	1dfb      	adds	r3, r7, #7
 8002a32:	701a      	strb	r2, [r3, #0]
 8002a34:	1dbb      	adds	r3, r7, #6
 8002a36:	1c0a      	adds	r2, r1, #0
 8002a38:	701a      	strb	r2, [r3, #0]
	LCD->I2C = hi2c_CLCD;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	68ba      	ldr	r2, [r7, #8]
 8002a3e:	601a      	str	r2, [r3, #0]
	LCD->ADDRESS = Address;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	1dfa      	adds	r2, r7, #7
 8002a44:	7812      	ldrb	r2, [r2, #0]
 8002a46:	711a      	strb	r2, [r3, #4]
	LCD->COLUMS = Colums;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	1dba      	adds	r2, r7, #6
 8002a4c:	7812      	ldrb	r2, [r2, #0]
 8002a4e:	715a      	strb	r2, [r3, #5]
	LCD->ROWS = Rows;
 8002a50:	68fa      	ldr	r2, [r7, #12]
 8002a52:	2318      	movs	r3, #24
 8002a54:	18fb      	adds	r3, r7, r3
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	7193      	strb	r3, [r2, #6]

	LCD->FUNCTIONSET = LCD_FUNCTIONSET|LCD_4BITMODE|LCD_2LINE|LCD_5x8DOTS;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2228      	movs	r2, #40	; 0x28
 8002a5e:	729a      	strb	r2, [r3, #10]
	LCD->ENTRYMODE = LCD_ENTRYMODESET|LCD_ENTRYLEFT|LCD_ENTRYSHIFTDECREMENT;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2206      	movs	r2, #6
 8002a64:	71da      	strb	r2, [r3, #7]
	LCD->DISPLAYCTRL = LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_CURSOROFF|LCD_BLINKOFF;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	220c      	movs	r2, #12
 8002a6a:	721a      	strb	r2, [r3, #8]
	LCD->CURSORSHIFT = LCD_CURSORSHIFT|LCD_CURSORMOVE|LCD_MOVERIGHT;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2214      	movs	r2, #20
 8002a70:	725a      	strb	r2, [r3, #9]
	LCD->BACKLIGHT = LCD_BACKLIGHT;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2208      	movs	r2, #8
 8002a76:	72da      	strb	r2, [r3, #11]

	CLCD_Delay(200);
 8002a78:	20c8      	movs	r0, #200	; 0xc8
 8002a7a:	f7ff ff45 	bl	8002908 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2200      	movs	r2, #0
 8002a82:	2133      	movs	r1, #51	; 0x33
 8002a84:	0018      	movs	r0, r3
 8002a86:	f7ff ff4e 	bl	8002926 <CLCD_WriteI2C>
	CLCD_Delay(20);
 8002a8a:	2014      	movs	r0, #20
 8002a8c:	f7ff ff3c 	bl	8002908 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2200      	movs	r2, #0
 8002a94:	2133      	movs	r1, #51	; 0x33
 8002a96:	0018      	movs	r0, r3
 8002a98:	f7ff ff45 	bl	8002926 <CLCD_WriteI2C>
	CLCD_Delay(20);
 8002a9c:	2014      	movs	r0, #20
 8002a9e:	f7ff ff33 	bl	8002908 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x32, CLCD_COMMAND);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	2132      	movs	r1, #50	; 0x32
 8002aa8:	0018      	movs	r0, r3
 8002aaa:	f7ff ff3c 	bl	8002926 <CLCD_WriteI2C>
	CLCD_Delay(20);
 8002aae:	2014      	movs	r0, #20
 8002ab0:	f7ff ff2a 	bl	8002908 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x20, CLCD_COMMAND);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	2120      	movs	r1, #32
 8002aba:	0018      	movs	r0, r3
 8002abc:	f7ff ff33 	bl	8002926 <CLCD_WriteI2C>
	CLCD_Delay(20);
 8002ac0:	2014      	movs	r0, #20
 8002ac2:	f7ff ff21 	bl	8002908 <CLCD_Delay>

	CLCD_WriteI2C(LCD, LCD->ENTRYMODE,CLCD_COMMAND);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	79d9      	ldrb	r1, [r3, #7]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	0018      	movs	r0, r3
 8002ad0:	f7ff ff29 	bl	8002926 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL,CLCD_COMMAND);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	7a19      	ldrb	r1, [r3, #8]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2200      	movs	r2, #0
 8002adc:	0018      	movs	r0, r3
 8002ade:	f7ff ff22 	bl	8002926 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->CURSORSHIFT,CLCD_COMMAND);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	7a59      	ldrb	r1, [r3, #9]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	0018      	movs	r0, r3
 8002aec:	f7ff ff1b 	bl	8002926 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->FUNCTIONSET,CLCD_COMMAND);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	7a99      	ldrb	r1, [r3, #10]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2200      	movs	r2, #0
 8002af8:	0018      	movs	r0, r3
 8002afa:	f7ff ff14 	bl	8002926 <CLCD_WriteI2C>

	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY,CLCD_COMMAND);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2200      	movs	r2, #0
 8002b02:	2101      	movs	r1, #1
 8002b04:	0018      	movs	r0, r3
 8002b06:	f7ff ff0e 	bl	8002926 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD_RETURNHOME,CLCD_COMMAND);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	2102      	movs	r1, #2
 8002b10:	0018      	movs	r0, r3
 8002b12:	f7ff ff08 	bl	8002926 <CLCD_WriteI2C>
}
 8002b16:	46c0      	nop			; (mov r8, r8)
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	b004      	add	sp, #16
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <CLCD_I2C_SetCursor>:
void CLCD_I2C_SetCursor(CLCD_I2C_Name* LCD, uint8_t Xpos, uint8_t Ypos)
{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b084      	sub	sp, #16
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
 8002b26:	0008      	movs	r0, r1
 8002b28:	0011      	movs	r1, r2
 8002b2a:	1cfb      	adds	r3, r7, #3
 8002b2c:	1c02      	adds	r2, r0, #0
 8002b2e:	701a      	strb	r2, [r3, #0]
 8002b30:	1cbb      	adds	r3, r7, #2
 8002b32:	1c0a      	adds	r2, r1, #0
 8002b34:	701a      	strb	r2, [r3, #0]
	uint8_t DRAM_ADDRESS = 0x00;
 8002b36:	230f      	movs	r3, #15
 8002b38:	18fb      	adds	r3, r7, r3
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	701a      	strb	r2, [r3, #0]
	if(Xpos >= LCD->COLUMS)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	795b      	ldrb	r3, [r3, #5]
 8002b42:	1cfa      	adds	r2, r7, #3
 8002b44:	7812      	ldrb	r2, [r2, #0]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d304      	bcc.n	8002b54 <CLCD_I2C_SetCursor+0x36>
	{
		Xpos = LCD->COLUMS - 1;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	795a      	ldrb	r2, [r3, #5]
 8002b4e:	1cfb      	adds	r3, r7, #3
 8002b50:	3a01      	subs	r2, #1
 8002b52:	701a      	strb	r2, [r3, #0]
	}
	if(Ypos >= LCD->ROWS)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	799b      	ldrb	r3, [r3, #6]
 8002b58:	1cba      	adds	r2, r7, #2
 8002b5a:	7812      	ldrb	r2, [r2, #0]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d304      	bcc.n	8002b6a <CLCD_I2C_SetCursor+0x4c>
	{
		Ypos = LCD->ROWS -1;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	799a      	ldrb	r2, [r3, #6]
 8002b64:	1cbb      	adds	r3, r7, #2
 8002b66:	3a01      	subs	r2, #1
 8002b68:	701a      	strb	r2, [r3, #0]
	}
	if(Ypos == 0)
 8002b6a:	1cbb      	adds	r3, r7, #2
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d105      	bne.n	8002b7e <CLCD_I2C_SetCursor+0x60>
	{
		DRAM_ADDRESS = 0x00 + Xpos;
 8002b72:	230f      	movs	r3, #15
 8002b74:	18fb      	adds	r3, r7, r3
 8002b76:	1cfa      	adds	r2, r7, #3
 8002b78:	7812      	ldrb	r2, [r2, #0]
 8002b7a:	701a      	strb	r2, [r3, #0]
 8002b7c:	e01f      	b.n	8002bbe <CLCD_I2C_SetCursor+0xa0>
	}
	else if(Ypos == 1)
 8002b7e:	1cbb      	adds	r3, r7, #2
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d106      	bne.n	8002b94 <CLCD_I2C_SetCursor+0x76>
	{
		DRAM_ADDRESS = 0x40 + Xpos;
 8002b86:	230f      	movs	r3, #15
 8002b88:	18fb      	adds	r3, r7, r3
 8002b8a:	1cfa      	adds	r2, r7, #3
 8002b8c:	7812      	ldrb	r2, [r2, #0]
 8002b8e:	3240      	adds	r2, #64	; 0x40
 8002b90:	701a      	strb	r2, [r3, #0]
 8002b92:	e014      	b.n	8002bbe <CLCD_I2C_SetCursor+0xa0>
	}
	else if(Ypos == 2)
 8002b94:	1cbb      	adds	r3, r7, #2
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d106      	bne.n	8002baa <CLCD_I2C_SetCursor+0x8c>
	{
		DRAM_ADDRESS = 0x14 + Xpos;
 8002b9c:	230f      	movs	r3, #15
 8002b9e:	18fb      	adds	r3, r7, r3
 8002ba0:	1cfa      	adds	r2, r7, #3
 8002ba2:	7812      	ldrb	r2, [r2, #0]
 8002ba4:	3214      	adds	r2, #20
 8002ba6:	701a      	strb	r2, [r3, #0]
 8002ba8:	e009      	b.n	8002bbe <CLCD_I2C_SetCursor+0xa0>
	}
	else if(Ypos == 3)
 8002baa:	1cbb      	adds	r3, r7, #2
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	2b03      	cmp	r3, #3
 8002bb0:	d105      	bne.n	8002bbe <CLCD_I2C_SetCursor+0xa0>
	{
		DRAM_ADDRESS = 0x54 + Xpos;
 8002bb2:	230f      	movs	r3, #15
 8002bb4:	18fb      	adds	r3, r7, r3
 8002bb6:	1cfa      	adds	r2, r7, #3
 8002bb8:	7812      	ldrb	r2, [r2, #0]
 8002bba:	3254      	adds	r2, #84	; 0x54
 8002bbc:	701a      	strb	r2, [r3, #0]
	}
	CLCD_WriteI2C(LCD, LCD_SETDDRAMADDR|DRAM_ADDRESS, CLCD_COMMAND);
 8002bbe:	230f      	movs	r3, #15
 8002bc0:	18fb      	adds	r3, r7, r3
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	2280      	movs	r2, #128	; 0x80
 8002bc6:	4252      	negs	r2, r2
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	b2d9      	uxtb	r1, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	0018      	movs	r0, r3
 8002bd2:	f7ff fea8 	bl	8002926 <CLCD_WriteI2C>
}
 8002bd6:	46c0      	nop			; (mov r8, r8)
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	b004      	add	sp, #16
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <CLCD_I2C_WriteChar>:
void CLCD_I2C_WriteChar(CLCD_I2C_Name* LCD, char character)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b082      	sub	sp, #8
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
 8002be6:	000a      	movs	r2, r1
 8002be8:	1cfb      	adds	r3, r7, #3
 8002bea:	701a      	strb	r2, [r3, #0]
	CLCD_WriteI2C(LCD, character, CLCD_DATA);
 8002bec:	1cfb      	adds	r3, r7, #3
 8002bee:	7819      	ldrb	r1, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	0018      	movs	r0, r3
 8002bf6:	f7ff fe96 	bl	8002926 <CLCD_WriteI2C>
}
 8002bfa:	46c0      	nop			; (mov r8, r8)
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	b002      	add	sp, #8
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <CLCD_I2C_WriteString>:
void CLCD_I2C_WriteString(CLCD_I2C_Name* LCD, char *String)
{
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b082      	sub	sp, #8
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
 8002c0a:	6039      	str	r1, [r7, #0]
	while(*String)CLCD_I2C_WriteChar(LCD, *String++);
 8002c0c:	e008      	b.n	8002c20 <CLCD_I2C_WriteString+0x1e>
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	1c5a      	adds	r2, r3, #1
 8002c12:	603a      	str	r2, [r7, #0]
 8002c14:	781a      	ldrb	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	0011      	movs	r1, r2
 8002c1a:	0018      	movs	r0, r3
 8002c1c:	f7ff ffdf 	bl	8002bde <CLCD_I2C_WriteChar>
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d1f2      	bne.n	8002c0e <CLCD_I2C_WriteString+0xc>
}
 8002c28:	46c0      	nop			; (mov r8, r8)
 8002c2a:	46c0      	nop			; (mov r8, r8)
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	b002      	add	sp, #8
 8002c30:	bd80      	pop	{r7, pc}
	...

08002c34 <LCD_ShowString>:
	LCD->DISPLAYCTRL &= ~LCD_BLINKON;
	CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL, CLCD_COMMAND);
}

void LCD_ShowString(char *str, uint8_t col, uint8_t row)
{
 8002c34:	b5b0      	push	{r4, r5, r7, lr}
 8002c36:	b088      	sub	sp, #32
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	0008      	movs	r0, r1
 8002c3e:	0011      	movs	r1, r2
 8002c40:	1cfb      	adds	r3, r7, #3
 8002c42:	1c02      	adds	r2, r0, #0
 8002c44:	701a      	strb	r2, [r3, #0]
 8002c46:	1cbb      	adds	r3, r7, #2
 8002c48:	1c0a      	adds	r2, r1, #0
 8002c4a:	701a      	strb	r2, [r3, #0]
	char buffer[_USER_TEXT_LCD_NUM_COL];

	if (row >= _USER_TEXT_LCD_NUM_ROW)
 8002c4c:	1cbb      	adds	r3, r7, #2
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	2b03      	cmp	r3, #3
 8002c52:	d842      	bhi.n	8002cda <LCD_ShowString+0xa6>
		return;
	for (uint8_t i = 0; i < _USER_TEXT_LCD_NUM_COL; i++)
 8002c54:	231f      	movs	r3, #31
 8002c56:	18fb      	adds	r3, r7, r3
 8002c58:	2200      	movs	r2, #0
 8002c5a:	701a      	strb	r2, [r3, #0]
 8002c5c:	e021      	b.n	8002ca2 <LCD_ShowString+0x6e>
	{
		if (i < strlen(str))
 8002c5e:	251f      	movs	r5, #31
 8002c60:	197b      	adds	r3, r7, r5
 8002c62:	781c      	ldrb	r4, [r3, #0]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	0018      	movs	r0, r3
 8002c68:	f7fd fa4a 	bl	8000100 <strlen>
 8002c6c:	0003      	movs	r3, r0
 8002c6e:	429c      	cmp	r4, r3
 8002c70:	d20a      	bcs.n	8002c88 <LCD_ShowString+0x54>
			buffer[i] = str[i];
 8002c72:	197b      	adds	r3, r7, r5
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	18d2      	adds	r2, r2, r3
 8002c7a:	197b      	adds	r3, r7, r5
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	7811      	ldrb	r1, [r2, #0]
 8002c80:	2208      	movs	r2, #8
 8002c82:	18ba      	adds	r2, r7, r2
 8002c84:	54d1      	strb	r1, [r2, r3]
 8002c86:	e006      	b.n	8002c96 <LCD_ShowString+0x62>
		else
			buffer[i] = ' ';
 8002c88:	231f      	movs	r3, #31
 8002c8a:	18fb      	adds	r3, r7, r3
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	2208      	movs	r2, #8
 8002c90:	18ba      	adds	r2, r7, r2
 8002c92:	2120      	movs	r1, #32
 8002c94:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < _USER_TEXT_LCD_NUM_COL; i++)
 8002c96:	211f      	movs	r1, #31
 8002c98:	187b      	adds	r3, r7, r1
 8002c9a:	781a      	ldrb	r2, [r3, #0]
 8002c9c:	187b      	adds	r3, r7, r1
 8002c9e:	3201      	adds	r2, #1
 8002ca0:	701a      	strb	r2, [r3, #0]
 8002ca2:	231f      	movs	r3, #31
 8002ca4:	18fb      	adds	r3, r7, r3
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	2b13      	cmp	r3, #19
 8002caa:	d9d8      	bls.n	8002c5e <LCD_ShowString+0x2a>
	}
	buffer[_USER_TEXT_LCD_NUM_COL-col] = 0;
 8002cac:	1cfb      	adds	r3, r7, #3
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	2214      	movs	r2, #20
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	2408      	movs	r4, #8
 8002cb6:	193a      	adds	r2, r7, r4
 8002cb8:	2100      	movs	r1, #0
 8002cba:	54d1      	strb	r1, [r2, r3]

	CLCD_I2C_SetCursor(&LCD1, col, row);
 8002cbc:	1cbb      	adds	r3, r7, #2
 8002cbe:	781a      	ldrb	r2, [r3, #0]
 8002cc0:	1cfb      	adds	r3, r7, #3
 8002cc2:	7819      	ldrb	r1, [r3, #0]
 8002cc4:	4b07      	ldr	r3, [pc, #28]	; (8002ce4 <LCD_ShowString+0xb0>)
 8002cc6:	0018      	movs	r0, r3
 8002cc8:	f7ff ff29 	bl	8002b1e <CLCD_I2C_SetCursor>
	CLCD_I2C_WriteString(&LCD1, buffer);
 8002ccc:	193a      	adds	r2, r7, r4
 8002cce:	4b05      	ldr	r3, [pc, #20]	; (8002ce4 <LCD_ShowString+0xb0>)
 8002cd0:	0011      	movs	r1, r2
 8002cd2:	0018      	movs	r0, r3
 8002cd4:	f7ff ff95 	bl	8002c02 <CLCD_I2C_WriteString>
 8002cd8:	e000      	b.n	8002cdc <LCD_ShowString+0xa8>
		return;
 8002cda:	46c0      	nop			; (mov r8, r8)
}
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	b008      	add	sp, #32
 8002ce0:	bdb0      	pop	{r4, r5, r7, pc}
 8002ce2:	46c0      	nop			; (mov r8, r8)
 8002ce4:	2000032c 	.word	0x2000032c

08002ce8 <OUTPUT_set_mode>:

OUTPUT_struct_t *OUTPUT_struct_t_buf[OUTPUT_number_max];

// return <>0 mean some thing is wrong
uint8_t OUTPUT_set_mode(OUTPUT_struct_t *OUTPUT_tmp, uint8_t mode)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	000a      	movs	r2, r1
 8002cf2:	1cfb      	adds	r3, r7, #3
 8002cf4:	701a      	strb	r2, [r3, #0]
	if (mode >= _OUTPUT_mode_max)
 8002cf6:	1cfb      	adds	r3, r7, #3
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	2b03      	cmp	r3, #3
 8002cfc:	d901      	bls.n	8002d02 <OUTPUT_set_mode+0x1a>
		return 1;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e017      	b.n	8002d32 <OUTPUT_set_mode+0x4a>
	OUTPUT_tmp->mode = mode;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	1cfa      	adds	r2, r7, #3
 8002d06:	7812      	ldrb	r2, [r2, #0]
 8002d08:	701a      	strb	r2, [r3, #0]
	OUTPUT_tmp->state = _OUTPUT_state_START;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	705a      	strb	r2, [r3, #1]
	if (mode == _OUTPUT_mode_blink)
 8002d10:	1cfb      	adds	r3, r7, #3
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	2b03      	cmp	r3, #3
 8002d16:	d10b      	bne.n	8002d30 <OUTPUT_set_mode+0x48>
	{
		if (OUTPUT_tmp->ON_duty == 0)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d107      	bne.n	8002d30 <OUTPUT_set_mode+0x48>
		{
			OUTPUT_tmp->mode = _OUTPUT_mode_off;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	701a      	strb	r2, [r3, #0]
			OUTPUT_tmp->repeat_count = 0;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	70da      	strb	r2, [r3, #3]
			return 2;
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	e000      	b.n	8002d32 <OUTPUT_set_mode+0x4a>
		}
	}
	return 0;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	0018      	movs	r0, r3
 8002d34:	46bd      	mov	sp, r7
 8002d36:	b002      	add	sp, #8
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <OUTPUT_set_blink>:

uint8_t OUTPUT_set_blink(OUTPUT_struct_t *OUTPUT_tmp, uint8_t repeat, clock_time_t ON_duty, clock_time_t OFF_duty, clock_time_t repeat_duty)
{
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b084      	sub	sp, #16
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	60f8      	str	r0, [r7, #12]
 8002d42:	607a      	str	r2, [r7, #4]
 8002d44:	603b      	str	r3, [r7, #0]
 8002d46:	230b      	movs	r3, #11
 8002d48:	18fb      	adds	r3, r7, r3
 8002d4a:	1c0a      	adds	r2, r1, #0
 8002d4c:	701a      	strb	r2, [r3, #0]
	OUTPUT_tmp->mode = _OUTPUT_mode_blink;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2203      	movs	r2, #3
 8002d52:	701a      	strb	r2, [r3, #0]
	OUTPUT_tmp->state = _OUTPUT_state_START;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2200      	movs	r2, #0
 8002d58:	705a      	strb	r2, [r3, #1]
	if (ON_duty == 0)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d104      	bne.n	8002d6a <OUTPUT_set_blink+0x30>
	{
		OUTPUT_tmp->mode = _OUTPUT_mode_off;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2201      	movs	r2, #1
 8002d64:	701a      	strb	r2, [r3, #0]
		return 2; // On=0
 8002d66:	2302      	movs	r3, #2
 8002d68:	e011      	b.n	8002d8e <OUTPUT_set_blink+0x54>
	}
	OUTPUT_tmp->ON_duty = ON_duty;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	605a      	str	r2, [r3, #4]
	OUTPUT_tmp->OFF_duty = OFF_duty;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	683a      	ldr	r2, [r7, #0]
 8002d74:	609a      	str	r2, [r3, #8]
	OUTPUT_tmp->repeat = repeat;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	220b      	movs	r2, #11
 8002d7a:	18ba      	adds	r2, r7, r2
 8002d7c:	7812      	ldrb	r2, [r2, #0]
 8002d7e:	709a      	strb	r2, [r3, #2]
	OUTPUT_tmp->repeat_count = 0;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2200      	movs	r2, #0
 8002d84:	70da      	strb	r2, [r3, #3]
	OUTPUT_tmp->repeat_duty = repeat_duty;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	60da      	str	r2, [r3, #12]
	return 0;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	0018      	movs	r0, r3
 8002d90:	46bd      	mov	sp, r7
 8002d92:	b004      	add	sp, #16
 8002d94:	bd80      	pop	{r7, pc}
	...

08002d98 <OUTPUT_periodic_poll>:

void OUTPUT_periodic_poll(void)
{
 8002d98:	b590      	push	{r4, r7, lr}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0

	for (uint8_t i = 0; i < OUTPUT_number_max; i++)
 8002d9e:	1dfb      	adds	r3, r7, #7
 8002da0:	2200      	movs	r2, #0
 8002da2:	701a      	strb	r2, [r3, #0]
 8002da4:	e16b      	b.n	800307e <OUTPUT_periodic_poll+0x2e6>
	{

		if (OUTPUT_struct_t_buf[i] == 0)
 8002da6:	1dfb      	adds	r3, r7, #7
 8002da8:	781a      	ldrb	r2, [r3, #0]
 8002daa:	4bba      	ldr	r3, [pc, #744]	; (8003094 <OUTPUT_periodic_poll+0x2fc>)
 8002dac:	0092      	lsls	r2, r2, #2
 8002dae:	58d3      	ldr	r3, [r2, r3]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d100      	bne.n	8002db6 <OUTPUT_periodic_poll+0x1e>
 8002db4:	e157      	b.n	8003066 <OUTPUT_periodic_poll+0x2ce>
			continue;

		if (OUTPUT_struct_t_buf[i]->mode == _OUTPUT_mode_noctrl)
 8002db6:	1dfb      	adds	r3, r7, #7
 8002db8:	781a      	ldrb	r2, [r3, #0]
 8002dba:	4bb6      	ldr	r3, [pc, #728]	; (8003094 <OUTPUT_periodic_poll+0x2fc>)
 8002dbc:	0092      	lsls	r2, r2, #2
 8002dbe:	58d3      	ldr	r3, [r2, r3]
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d100      	bne.n	8002dc8 <OUTPUT_periodic_poll+0x30>
 8002dc6:	e150      	b.n	800306a <OUTPUT_periodic_poll+0x2d2>
			continue;

		// bat dau
		if (OUTPUT_struct_t_buf[i]->state == _OUTPUT_state_START)
 8002dc8:	1dfb      	adds	r3, r7, #7
 8002dca:	781a      	ldrb	r2, [r3, #0]
 8002dcc:	4bb1      	ldr	r3, [pc, #708]	; (8003094 <OUTPUT_periodic_poll+0x2fc>)
 8002dce:	0092      	lsls	r2, r2, #2
 8002dd0:	58d3      	ldr	r3, [r2, r3]
 8002dd2:	785b      	ldrb	r3, [r3, #1]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d159      	bne.n	8002e8c <OUTPUT_periodic_poll+0xf4>
		{
			OUTPUT_struct_t_buf[i]->state = _OUTPUT_state_ON;
 8002dd8:	1dfb      	adds	r3, r7, #7
 8002dda:	781a      	ldrb	r2, [r3, #0]
 8002ddc:	4bad      	ldr	r3, [pc, #692]	; (8003094 <OUTPUT_periodic_poll+0x2fc>)
 8002dde:	0092      	lsls	r2, r2, #2
 8002de0:	58d3      	ldr	r3, [r2, r3]
 8002de2:	2201      	movs	r2, #1
 8002de4:	705a      	strb	r2, [r3, #1]
			switch (OUTPUT_struct_t_buf[i]->mode)
 8002de6:	1dfb      	adds	r3, r7, #7
 8002de8:	781a      	ldrb	r2, [r3, #0]
 8002dea:	4baa      	ldr	r3, [pc, #680]	; (8003094 <OUTPUT_periodic_poll+0x2fc>)
 8002dec:	0092      	lsls	r2, r2, #2
 8002dee:	58d3      	ldr	r3, [r2, r3]
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	2b03      	cmp	r3, #3
 8002df4:	d018      	beq.n	8002e28 <OUTPUT_periodic_poll+0x90>
 8002df6:	dd00      	ble.n	8002dfa <OUTPUT_periodic_poll+0x62>
 8002df8:	e13c      	b.n	8003074 <OUTPUT_periodic_poll+0x2dc>
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d002      	beq.n	8002e04 <OUTPUT_periodic_poll+0x6c>
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d009      	beq.n	8002e16 <OUTPUT_periodic_poll+0x7e>
 8002e02:	e137      	b.n	8003074 <OUTPUT_periodic_poll+0x2dc>
			{
			case _OUTPUT_mode_off:
				OUTPUT_struct_t_buf[i]->OUTPUT_BaseCtrl(0);
 8002e04:	1dfb      	adds	r3, r7, #7
 8002e06:	781a      	ldrb	r2, [r3, #0]
 8002e08:	4ba2      	ldr	r3, [pc, #648]	; (8003094 <OUTPUT_periodic_poll+0x2fc>)
 8002e0a:	0092      	lsls	r2, r2, #2
 8002e0c:	58d3      	ldr	r3, [r2, r3]
 8002e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e10:	2000      	movs	r0, #0
 8002e12:	4798      	blx	r3
				break;
 8002e14:	e12e      	b.n	8003074 <OUTPUT_periodic_poll+0x2dc>
			case _OUTPUT_mode_on:
				OUTPUT_struct_t_buf[i]->OUTPUT_BaseCtrl(1);
 8002e16:	1dfb      	adds	r3, r7, #7
 8002e18:	781a      	ldrb	r2, [r3, #0]
 8002e1a:	4b9e      	ldr	r3, [pc, #632]	; (8003094 <OUTPUT_periodic_poll+0x2fc>)
 8002e1c:	0092      	lsls	r2, r2, #2
 8002e1e:	58d3      	ldr	r3, [r2, r3]
 8002e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e22:	2001      	movs	r0, #1
 8002e24:	4798      	blx	r3
				break;
 8002e26:	e125      	b.n	8003074 <OUTPUT_periodic_poll+0x2dc>
			case _OUTPUT_mode_blink:
				// bat dau la ON truoc
				OUTPUT_struct_t_buf[i]->OUTPUT_BaseCtrl(1);
 8002e28:	1dfb      	adds	r3, r7, #7
 8002e2a:	781a      	ldrb	r2, [r3, #0]
 8002e2c:	4b99      	ldr	r3, [pc, #612]	; (8003094 <OUTPUT_periodic_poll+0x2fc>)
 8002e2e:	0092      	lsls	r2, r2, #2
 8002e30:	58d3      	ldr	r3, [r2, r3]
 8002e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e34:	2001      	movs	r0, #1
 8002e36:	4798      	blx	r3
				timer_set(&OUTPUT_struct_t_buf[i]->timeout, OUTPUT_struct_t_buf[i]->ON_duty);
 8002e38:	1dfb      	adds	r3, r7, #7
 8002e3a:	781a      	ldrb	r2, [r3, #0]
 8002e3c:	4b95      	ldr	r3, [pc, #596]	; (8003094 <OUTPUT_periodic_poll+0x2fc>)
 8002e3e:	0092      	lsls	r2, r2, #2
 8002e40:	58d3      	ldr	r3, [r2, r3]
 8002e42:	3310      	adds	r3, #16
 8002e44:	0018      	movs	r0, r3
 8002e46:	1dfb      	adds	r3, r7, #7
 8002e48:	781a      	ldrb	r2, [r3, #0]
 8002e4a:	4b92      	ldr	r3, [pc, #584]	; (8003094 <OUTPUT_periodic_poll+0x2fc>)
 8002e4c:	0092      	lsls	r2, r2, #2
 8002e4e:	58d3      	ldr	r3, [r2, r3]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	0019      	movs	r1, r3
 8002e54:	f001 f814 	bl	8003e80 <timer_set>
				if (OUTPUT_struct_t_buf[i]->repeat_duty != 0)
 8002e58:	1dfb      	adds	r3, r7, #7
 8002e5a:	781a      	ldrb	r2, [r3, #0]
 8002e5c:	4b8d      	ldr	r3, [pc, #564]	; (8003094 <OUTPUT_periodic_poll+0x2fc>)
 8002e5e:	0092      	lsls	r2, r2, #2
 8002e60:	58d3      	ldr	r3, [r2, r3]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d100      	bne.n	8002e6a <OUTPUT_periodic_poll+0xd2>
 8002e68:	e101      	b.n	800306e <OUTPUT_periodic_poll+0x2d6>
				{
					timer_set(&OUTPUT_struct_t_buf[i]->duty_timeout, OUTPUT_struct_t_buf[i]->repeat_duty);
 8002e6a:	1dfb      	adds	r3, r7, #7
 8002e6c:	781a      	ldrb	r2, [r3, #0]
 8002e6e:	4b89      	ldr	r3, [pc, #548]	; (8003094 <OUTPUT_periodic_poll+0x2fc>)
 8002e70:	0092      	lsls	r2, r2, #2
 8002e72:	58d3      	ldr	r3, [r2, r3]
 8002e74:	3320      	adds	r3, #32
 8002e76:	0018      	movs	r0, r3
 8002e78:	1dfb      	adds	r3, r7, #7
 8002e7a:	781a      	ldrb	r2, [r3, #0]
 8002e7c:	4b85      	ldr	r3, [pc, #532]	; (8003094 <OUTPUT_periodic_poll+0x2fc>)
 8002e7e:	0092      	lsls	r2, r2, #2
 8002e80:	58d3      	ldr	r3, [r2, r3]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	0019      	movs	r1, r3
 8002e86:	f000 fffb 	bl	8003e80 <timer_set>
				}
				break;
 8002e8a:	e0f0      	b.n	800306e <OUTPUT_periodic_poll+0x2d6>
			}
		}
		// neu blink thi lam
		else if (OUTPUT_struct_t_buf[i]->mode == _OUTPUT_mode_blink)
 8002e8c:	1dfb      	adds	r3, r7, #7
 8002e8e:	781a      	ldrb	r2, [r3, #0]
 8002e90:	4b80      	ldr	r3, [pc, #512]	; (8003094 <OUTPUT_periodic_poll+0x2fc>)
 8002e92:	0092      	lsls	r2, r2, #2
 8002e94:	58d3      	ldr	r3, [r2, r3]
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	2b03      	cmp	r3, #3
 8002e9a:	d000      	beq.n	8002e9e <OUTPUT_periodic_poll+0x106>
 8002e9c:	e0e9      	b.n	8003072 <OUTPUT_periodic_poll+0x2da>
		{
			if (timer_expired(&OUTPUT_struct_t_buf[i]->timeout))
 8002e9e:	1dfb      	adds	r3, r7, #7
 8002ea0:	781a      	ldrb	r2, [r3, #0]
 8002ea2:	4b7c      	ldr	r3, [pc, #496]	; (8003094 <OUTPUT_periodic_poll+0x2fc>)
 8002ea4:	0092      	lsls	r2, r2, #2
 8002ea6:	58d3      	ldr	r3, [r2, r3]
 8002ea8:	3310      	adds	r3, #16
 8002eaa:	0018      	movs	r0, r3
 8002eac:	f001 f824 	bl	8003ef8 <timer_expired>
 8002eb0:	1e03      	subs	r3, r0, #0
 8002eb2:	d100      	bne.n	8002eb6 <OUTPUT_periodic_poll+0x11e>
 8002eb4:	e0dd      	b.n	8003072 <OUTPUT_periodic_poll+0x2da>
			{
				switch (OUTPUT_struct_t_buf[i]->state)
 8002eb6:	1dfb      	adds	r3, r7, #7
 8002eb8:	781a      	ldrb	r2, [r3, #0]
 8002eba:	4b76      	ldr	r3, [pc, #472]	; (8003094 <OUTPUT_periodic_poll+0x2fc>)
 8002ebc:	0092      	lsls	r2, r2, #2
 8002ebe:	58d3      	ldr	r3, [r2, r3]
 8002ec0:	785b      	ldrb	r3, [r3, #1]
 8002ec2:	2b03      	cmp	r3, #3
 8002ec4:	d100      	bne.n	8002ec8 <OUTPUT_periodic_poll+0x130>
 8002ec6:	e0a5      	b.n	8003014 <OUTPUT_periodic_poll+0x27c>
 8002ec8:	dd00      	ble.n	8002ecc <OUTPUT_periodic_poll+0x134>
 8002eca:	e0d3      	b.n	8003074 <OUTPUT_periodic_poll+0x2dc>
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d002      	beq.n	8002ed6 <OUTPUT_periodic_poll+0x13e>
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d037      	beq.n	8002f44 <OUTPUT_periodic_poll+0x1ac>
 8002ed4:	e0ce      	b.n	8003074 <OUTPUT_periodic_poll+0x2dc>
				{
				case _OUTPUT_state_ON:
					OUTPUT_struct_t_buf[i]->state = _OUTPUT_state_OFF;
 8002ed6:	1dfb      	adds	r3, r7, #7
 8002ed8:	781a      	ldrb	r2, [r3, #0]
 8002eda:	4b6e      	ldr	r3, [pc, #440]	; (8003094 <OUTPUT_periodic_poll+0x2fc>)
 8002edc:	0092      	lsls	r2, r2, #2
 8002ede:	58d3      	ldr	r3, [r2, r3]
 8002ee0:	2202      	movs	r2, #2
 8002ee2:	705a      	strb	r2, [r3, #1]
					OUTPUT_struct_t_buf[i]->OUTPUT_BaseCtrl(0);
 8002ee4:	1dfb      	adds	r3, r7, #7
 8002ee6:	781a      	ldrb	r2, [r3, #0]
 8002ee8:	4b6a      	ldr	r3, [pc, #424]	; (8003094 <OUTPUT_periodic_poll+0x2fc>)
 8002eea:	0092      	lsls	r2, r2, #2
 8002eec:	58d3      	ldr	r3, [r2, r3]
 8002eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef0:	2000      	movs	r0, #0
 8002ef2:	4798      	blx	r3
					// neu thoi gian OFF_duty => chuyen qua tat LED
					if (OUTPUT_struct_t_buf[i]->OFF_duty == 0)
 8002ef4:	1dfb      	adds	r3, r7, #7
 8002ef6:	781a      	ldrb	r2, [r3, #0]
 8002ef8:	4b66      	ldr	r3, [pc, #408]	; (8003094 <OUTPUT_periodic_poll+0x2fc>)
 8002efa:	0092      	lsls	r2, r2, #2
 8002efc:	58d3      	ldr	r3, [r2, r3]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d10e      	bne.n	8002f22 <OUTPUT_periodic_poll+0x18a>
					{
						OUTPUT_struct_t_buf[i]->mode = _OUTPUT_mode_off;
 8002f04:	1dfb      	adds	r3, r7, #7
 8002f06:	781a      	ldrb	r2, [r3, #0]
 8002f08:	4b62      	ldr	r3, [pc, #392]	; (8003094 <OUTPUT_periodic_poll+0x2fc>)
 8002f0a:	0092      	lsls	r2, r2, #2
 8002f0c:	58d3      	ldr	r3, [r2, r3]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	701a      	strb	r2, [r3, #0]
						OUTPUT_struct_t_buf[i]->state = _OUTPUT_state_ON;
 8002f12:	1dfb      	adds	r3, r7, #7
 8002f14:	781a      	ldrb	r2, [r3, #0]
 8002f16:	4b5f      	ldr	r3, [pc, #380]	; (8003094 <OUTPUT_periodic_poll+0x2fc>)
 8002f18:	0092      	lsls	r2, r2, #2
 8002f1a:	58d3      	ldr	r3, [r2, r3]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	705a      	strb	r2, [r3, #1]
					}
					else
						timer_set(&OUTPUT_struct_t_buf[i]->timeout, OUTPUT_struct_t_buf[i]->OFF_duty);
					break;
 8002f20:	e0a8      	b.n	8003074 <OUTPUT_periodic_poll+0x2dc>
						timer_set(&OUTPUT_struct_t_buf[i]->timeout, OUTPUT_struct_t_buf[i]->OFF_duty);
 8002f22:	1dfb      	adds	r3, r7, #7
 8002f24:	781a      	ldrb	r2, [r3, #0]
 8002f26:	4b5b      	ldr	r3, [pc, #364]	; (8003094 <OUTPUT_periodic_poll+0x2fc>)
 8002f28:	0092      	lsls	r2, r2, #2
 8002f2a:	58d3      	ldr	r3, [r2, r3]
 8002f2c:	3310      	adds	r3, #16
 8002f2e:	0018      	movs	r0, r3
 8002f30:	1dfb      	adds	r3, r7, #7
 8002f32:	781a      	ldrb	r2, [r3, #0]
 8002f34:	4b57      	ldr	r3, [pc, #348]	; (8003094 <OUTPUT_periodic_poll+0x2fc>)
 8002f36:	0092      	lsls	r2, r2, #2
 8002f38:	58d3      	ldr	r3, [r2, r3]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	0019      	movs	r1, r3
 8002f3e:	f000 ff9f 	bl	8003e80 <timer_set>
					break;
 8002f42:	e097      	b.n	8003074 <OUTPUT_periodic_poll+0x2dc>

				case _OUTPUT_state_OFF:
					// Neu dat toi so lan lap lai thi cho chu ky moi hoac tat
					if (++OUTPUT_struct_t_buf[i]->repeat_count == OUTPUT_struct_t_buf[i]->repeat)
 8002f44:	1dfb      	adds	r3, r7, #7
 8002f46:	781a      	ldrb	r2, [r3, #0]
 8002f48:	4b52      	ldr	r3, [pc, #328]	; (8003094 <OUTPUT_periodic_poll+0x2fc>)
 8002f4a:	0092      	lsls	r2, r2, #2
 8002f4c:	58d3      	ldr	r3, [r2, r3]
 8002f4e:	78da      	ldrb	r2, [r3, #3]
 8002f50:	3201      	adds	r2, #1
 8002f52:	b2d2      	uxtb	r2, r2
 8002f54:	70da      	strb	r2, [r3, #3]
 8002f56:	78da      	ldrb	r2, [r3, #3]
 8002f58:	1dfb      	adds	r3, r7, #7
 8002f5a:	7819      	ldrb	r1, [r3, #0]
 8002f5c:	4b4d      	ldr	r3, [pc, #308]	; (8003094 <OUTPUT_periodic_poll+0x2fc>)
 8002f5e:	0089      	lsls	r1, r1, #2
 8002f60:	58cb      	ldr	r3, [r1, r3]
 8002f62:	789b      	ldrb	r3, [r3, #2]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d135      	bne.n	8002fd4 <OUTPUT_periodic_poll+0x23c>
					{
						OUTPUT_struct_t_buf[i]->repeat_count = 0;
 8002f68:	1dfb      	adds	r3, r7, #7
 8002f6a:	781a      	ldrb	r2, [r3, #0]
 8002f6c:	4b49      	ldr	r3, [pc, #292]	; (8003094 <OUTPUT_periodic_poll+0x2fc>)
 8002f6e:	0092      	lsls	r2, r2, #2
 8002f70:	58d3      	ldr	r3, [r2, r3]
 8002f72:	2200      	movs	r2, #0
 8002f74:	70da      	strb	r2, [r3, #3]
						// Neu ko su dung chu ky lap lai thi tra ve che do off
						if (OUTPUT_struct_t_buf[i]->repeat_duty == 0)
 8002f76:	1dfb      	adds	r3, r7, #7
 8002f78:	781a      	ldrb	r2, [r3, #0]
 8002f7a:	4b46      	ldr	r3, [pc, #280]	; (8003094 <OUTPUT_periodic_poll+0x2fc>)
 8002f7c:	0092      	lsls	r2, r2, #2
 8002f7e:	58d3      	ldr	r3, [r2, r3]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d10e      	bne.n	8002fa4 <OUTPUT_periodic_poll+0x20c>
						{
							OUTPUT_struct_t_buf[i]->state = _OUTPUT_state_START;
 8002f86:	1dfb      	adds	r3, r7, #7
 8002f88:	781a      	ldrb	r2, [r3, #0]
 8002f8a:	4b42      	ldr	r3, [pc, #264]	; (8003094 <OUTPUT_periodic_poll+0x2fc>)
 8002f8c:	0092      	lsls	r2, r2, #2
 8002f8e:	58d3      	ldr	r3, [r2, r3]
 8002f90:	2200      	movs	r2, #0
 8002f92:	705a      	strb	r2, [r3, #1]
							OUTPUT_struct_t_buf[i]->mode = _OUTPUT_mode_noctrl; //############
 8002f94:	1dfb      	adds	r3, r7, #7
 8002f96:	781a      	ldrb	r2, [r3, #0]
 8002f98:	4b3e      	ldr	r3, [pc, #248]	; (8003094 <OUTPUT_periodic_poll+0x2fc>)
 8002f9a:	0092      	lsls	r2, r2, #2
 8002f9c:	58d3      	ldr	r3, [r2, r3]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	701a      	strb	r2, [r3, #0]
					{
						OUTPUT_struct_t_buf[i]->state = _OUTPUT_state_ON;
						OUTPUT_struct_t_buf[i]->OUTPUT_BaseCtrl(1);
						timer_set(&OUTPUT_struct_t_buf[i]->timeout, OUTPUT_struct_t_buf[i]->ON_duty);
					}
					break;
 8002fa2:	e067      	b.n	8003074 <OUTPUT_periodic_poll+0x2dc>
							OUTPUT_struct_t_buf[i]->state = _OUTPUT_state_REPEAT;
 8002fa4:	1dfb      	adds	r3, r7, #7
 8002fa6:	781a      	ldrb	r2, [r3, #0]
 8002fa8:	4b3a      	ldr	r3, [pc, #232]	; (8003094 <OUTPUT_periodic_poll+0x2fc>)
 8002faa:	0092      	lsls	r2, r2, #2
 8002fac:	58d3      	ldr	r3, [r2, r3]
 8002fae:	2203      	movs	r2, #3
 8002fb0:	705a      	strb	r2, [r3, #1]
							OUTPUT_struct_t_buf[i]->timeout = OUTPUT_struct_t_buf[i]->duty_timeout; // ???
 8002fb2:	1dfb      	adds	r3, r7, #7
 8002fb4:	781a      	ldrb	r2, [r3, #0]
 8002fb6:	4b37      	ldr	r3, [pc, #220]	; (8003094 <OUTPUT_periodic_poll+0x2fc>)
 8002fb8:	0092      	lsls	r2, r2, #2
 8002fba:	58d2      	ldr	r2, [r2, r3]
 8002fbc:	1dfb      	adds	r3, r7, #7
 8002fbe:	7819      	ldrb	r1, [r3, #0]
 8002fc0:	4b34      	ldr	r3, [pc, #208]	; (8003094 <OUTPUT_periodic_poll+0x2fc>)
 8002fc2:	0089      	lsls	r1, r1, #2
 8002fc4:	58cb      	ldr	r3, [r1, r3]
 8002fc6:	3310      	adds	r3, #16
 8002fc8:	3220      	adds	r2, #32
 8002fca:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002fcc:	c313      	stmia	r3!, {r0, r1, r4}
 8002fce:	6812      	ldr	r2, [r2, #0]
 8002fd0:	601a      	str	r2, [r3, #0]
					break;
 8002fd2:	e04f      	b.n	8003074 <OUTPUT_periodic_poll+0x2dc>
						OUTPUT_struct_t_buf[i]->state = _OUTPUT_state_ON;
 8002fd4:	1dfb      	adds	r3, r7, #7
 8002fd6:	781a      	ldrb	r2, [r3, #0]
 8002fd8:	4b2e      	ldr	r3, [pc, #184]	; (8003094 <OUTPUT_periodic_poll+0x2fc>)
 8002fda:	0092      	lsls	r2, r2, #2
 8002fdc:	58d3      	ldr	r3, [r2, r3]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	705a      	strb	r2, [r3, #1]
						OUTPUT_struct_t_buf[i]->OUTPUT_BaseCtrl(1);
 8002fe2:	1dfb      	adds	r3, r7, #7
 8002fe4:	781a      	ldrb	r2, [r3, #0]
 8002fe6:	4b2b      	ldr	r3, [pc, #172]	; (8003094 <OUTPUT_periodic_poll+0x2fc>)
 8002fe8:	0092      	lsls	r2, r2, #2
 8002fea:	58d3      	ldr	r3, [r2, r3]
 8002fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fee:	2001      	movs	r0, #1
 8002ff0:	4798      	blx	r3
						timer_set(&OUTPUT_struct_t_buf[i]->timeout, OUTPUT_struct_t_buf[i]->ON_duty);
 8002ff2:	1dfb      	adds	r3, r7, #7
 8002ff4:	781a      	ldrb	r2, [r3, #0]
 8002ff6:	4b27      	ldr	r3, [pc, #156]	; (8003094 <OUTPUT_periodic_poll+0x2fc>)
 8002ff8:	0092      	lsls	r2, r2, #2
 8002ffa:	58d3      	ldr	r3, [r2, r3]
 8002ffc:	3310      	adds	r3, #16
 8002ffe:	0018      	movs	r0, r3
 8003000:	1dfb      	adds	r3, r7, #7
 8003002:	781a      	ldrb	r2, [r3, #0]
 8003004:	4b23      	ldr	r3, [pc, #140]	; (8003094 <OUTPUT_periodic_poll+0x2fc>)
 8003006:	0092      	lsls	r2, r2, #2
 8003008:	58d3      	ldr	r3, [r2, r3]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	0019      	movs	r1, r3
 800300e:	f000 ff37 	bl	8003e80 <timer_set>
					break;
 8003012:	e02f      	b.n	8003074 <OUTPUT_periodic_poll+0x2dc>

				case _OUTPUT_state_REPEAT:
					// Thoi gian bat dau chu ky moi da den
					OUTPUT_struct_t_buf[i]->state = _OUTPUT_state_ON;
 8003014:	1dfb      	adds	r3, r7, #7
 8003016:	781a      	ldrb	r2, [r3, #0]
 8003018:	4b1e      	ldr	r3, [pc, #120]	; (8003094 <OUTPUT_periodic_poll+0x2fc>)
 800301a:	0092      	lsls	r2, r2, #2
 800301c:	58d3      	ldr	r3, [r2, r3]
 800301e:	2201      	movs	r2, #1
 8003020:	705a      	strb	r2, [r3, #1]
					OUTPUT_struct_t_buf[i]->OUTPUT_BaseCtrl(1);
 8003022:	1dfb      	adds	r3, r7, #7
 8003024:	781a      	ldrb	r2, [r3, #0]
 8003026:	4b1b      	ldr	r3, [pc, #108]	; (8003094 <OUTPUT_periodic_poll+0x2fc>)
 8003028:	0092      	lsls	r2, r2, #2
 800302a:	58d3      	ldr	r3, [r2, r3]
 800302c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302e:	2001      	movs	r0, #1
 8003030:	4798      	blx	r3
					timer_set(&OUTPUT_struct_t_buf[i]->timeout, OUTPUT_struct_t_buf[i]->ON_duty);
 8003032:	1dfb      	adds	r3, r7, #7
 8003034:	781a      	ldrb	r2, [r3, #0]
 8003036:	4b17      	ldr	r3, [pc, #92]	; (8003094 <OUTPUT_periodic_poll+0x2fc>)
 8003038:	0092      	lsls	r2, r2, #2
 800303a:	58d3      	ldr	r3, [r2, r3]
 800303c:	3310      	adds	r3, #16
 800303e:	0018      	movs	r0, r3
 8003040:	1dfb      	adds	r3, r7, #7
 8003042:	781a      	ldrb	r2, [r3, #0]
 8003044:	4b13      	ldr	r3, [pc, #76]	; (8003094 <OUTPUT_periodic_poll+0x2fc>)
 8003046:	0092      	lsls	r2, r2, #2
 8003048:	58d3      	ldr	r3, [r2, r3]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	0019      	movs	r1, r3
 800304e:	f000 ff17 	bl	8003e80 <timer_set>
					timer_reset(&OUTPUT_struct_t_buf[i]->duty_timeout);
 8003052:	1dfb      	adds	r3, r7, #7
 8003054:	781a      	ldrb	r2, [r3, #0]
 8003056:	4b0f      	ldr	r3, [pc, #60]	; (8003094 <OUTPUT_periodic_poll+0x2fc>)
 8003058:	0092      	lsls	r2, r2, #2
 800305a:	58d3      	ldr	r3, [r2, r3]
 800305c:	3320      	adds	r3, #32
 800305e:	0018      	movs	r0, r3
 8003060:	f000 ff26 	bl	8003eb0 <timer_reset>
					break;
 8003064:	e006      	b.n	8003074 <OUTPUT_periodic_poll+0x2dc>
			continue;
 8003066:	46c0      	nop			; (mov r8, r8)
 8003068:	e004      	b.n	8003074 <OUTPUT_periodic_poll+0x2dc>
			continue;
 800306a:	46c0      	nop			; (mov r8, r8)
 800306c:	e002      	b.n	8003074 <OUTPUT_periodic_poll+0x2dc>
				break;
 800306e:	46c0      	nop			; (mov r8, r8)
 8003070:	e000      	b.n	8003074 <OUTPUT_periodic_poll+0x2dc>

				} // end switch state
			}	  // end timer_expired--> co the la ON_duty hoac OFF duty
 8003072:	46c0      	nop			; (mov r8, r8)
	for (uint8_t i = 0; i < OUTPUT_number_max; i++)
 8003074:	1dfb      	adds	r3, r7, #7
 8003076:	781a      	ldrb	r2, [r3, #0]
 8003078:	1dfb      	adds	r3, r7, #7
 800307a:	3201      	adds	r2, #1
 800307c:	701a      	strb	r2, [r3, #0]
 800307e:	1dfb      	adds	r3, r7, #7
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	2b04      	cmp	r3, #4
 8003084:	d800      	bhi.n	8003088 <OUTPUT_periodic_poll+0x2f0>
 8003086:	e68e      	b.n	8002da6 <OUTPUT_periodic_poll+0xe>
		}		  // end if mode = blink
	}			  // end for
}
 8003088:	46c0      	nop			; (mov r8, r8)
 800308a:	46c0      	nop			; (mov r8, r8)
 800308c:	46bd      	mov	sp, r7
 800308e:	b003      	add	sp, #12
 8003090:	bd90      	pop	{r4, r7, pc}
 8003092:	46c0      	nop			; (mov r8, r8)
 8003094:	20000338 	.word	0x20000338

08003098 <OUTPUT_config_new_control>:

uint8_t OUTPUT_config_new_control(OUTPUT_struct_t *state, void (*OUTPUT_BaseCtrl_pointer)(uint8_t ON_OFF))
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]

	for (uint8_t i = 0; i < OUTPUT_number_max; i++)
 80030a2:	230f      	movs	r3, #15
 80030a4:	18fb      	adds	r3, r7, r3
 80030a6:	2200      	movs	r2, #0
 80030a8:	701a      	strb	r2, [r3, #0]
 80030aa:	e021      	b.n	80030f0 <OUTPUT_config_new_control+0x58>
	{
		if (OUTPUT_struct_t_buf[i] == 0)
 80030ac:	210f      	movs	r1, #15
 80030ae:	187b      	adds	r3, r7, r1
 80030b0:	781a      	ldrb	r2, [r3, #0]
 80030b2:	4b14      	ldr	r3, [pc, #80]	; (8003104 <OUTPUT_config_new_control+0x6c>)
 80030b4:	0092      	lsls	r2, r2, #2
 80030b6:	58d3      	ldr	r3, [r2, r3]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d113      	bne.n	80030e4 <OUTPUT_config_new_control+0x4c>
		{
			OUTPUT_struct_t_buf[i] = state;
 80030bc:	0008      	movs	r0, r1
 80030be:	187b      	adds	r3, r7, r1
 80030c0:	781a      	ldrb	r2, [r3, #0]
 80030c2:	4b10      	ldr	r3, [pc, #64]	; (8003104 <OUTPUT_config_new_control+0x6c>)
 80030c4:	0092      	lsls	r2, r2, #2
 80030c6:	6879      	ldr	r1, [r7, #4]
 80030c8:	50d1      	str	r1, [r2, r3]
			OUTPUT_struct_t_buf[i]->OUTPUT_BaseCtrl = OUTPUT_BaseCtrl_pointer;
 80030ca:	0001      	movs	r1, r0
 80030cc:	187b      	adds	r3, r7, r1
 80030ce:	781a      	ldrb	r2, [r3, #0]
 80030d0:	4b0c      	ldr	r3, [pc, #48]	; (8003104 <OUTPUT_config_new_control+0x6c>)
 80030d2:	0092      	lsls	r2, r2, #2
 80030d4:	58d3      	ldr	r3, [r2, r3]
 80030d6:	683a      	ldr	r2, [r7, #0]
 80030d8:	631a      	str	r2, [r3, #48]	; 0x30
			return i + 1;
 80030da:	187b      	adds	r3, r7, r1
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	3301      	adds	r3, #1
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	e00b      	b.n	80030fc <OUTPUT_config_new_control+0x64>
	for (uint8_t i = 0; i < OUTPUT_number_max; i++)
 80030e4:	210f      	movs	r1, #15
 80030e6:	187b      	adds	r3, r7, r1
 80030e8:	781a      	ldrb	r2, [r3, #0]
 80030ea:	187b      	adds	r3, r7, r1
 80030ec:	3201      	adds	r2, #1
 80030ee:	701a      	strb	r2, [r3, #0]
 80030f0:	230f      	movs	r3, #15
 80030f2:	18fb      	adds	r3, r7, r3
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	2b04      	cmp	r3, #4
 80030f8:	d9d8      	bls.n	80030ac <OUTPUT_config_new_control+0x14>
		}
	}
	return 0;
 80030fa:	2300      	movs	r3, #0
}
 80030fc:	0018      	movs	r0, r3
 80030fe:	46bd      	mov	sp, r7
 8003100:	b004      	add	sp, #16
 8003102:	bd80      	pop	{r7, pc}
 8003104:	20000338 	.word	0x20000338

08003108 <RS232LL_TxRequest>:
 *Cach dung: dat trong ham Main
 *Tham so truyen: Slave, TxCmd, TxData
 *Gia tri thay doi: RS232LL_TxCmdStr[], RS232LL_TxDataStr[]
 *Tra ve: 1-True   0-False
*/
uint8_t RS232LL_TxRequest(uint8_t Slave, uint8_t TxCmd, uint8_t TxData){
 8003108:	b590      	push	{r4, r7, lr}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	0004      	movs	r4, r0
 8003110:	0008      	movs	r0, r1
 8003112:	0011      	movs	r1, r2
 8003114:	1dfb      	adds	r3, r7, #7
 8003116:	1c22      	adds	r2, r4, #0
 8003118:	701a      	strb	r2, [r3, #0]
 800311a:	1dbb      	adds	r3, r7, #6
 800311c:	1c02      	adds	r2, r0, #0
 800311e:	701a      	strb	r2, [r3, #0]
 8003120:	1d7b      	adds	r3, r7, #5
 8003122:	1c0a      	adds	r2, r1, #0
 8003124:	701a      	strb	r2, [r3, #0]
    //if (Slave!=_RS232LL_MASTER)  return 0;
    HexChar2Str(RS232LL_TxCmdStr,TxCmd);
 8003126:	1dbb      	adds	r3, r7, #6
 8003128:	781a      	ldrb	r2, [r3, #0]
 800312a:	4b13      	ldr	r3, [pc, #76]	; (8003178 <RS232LL_TxRequest+0x70>)
 800312c:	0011      	movs	r1, r2
 800312e:	0018      	movs	r0, r3
 8003130:	f7fe fc8b 	bl	8001a4a <HexChar2Str>
    HexChar2Str(RS232LL_TxDataStr,TxData);
 8003134:	1d7b      	adds	r3, r7, #5
 8003136:	781a      	ldrb	r2, [r3, #0]
 8003138:	4b10      	ldr	r3, [pc, #64]	; (800317c <RS232LL_TxRequest+0x74>)
 800313a:	0011      	movs	r1, r2
 800313c:	0018      	movs	r0, r3
 800313e:	f7fe fc84 	bl	8001a4a <HexChar2Str>

    _RS232LL_PutChar(_RS232LL_STX);
 8003142:	201e      	movs	r0, #30
 8003144:	f7ff fac6 	bl	80026d4 <uart4_putc>
    _RS232LL_PutChar(Slave);
 8003148:	1dfb      	adds	r3, r7, #7
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	0018      	movs	r0, r3
 800314e:	f7ff fac1 	bl	80026d4 <uart4_putc>
    _RS232LL_PutChar(_RS232LL_ADDR_MASTER);
 8003152:	2001      	movs	r0, #1
 8003154:	f7ff fabe 	bl	80026d4 <uart4_putc>
    _RS232LL_PutString(RS232LL_TxCmdStr);
 8003158:	4b07      	ldr	r3, [pc, #28]	; (8003178 <RS232LL_TxRequest+0x70>)
 800315a:	0018      	movs	r0, r3
 800315c:	f7ff fae6 	bl	800272c <uart4_puts>
    _RS232LL_PutString(RS232LL_TxDataStr);
 8003160:	4b06      	ldr	r3, [pc, #24]	; (800317c <RS232LL_TxRequest+0x74>)
 8003162:	0018      	movs	r0, r3
 8003164:	f7ff fae2 	bl	800272c <uart4_puts>
    _RS232LL_PutChar(_RS232LL_ETX);
 8003168:	201f      	movs	r0, #31
 800316a:	f7ff fab3 	bl	80026d4 <uart4_putc>
    return 1;
 800316e:	2301      	movs	r3, #1
}
 8003170:	0018      	movs	r0, r3
 8003172:	46bd      	mov	sp, r7
 8003174:	b003      	add	sp, #12
 8003176:	bd90      	pop	{r4, r7, pc}
 8003178:	20000368 	.word	0x20000368
 800317c:	20000354 	.word	0x20000354

08003180 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003184:	f3bf 8f4f 	dsb	sy
}
 8003188:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800318a:	4b04      	ldr	r3, [pc, #16]	; (800319c <__NVIC_SystemReset+0x1c>)
 800318c:	4a04      	ldr	r2, [pc, #16]	; (80031a0 <__NVIC_SystemReset+0x20>)
 800318e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003190:	f3bf 8f4f 	dsb	sy
}
 8003194:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003196:	46c0      	nop			; (mov r8, r8)
 8003198:	e7fd      	b.n	8003196 <__NVIC_SystemReset+0x16>
 800319a:	46c0      	nop			; (mov r8, r8)
 800319c:	e000ed00 	.word	0xe000ed00
 80031a0:	05fa0004 	.word	0x05fa0004

080031a4 <BTN0_Stt>:
#define RL_25oC() OUTPUT_set_mode(&_CTRL_RLOldSS,_OUTPUT_mode_off)
#define RL_95oC() OUTPUT_set_mode(&_CTRL_RLOldSS,_OUTPUT_mode_on)


#define APP_BUTTON_NUM	1
uint8_t BTN0_Stt() {return (uint8_t)(!BUTTON_PinStt);}
 80031a4:	b580      	push	{r7, lr}
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	2380      	movs	r3, #128	; 0x80
 80031aa:	01db      	lsls	r3, r3, #7
 80031ac:	4a05      	ldr	r2, [pc, #20]	; (80031c4 <BTN0_Stt+0x20>)
 80031ae:	0019      	movs	r1, r3
 80031b0:	0010      	movs	r0, r2
 80031b2:	f004 f849 	bl	8007248 <HAL_GPIO_ReadPin>
 80031b6:	0003      	movs	r3, r0
 80031b8:	425a      	negs	r2, r3
 80031ba:	4153      	adcs	r3, r2
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	0018      	movs	r0, r3
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	50000400 	.word	0x50000400

080031c8 <failGoToEnd>:
void doTest_checkPass();
void doTest_turnOffPwr();

void failGoToEnd();

void failGoToEnd(){
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af02      	add	r7, sp, #8
	TEST_KIT.state = _TESTAC_TURNOFF_PWR;
 80031ce:	4b0d      	ldr	r3, [pc, #52]	; (8003204 <failGoToEnd+0x3c>)
 80031d0:	2207      	movs	r2, #7
 80031d2:	701a      	strb	r2, [r3, #0]
	_BUZ_BlinkFail(1);
 80031d4:	480c      	ldr	r0, [pc, #48]	; (8003208 <failGoToEnd+0x40>)
 80031d6:	2300      	movs	r3, #0
 80031d8:	9300      	str	r3, [sp, #0]
 80031da:	2305      	movs	r3, #5
 80031dc:	2205      	movs	r2, #5
 80031de:	2105      	movs	r1, #5
 80031e0:	f7ff fdab 	bl	8002d3a <OUTPUT_set_blink>
	test_ac_TxToSlave(&TEST_KIT, _RS232LL_ADDR_AF, _RS232LL_AfCmd_RepStt_RstFactory, 0xFF, CLOCK_SECOND);
 80031e4:	4807      	ldr	r0, [pc, #28]	; (8003204 <failGoToEnd+0x3c>)
 80031e6:	2364      	movs	r3, #100	; 0x64
 80031e8:	9300      	str	r3, [sp, #0]
 80031ea:	23ff      	movs	r3, #255	; 0xff
 80031ec:	222f      	movs	r2, #47	; 0x2f
 80031ee:	2103      	movs	r1, #3
 80031f0:	f000 f9a0 	bl	8003534 <test_ac_TxToSlave>
	timer_stop(&_timer_read_byteInfo);
 80031f4:	4b05      	ldr	r3, [pc, #20]	; (800320c <failGoToEnd+0x44>)
 80031f6:	0018      	movs	r0, r3
 80031f8:	f000 fe9e 	bl	8003f38 <timer_stop>
}
 80031fc:	46c0      	nop			; (mov r8, r8)
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	46c0      	nop			; (mov r8, r8)
 8003204:	2000036c 	.word	0x2000036c
 8003208:	20000254 	.word	0x20000254
 800320c:	2000040c 	.word	0x2000040c

08003210 <update_infoByteAf3>:

void update_infoByteAf3()
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af02      	add	r7, sp, #8
	static uint8_t checkByte=0x32,retry=0;

	if (!timer_expired(&_timer_read_byteInfo))
 8003216:	4b5b      	ldr	r3, [pc, #364]	; (8003384 <update_infoByteAf3+0x174>)
 8003218:	0018      	movs	r0, r3
 800321a:	f000 fe6d 	bl	8003ef8 <timer_expired>
 800321e:	1e03      	subs	r3, r0, #0
 8003220:	d100      	bne.n	8003224 <update_infoByteAf3+0x14>
 8003222:	e0ac      	b.n	800337e <update_infoByteAf3+0x16e>
		return;
	timer_set(&_timer_read_byteInfo,2*CLOCK_SECOND);
 8003224:	4b57      	ldr	r3, [pc, #348]	; (8003384 <update_infoByteAf3+0x174>)
 8003226:	21c8      	movs	r1, #200	; 0xc8
 8003228:	0018      	movs	r0, r3
 800322a:	f000 fe29 	bl	8003e80 <timer_set>

	if(checkByte==0x31){
 800322e:	4b56      	ldr	r3, [pc, #344]	; (8003388 <update_infoByteAf3+0x178>)
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	2b31      	cmp	r3, #49	; 0x31
 8003234:	d118      	bne.n	8003268 <update_infoByteAf3+0x58>
		if(TEST_KIT.RepData[_RepStt_GetByte1].Byte1_bit_t.RLCOM == 0){
 8003236:	4b55      	ldr	r3, [pc, #340]	; (800338c <update_infoByteAf3+0x17c>)
 8003238:	7b5b      	ldrb	r3, [r3, #13]
 800323a:	2201      	movs	r2, #1
 800323c:	4013      	ands	r3, r2
 800323e:	b2db      	uxtb	r3, r3
 8003240:	2b00      	cmp	r3, #0
 8003242:	d111      	bne.n	8003268 <update_infoByteAf3+0x58>
			sprintf(str1,"L0-RL COM");
 8003244:	4a52      	ldr	r2, [pc, #328]	; (8003390 <update_infoByteAf3+0x180>)
 8003246:	4b53      	ldr	r3, [pc, #332]	; (8003394 <update_infoByteAf3+0x184>)
 8003248:	0011      	movs	r1, r2
 800324a:	0018      	movs	r0, r3
 800324c:	f008 fcf4 	bl	800bc38 <siprintf>
			if(++retry > 3) failGoToEnd();
 8003250:	4b51      	ldr	r3, [pc, #324]	; (8003398 <update_infoByteAf3+0x188>)
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	3301      	adds	r3, #1
 8003256:	b2da      	uxtb	r2, r3
 8003258:	4b4f      	ldr	r3, [pc, #316]	; (8003398 <update_infoByteAf3+0x188>)
 800325a:	701a      	strb	r2, [r3, #0]
 800325c:	4b4e      	ldr	r3, [pc, #312]	; (8003398 <update_infoByteAf3+0x188>)
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	2b03      	cmp	r3, #3
 8003262:	d901      	bls.n	8003268 <update_infoByteAf3+0x58>
 8003264:	f7ff ffb0 	bl	80031c8 <failGoToEnd>
		}
	}

	if(TEST_KIT.RepData[_RepStt_GetByte2].byte!=0){
 8003268:	4b48      	ldr	r3, [pc, #288]	; (800338c <update_infoByteAf3+0x17c>)
 800326a:	7b9b      	ldrb	r3, [r3, #14]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d100      	bne.n	8003272 <update_infoByteAf3+0x62>
 8003270:	e06c      	b.n	800334c <update_infoByteAf3+0x13c>
		if(TEST_KIT.RepData[_RepStt_GetByte2].Byte2_bit_t.CUR_WRONG == 0){
 8003272:	4b46      	ldr	r3, [pc, #280]	; (800338c <update_infoByteAf3+0x17c>)
 8003274:	7b9b      	ldrb	r3, [r3, #14]
 8003276:	2201      	movs	r2, #1
 8003278:	4013      	ands	r3, r2
 800327a:	b2db      	uxtb	r3, r3
 800327c:	2b00      	cmp	r3, #0
 800327e:	d055      	beq.n	800332c <update_infoByteAf3+0x11c>
			//sprintf(str1,"CUR_WRONG");
		}
		else if(TEST_KIT.RepData[_RepStt_GetByte2].Byte2_bit_t.CUR_LEAKAGE == 0){
 8003280:	4b42      	ldr	r3, [pc, #264]	; (800338c <update_infoByteAf3+0x17c>)
 8003282:	7b9b      	ldrb	r3, [r3, #14]
 8003284:	2202      	movs	r2, #2
 8003286:	4013      	ands	r3, r2
 8003288:	b2db      	uxtb	r3, r3
 800328a:	2b00      	cmp	r3, #0
 800328c:	d04e      	beq.n	800332c <update_infoByteAf3+0x11c>
			//sprintf(str1,"L1-Dong ro");
		}
		else if(TEST_KIT.RepData[_RepStt_GetByte2].Byte2_bit_t.CUR_NOLOAD == 0){
 800328e:	4b3f      	ldr	r3, [pc, #252]	; (800338c <update_infoByteAf3+0x17c>)
 8003290:	7b9b      	ldrb	r3, [r3, #14]
 8003292:	2204      	movs	r2, #4
 8003294:	4013      	ands	r3, r2
 8003296:	b2db      	uxtb	r3, r3
 8003298:	2b00      	cmp	r3, #0
 800329a:	d108      	bne.n	80032ae <update_infoByteAf3+0x9e>
			sprintf(str1,"L2-Khong tai");
 800329c:	4a3f      	ldr	r2, [pc, #252]	; (800339c <update_infoByteAf3+0x18c>)
 800329e:	4b3d      	ldr	r3, [pc, #244]	; (8003394 <update_infoByteAf3+0x184>)
 80032a0:	0011      	movs	r1, r2
 80032a2:	0018      	movs	r0, r3
 80032a4:	f008 fcc8 	bl	800bc38 <siprintf>
			failGoToEnd();
 80032a8:	f7ff ff8e 	bl	80031c8 <failGoToEnd>
 80032ac:	e03e      	b.n	800332c <update_infoByteAf3+0x11c>
		}
		else if(TEST_KIT.RepData[_RepStt_GetByte2].Byte2_bit_t.FREQUENCY == 0){
 80032ae:	4b37      	ldr	r3, [pc, #220]	; (800338c <update_infoByteAf3+0x17c>)
 80032b0:	7b9b      	ldrb	r3, [r3, #14]
 80032b2:	2208      	movs	r2, #8
 80032b4:	4013      	ands	r3, r2
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d108      	bne.n	80032ce <update_infoByteAf3+0xbe>
			sprintf(str1,"L3-Tan so AC");
 80032bc:	4a38      	ldr	r2, [pc, #224]	; (80033a0 <update_infoByteAf3+0x190>)
 80032be:	4b35      	ldr	r3, [pc, #212]	; (8003394 <update_infoByteAf3+0x184>)
 80032c0:	0011      	movs	r1, r2
 80032c2:	0018      	movs	r0, r3
 80032c4:	f008 fcb8 	bl	800bc38 <siprintf>
			failGoToEnd();
 80032c8:	f7ff ff7e 	bl	80031c8 <failGoToEnd>
 80032cc:	e02e      	b.n	800332c <update_infoByteAf3+0x11c>
		}
		else if(TEST_KIT.RepData[_RepStt_GetByte2].Byte2_bit_t.CUR_OVER == 0){
 80032ce:	4b2f      	ldr	r3, [pc, #188]	; (800338c <update_infoByteAf3+0x17c>)
 80032d0:	7b9b      	ldrb	r3, [r3, #14]
 80032d2:	2210      	movs	r2, #16
 80032d4:	4013      	ands	r3, r2
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d108      	bne.n	80032ee <update_infoByteAf3+0xde>
			sprintf(str1,"L4-Qua Tai");
 80032dc:	4a31      	ldr	r2, [pc, #196]	; (80033a4 <update_infoByteAf3+0x194>)
 80032de:	4b2d      	ldr	r3, [pc, #180]	; (8003394 <update_infoByteAf3+0x184>)
 80032e0:	0011      	movs	r1, r2
 80032e2:	0018      	movs	r0, r3
 80032e4:	f008 fca8 	bl	800bc38 <siprintf>
			failGoToEnd();
 80032e8:	f7ff ff6e 	bl	80031c8 <failGoToEnd>
 80032ec:	e01e      	b.n	800332c <update_infoByteAf3+0x11c>
		}
		else if(TEST_KIT.RepData[_RepStt_GetByte2].Byte2_bit_t.DIS_PTC1 == 0){
 80032ee:	4b27      	ldr	r3, [pc, #156]	; (800338c <update_infoByteAf3+0x17c>)
 80032f0:	7b9b      	ldrb	r3, [r3, #14]
 80032f2:	2220      	movs	r2, #32
 80032f4:	4013      	ands	r3, r2
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d108      	bne.n	800330e <update_infoByteAf3+0xfe>
			sprintf(str1,"L5-Ptc1 Binh");
 80032fc:	4a2a      	ldr	r2, [pc, #168]	; (80033a8 <update_infoByteAf3+0x198>)
 80032fe:	4b25      	ldr	r3, [pc, #148]	; (8003394 <update_infoByteAf3+0x184>)
 8003300:	0011      	movs	r1, r2
 8003302:	0018      	movs	r0, r3
 8003304:	f008 fc98 	bl	800bc38 <siprintf>
			failGoToEnd();
 8003308:	f7ff ff5e 	bl	80031c8 <failGoToEnd>
 800330c:	e00e      	b.n	800332c <update_infoByteAf3+0x11c>
		}
		else if(TEST_KIT.RepData[_RepStt_GetByte2].Byte2_bit_t.DIS_PTC2 == 0){
 800330e:	4b1f      	ldr	r3, [pc, #124]	; (800338c <update_infoByteAf3+0x17c>)
 8003310:	7b9b      	ldrb	r3, [r3, #14]
 8003312:	2240      	movs	r2, #64	; 0x40
 8003314:	4013      	ands	r3, r2
 8003316:	b2db      	uxtb	r3, r3
 8003318:	2b00      	cmp	r3, #0
 800331a:	d107      	bne.n	800332c <update_infoByteAf3+0x11c>
			sprintf(str1,"L6-Ptc2 AC");
 800331c:	4a23      	ldr	r2, [pc, #140]	; (80033ac <update_infoByteAf3+0x19c>)
 800331e:	4b1d      	ldr	r3, [pc, #116]	; (8003394 <update_infoByteAf3+0x184>)
 8003320:	0011      	movs	r1, r2
 8003322:	0018      	movs	r0, r3
 8003324:	f008 fc88 	bl	800bc38 <siprintf>
			failGoToEnd();
 8003328:	f7ff ff4e 	bl	80031c8 <failGoToEnd>
		else if(TEST_KIT.RepData[_RepStt_GetByte2].Byte2_bit_t.FAN == 0){
			//sprintf(str1,"FAN");
		}

		//co loi byte 2
		if(TEST_KIT.RepData[_RepStt_GetByte2].byte != 0xFF){
 800332c:	4b17      	ldr	r3, [pc, #92]	; (800338c <update_infoByteAf3+0x17c>)
 800332e:	7b9b      	ldrb	r3, [r3, #14]
 8003330:	2bff      	cmp	r3, #255	; 0xff
 8003332:	d00b      	beq.n	800334c <update_infoByteAf3+0x13c>
			if(++retry > 3) failGoToEnd();
 8003334:	4b18      	ldr	r3, [pc, #96]	; (8003398 <update_infoByteAf3+0x188>)
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	3301      	adds	r3, #1
 800333a:	b2da      	uxtb	r2, r3
 800333c:	4b16      	ldr	r3, [pc, #88]	; (8003398 <update_infoByteAf3+0x188>)
 800333e:	701a      	strb	r2, [r3, #0]
 8003340:	4b15      	ldr	r3, [pc, #84]	; (8003398 <update_infoByteAf3+0x188>)
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	2b03      	cmp	r3, #3
 8003346:	d901      	bls.n	800334c <update_infoByteAf3+0x13c>
 8003348:	f7ff ff3e 	bl	80031c8 <failGoToEnd>
		}
	}

	checkByte = (checkByte==0x32) ? 0x31 : 0x032;
 800334c:	4b0e      	ldr	r3, [pc, #56]	; (8003388 <update_infoByteAf3+0x178>)
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	2b32      	cmp	r3, #50	; 0x32
 8003352:	d101      	bne.n	8003358 <update_infoByteAf3+0x148>
 8003354:	2231      	movs	r2, #49	; 0x31
 8003356:	e000      	b.n	800335a <update_infoByteAf3+0x14a>
 8003358:	2232      	movs	r2, #50	; 0x32
 800335a:	4b0b      	ldr	r3, [pc, #44]	; (8003388 <update_infoByteAf3+0x178>)
 800335c:	701a      	strb	r2, [r3, #0]

	TEST_KIT.RepData[_RepStt_GetByte1].byte = 0;
 800335e:	4b0b      	ldr	r3, [pc, #44]	; (800338c <update_infoByteAf3+0x17c>)
 8003360:	2200      	movs	r2, #0
 8003362:	735a      	strb	r2, [r3, #13]
	TEST_KIT.RepData[_RepStt_GetByte2].byte = 0;
 8003364:	4b09      	ldr	r3, [pc, #36]	; (800338c <update_infoByteAf3+0x17c>)
 8003366:	2200      	movs	r2, #0
 8003368:	739a      	strb	r2, [r3, #14]
	test_ac_TxToSlave(&TEST_KIT, _RS232LL_ADDR_AF, checkByte, 0xFF, CLOCK_SECOND / 2);
 800336a:	4b07      	ldr	r3, [pc, #28]	; (8003388 <update_infoByteAf3+0x178>)
 800336c:	781a      	ldrb	r2, [r3, #0]
 800336e:	4807      	ldr	r0, [pc, #28]	; (800338c <update_infoByteAf3+0x17c>)
 8003370:	2332      	movs	r3, #50	; 0x32
 8003372:	9300      	str	r3, [sp, #0]
 8003374:	23ff      	movs	r3, #255	; 0xff
 8003376:	2103      	movs	r1, #3
 8003378:	f000 f8dc 	bl	8003534 <test_ac_TxToSlave>
 800337c:	e000      	b.n	8003380 <update_infoByteAf3+0x170>
		return;
 800337e:	46c0      	nop			; (mov r8, r8)
}
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	2000040c 	.word	0x2000040c
 8003388:	20000002 	.word	0x20000002
 800338c:	2000036c 	.word	0x2000036c
 8003390:	0800c49c 	.word	0x0800c49c
 8003394:	2000037c 	.word	0x2000037c
 8003398:	200000b7 	.word	0x200000b7
 800339c:	0800c4a8 	.word	0x0800c4a8
 80033a0:	0800c4b8 	.word	0x0800c4b8
 80033a4:	0800c4c8 	.word	0x0800c4c8
 80033a8:	0800c4d4 	.word	0x0800c4d4
 80033ac:	0800c4e4 	.word	0x0800c4e4

080033b0 <string_Uart4_report>:
 *
 * @param string
 * @param size
 */
void string_Uart4_report(char *string, uint16_t size)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	000a      	movs	r2, r1
 80033ba:	1cbb      	adds	r3, r7, #2
 80033bc:	801a      	strh	r2, [r3, #0]
	raw_data((com_protocol_t *)string, size);
 80033be:	1cbb      	adds	r3, r7, #2
 80033c0:	881a      	ldrh	r2, [r3, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	0011      	movs	r1, r2
 80033c6:	0018      	movs	r0, r3
 80033c8:	f7fe fe0c 	bl	8001fe4 <raw_data>
}
 80033cc:	46c0      	nop			; (mov r8, r8)
 80033ce:	46bd      	mov	sp, r7
 80033d0:	b002      	add	sp, #8
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <test_ac_RXfromSlave>:
 * @param RxCmd
 * @param RxData
 * @return ** void
 */
void test_ac_RXfromSlave(Slave_state_e Rep_Up, uint8_t TxAddr, uint8_t RxCmd, uint8_t RxData)
{
 80033d4:	b5b0      	push	{r4, r5, r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af02      	add	r7, sp, #8
 80033da:	0005      	movs	r5, r0
 80033dc:	000c      	movs	r4, r1
 80033de:	0010      	movs	r0, r2
 80033e0:	0019      	movs	r1, r3
 80033e2:	1dfb      	adds	r3, r7, #7
 80033e4:	1c2a      	adds	r2, r5, #0
 80033e6:	701a      	strb	r2, [r3, #0]
 80033e8:	1dbb      	adds	r3, r7, #6
 80033ea:	1c22      	adds	r2, r4, #0
 80033ec:	701a      	strb	r2, [r3, #0]
 80033ee:	1d7b      	adds	r3, r7, #5
 80033f0:	1c02      	adds	r2, r0, #0
 80033f2:	701a      	strb	r2, [r3, #0]
 80033f4:	1d3b      	adds	r3, r7, #4
 80033f6:	1c0a      	adds	r2, r1, #0
 80033f8:	701a      	strb	r2, [r3, #0]
	static uint8_t repIdx;
	// With Slave AF3
	if (TxAddr == 0x03)
 80033fa:	1dbb      	adds	r3, r7, #6
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	2b03      	cmp	r3, #3
 8003400:	d000      	beq.n	8003404 <test_ac_RXfromSlave+0x30>
 8003402:	e089      	b.n	8003518 <test_ac_RXfromSlave+0x144>
	{
		// nếu Af3 reply thì lấy hết
		switch (RxCmd)
 8003404:	1d7b      	adds	r3, r7, #5
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	3b20      	subs	r3, #32
 800340a:	2b12      	cmp	r3, #18
 800340c:	d900      	bls.n	8003410 <test_ac_RXfromSlave+0x3c>
 800340e:	e07e      	b.n	800350e <test_ac_RXfromSlave+0x13a>
 8003410:	009a      	lsls	r2, r3, #2
 8003412:	4b43      	ldr	r3, [pc, #268]	; (8003520 <test_ac_RXfromSlave+0x14c>)
 8003414:	18d3      	adds	r3, r2, r3
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	469f      	mov	pc, r3
		{
		case __RS232LL_AfCmd_ClickSW:
			repIdx = _RepStt_ClickJetSwt;
 800341a:	4b42      	ldr	r3, [pc, #264]	; (8003524 <test_ac_RXfromSlave+0x150>)
 800341c:	2200      	movs	r2, #0
 800341e:	701a      	strb	r2, [r3, #0]
			break;
 8003420:	e023      	b.n	800346a <test_ac_RXfromSlave+0x96>
		case __RS232LL_AfCmd_RepStt_CalibCapSS:
			repIdx = _RepStt_CalibCapSS;
 8003422:	4b40      	ldr	r3, [pc, #256]	; (8003524 <test_ac_RXfromSlave+0x150>)
 8003424:	2202      	movs	r2, #2
 8003426:	701a      	strb	r2, [r3, #0]
			break;
 8003428:	e01f      	b.n	800346a <test_ac_RXfromSlave+0x96>
		case __RS232LL_AfCmd_SetEPPROM1:
			repIdx = _RepStt_SetEpp1;
 800342a:	4b3e      	ldr	r3, [pc, #248]	; (8003524 <test_ac_RXfromSlave+0x150>)
 800342c:	2203      	movs	r2, #3
 800342e:	701a      	strb	r2, [r3, #0]
			break;
 8003430:	e01b      	b.n	800346a <test_ac_RXfromSlave+0x96>
		case __RS232LL_AfCmd_SetEPPROM2:
			repIdx = _RepStt_SetEpp2;
 8003432:	4b3c      	ldr	r3, [pc, #240]	; (8003524 <test_ac_RXfromSlave+0x150>)
 8003434:	2204      	movs	r2, #4
 8003436:	701a      	strb	r2, [r3, #0]
			break;
 8003438:	e017      	b.n	800346a <test_ac_RXfromSlave+0x96>
		case __RS232LL_AfCmd_RepStt_CtrlFuncDCS:
			repIdx = _RepStt_CtrlFuncDCS;
 800343a:	4b3a      	ldr	r3, [pc, #232]	; (8003524 <test_ac_RXfromSlave+0x150>)
 800343c:	2205      	movs	r2, #5
 800343e:	701a      	strb	r2, [r3, #0]
			break;
 8003440:	e013      	b.n	800346a <test_ac_RXfromSlave+0x96>
		case __RS232LL_AfCmd_RepStt_CtrlFuncLEDs:
			repIdx = _RepStt_CtrlFuncLEDs;
 8003442:	4b38      	ldr	r3, [pc, #224]	; (8003524 <test_ac_RXfromSlave+0x150>)
 8003444:	2206      	movs	r2, #6
 8003446:	701a      	strb	r2, [r3, #0]
			break;
 8003448:	e00f      	b.n	800346a <test_ac_RXfromSlave+0x96>
		case _RS232LL_AfCmd_RepStt_RstFactory:
			repIdx = _RepStt_RstFactory;
 800344a:	4b36      	ldr	r3, [pc, #216]	; (8003524 <test_ac_RXfromSlave+0x150>)
 800344c:	2207      	movs	r2, #7
 800344e:	701a      	strb	r2, [r3, #0]
			break;
 8003450:	e00b      	b.n	800346a <test_ac_RXfromSlave+0x96>
		case _RS232LL_AfCmd_RepStt_GetByte0:
			repIdx = _RepStt_GetByte0;
 8003452:	4b34      	ldr	r3, [pc, #208]	; (8003524 <test_ac_RXfromSlave+0x150>)
 8003454:	2208      	movs	r2, #8
 8003456:	701a      	strb	r2, [r3, #0]
			break;
 8003458:	e007      	b.n	800346a <test_ac_RXfromSlave+0x96>
		case _RS232LL_AfCmd_RepStt_GetByte1:
			repIdx = _RepStt_GetByte1;
 800345a:	4b32      	ldr	r3, [pc, #200]	; (8003524 <test_ac_RXfromSlave+0x150>)
 800345c:	2209      	movs	r2, #9
 800345e:	701a      	strb	r2, [r3, #0]
			break;
 8003460:	e003      	b.n	800346a <test_ac_RXfromSlave+0x96>
		case _RS232LL_AfCmd_RepStt_GetByte2:
			repIdx = _RepStt_GetByte2;
 8003462:	4b30      	ldr	r3, [pc, #192]	; (8003524 <test_ac_RXfromSlave+0x150>)
 8003464:	220a      	movs	r2, #10
 8003466:	701a      	strb	r2, [r3, #0]
			break;
 8003468:	46c0      	nop			; (mov r8, r8)
		default:
			return;
		}

		if (repIdx > _RepStt_Total)
 800346a:	4b2e      	ldr	r3, [pc, #184]	; (8003524 <test_ac_RXfromSlave+0x150>)
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	2b0b      	cmp	r3, #11
 8003470:	d84f      	bhi.n	8003512 <test_ac_RXfromSlave+0x13e>
		{
			//debug_testAF("Loi repIdx > _RepStt_Totals");
			return;
		}

		if (Rep_Up == _SLAVE_REPLY){
 8003472:	1dfb      	adds	r3, r7, #7
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	2b01      	cmp	r3, #1
 8003478:	d118      	bne.n	80034ac <test_ac_RXfromSlave+0xd8>
			TEST_KIT.f_RxNotify = _SLAVE_REPLY;
 800347a:	4b2b      	ldr	r3, [pc, #172]	; (8003528 <test_ac_RXfromSlave+0x154>)
 800347c:	2201      	movs	r2, #1
 800347e:	73da      	strb	r2, [r3, #15]
			TEST_KIT.RepData[repIdx].byte = RxData;
 8003480:	4b28      	ldr	r3, [pc, #160]	; (8003524 <test_ac_RXfromSlave+0x150>)
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	001a      	movs	r2, r3
 8003486:	4b28      	ldr	r3, [pc, #160]	; (8003528 <test_ac_RXfromSlave+0x154>)
 8003488:	189b      	adds	r3, r3, r2
 800348a:	1d3a      	adds	r2, r7, #4
 800348c:	7812      	ldrb	r2, [r2, #0]
 800348e:	711a      	strb	r2, [r3, #4]
			#if DEBUG_RS232==0
				debug_msg("REP-Rx[0x%x][0x%x][0x%x]",TxAddr,RxCmd,TEST_KIT.RepData[repIdx].byte);
 8003490:	1dbb      	adds	r3, r7, #6
 8003492:	7819      	ldrb	r1, [r3, #0]
 8003494:	1d7b      	adds	r3, r7, #5
 8003496:	781a      	ldrb	r2, [r3, #0]
 8003498:	4b22      	ldr	r3, [pc, #136]	; (8003524 <test_ac_RXfromSlave+0x150>)
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	0018      	movs	r0, r3
 800349e:	4b22      	ldr	r3, [pc, #136]	; (8003528 <test_ac_RXfromSlave+0x154>)
 80034a0:	181b      	adds	r3, r3, r0
 80034a2:	791b      	ldrb	r3, [r3, #4]
 80034a4:	4821      	ldr	r0, [pc, #132]	; (800352c <test_ac_RXfromSlave+0x158>)
 80034a6:	f7fe fb8d 	bl	8001bc4 <Own_printf>
 80034aa:	e035      	b.n	8003518 <test_ac_RXfromSlave+0x144>
			#endif

		}else if(Rep_Up==_SLAVE_UPDATE){
 80034ac:	1dfb      	adds	r3, r7, #7
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d131      	bne.n	8003518 <test_ac_RXfromSlave+0x144>
			TEST_KIT.f_RxNotify=_SLAVE_UPDATE;
 80034b4:	4b1c      	ldr	r3, [pc, #112]	; (8003528 <test_ac_RXfromSlave+0x154>)
 80034b6:	2202      	movs	r2, #2
 80034b8:	73da      	strb	r2, [r3, #15]
			TEST_KIT.RepData[repIdx].byte = RxData;
 80034ba:	4b1a      	ldr	r3, [pc, #104]	; (8003524 <test_ac_RXfromSlave+0x150>)
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	001a      	movs	r2, r3
 80034c0:	4b19      	ldr	r3, [pc, #100]	; (8003528 <test_ac_RXfromSlave+0x154>)
 80034c2:	189b      	adds	r3, r3, r2
 80034c4:	1d3a      	adds	r2, r7, #4
 80034c6:	7812      	ldrb	r2, [r2, #0]
 80034c8:	711a      	strb	r2, [r3, #4]
			#if DEBUG_RS232==0
			debug_msg("UP-Rx[0x%x][0x%x][0x%x]",TxAddr,RxCmd,TEST_KIT.RepData[repIdx].byte);
 80034ca:	1dbb      	adds	r3, r7, #6
 80034cc:	7819      	ldrb	r1, [r3, #0]
 80034ce:	1d7b      	adds	r3, r7, #5
 80034d0:	781a      	ldrb	r2, [r3, #0]
 80034d2:	4b14      	ldr	r3, [pc, #80]	; (8003524 <test_ac_RXfromSlave+0x150>)
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	0018      	movs	r0, r3
 80034d8:	4b13      	ldr	r3, [pc, #76]	; (8003528 <test_ac_RXfromSlave+0x154>)
 80034da:	181b      	adds	r3, r3, r0
 80034dc:	791b      	ldrb	r3, [r3, #4]
 80034de:	4814      	ldr	r0, [pc, #80]	; (8003530 <test_ac_RXfromSlave+0x15c>)
 80034e0:	f7fe fb70 	bl	8001bc4 <Own_printf>
			#endif

			if(RxCmd == 0x25 && (RxData==0x3F))return;
 80034e4:	1d7b      	adds	r3, r7, #5
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	2b25      	cmp	r3, #37	; 0x25
 80034ea:	d103      	bne.n	80034f4 <test_ac_RXfromSlave+0x120>
 80034ec:	1d3b      	adds	r3, r7, #4
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	2b3f      	cmp	r3, #63	; 0x3f
 80034f2:	d010      	beq.n	8003516 <test_ac_RXfromSlave+0x142>
			test_ac_TxToSlave(&TEST_KIT, TxAddr, RxCmd, RxData, CLOCK_SECOND/2);
 80034f4:	1d3b      	adds	r3, r7, #4
 80034f6:	781c      	ldrb	r4, [r3, #0]
 80034f8:	1d7b      	adds	r3, r7, #5
 80034fa:	781a      	ldrb	r2, [r3, #0]
 80034fc:	1dbb      	adds	r3, r7, #6
 80034fe:	7819      	ldrb	r1, [r3, #0]
 8003500:	4809      	ldr	r0, [pc, #36]	; (8003528 <test_ac_RXfromSlave+0x154>)
 8003502:	2332      	movs	r3, #50	; 0x32
 8003504:	9300      	str	r3, [sp, #0]
 8003506:	0023      	movs	r3, r4
 8003508:	f000 f814 	bl	8003534 <test_ac_TxToSlave>
 800350c:	e004      	b.n	8003518 <test_ac_RXfromSlave+0x144>
			return;
 800350e:	46c0      	nop			; (mov r8, r8)
 8003510:	e002      	b.n	8003518 <test_ac_RXfromSlave+0x144>
			return;
 8003512:	46c0      	nop			; (mov r8, r8)
 8003514:	e000      	b.n	8003518 <test_ac_RXfromSlave+0x144>
			if(RxCmd == 0x25 && (RxData==0x3F))return;
 8003516:	46c0      	nop			; (mov r8, r8)
		}
	}
}
 8003518:	46bd      	mov	sp, r7
 800351a:	b002      	add	sp, #8
 800351c:	bdb0      	pop	{r4, r5, r7, pc}
 800351e:	46c0      	nop			; (mov r8, r8)
 8003520:	0800c828 	.word	0x0800c828
 8003524:	200000b8 	.word	0x200000b8
 8003528:	2000036c 	.word	0x2000036c
 800352c:	0800c4f0 	.word	0x0800c4f0
 8003530:	0800c50c 	.word	0x0800c50c

08003534 <test_ac_TxToSlave>:

void test_ac_TxToSlave(TEST_AC_t *test_tmp, uint8_t slaveAddr, uint8_t cmd, uint8_t data, uint32_t time_out){
 8003534:	b590      	push	{r4, r7, lr}
 8003536:	b085      	sub	sp, #20
 8003538:	af02      	add	r7, sp, #8
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	000c      	movs	r4, r1
 800353e:	0010      	movs	r0, r2
 8003540:	0019      	movs	r1, r3
 8003542:	1cfb      	adds	r3, r7, #3
 8003544:	1c22      	adds	r2, r4, #0
 8003546:	701a      	strb	r2, [r3, #0]
 8003548:	1cbb      	adds	r3, r7, #2
 800354a:	1c02      	adds	r2, r0, #0
 800354c:	701a      	strb	r2, [r3, #0]
 800354e:	1c7b      	adds	r3, r7, #1
 8003550:	1c0a      	adds	r2, r1, #0
 8003552:	701a      	strb	r2, [r3, #0]
	test_tmp->f_RxNotify = _SLAVE_NONE;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	73da      	strb	r2, [r3, #15]
	test_tmp->old_TxCmd = master_TX(&Main_rs232, slaveAddr, cmd, data, time_out);
 800355a:	1c7b      	adds	r3, r7, #1
 800355c:	781c      	ldrb	r4, [r3, #0]
 800355e:	1cbb      	adds	r3, r7, #2
 8003560:	781a      	ldrb	r2, [r3, #0]
 8003562:	1cfb      	adds	r3, r7, #3
 8003564:	7819      	ldrb	r1, [r3, #0]
 8003566:	4807      	ldr	r0, [pc, #28]	; (8003584 <test_ac_TxToSlave+0x50>)
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	9300      	str	r3, [sp, #0]
 800356c:	0023      	movs	r3, r4
 800356e:	f7fe fdcd 	bl	800210c <master_TX>
 8003572:	0003      	movs	r3, r0
 8003574:	001a      	movs	r2, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	70da      	strb	r2, [r3, #3]
}
 800357a:	46c0      	nop			; (mov r8, r8)
 800357c:	46bd      	mov	sp, r7
 800357e:	b003      	add	sp, #12
 8003580:	bd90      	pop	{r4, r7, pc}
 8003582:	46c0      	nop			; (mov r8, r8)
 8003584:	20000140 	.word	0x20000140

08003588 <btn0_cb_Handle>:

void btn0_cb_Handle(button_functionCb_t typeFunction, button_typeArg_t agr){
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	0002      	movs	r2, r0
 8003590:	6039      	str	r1, [r7, #0]
 8003592:	1dfb      	adds	r3, r7, #7
 8003594:	701a      	strb	r2, [r3, #0]

	switch(typeFunction){
 8003596:	1dfb      	adds	r3, r7, #7
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	2b02      	cmp	r3, #2
 800359c:	d029      	beq.n	80035f2 <btn0_cb_Handle+0x6a>
 800359e:	dc33      	bgt.n	8003608 <btn0_cb_Handle+0x80>
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d002      	beq.n	80035aa <btn0_cb_Handle+0x22>
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d01b      	beq.n	80035e0 <btn0_cb_Handle+0x58>
		case _BUTTON_FUNC_HOLD:
			if(agr.holdInterval_ms == 5000){
				debug_msg("\n\r Btn0 hold %ums", agr);
			}
			break;
		default:break;
 80035a8:	e02e      	b.n	8003608 <btn0_cb_Handle+0x80>
			if(agr.event==BUTTON_PRESS){
 80035aa:	003b      	movs	r3, r7
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d12c      	bne.n	800360c <btn0_cb_Handle+0x84>
				debug_msg("\n\r Btn0 press");
 80035b2:	4b1b      	ldr	r3, [pc, #108]	; (8003620 <btn0_cb_Handle+0x98>)
 80035b4:	0018      	movs	r0, r3
 80035b6:	f7fe fb05 	bl	8001bc4 <Own_printf>
				if(TEST_KIT.state == _TESTAC_NULL){
 80035ba:	4b1a      	ldr	r3, [pc, #104]	; (8003624 <btn0_cb_Handle+0x9c>)
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d108      	bne.n	80035d4 <btn0_cb_Handle+0x4c>
						_RELAYNGUON24V_ON;
 80035c2:	4b19      	ldr	r3, [pc, #100]	; (8003628 <btn0_cb_Handle+0xa0>)
 80035c4:	2201      	movs	r2, #1
 80035c6:	2140      	movs	r1, #64	; 0x40
 80035c8:	0018      	movs	r0, r3
 80035ca:	f003 fe5a 	bl	8007282 <HAL_GPIO_WritePin>
						TEST_KIT.state = _TESTAC_TURNON_PWR;
 80035ce:	4b15      	ldr	r3, [pc, #84]	; (8003624 <btn0_cb_Handle+0x9c>)
 80035d0:	2201      	movs	r2, #1
 80035d2:	701a      	strb	r2, [r3, #0]
				if(TEST_KIT.state > _TESTAC_TURNON_PWR) NVIC_SystemReset();
 80035d4:	4b13      	ldr	r3, [pc, #76]	; (8003624 <btn0_cb_Handle+0x9c>)
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d917      	bls.n	800360c <btn0_cb_Handle+0x84>
 80035dc:	f7ff fdd0 	bl	8003180 <__NVIC_SystemReset>
			if(agr.numClick==3)
 80035e0:	003b      	movs	r3, r7
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	2b03      	cmp	r3, #3
 80035e6:	d113      	bne.n	8003610 <btn0_cb_Handle+0x88>
				debug_msg("\n\r Btn0 TripleClick");
 80035e8:	4b10      	ldr	r3, [pc, #64]	; (800362c <btn0_cb_Handle+0xa4>)
 80035ea:	0018      	movs	r0, r3
 80035ec:	f7fe faea 	bl	8001bc4 <Own_printf>
			break;
 80035f0:	e00e      	b.n	8003610 <btn0_cb_Handle+0x88>
			if(agr.holdInterval_ms == 5000){
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	4a0e      	ldr	r2, [pc, #56]	; (8003630 <btn0_cb_Handle+0xa8>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d10c      	bne.n	8003614 <btn0_cb_Handle+0x8c>
				debug_msg("\n\r Btn0 hold %ums", agr);
 80035fa:	683a      	ldr	r2, [r7, #0]
 80035fc:	4b0d      	ldr	r3, [pc, #52]	; (8003634 <btn0_cb_Handle+0xac>)
 80035fe:	0011      	movs	r1, r2
 8003600:	0018      	movs	r0, r3
 8003602:	f7fe fadf 	bl	8001bc4 <Own_printf>
			break;
 8003606:	e005      	b.n	8003614 <btn0_cb_Handle+0x8c>
		default:break;
 8003608:	46c0      	nop			; (mov r8, r8)
 800360a:	e004      	b.n	8003616 <btn0_cb_Handle+0x8e>
			break;
 800360c:	46c0      	nop			; (mov r8, r8)
 800360e:	e002      	b.n	8003616 <btn0_cb_Handle+0x8e>
			break;
 8003610:	46c0      	nop			; (mov r8, r8)
 8003612:	e000      	b.n	8003616 <btn0_cb_Handle+0x8e>
			break;
 8003614:	46c0      	nop			; (mov r8, r8)
	}

}
 8003616:	46c0      	nop			; (mov r8, r8)
 8003618:	46bd      	mov	sp, r7
 800361a:	b002      	add	sp, #8
 800361c:	bd80      	pop	{r7, pc}
 800361e:	46c0      	nop			; (mov r8, r8)
 8003620:	0800c524 	.word	0x0800c524
 8003624:	2000036c 	.word	0x2000036c
 8003628:	50000400 	.word	0x50000400
 800362c:	0800c534 	.word	0x0800c534
 8003630:	00001388 	.word	0x00001388
 8003634:	0800c548 	.word	0x0800c548

08003638 <allButtons_Handle>:

void allButtons_Handle(){
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0

	for(uint8_t i=0; i < APP_BUTTON_NUM; i++){
 800363e:	1dfb      	adds	r3, r7, #7
 8003640:	2200      	movs	r2, #0
 8003642:	701a      	strb	r2, [r3, #0]
 8003644:	e00f      	b.n	8003666 <allButtons_Handle+0x2e>
		btn_progress_loop(&BUTTON_arr[i]);
 8003646:	1dfb      	adds	r3, r7, #7
 8003648:	781a      	ldrb	r2, [r3, #0]
 800364a:	0013      	movs	r3, r2
 800364c:	00db      	lsls	r3, r3, #3
 800364e:	189b      	adds	r3, r3, r2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	4a09      	ldr	r2, [pc, #36]	; (8003678 <allButtons_Handle+0x40>)
 8003654:	189b      	adds	r3, r3, r2
 8003656:	0018      	movs	r0, r3
 8003658:	f7fe f850 	bl	80016fc <btn_progress_loop>
	for(uint8_t i=0; i < APP_BUTTON_NUM; i++){
 800365c:	1dfb      	adds	r3, r7, #7
 800365e:	781a      	ldrb	r2, [r3, #0]
 8003660:	1dfb      	adds	r3, r7, #7
 8003662:	3201      	adds	r2, #1
 8003664:	701a      	strb	r2, [r3, #0]
 8003666:	1dfb      	adds	r3, r7, #7
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d0eb      	beq.n	8003646 <allButtons_Handle+0xe>
	}
}
 800366e:	46c0      	nop			; (mov r8, r8)
 8003670:	46c0      	nop			; (mov r8, r8)
 8003672:	46bd      	mov	sp, r7
 8003674:	b002      	add	sp, #8
 8003676:	bd80      	pop	{r7, pc}
 8003678:	200003a0 	.word	0x200003a0

0800367c <updateEdgePulse_Opto814>:

void updateEdgePulse_Opto814(Edge_ReturnStatus edge_pulse, TEST_AC_t *tmp){
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
 8003682:	0002      	movs	r2, r0
 8003684:	6039      	str	r1, [r7, #0]
 8003686:	1dfb      	adds	r3, r7, #7
 8003688:	701a      	strb	r2, [r3, #0]
	 *           			       		   <-----8-10ms---->|<-----8-10ms---->
	 * Ac_Duty 	  --->                     <---80--100us--->                       =>Actually Ac_Duty = 79(with 60hz) or 98(with 50hz)
	 *
	 */

	if (edge_pulse != _RISING)
 800368a:	1dfb      	adds	r3, r7, #7
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d107      	bne.n	80036a2 <updateEdgePulse_Opto814+0x26>
		return;
	// chon canh len
	tmp->AC_Duty = tmp->AC_Duty_cnt;
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	789a      	ldrb	r2, [r3, #2]
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	705a      	strb	r2, [r3, #1]
	tmp->AC_Duty_cnt = 0;
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	2200      	movs	r2, #0
 800369e:	709a      	strb	r2, [r3, #2]
 80036a0:	e000      	b.n	80036a4 <updateEdgePulse_Opto814+0x28>
		return;
 80036a2:	46c0      	nop			; (mov r8, r8)
}
 80036a4:	46bd      	mov	sp, r7
 80036a6:	b002      	add	sp, #8
 80036a8:	bd80      	pop	{r7, pc}

080036aa <test_ac_ReadAcDuty100us_poll>:

void test_ac_ReadAcDuty100us_poll(TEST_AC_t *tmp)
{
 80036aa:	b580      	push	{r7, lr}
 80036ac:	b082      	sub	sp, #8
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
	// timer interrupt 100us

	// Measure the Duty of EL814 (= half duty of Sin wave)
	if (++tmp->AC_Duty_cnt >= 120)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	789b      	ldrb	r3, [r3, #2]
 80036b6:	3301      	adds	r3, #1
 80036b8:	b2da      	uxtb	r2, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	709a      	strb	r2, [r3, #2]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	789b      	ldrb	r3, [r3, #2]
 80036c2:	2b77      	cmp	r3, #119	; 0x77
 80036c4:	d906      	bls.n	80036d4 <test_ac_ReadAcDuty100us_poll+0x2a>
	{
		tmp->AC_Duty = 0;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	705a      	strb	r2, [r3, #1]
		tmp->AC_Duty_cnt = 0;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	709a      	strb	r2, [r3, #2]
		return;
 80036d2:	e012      	b.n	80036fa <test_ac_ReadAcDuty100us_poll+0x50>
	}
	else
		updateEdgePulse_Opto814(Get_Edge(INPUT_AC_STT), tmp);
 80036d4:	2380      	movs	r3, #128	; 0x80
 80036d6:	009a      	lsls	r2, r3, #2
 80036d8:	23a0      	movs	r3, #160	; 0xa0
 80036da:	05db      	lsls	r3, r3, #23
 80036dc:	0011      	movs	r1, r2
 80036de:	0018      	movs	r0, r3
 80036e0:	f003 fdb2 	bl	8007248 <HAL_GPIO_ReadPin>
 80036e4:	0003      	movs	r3, r0
 80036e6:	0018      	movs	r0, r3
 80036e8:	f7fe f9f8 	bl	8001adc <Get_Edge>
 80036ec:	0003      	movs	r3, r0
 80036ee:	001a      	movs	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	0019      	movs	r1, r3
 80036f4:	0010      	movs	r0, r2
 80036f6:	f7ff ffc1 	bl	800367c <updateEdgePulse_Opto814>

}
 80036fa:	46bd      	mov	sp, r7
 80036fc:	b002      	add	sp, #8
 80036fe:	bd80      	pop	{r7, pc}

08003700 <test_ac_totalCurrent_Hanlde>:

void test_ac_totalCurrent_Hanlde(){
 8003700:	b580      	push	{r7, lr}
 8003702:	af00      	add	r7, sp, #0
	static uint8_t 	cnt_CalibCurrt = 0;
	static TIMER_t	_timer_retryCalib;

	if(TotalCurrent_mA > _TEST_AC_CURRENT_OVERLOAD){
 8003704:	4b1b      	ldr	r3, [pc, #108]	; (8003774 <test_ac_totalCurrent_Hanlde+0x74>)
 8003706:	881b      	ldrh	r3, [r3, #0]
 8003708:	b29a      	uxth	r2, r3
 800370a:	23fa      	movs	r3, #250	; 0xfa
 800370c:	015b      	lsls	r3, r3, #5
 800370e:	429a      	cmp	r2, r3
 8003710:	d90a      	bls.n	8003728 <test_ac_totalCurrent_Hanlde+0x28>
		Ctrl_RelayCOM(0);
 8003712:	4b19      	ldr	r3, [pc, #100]	; (8003778 <test_ac_totalCurrent_Hanlde+0x78>)
 8003714:	2101      	movs	r1, #1
 8003716:	0018      	movs	r0, r3
 8003718:	f7ff fae6 	bl	8002ce8 <OUTPUT_set_mode>
		sprintf(str1,"OVER LOAD >8A");
 800371c:	4a17      	ldr	r2, [pc, #92]	; (800377c <test_ac_totalCurrent_Hanlde+0x7c>)
 800371e:	4b18      	ldr	r3, [pc, #96]	; (8003780 <test_ac_totalCurrent_Hanlde+0x80>)
 8003720:	0011      	movs	r1, r2
 8003722:	0018      	movs	r0, r3
 8003724:	f008 fa88 	bl	800bc38 <siprintf>
	}

	if(cnt_CalibCurrt){
 8003728:	4b16      	ldr	r3, [pc, #88]	; (8003784 <test_ac_totalCurrent_Hanlde+0x84>)
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d019      	beq.n	8003764 <test_ac_totalCurrent_Hanlde+0x64>
		if(timer_expired(&_timer_retryCalib))
 8003730:	4b15      	ldr	r3, [pc, #84]	; (8003788 <test_ac_totalCurrent_Hanlde+0x88>)
 8003732:	0018      	movs	r0, r3
 8003734:	f000 fbe0 	bl	8003ef8 <timer_expired>
 8003738:	1e03      	subs	r3, r0, #0
 800373a:	d018      	beq.n	800376e <test_ac_totalCurrent_Hanlde+0x6e>
		{
			if(++cnt_CalibCurrt >10)timer_stop(&_timer_retryCalib);
 800373c:	4b11      	ldr	r3, [pc, #68]	; (8003784 <test_ac_totalCurrent_Hanlde+0x84>)
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	3301      	adds	r3, #1
 8003742:	b2da      	uxtb	r2, r3
 8003744:	4b0f      	ldr	r3, [pc, #60]	; (8003784 <test_ac_totalCurrent_Hanlde+0x84>)
 8003746:	701a      	strb	r2, [r3, #0]
 8003748:	4b0e      	ldr	r3, [pc, #56]	; (8003784 <test_ac_totalCurrent_Hanlde+0x84>)
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	2b0a      	cmp	r3, #10
 800374e:	d904      	bls.n	800375a <test_ac_totalCurrent_Hanlde+0x5a>
 8003750:	4b0d      	ldr	r3, [pc, #52]	; (8003788 <test_ac_totalCurrent_Hanlde+0x88>)
 8003752:	0018      	movs	r0, r3
 8003754:	f000 fbf0 	bl	8003f38 <timer_stop>
			else timer_restart(&_timer_retryCalib);
		}
	}
	else timer_set(&_timer_retryCalib, CLOCK_SECOND/10);

}
 8003758:	e009      	b.n	800376e <test_ac_totalCurrent_Hanlde+0x6e>
			else timer_restart(&_timer_retryCalib);
 800375a:	4b0b      	ldr	r3, [pc, #44]	; (8003788 <test_ac_totalCurrent_Hanlde+0x88>)
 800375c:	0018      	movs	r0, r3
 800375e:	f000 fbb9 	bl	8003ed4 <timer_restart>
}
 8003762:	e004      	b.n	800376e <test_ac_totalCurrent_Hanlde+0x6e>
	else timer_set(&_timer_retryCalib, CLOCK_SECOND/10);
 8003764:	4b08      	ldr	r3, [pc, #32]	; (8003788 <test_ac_totalCurrent_Hanlde+0x88>)
 8003766:	210a      	movs	r1, #10
 8003768:	0018      	movs	r0, r3
 800376a:	f000 fb89 	bl	8003e80 <timer_set>
}
 800376e:	46c0      	nop			; (mov r8, r8)
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	200000b2 	.word	0x200000b2
 8003778:	200001a8 	.word	0x200001a8
 800377c:	0800c55c 	.word	0x0800c55c
 8003780:	2000037c 	.word	0x2000037c
 8003784:	200000b9 	.word	0x200000b9
 8003788:	200000bc 	.word	0x200000bc

0800378c <updateLCD_Handle>:

void updateLCD_Handle(){
 800378c:	b580      	push	{r7, lr}
 800378e:	af00      	add	r7, sp, #0
	static TIMER_t _timer_updateLCD;

	if(_timer_updateLCD.status==_timer_off)
 8003790:	4b1a      	ldr	r3, [pc, #104]	; (80037fc <updateLCD_Handle+0x70>)
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d104      	bne.n	80037a2 <updateLCD_Handle+0x16>
		timer_set(&_timer_updateLCD,CLOCK_SECOND/4);
 8003798:	4b18      	ldr	r3, [pc, #96]	; (80037fc <updateLCD_Handle+0x70>)
 800379a:	2119      	movs	r1, #25
 800379c:	0018      	movs	r0, r3
 800379e:	f000 fb6f 	bl	8003e80 <timer_set>

	if(timer_expired(&_timer_updateLCD)){
 80037a2:	4b16      	ldr	r3, [pc, #88]	; (80037fc <updateLCD_Handle+0x70>)
 80037a4:	0018      	movs	r0, r3
 80037a6:	f000 fba7 	bl	8003ef8 <timer_expired>
 80037aa:	1e03      	subs	r3, r0, #0
 80037ac:	d023      	beq.n	80037f6 <updateLCD_Handle+0x6a>
		timer_restart(&_timer_updateLCD);
 80037ae:	4b13      	ldr	r3, [pc, #76]	; (80037fc <updateLCD_Handle+0x70>)
 80037b0:	0018      	movs	r0, r3
 80037b2:	f000 fb8f 	bl	8003ed4 <timer_restart>
		if(TEST_KIT.state)sprintf(str2,"On f=%3d %5dmA", 10000/(TEST_KIT.AC_Duty*2), TotalCurrent_mA);
 80037b6:	4b12      	ldr	r3, [pc, #72]	; (8003800 <updateLCD_Handle+0x74>)
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00f      	beq.n	80037de <updateLCD_Handle+0x52>
 80037be:	4b10      	ldr	r3, [pc, #64]	; (8003800 <updateLCD_Handle+0x74>)
 80037c0:	785b      	ldrb	r3, [r3, #1]
 80037c2:	005b      	lsls	r3, r3, #1
 80037c4:	0019      	movs	r1, r3
 80037c6:	480f      	ldr	r0, [pc, #60]	; (8003804 <updateLCD_Handle+0x78>)
 80037c8:	f7fc fd36 	bl	8000238 <__divsi3>
 80037cc:	0003      	movs	r3, r0
 80037ce:	001a      	movs	r2, r3
 80037d0:	4b0d      	ldr	r3, [pc, #52]	; (8003808 <updateLCD_Handle+0x7c>)
 80037d2:	881b      	ldrh	r3, [r3, #0]
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	490d      	ldr	r1, [pc, #52]	; (800380c <updateLCD_Handle+0x80>)
 80037d8:	480d      	ldr	r0, [pc, #52]	; (8003810 <updateLCD_Handle+0x84>)
 80037da:	f008 fa2d 	bl	800bc38 <siprintf>
		LCD_ShowString(str1, 0, 0);
 80037de:	4b0d      	ldr	r3, [pc, #52]	; (8003814 <updateLCD_Handle+0x88>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	2100      	movs	r1, #0
 80037e4:	0018      	movs	r0, r3
 80037e6:	f7ff fa25 	bl	8002c34 <LCD_ShowString>
		LCD_ShowString(str2, 0, 1);
 80037ea:	4b09      	ldr	r3, [pc, #36]	; (8003810 <updateLCD_Handle+0x84>)
 80037ec:	2201      	movs	r2, #1
 80037ee:	2100      	movs	r1, #0
 80037f0:	0018      	movs	r0, r3
 80037f2:	f7ff fa1f 	bl	8002c34 <LCD_ShowString>
	}
}
 80037f6:	46c0      	nop			; (mov r8, r8)
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	200000cc 	.word	0x200000cc
 8003800:	2000036c 	.word	0x2000036c
 8003804:	00002710 	.word	0x00002710
 8003808:	200000b2 	.word	0x200000b2
 800380c:	0800c56c 	.word	0x0800c56c
 8003810:	200003f8 	.word	0x200003f8
 8003814:	2000037c 	.word	0x2000037c

08003818 <test_ac_init>:

void test_ac_init(){
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af02      	add	r7, sp, #8
	init_MCU_UART(&huart3);
 800381e:	4b39      	ldr	r3, [pc, #228]	; (8003904 <test_ac_init+0xec>)
 8003820:	0018      	movs	r0, r3
 8003822:	f7fe fe8d 	bl	8002540 <init_MCU_UART>
	init_MCU_UART(&huart4);
 8003826:	4b38      	ldr	r3, [pc, #224]	; (8003908 <test_ac_init+0xf0>)
 8003828:	0018      	movs	r0, r3
 800382a:	f7fe fe89 	bl	8002540 <init_MCU_UART>
	init_MCU_ADC1_DMA();
 800382e:	f7fe fed7 	bl	80025e0 <init_MCU_ADC1_DMA>
	init_MCU_TIM();
 8003832:	f7fe fe4b 	bl	80024cc <init_MCU_TIM>
	ADC_Init_KalmanFilter();
 8003836:	f7fd fd71 	bl	800131c <ADC_Init_KalmanFilter>


	/*COMMON IO CTRL*/
	OUTPUT_config_new_control(&_CTRL_LED1_YE, &LED1_BaseCtrl);
 800383a:	4a34      	ldr	r2, [pc, #208]	; (800390c <test_ac_init+0xf4>)
 800383c:	4b34      	ldr	r3, [pc, #208]	; (8003910 <test_ac_init+0xf8>)
 800383e:	0011      	movs	r1, r2
 8003840:	0018      	movs	r0, r3
 8003842:	f7ff fc29 	bl	8003098 <OUTPUT_config_new_control>
	OUTPUT_config_new_control(&_CTRL_LED2_BL, &LED2_BaseCtrl);
 8003846:	4a33      	ldr	r2, [pc, #204]	; (8003914 <test_ac_init+0xfc>)
 8003848:	4b33      	ldr	r3, [pc, #204]	; (8003918 <test_ac_init+0x100>)
 800384a:	0011      	movs	r1, r2
 800384c:	0018      	movs	r0, r3
 800384e:	f7ff fc23 	bl	8003098 <OUTPUT_config_new_control>
	OUTPUT_config_new_control(&_CTRL_BUZ, &BUZ_BaseCtrl);
 8003852:	4a32      	ldr	r2, [pc, #200]	; (800391c <test_ac_init+0x104>)
 8003854:	4b32      	ldr	r3, [pc, #200]	; (8003920 <test_ac_init+0x108>)
 8003856:	0011      	movs	r1, r2
 8003858:	0018      	movs	r0, r3
 800385a:	f7ff fc1d 	bl	8003098 <OUTPUT_config_new_control>
	OUTPUT_config_new_control(&_CTRL_RLCOM, &AF_RLCOM_BaseCtrl); //Relay tong
 800385e:	4a31      	ldr	r2, [pc, #196]	; (8003924 <test_ac_init+0x10c>)
 8003860:	4b31      	ldr	r3, [pc, #196]	; (8003928 <test_ac_init+0x110>)
 8003862:	0011      	movs	r1, r2
 8003864:	0018      	movs	r0, r3
 8003866:	f7ff fc17 	bl	8003098 <OUTPUT_config_new_control>
	OUTPUT_config_new_control(&_CTRL_RLOldSS, &ST_RLOldSS_BaseCtrl);
 800386a:	4a30      	ldr	r2, [pc, #192]	; (800392c <test_ac_init+0x114>)
 800386c:	4b30      	ldr	r3, [pc, #192]	; (8003930 <test_ac_init+0x118>)
 800386e:	0011      	movs	r1, r2
 8003870:	0018      	movs	r0, r3
 8003872:	f7ff fc11 	bl	8003098 <OUTPUT_config_new_control>

	CTRL_AC_WHIRL_Off();
 8003876:	4b2f      	ldr	r3, [pc, #188]	; (8003934 <test_ac_init+0x11c>)
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	b2db      	uxtb	r3, r3
 800387c:	2202      	movs	r2, #2
 800387e:	4393      	bics	r3, r2
 8003880:	b2da      	uxtb	r2, r3
 8003882:	4b2c      	ldr	r3, [pc, #176]	; (8003934 <test_ac_init+0x11c>)
 8003884:	701a      	strb	r2, [r3, #0]
	CTRL_AC_DRAIN_Off();
 8003886:	4b2b      	ldr	r3, [pc, #172]	; (8003934 <test_ac_init+0x11c>)
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	b2db      	uxtb	r3, r3
 800388c:	2204      	movs	r2, #4
 800388e:	4393      	bics	r3, r2
 8003890:	b2da      	uxtb	r2, r3
 8003892:	4b28      	ldr	r3, [pc, #160]	; (8003934 <test_ac_init+0x11c>)
 8003894:	701a      	strb	r2, [r3, #0]

	//init
	HAL_I2C_Init(&hi2c1);
 8003896:	4b28      	ldr	r3, [pc, #160]	; (8003938 <test_ac_init+0x120>)
 8003898:	0018      	movs	r0, r3
 800389a:	f003 fd0f 	bl	80072bc <HAL_I2C_Init>
	CLCD_I2C_Init(&LCD1, &hi2c1, 0x4e, 20, 4);
 800389e:	4926      	ldr	r1, [pc, #152]	; (8003938 <test_ac_init+0x120>)
 80038a0:	4826      	ldr	r0, [pc, #152]	; (800393c <test_ac_init+0x124>)
 80038a2:	2304      	movs	r3, #4
 80038a4:	9300      	str	r3, [sp, #0]
 80038a6:	2314      	movs	r3, #20
 80038a8:	224e      	movs	r2, #78	; 0x4e
 80038aa:	f7ff f8bb 	bl	8002a24 <CLCD_I2C_Init>

	//init callback get_string Rs232
	get_string_init_notify(&Uart4_StrBuff, &string_Uart4_report);
 80038ae:	4a24      	ldr	r2, [pc, #144]	; (8003940 <test_ac_init+0x128>)
 80038b0:	4b24      	ldr	r3, [pc, #144]	; (8003944 <test_ac_init+0x12c>)
 80038b2:	0011      	movs	r1, r2
 80038b4:	0018      	movs	r0, r3
 80038b6:	f7fe fb0a 	bl	8001ece <get_string_init_notify>
	init_callback(&master_Rx);
 80038ba:	4b23      	ldr	r3, [pc, #140]	; (8003948 <test_ac_init+0x130>)
 80038bc:	0018      	movs	r0, r3
 80038be:	f7fe fb83 	bl	8001fc8 <init_callback>
	init_RxCallback(&test_ac_RXfromSlave);
 80038c2:	4b22      	ldr	r3, [pc, #136]	; (800394c <test_ac_init+0x134>)
 80038c4:	0018      	movs	r0, r3
 80038c6:	f7fe fbed 	bl	80020a4 <init_RxCallback>

	//init callback button0
	BUTTON_arr[0].pinStt = &BTN0_Stt;
 80038ca:	4b21      	ldr	r3, [pc, #132]	; (8003950 <test_ac_init+0x138>)
 80038cc:	4a21      	ldr	r2, [pc, #132]	; (8003954 <test_ac_init+0x13c>)
 80038ce:	60da      	str	r2, [r3, #12]
	BUTTON_arr[0].cb_function = &btn0_cb_Handle;
 80038d0:	4b1f      	ldr	r3, [pc, #124]	; (8003950 <test_ac_init+0x138>)
 80038d2:	4a21      	ldr	r2, [pc, #132]	; (8003958 <test_ac_init+0x140>)
 80038d4:	609a      	str	r2, [r3, #8]

	//clear variables of Struct
	memset(&TEST_KIT, 0, sizeof(TEST_KIT));
 80038d6:	4b21      	ldr	r3, [pc, #132]	; (800395c <test_ac_init+0x144>)
 80038d8:	2210      	movs	r2, #16
 80038da:	2100      	movs	r1, #0
 80038dc:	0018      	movs	r0, r3
 80038de:	f008 f9a3 	bl	800bc28 <memset>

	timer_set(&_timer_dotest, CLOCK_SECOND/2);
 80038e2:	4b1f      	ldr	r3, [pc, #124]	; (8003960 <test_ac_init+0x148>)
 80038e4:	2132      	movs	r1, #50	; 0x32
 80038e6:	0018      	movs	r0, r3
 80038e8:	f000 faca 	bl	8003e80 <timer_set>

	//reset Factory
	test_ac_TxToSlave(&TEST_KIT, _RS232LL_ADDR_AF, _RS232LL_AfCmd_RepStt_RstFactory, 0xFF, CLOCK_SECOND / 2);
 80038ec:	481b      	ldr	r0, [pc, #108]	; (800395c <test_ac_init+0x144>)
 80038ee:	2332      	movs	r3, #50	; 0x32
 80038f0:	9300      	str	r3, [sp, #0]
 80038f2:	23ff      	movs	r3, #255	; 0xff
 80038f4:	222f      	movs	r2, #47	; 0x2f
 80038f6:	2103      	movs	r1, #3
 80038f8:	f7ff fe1c 	bl	8003534 <test_ac_TxToSlave>
}
 80038fc:	46c0      	nop			; (mov r8, r8)
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	46c0      	nop			; (mov r8, r8)
 8003904:	20000420 	.word	0x20000420
 8003908:	20000704 	.word	0x20000704
 800390c:	080022e9 	.word	0x080022e9
 8003910:	200001dc 	.word	0x200001dc
 8003914:	08002325 	.word	0x08002325
 8003918:	200002f0 	.word	0x200002f0
 800391c:	08002361 	.word	0x08002361
 8003920:	20000254 	.word	0x20000254
 8003924:	0800239d 	.word	0x0800239d
 8003928:	200001a8 	.word	0x200001a8
 800392c:	08002455 	.word	0x08002455
 8003930:	20000288 	.word	0x20000288
 8003934:	200000b1 	.word	0x200000b1
 8003938:	200004b0 	.word	0x200004b0
 800393c:	2000032c 	.word	0x2000032c
 8003940:	080033b1 	.word	0x080033b1
 8003944:	200003c4 	.word	0x200003c4
 8003948:	080020c1 	.word	0x080020c1
 800394c:	080033d5 	.word	0x080033d5
 8003950:	200003a0 	.word	0x200003a0
 8003954:	080031a5 	.word	0x080031a5
 8003958:	08003589 	.word	0x08003589
 800395c:	2000036c 	.word	0x2000036c
 8003960:	20000390 	.word	0x20000390

08003964 <test_ac_loop>:

void test_ac_loop(){
 8003964:	b580      	push	{r7, lr}
 8003966:	af00      	add	r7, sp, #0
	get_string_loop_manage(&Uart4_StrBuff);
 8003968:	4b0a      	ldr	r3, [pc, #40]	; (8003994 <test_ac_loop+0x30>)
 800396a:	0018      	movs	r0, r3
 800396c:	f7fe fac1 	bl	8001ef2 <get_string_loop_manage>
	master_Handle(&Main_rs232);
 8003970:	4b09      	ldr	r3, [pc, #36]	; (8003998 <test_ac_loop+0x34>)
 8003972:	0018      	movs	r0, r3
 8003974:	f7fe fc2e 	bl	80021d4 <master_Handle>
	allButtons_Handle();
 8003978:	f7ff fe5e 	bl	8003638 <allButtons_Handle>
	test_ac_totalCurrent_Hanlde();
 800397c:	f7ff fec0 	bl	8003700 <test_ac_totalCurrent_Hanlde>
	updateLCD_Handle();
 8003980:	f7ff ff04 	bl	800378c <updateLCD_Handle>
	update_infoByteAf3();
 8003984:	f7ff fc44 	bl	8003210 <update_infoByteAf3>
	test_ac_task();
 8003988:	f000 f808 	bl	800399c <test_ac_task>
}
 800398c:	46c0      	nop			; (mov r8, r8)
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	46c0      	nop			; (mov r8, r8)
 8003994:	200003c4 	.word	0x200003c4
 8003998:	20000140 	.word	0x20000140

0800399c <test_ac_task>:

void test_ac_task(){
 800399c:	b580      	push	{r7, lr}
 800399e:	af00      	add	r7, sp, #0

	if(!timer_expired(&_timer_dotest)) return;
 80039a0:	4b16      	ldr	r3, [pc, #88]	; (80039fc <test_ac_task+0x60>)
 80039a2:	0018      	movs	r0, r3
 80039a4:	f000 faa8 	bl	8003ef8 <timer_expired>
 80039a8:	1e03      	subs	r3, r0, #0
 80039aa:	d024      	beq.n	80039f6 <test_ac_task+0x5a>
	timer_restart(&_timer_dotest);
 80039ac:	4b13      	ldr	r3, [pc, #76]	; (80039fc <test_ac_task+0x60>)
 80039ae:	0018      	movs	r0, r3
 80039b0:	f000 fa90 	bl	8003ed4 <timer_restart>

	switch(TEST_KIT.state){
 80039b4:	4b12      	ldr	r3, [pc, #72]	; (8003a00 <test_ac_task+0x64>)
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	2b07      	cmp	r3, #7
 80039ba:	d81d      	bhi.n	80039f8 <test_ac_task+0x5c>
 80039bc:	009a      	lsls	r2, r3, #2
 80039be:	4b11      	ldr	r3, [pc, #68]	; (8003a04 <test_ac_task+0x68>)
 80039c0:	18d3      	adds	r3, r2, r3
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	469f      	mov	pc, r3
		case _TESTAC_NULL:
			doTest_null();
 80039c6:	f000 f81f 	bl	8003a08 <doTest_null>
			break;
 80039ca:	e015      	b.n	80039f8 <test_ac_task+0x5c>
		case _TESTAC_TURNON_PWR:
			doTest_turnOnPwr();
 80039cc:	f000 f84c 	bl	8003a68 <doTest_turnOnPwr>
			break;
 80039d0:	e012      	b.n	80039f8 <test_ac_task+0x5c>
		case _TESTAC_CHECK_ACDUTY:
			doTest_checkAcDuty();
 80039d2:	f000 f86f 	bl	8003ab4 <doTest_checkAcDuty>
			break;
 80039d6:	e00f      	b.n	80039f8 <test_ac_task+0x5c>
		case _TESTAC_TURNON_STEAMER:
			doTest_turnOnSteamer();
 80039d8:	f000 f89e 	bl	8003b18 <doTest_turnOnSteamer>
			break;
 80039dc:	e00c      	b.n	80039f8 <test_ac_task+0x5c>
		case _TESTAC_CHECK_FULLPWR:
			doTest_checkFullPwr();
 80039de:	f000 f95b 	bl	8003c98 <doTest_checkFullPwr>
			break;
 80039e2:	e009      	b.n	80039f8 <test_ac_task+0x5c>
		case _TESTAC_CHECK_DIMPWR:
			doTest_checkDimPwr();
 80039e4:	f000 f99e 	bl	8003d24 <doTest_checkDimPwr>

			break;
 80039e8:	e006      	b.n	80039f8 <test_ac_task+0x5c>
		case _TESTAC_CHECK_PASS:
			doTest_checkPass();
 80039ea:	f000 f9d9 	bl	8003da0 <doTest_checkPass>
			break;
 80039ee:	e003      	b.n	80039f8 <test_ac_task+0x5c>
		case _TESTAC_TURNOFF_PWR:
			doTest_turnOffPwr();
 80039f0:	f000 fa02 	bl	8003df8 <doTest_turnOffPwr>
			break;
 80039f4:	e000      	b.n	80039f8 <test_ac_task+0x5c>
	if(!timer_expired(&_timer_dotest)) return;
 80039f6:	46c0      	nop			; (mov r8, r8)
	}
}
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	20000390 	.word	0x20000390
 8003a00:	2000036c 	.word	0x2000036c
 8003a04:	0800c874 	.word	0x0800c874

08003a08 <doTest_null>:

void doTest_null(){
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	af00      	add	r7, sp, #0

	//trong board Ac có nối tắt
//	CTRL_AC_WHIRL_On();
//	CTRL_AC_DRAIN_On();

	sprintf(str1,"Nhan nut bat dau");
 8003a0c:	4a0e      	ldr	r2, [pc, #56]	; (8003a48 <doTest_null+0x40>)
 8003a0e:	4b0f      	ldr	r3, [pc, #60]	; (8003a4c <doTest_null+0x44>)
 8003a10:	0011      	movs	r1, r2
 8003a12:	0018      	movs	r0, r3
 8003a14:	f008 f910 	bl	800bc38 <siprintf>
	sprintf(str2,"Off f=%3d %4dmA", 10000/(TEST_KIT.AC_Duty*2), TotalCurrent_mA);
 8003a18:	4b0d      	ldr	r3, [pc, #52]	; (8003a50 <doTest_null+0x48>)
 8003a1a:	785b      	ldrb	r3, [r3, #1]
 8003a1c:	005b      	lsls	r3, r3, #1
 8003a1e:	0019      	movs	r1, r3
 8003a20:	480c      	ldr	r0, [pc, #48]	; (8003a54 <doTest_null+0x4c>)
 8003a22:	f7fc fc09 	bl	8000238 <__divsi3>
 8003a26:	0003      	movs	r3, r0
 8003a28:	001a      	movs	r2, r3
 8003a2a:	4b0b      	ldr	r3, [pc, #44]	; (8003a58 <doTest_null+0x50>)
 8003a2c:	881b      	ldrh	r3, [r3, #0]
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	490a      	ldr	r1, [pc, #40]	; (8003a5c <doTest_null+0x54>)
 8003a32:	480b      	ldr	r0, [pc, #44]	; (8003a60 <doTest_null+0x58>)
 8003a34:	f008 f900 	bl	800bc38 <siprintf>

	timer_set(&_timer_read_byteInfo,2*CLOCK_SECOND);
 8003a38:	4b0a      	ldr	r3, [pc, #40]	; (8003a64 <doTest_null+0x5c>)
 8003a3a:	21c8      	movs	r1, #200	; 0xc8
 8003a3c:	0018      	movs	r0, r3
 8003a3e:	f000 fa1f 	bl	8003e80 <timer_set>
}
 8003a42:	46c0      	nop			; (mov r8, r8)
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	0800c57c 	.word	0x0800c57c
 8003a4c:	2000037c 	.word	0x2000037c
 8003a50:	2000036c 	.word	0x2000036c
 8003a54:	00002710 	.word	0x00002710
 8003a58:	200000b2 	.word	0x200000b2
 8003a5c:	0800c590 	.word	0x0800c590
 8003a60:	200003f8 	.word	0x200003f8
 8003a64:	2000040c 	.word	0x2000040c

08003a68 <doTest_turnOnPwr>:

void doTest_turnOnPwr(){
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	af00      	add	r7, sp, #0
	if(_CTRL_RLCOM.mode == _OUTPUT_mode_noctrl)
 8003a6c:	4b0c      	ldr	r3, [pc, #48]	; (8003aa0 <doTest_turnOnPwr+0x38>)
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d104      	bne.n	8003a7e <doTest_turnOnPwr+0x16>
		Ctrl_RelayCOM(1);
 8003a74:	4b0a      	ldr	r3, [pc, #40]	; (8003aa0 <doTest_turnOnPwr+0x38>)
 8003a76:	2102      	movs	r1, #2
 8003a78:	0018      	movs	r0, r3
 8003a7a:	f7ff f935 	bl	8002ce8 <OUTPUT_set_mode>

	sprintf(str1,"Bat Relay tong");
 8003a7e:	4a09      	ldr	r2, [pc, #36]	; (8003aa4 <doTest_turnOnPwr+0x3c>)
 8003a80:	4b09      	ldr	r3, [pc, #36]	; (8003aa8 <doTest_turnOnPwr+0x40>)
 8003a82:	0011      	movs	r1, r2
 8003a84:	0018      	movs	r0, r3
 8003a86:	f008 f8d7 	bl	800bc38 <siprintf>
	timer_set(&_timer_dotest, CLOCK_SECOND/2);
 8003a8a:	4b08      	ldr	r3, [pc, #32]	; (8003aac <doTest_turnOnPwr+0x44>)
 8003a8c:	2132      	movs	r1, #50	; 0x32
 8003a8e:	0018      	movs	r0, r3
 8003a90:	f000 f9f6 	bl	8003e80 <timer_set>

	TEST_KIT.state = _TESTAC_CHECK_ACDUTY;
 8003a94:	4b06      	ldr	r3, [pc, #24]	; (8003ab0 <doTest_turnOnPwr+0x48>)
 8003a96:	2202      	movs	r2, #2
 8003a98:	701a      	strb	r2, [r3, #0]
}
 8003a9a:	46c0      	nop			; (mov r8, r8)
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	200001a8 	.word	0x200001a8
 8003aa4:	0800c5a0 	.word	0x0800c5a0
 8003aa8:	2000037c 	.word	0x2000037c
 8003aac:	20000390 	.word	0x20000390
 8003ab0:	2000036c 	.word	0x2000036c

08003ab4 <doTest_checkAcDuty>:

void doTest_checkAcDuty(){
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af02      	add	r7, sp, #8
	if(TEST_KIT.AC_Duty==0){
 8003aba:	4b12      	ldr	r3, [pc, #72]	; (8003b04 <doTest_checkAcDuty+0x50>)
 8003abc:	785b      	ldrb	r3, [r3, #1]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d106      	bne.n	8003ad0 <doTest_checkAcDuty+0x1c>
		sprintf(str1,"Chua co nguon AC");
 8003ac2:	4a11      	ldr	r2, [pc, #68]	; (8003b08 <doTest_checkAcDuty+0x54>)
 8003ac4:	4b11      	ldr	r3, [pc, #68]	; (8003b0c <doTest_checkAcDuty+0x58>)
 8003ac6:	0011      	movs	r1, r2
 8003ac8:	0018      	movs	r0, r3
 8003aca:	f008 f8b5 	bl	800bc38 <siprintf>
		sprintf(str1,"Nguon dien OK");
		timer_set(&_timer_dotest, CLOCK_SECOND);
		test_ac_TxToSlave(&TEST_KIT, _RS232LL_ADDR_AF, __RS232LL_AfCmd_RepStt_CtrlFuncDCS, 0x3F, CLOCK_SECOND); //ON STEAMER
		TEST_KIT.state = _TESTAC_TURNON_STEAMER;
	}
}
 8003ace:	e015      	b.n	8003afc <doTest_checkAcDuty+0x48>
		sprintf(str1,"Nguon dien OK");
 8003ad0:	4a0f      	ldr	r2, [pc, #60]	; (8003b10 <doTest_checkAcDuty+0x5c>)
 8003ad2:	4b0e      	ldr	r3, [pc, #56]	; (8003b0c <doTest_checkAcDuty+0x58>)
 8003ad4:	0011      	movs	r1, r2
 8003ad6:	0018      	movs	r0, r3
 8003ad8:	f008 f8ae 	bl	800bc38 <siprintf>
		timer_set(&_timer_dotest, CLOCK_SECOND);
 8003adc:	4b0d      	ldr	r3, [pc, #52]	; (8003b14 <doTest_checkAcDuty+0x60>)
 8003ade:	2164      	movs	r1, #100	; 0x64
 8003ae0:	0018      	movs	r0, r3
 8003ae2:	f000 f9cd 	bl	8003e80 <timer_set>
		test_ac_TxToSlave(&TEST_KIT, _RS232LL_ADDR_AF, __RS232LL_AfCmd_RepStt_CtrlFuncDCS, 0x3F, CLOCK_SECOND); //ON STEAMER
 8003ae6:	4807      	ldr	r0, [pc, #28]	; (8003b04 <doTest_checkAcDuty+0x50>)
 8003ae8:	2364      	movs	r3, #100	; 0x64
 8003aea:	9300      	str	r3, [sp, #0]
 8003aec:	233f      	movs	r3, #63	; 0x3f
 8003aee:	2225      	movs	r2, #37	; 0x25
 8003af0:	2103      	movs	r1, #3
 8003af2:	f7ff fd1f 	bl	8003534 <test_ac_TxToSlave>
		TEST_KIT.state = _TESTAC_TURNON_STEAMER;
 8003af6:	4b03      	ldr	r3, [pc, #12]	; (8003b04 <doTest_checkAcDuty+0x50>)
 8003af8:	2203      	movs	r2, #3
 8003afa:	701a      	strb	r2, [r3, #0]
}
 8003afc:	46c0      	nop			; (mov r8, r8)
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	46c0      	nop			; (mov r8, r8)
 8003b04:	2000036c 	.word	0x2000036c
 8003b08:	0800c5b0 	.word	0x0800c5b0
 8003b0c:	2000037c 	.word	0x2000037c
 8003b10:	0800c5c4 	.word	0x0800c5c4
 8003b14:	20000390 	.word	0x20000390

08003b18 <doTest_turnOnSteamer>:

void doTest_turnOnSteamer(){
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af02      	add	r7, sp, #8
	STEAMResponse_TypeDef steamerReply;

	steamerReply = TEST_KIT.RepData[_RepStt_CtrlFuncDCS].byte & 0x0F;
 8003b1e:	4b50      	ldr	r3, [pc, #320]	; (8003c60 <doTest_turnOnSteamer+0x148>)
 8003b20:	7a5a      	ldrb	r2, [r3, #9]
 8003b22:	1dfb      	adds	r3, r7, #7
 8003b24:	210f      	movs	r1, #15
 8003b26:	400a      	ands	r2, r1
 8003b28:	701a      	strb	r2, [r3, #0]

	//bat Steamer OK
	if(steamerReply == _ST_ON_OK){
 8003b2a:	1dfb      	adds	r3, r7, #7
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	2b0f      	cmp	r3, #15
 8003b30:	d10e      	bne.n	8003b50 <doTest_turnOnSteamer+0x38>
		sprintf(str1,"Steamer ON");
 8003b32:	4a4c      	ldr	r2, [pc, #304]	; (8003c64 <doTest_turnOnSteamer+0x14c>)
 8003b34:	4b4c      	ldr	r3, [pc, #304]	; (8003c68 <doTest_turnOnSteamer+0x150>)
 8003b36:	0011      	movs	r1, r2
 8003b38:	0018      	movs	r0, r3
 8003b3a:	f008 f87d 	bl	800bc38 <siprintf>
		timer_set(&_timer_dotest, CLOCK_SECOND);
 8003b3e:	4b4b      	ldr	r3, [pc, #300]	; (8003c6c <doTest_turnOnSteamer+0x154>)
 8003b40:	2164      	movs	r1, #100	; 0x64
 8003b42:	0018      	movs	r0, r3
 8003b44:	f000 f99c 	bl	8003e80 <timer_set>
		TEST_KIT.state = _TESTAC_CHECK_FULLPWR;
 8003b48:	4b45      	ldr	r3, [pc, #276]	; (8003c60 <doTest_turnOnSteamer+0x148>)
 8003b4a:	2204      	movs	r2, #4
 8003b4c:	701a      	strb	r2, [r3, #0]
		//bật lại Steamer
		test_ac_TxToSlave(&TEST_KIT, _RS232LL_ADDR_AF, __RS232LL_AfCmd_RepStt_CtrlFuncDCS, 0x3F, CLOCK_SECOND); //ON STEAMER

		timer_set(&_timer_dotest, 2*CLOCK_SECOND);
	}
}
 8003b4e:	e083      	b.n	8003c58 <doTest_turnOnSteamer+0x140>
		if (steamerReply ==_ST_ERR_CURRT) sprintf(str1,"L4-Qua Tai");
 8003b50:	1dfb      	adds	r3, r7, #7
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d106      	bne.n	8003b66 <doTest_turnOnSteamer+0x4e>
 8003b58:	4a45      	ldr	r2, [pc, #276]	; (8003c70 <doTest_turnOnSteamer+0x158>)
 8003b5a:	4b43      	ldr	r3, [pc, #268]	; (8003c68 <doTest_turnOnSteamer+0x150>)
 8003b5c:	0011      	movs	r1, r2
 8003b5e:	0018      	movs	r0, r3
 8003b60:	f008 f86a 	bl	800bc38 <siprintf>
 8003b64:	e061      	b.n	8003c2a <doTest_turnOnSteamer+0x112>
		else if (steamerReply ==_ST_ERR_SAFETY) sprintf(str1,"L7-safety");
 8003b66:	1dfb      	adds	r3, r7, #7
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d106      	bne.n	8003b7c <doTest_turnOnSteamer+0x64>
 8003b6e:	4a41      	ldr	r2, [pc, #260]	; (8003c74 <doTest_turnOnSteamer+0x15c>)
 8003b70:	4b3d      	ldr	r3, [pc, #244]	; (8003c68 <doTest_turnOnSteamer+0x150>)
 8003b72:	0011      	movs	r1, r2
 8003b74:	0018      	movs	r0, r3
 8003b76:	f008 f85f 	bl	800bc38 <siprintf>
 8003b7a:	e056      	b.n	8003c2a <doTest_turnOnSteamer+0x112>
		else if (steamerReply ==_ST_ERR_CLOGGED) sprintf(str1,"L8-thieu nuoc");
 8003b7c:	1dfb      	adds	r3, r7, #7
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	2b03      	cmp	r3, #3
 8003b82:	d106      	bne.n	8003b92 <doTest_turnOnSteamer+0x7a>
 8003b84:	4a3c      	ldr	r2, [pc, #240]	; (8003c78 <doTest_turnOnSteamer+0x160>)
 8003b86:	4b38      	ldr	r3, [pc, #224]	; (8003c68 <doTest_turnOnSteamer+0x150>)
 8003b88:	0011      	movs	r1, r2
 8003b8a:	0018      	movs	r0, r3
 8003b8c:	f008 f854 	bl	800bc38 <siprintf>
 8003b90:	e04b      	b.n	8003c2a <doTest_turnOnSteamer+0x112>
		else if (steamerReply ==_ST_ERR_BOILER_DRY) sprintf(str1,"L9-Loi kho nuoc");
 8003b92:	1dfb      	adds	r3, r7, #7
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	2b04      	cmp	r3, #4
 8003b98:	d106      	bne.n	8003ba8 <doTest_turnOnSteamer+0x90>
 8003b9a:	4a38      	ldr	r2, [pc, #224]	; (8003c7c <doTest_turnOnSteamer+0x164>)
 8003b9c:	4b32      	ldr	r3, [pc, #200]	; (8003c68 <doTest_turnOnSteamer+0x150>)
 8003b9e:	0011      	movs	r1, r2
 8003ba0:	0018      	movs	r0, r3
 8003ba2:	f008 f849 	bl	800bc38 <siprintf>
 8003ba6:	e040      	b.n	8003c2a <doTest_turnOnSteamer+0x112>
		else if (steamerReply ==_ST_ERR_BOILER_PTC) sprintf(str1,"L10-PTC1 boiler");
 8003ba8:	1dfb      	adds	r3, r7, #7
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	2b05      	cmp	r3, #5
 8003bae:	d106      	bne.n	8003bbe <doTest_turnOnSteamer+0xa6>
 8003bb0:	4a33      	ldr	r2, [pc, #204]	; (8003c80 <doTest_turnOnSteamer+0x168>)
 8003bb2:	4b2d      	ldr	r3, [pc, #180]	; (8003c68 <doTest_turnOnSteamer+0x150>)
 8003bb4:	0011      	movs	r1, r2
 8003bb6:	0018      	movs	r0, r3
 8003bb8:	f008 f83e 	bl	800bc38 <siprintf>
 8003bbc:	e035      	b.n	8003c2a <doTest_turnOnSteamer+0x112>
		else if (steamerReply ==_ST_ERR_DIODE_PTC) sprintf(str1,"L11-PTC2 Hsink");
 8003bbe:	1dfb      	adds	r3, r7, #7
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	2b06      	cmp	r3, #6
 8003bc4:	d106      	bne.n	8003bd4 <doTest_turnOnSteamer+0xbc>
 8003bc6:	4a2f      	ldr	r2, [pc, #188]	; (8003c84 <doTest_turnOnSteamer+0x16c>)
 8003bc8:	4b27      	ldr	r3, [pc, #156]	; (8003c68 <doTest_turnOnSteamer+0x150>)
 8003bca:	0011      	movs	r1, r2
 8003bcc:	0018      	movs	r0, r3
 8003bce:	f008 f833 	bl	800bc38 <siprintf>
 8003bd2:	e02a      	b.n	8003c2a <doTest_turnOnSteamer+0x112>
		else if (steamerReply ==_ST_ERR_DIODE_FAN) sprintf(str1,"L12-ST FAN");
 8003bd4:	1dfb      	adds	r3, r7, #7
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	2b07      	cmp	r3, #7
 8003bda:	d106      	bne.n	8003bea <doTest_turnOnSteamer+0xd2>
 8003bdc:	4a2a      	ldr	r2, [pc, #168]	; (8003c88 <doTest_turnOnSteamer+0x170>)
 8003bde:	4b22      	ldr	r3, [pc, #136]	; (8003c68 <doTest_turnOnSteamer+0x150>)
 8003be0:	0011      	movs	r1, r2
 8003be2:	0018      	movs	r0, r3
 8003be4:	f008 f828 	bl	800bc38 <siprintf>
 8003be8:	e01f      	b.n	8003c2a <doTest_turnOnSteamer+0x112>
		else if (steamerReply ==_ST_ERR_NONE_AIRPUMP) sprintf(str1,"L13-AirPump");
 8003bea:	1dfb      	adds	r3, r7, #7
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	2b08      	cmp	r3, #8
 8003bf0:	d106      	bne.n	8003c00 <doTest_turnOnSteamer+0xe8>
 8003bf2:	4a26      	ldr	r2, [pc, #152]	; (8003c8c <doTest_turnOnSteamer+0x174>)
 8003bf4:	4b1c      	ldr	r3, [pc, #112]	; (8003c68 <doTest_turnOnSteamer+0x150>)
 8003bf6:	0011      	movs	r1, r2
 8003bf8:	0018      	movs	r0, r3
 8003bfa:	f008 f81d 	bl	800bc38 <siprintf>
 8003bfe:	e014      	b.n	8003c2a <doTest_turnOnSteamer+0x112>
		else if (steamerReply ==_ST_ERR_NONE_ACSOURCE) sprintf(str1,"L3-tan so AC");
 8003c00:	1dfb      	adds	r3, r7, #7
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	2b0c      	cmp	r3, #12
 8003c06:	d106      	bne.n	8003c16 <doTest_turnOnSteamer+0xfe>
 8003c08:	4a21      	ldr	r2, [pc, #132]	; (8003c90 <doTest_turnOnSteamer+0x178>)
 8003c0a:	4b17      	ldr	r3, [pc, #92]	; (8003c68 <doTest_turnOnSteamer+0x150>)
 8003c0c:	0011      	movs	r1, r2
 8003c0e:	0018      	movs	r0, r3
 8003c10:	f008 f812 	bl	800bc38 <siprintf>
 8003c14:	e009      	b.n	8003c2a <doTest_turnOnSteamer+0x112>
		else if (steamerReply ==_ST_ERR_NONE_STLOAD) sprintf(str1,"L14-Ko tai ST");
 8003c16:	1dfb      	adds	r3, r7, #7
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	2b0d      	cmp	r3, #13
 8003c1c:	d105      	bne.n	8003c2a <doTest_turnOnSteamer+0x112>
 8003c1e:	4a1d      	ldr	r2, [pc, #116]	; (8003c94 <doTest_turnOnSteamer+0x17c>)
 8003c20:	4b11      	ldr	r3, [pc, #68]	; (8003c68 <doTest_turnOnSteamer+0x150>)
 8003c22:	0011      	movs	r1, r2
 8003c24:	0018      	movs	r0, r3
 8003c26:	f008 f807 	bl	800bc38 <siprintf>
		if(_LIMIT(steamerReply,_ST_ERR_CURRT,_ST_ERR_NONE_STLOAD)) failGoToEnd();
 8003c2a:	1dfb      	adds	r3, r7, #7
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d005      	beq.n	8003c3e <doTest_turnOnSteamer+0x126>
 8003c32:	1dfb      	adds	r3, r7, #7
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	2b0d      	cmp	r3, #13
 8003c38:	d801      	bhi.n	8003c3e <doTest_turnOnSteamer+0x126>
 8003c3a:	f7ff fac5 	bl	80031c8 <failGoToEnd>
		test_ac_TxToSlave(&TEST_KIT, _RS232LL_ADDR_AF, __RS232LL_AfCmd_RepStt_CtrlFuncDCS, 0x3F, CLOCK_SECOND); //ON STEAMER
 8003c3e:	4808      	ldr	r0, [pc, #32]	; (8003c60 <doTest_turnOnSteamer+0x148>)
 8003c40:	2364      	movs	r3, #100	; 0x64
 8003c42:	9300      	str	r3, [sp, #0]
 8003c44:	233f      	movs	r3, #63	; 0x3f
 8003c46:	2225      	movs	r2, #37	; 0x25
 8003c48:	2103      	movs	r1, #3
 8003c4a:	f7ff fc73 	bl	8003534 <test_ac_TxToSlave>
		timer_set(&_timer_dotest, 2*CLOCK_SECOND);
 8003c4e:	4b07      	ldr	r3, [pc, #28]	; (8003c6c <doTest_turnOnSteamer+0x154>)
 8003c50:	21c8      	movs	r1, #200	; 0xc8
 8003c52:	0018      	movs	r0, r3
 8003c54:	f000 f914 	bl	8003e80 <timer_set>
}
 8003c58:	46c0      	nop			; (mov r8, r8)
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	b002      	add	sp, #8
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	2000036c 	.word	0x2000036c
 8003c64:	0800c5d4 	.word	0x0800c5d4
 8003c68:	2000037c 	.word	0x2000037c
 8003c6c:	20000390 	.word	0x20000390
 8003c70:	0800c4c8 	.word	0x0800c4c8
 8003c74:	0800c5e0 	.word	0x0800c5e0
 8003c78:	0800c5ec 	.word	0x0800c5ec
 8003c7c:	0800c5fc 	.word	0x0800c5fc
 8003c80:	0800c60c 	.word	0x0800c60c
 8003c84:	0800c61c 	.word	0x0800c61c
 8003c88:	0800c62c 	.word	0x0800c62c
 8003c8c:	0800c638 	.word	0x0800c638
 8003c90:	0800c644 	.word	0x0800c644
 8003c94:	0800c654 	.word	0x0800c654

08003c98 <doTest_checkFullPwr>:

void doTest_checkFullPwr(){
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	af00      	add	r7, sp, #0
	static uint8_t cnt_sec0=0;

	if(++cnt_sec0 > 8){
 8003c9c:	4b18      	ldr	r3, [pc, #96]	; (8003d00 <doTest_checkFullPwr+0x68>)
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	b2da      	uxtb	r2, r3
 8003ca4:	4b16      	ldr	r3, [pc, #88]	; (8003d00 <doTest_checkFullPwr+0x68>)
 8003ca6:	701a      	strb	r2, [r3, #0]
 8003ca8:	4b15      	ldr	r3, [pc, #84]	; (8003d00 <doTest_checkFullPwr+0x68>)
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	2b08      	cmp	r3, #8
 8003cae:	d90b      	bls.n	8003cc8 <doTest_checkFullPwr+0x30>
		cnt_sec0 = 0;
 8003cb0:	4b13      	ldr	r3, [pc, #76]	; (8003d00 <doTest_checkFullPwr+0x68>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	701a      	strb	r2, [r3, #0]
		sprintf(str1,"Loi Pmax");
 8003cb6:	4a13      	ldr	r2, [pc, #76]	; (8003d04 <doTest_checkFullPwr+0x6c>)
 8003cb8:	4b13      	ldr	r3, [pc, #76]	; (8003d08 <doTest_checkFullPwr+0x70>)
 8003cba:	0011      	movs	r1, r2
 8003cbc:	0018      	movs	r0, r3
 8003cbe:	f007 ffbb 	bl	800bc38 <siprintf>
		failGoToEnd();
 8003cc2:	f7ff fa81 	bl	80031c8 <failGoToEnd>
		return;
 8003cc6:	e019      	b.n	8003cfc <doTest_checkFullPwr+0x64>
	}

	if(TotalCurrent_mA > _TEST_AC_CURRENT_FULL){
 8003cc8:	4b10      	ldr	r3, [pc, #64]	; (8003d0c <doTest_checkFullPwr+0x74>)
 8003cca:	881b      	ldrh	r3, [r3, #0]
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	4a10      	ldr	r2, [pc, #64]	; (8003d10 <doTest_checkFullPwr+0x78>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d913      	bls.n	8003cfc <doTest_checkFullPwr+0x64>
		sprintf(str1,"Steamer P1...");
 8003cd4:	4a0f      	ldr	r2, [pc, #60]	; (8003d14 <doTest_checkFullPwr+0x7c>)
 8003cd6:	4b0c      	ldr	r3, [pc, #48]	; (8003d08 <doTest_checkFullPwr+0x70>)
 8003cd8:	0011      	movs	r1, r2
 8003cda:	0018      	movs	r0, r3
 8003cdc:	f007 ffac 	bl	800bc38 <siprintf>
		timer_set(&_timer_dotest, CLOCK_SECOND);
 8003ce0:	4b0d      	ldr	r3, [pc, #52]	; (8003d18 <doTest_checkFullPwr+0x80>)
 8003ce2:	2164      	movs	r1, #100	; 0x64
 8003ce4:	0018      	movs	r0, r3
 8003ce6:	f000 f8cb 	bl	8003e80 <timer_set>
		TEST_KIT.state = _TESTAC_CHECK_DIMPWR;
 8003cea:	4b0c      	ldr	r3, [pc, #48]	; (8003d1c <doTest_checkFullPwr+0x84>)
 8003cec:	2205      	movs	r2, #5
 8003cee:	701a      	strb	r2, [r3, #0]
		RL_95oC();
 8003cf0:	4b0b      	ldr	r3, [pc, #44]	; (8003d20 <doTest_checkFullPwr+0x88>)
 8003cf2:	2102      	movs	r1, #2
 8003cf4:	0018      	movs	r0, r3
 8003cf6:	f7fe fff7 	bl	8002ce8 <OUTPUT_set_mode>
		return;
 8003cfa:	46c0      	nop			; (mov r8, r8)
	}
}
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	200000dc 	.word	0x200000dc
 8003d04:	0800c664 	.word	0x0800c664
 8003d08:	2000037c 	.word	0x2000037c
 8003d0c:	200000b2 	.word	0x200000b2
 8003d10:	00001770 	.word	0x00001770
 8003d14:	0800c670 	.word	0x0800c670
 8003d18:	20000390 	.word	0x20000390
 8003d1c:	2000036c 	.word	0x2000036c
 8003d20:	20000288 	.word	0x20000288

08003d24 <doTest_checkDimPwr>:

void doTest_checkDimPwr(){
 8003d24:	b580      	push	{r7, lr}
 8003d26:	af00      	add	r7, sp, #0
	static uint8_t cnt_sec1=0;

	if(++cnt_sec1 > 5){
 8003d28:	4b15      	ldr	r3, [pc, #84]	; (8003d80 <doTest_checkDimPwr+0x5c>)
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	b2da      	uxtb	r2, r3
 8003d30:	4b13      	ldr	r3, [pc, #76]	; (8003d80 <doTest_checkDimPwr+0x5c>)
 8003d32:	701a      	strb	r2, [r3, #0]
 8003d34:	4b12      	ldr	r3, [pc, #72]	; (8003d80 <doTest_checkDimPwr+0x5c>)
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	2b05      	cmp	r3, #5
 8003d3a:	d90b      	bls.n	8003d54 <doTest_checkDimPwr+0x30>
		cnt_sec1 = 0;
 8003d3c:	4b10      	ldr	r3, [pc, #64]	; (8003d80 <doTest_checkDimPwr+0x5c>)
 8003d3e:	2200      	movs	r2, #0
 8003d40:	701a      	strb	r2, [r3, #0]
		sprintf(str1,"Loi P1");
 8003d42:	4a10      	ldr	r2, [pc, #64]	; (8003d84 <doTest_checkDimPwr+0x60>)
 8003d44:	4b10      	ldr	r3, [pc, #64]	; (8003d88 <doTest_checkDimPwr+0x64>)
 8003d46:	0011      	movs	r1, r2
 8003d48:	0018      	movs	r0, r3
 8003d4a:	f007 ff75 	bl	800bc38 <siprintf>
		failGoToEnd();
 8003d4e:	f7ff fa3b 	bl	80031c8 <failGoToEnd>
		return;
 8003d52:	e013      	b.n	8003d7c <doTest_checkDimPwr+0x58>
	}

	if(TotalCurrent_mA < _TEST_AC_CURRENT_DIM){
 8003d54:	4b0d      	ldr	r3, [pc, #52]	; (8003d8c <doTest_checkDimPwr+0x68>)
 8003d56:	881b      	ldrh	r3, [r3, #0]
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	4a0d      	ldr	r2, [pc, #52]	; (8003d90 <doTest_checkDimPwr+0x6c>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d80d      	bhi.n	8003d7c <doTest_checkDimPwr+0x58>
		sprintf(str1,"Steamer P1->OK");
 8003d60:	4a0c      	ldr	r2, [pc, #48]	; (8003d94 <doTest_checkDimPwr+0x70>)
 8003d62:	4b09      	ldr	r3, [pc, #36]	; (8003d88 <doTest_checkDimPwr+0x64>)
 8003d64:	0011      	movs	r1, r2
 8003d66:	0018      	movs	r0, r3
 8003d68:	f007 ff66 	bl	800bc38 <siprintf>
		timer_set(&_timer_dotest, CLOCK_SECOND);
 8003d6c:	4b0a      	ldr	r3, [pc, #40]	; (8003d98 <doTest_checkDimPwr+0x74>)
 8003d6e:	2164      	movs	r1, #100	; 0x64
 8003d70:	0018      	movs	r0, r3
 8003d72:	f000 f885 	bl	8003e80 <timer_set>
		TEST_KIT.state = _TESTAC_CHECK_PASS;
 8003d76:	4b09      	ldr	r3, [pc, #36]	; (8003d9c <doTest_checkDimPwr+0x78>)
 8003d78:	2206      	movs	r2, #6
 8003d7a:	701a      	strb	r2, [r3, #0]
	}
}
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	200000dd 	.word	0x200000dd
 8003d84:	0800c680 	.word	0x0800c680
 8003d88:	2000037c 	.word	0x2000037c
 8003d8c:	200000b2 	.word	0x200000b2
 8003d90:	00001193 	.word	0x00001193
 8003d94:	0800c688 	.word	0x0800c688
 8003d98:	20000390 	.word	0x20000390
 8003d9c:	2000036c 	.word	0x2000036c

08003da0 <doTest_checkPass>:

void doTest_checkPass(){
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af02      	add	r7, sp, #8
	sprintf(str1,"Hop AF OK");
 8003da6:	4a0f      	ldr	r2, [pc, #60]	; (8003de4 <doTest_checkPass+0x44>)
 8003da8:	4b0f      	ldr	r3, [pc, #60]	; (8003de8 <doTest_checkPass+0x48>)
 8003daa:	0011      	movs	r1, r2
 8003dac:	0018      	movs	r0, r3
 8003dae:	f007 ff43 	bl	800bc38 <siprintf>
	str2[0]=0;
 8003db2:	4b0e      	ldr	r3, [pc, #56]	; (8003dec <doTest_checkPass+0x4c>)
 8003db4:	2200      	movs	r2, #0
 8003db6:	701a      	strb	r2, [r3, #0]
	TEST_KIT.state = _TESTAC_TURNOFF_PWR;
 8003db8:	4b0d      	ldr	r3, [pc, #52]	; (8003df0 <doTest_checkPass+0x50>)
 8003dba:	2207      	movs	r2, #7
 8003dbc:	701a      	strb	r2, [r3, #0]
	_BUZ_BlinkPass(1);
 8003dbe:	480d      	ldr	r0, [pc, #52]	; (8003df4 <doTest_checkPass+0x54>)
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	9300      	str	r3, [sp, #0]
 8003dc4:	2332      	movs	r3, #50	; 0x32
 8003dc6:	2232      	movs	r2, #50	; 0x32
 8003dc8:	2101      	movs	r1, #1
 8003dca:	f7fe ffb6 	bl	8002d3a <OUTPUT_set_blink>
	test_ac_TxToSlave(&TEST_KIT, _RS232LL_ADDR_AF, _RS232LL_AfCmd_RepStt_RstFactory, 0xFF, CLOCK_SECOND);
 8003dce:	4808      	ldr	r0, [pc, #32]	; (8003df0 <doTest_checkPass+0x50>)
 8003dd0:	2364      	movs	r3, #100	; 0x64
 8003dd2:	9300      	str	r3, [sp, #0]
 8003dd4:	23ff      	movs	r3, #255	; 0xff
 8003dd6:	222f      	movs	r2, #47	; 0x2f
 8003dd8:	2103      	movs	r1, #3
 8003dda:	f7ff fbab 	bl	8003534 <test_ac_TxToSlave>
}
 8003dde:	46c0      	nop			; (mov r8, r8)
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	0800c698 	.word	0x0800c698
 8003de8:	2000037c 	.word	0x2000037c
 8003dec:	200003f8 	.word	0x200003f8
 8003df0:	2000036c 	.word	0x2000036c
 8003df4:	20000254 	.word	0x20000254

08003df8 <doTest_turnOffPwr>:

void doTest_turnOffPwr(){
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	af00      	add	r7, sp, #0
	Ctrl_RelayCOM(0);
 8003dfc:	4b0e      	ldr	r3, [pc, #56]	; (8003e38 <doTest_turnOffPwr+0x40>)
 8003dfe:	2101      	movs	r1, #1
 8003e00:	0018      	movs	r0, r3
 8003e02:	f7fe ff71 	bl	8002ce8 <OUTPUT_set_mode>
	_RELAYNGUON24V_OFF;
 8003e06:	4b0d      	ldr	r3, [pc, #52]	; (8003e3c <doTest_turnOffPwr+0x44>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	2140      	movs	r1, #64	; 0x40
 8003e0c:	0018      	movs	r0, r3
 8003e0e:	f003 fa38 	bl	8007282 <HAL_GPIO_WritePin>
	sprintf(str2,"Off f=%3d %4dmA", 10000/(TEST_KIT.AC_Duty*2), TotalCurrent_mA);
 8003e12:	4b0b      	ldr	r3, [pc, #44]	; (8003e40 <doTest_turnOffPwr+0x48>)
 8003e14:	785b      	ldrb	r3, [r3, #1]
 8003e16:	005b      	lsls	r3, r3, #1
 8003e18:	0019      	movs	r1, r3
 8003e1a:	480a      	ldr	r0, [pc, #40]	; (8003e44 <doTest_turnOffPwr+0x4c>)
 8003e1c:	f7fc fa0c 	bl	8000238 <__divsi3>
 8003e20:	0003      	movs	r3, r0
 8003e22:	001a      	movs	r2, r3
 8003e24:	4b08      	ldr	r3, [pc, #32]	; (8003e48 <doTest_turnOffPwr+0x50>)
 8003e26:	881b      	ldrh	r3, [r3, #0]
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	4908      	ldr	r1, [pc, #32]	; (8003e4c <doTest_turnOffPwr+0x54>)
 8003e2c:	4808      	ldr	r0, [pc, #32]	; (8003e50 <doTest_turnOffPwr+0x58>)
 8003e2e:	f007 ff03 	bl	800bc38 <siprintf>
}
 8003e32:	46c0      	nop			; (mov r8, r8)
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	200001a8 	.word	0x200001a8
 8003e3c:	50000400 	.word	0x50000400
 8003e40:	2000036c 	.word	0x2000036c
 8003e44:	00002710 	.word	0x00002710
 8003e48:	200000b2 	.word	0x200000b2
 8003e4c:	0800c590 	.word	0x0800c590
 8003e50:	200003f8 	.word	0x200003f8

08003e54 <timer_getTick>:
/*---------------------------------------------------------------------------*/
/**
 * get uTick of my timer system.
 */
clock_time_t timer_getTick()
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	af00      	add	r7, sp, #0
  return _unitTick;
 8003e58:	4b02      	ldr	r3, [pc, #8]	; (8003e64 <timer_getTick+0x10>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
}
 8003e5c:	0018      	movs	r0, r3
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	46c0      	nop			; (mov r8, r8)
 8003e64:	2000041c 	.word	0x2000041c

08003e68 <timer_periodic_poll>:
/**
 * count the uTick .
 * This function is must be call in a timer interrupt
 */
void timer_periodic_poll(void)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	af00      	add	r7, sp, #0
	_unitTick++;
 8003e6c:	4b03      	ldr	r3, [pc, #12]	; (8003e7c <timer_periodic_poll+0x14>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	1c5a      	adds	r2, r3, #1
 8003e72:	4b02      	ldr	r3, [pc, #8]	; (8003e7c <timer_periodic_poll+0x14>)
 8003e74:	601a      	str	r2, [r3, #0]
}
 8003e76:	46c0      	nop			; (mov r8, r8)
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	2000041c 	.word	0x2000041c

08003e80 <timer_set>:
 * \param t A pointer to the timer
 * \param interval The interval before the timer expires.
 *
 */
void timer_set(TIMER_t *t, clock_time_t interval)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
  t->status = _timer_on;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	701a      	strb	r2, [r3, #0]
  t->start = _unitTick;
 8003e90:	4b06      	ldr	r3, [pc, #24]	; (8003eac <timer_set+0x2c>)
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	605a      	str	r2, [r3, #4]
  t->interval = interval;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	683a      	ldr	r2, [r7, #0]
 8003e9c:	609a      	str	r2, [r3, #8]
  t->left_time = 0;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	60da      	str	r2, [r3, #12]
}
 8003ea4:	46c0      	nop			; (mov r8, r8)
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	b002      	add	sp, #8
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	2000041c 	.word	0x2000041c

08003eb0 <timer_reset>:
 * \param t A pointer to the timer.
 *
 * \sa timer_restart()
 */
void timer_reset(TIMER_t *t)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  t->start += t->interval;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685a      	ldr	r2, [r3, #4]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	18d2      	adds	r2, r2, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	605a      	str	r2, [r3, #4]
  t->status = _timer_on;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2201      	movs	r2, #1
 8003eca:	701a      	strb	r2, [r3, #0]
}
 8003ecc:	46c0      	nop			; (mov r8, r8)
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	b002      	add	sp, #8
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <timer_restart>:
 * \param t A pointer to the timer.
 *
 * \sa timer_reset()
 */
void timer_restart(TIMER_t *t)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b082      	sub	sp, #8
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  t->start = _unitTick;
 8003edc:	4b05      	ldr	r3, [pc, #20]	; (8003ef4 <timer_restart+0x20>)
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	605a      	str	r2, [r3, #4]
  t->status = _timer_on;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	701a      	strb	r2, [r3, #0]
}
 8003eea:	46c0      	nop			; (mov r8, r8)
 8003eec:	46bd      	mov	sp, r7
 8003eee:	b002      	add	sp, #8
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	46c0      	nop			; (mov r8, r8)
 8003ef4:	2000041c 	.word	0x2000041c

08003ef8 <timer_expired>:
 *
 * \return Non-zero if the timer has expired, zero otherwise.
 *
 */
uint8_t timer_expired(TIMER_t *t)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  if (t->status == _timer_over)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d101      	bne.n	8003f0c <timer_expired+0x14>
	  return 1;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e00e      	b.n	8003f2a <timer_expired+0x32>

  if ((clock_time_t)(_unitTick - t->start) >= (clock_time_t)t->interval){
 8003f0c:	4b09      	ldr	r3, [pc, #36]	; (8003f34 <timer_expired+0x3c>)
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	1ad2      	subs	r2, r2, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d304      	bcc.n	8003f28 <timer_expired+0x30>
	  t->status = _timer_over;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2202      	movs	r2, #2
 8003f22:	701a      	strb	r2, [r3, #0]
	   return 1;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e000      	b.n	8003f2a <timer_expired+0x32>
  }
  return 0;
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	0018      	movs	r0, r3
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	b002      	add	sp, #8
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	46c0      	nop			; (mov r8, r8)
 8003f34:	2000041c 	.word	0x2000041c

08003f38 <timer_stop>:
 *
 * \return Non-zero if the timer has expired, zero otherwise.
 *
 */
void timer_stop(TIMER_t *t)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  t->status = _timer_off;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	701a      	strb	r2, [r3, #0]
  t->left_time = 0;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	60da      	str	r2, [r3, #12]
}
 8003f4c:	46c0      	nop			; (mov r8, r8)
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	b002      	add	sp, #8
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003f58:	f001 f9c4 	bl	80052e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003f5c:	f000 f82a 	bl	8003fb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003f60:	f000 fc00 	bl	8004764 <MX_GPIO_Init>
  MX_DMA_Init();
 8003f64:	f000 fbe0 	bl	8004728 <MX_DMA_Init>
  MX_ADC1_Init();
 8003f68:	f000 f882 	bl	8004070 <MX_ADC1_Init>
  MX_TIM3_Init();
 8003f6c:	f000 f984 	bl	8004278 <MX_TIM3_Init>
  MX_TIM6_Init();
 8003f70:	f000 fa3e 	bl	80043f0 <MX_TIM6_Init>
  MX_TIM14_Init();
 8003f74:	f000 fab0 	bl	80044d8 <MX_TIM14_Init>
  MX_USART2_UART_Init();
 8003f78:	f000 fb20 	bl	80045bc <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8003f7c:	f000 fb6c 	bl	8004658 <MX_USART3_UART_Init>
  MX_USART4_UART_Init();
 8003f80:	f000 fb9e 	bl	80046c0 <MX_USART4_UART_Init>
  MX_IWDG_Init();
 8003f84:	f000 f958 	bl	8004238 <MX_IWDG_Init>
  MX_USART1_UART_Init();
 8003f88:	f000 faca 	bl	8004520 <MX_USART1_UART_Init>
  MX_TIM7_Init();
 8003f8c:	f000 fa6a 	bl	8004464 <MX_TIM7_Init>
  MX_I2C1_Init();
 8003f90:	f000 f912 	bl	80041b8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  test_ac_init();
 8003f94:	f7ff fc40 	bl	8003818 <test_ac_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_IWDG_Init(&hiwdg);
 8003f98:	4b05      	ldr	r3, [pc, #20]	; (8003fb0 <main+0x5c>)
 8003f9a:	0018      	movs	r0, r3
 8003f9c:	f003 fde6 	bl	8007b6c <HAL_IWDG_Init>
  while (1)
  {
    HAL_IWDG_Refresh(&hiwdg);
 8003fa0:	4b03      	ldr	r3, [pc, #12]	; (8003fb0 <main+0x5c>)
 8003fa2:	0018      	movs	r0, r3
 8003fa4:	f003 fe34 	bl	8007c10 <HAL_IWDG_Refresh>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    test_ac_loop();
 8003fa8:	f7ff fcdc 	bl	8003964 <test_ac_loop>
    HAL_IWDG_Refresh(&hiwdg);
 8003fac:	e7f8      	b.n	8003fa0 <main+0x4c>
 8003fae:	46c0      	nop			; (mov r8, r8)
 8003fb0:	200004fc 	.word	0x200004fc

08003fb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003fb4:	b590      	push	{r4, r7, lr}
 8003fb6:	b093      	sub	sp, #76	; 0x4c
 8003fb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003fba:	2414      	movs	r4, #20
 8003fbc:	193b      	adds	r3, r7, r4
 8003fbe:	0018      	movs	r0, r3
 8003fc0:	2334      	movs	r3, #52	; 0x34
 8003fc2:	001a      	movs	r2, r3
 8003fc4:	2100      	movs	r1, #0
 8003fc6:	f007 fe2f 	bl	800bc28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003fca:	1d3b      	adds	r3, r7, #4
 8003fcc:	0018      	movs	r0, r3
 8003fce:	2310      	movs	r3, #16
 8003fd0:	001a      	movs	r2, r3
 8003fd2:	2100      	movs	r1, #0
 8003fd4:	f007 fe28 	bl	800bc28 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003fd8:	2380      	movs	r3, #128	; 0x80
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	0018      	movs	r0, r3
 8003fde:	f003 fe27 	bl	8007c30 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8003fe2:	193b      	adds	r3, r7, r4
 8003fe4:	220a      	movs	r2, #10
 8003fe6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003fe8:	193b      	adds	r3, r7, r4
 8003fea:	2280      	movs	r2, #128	; 0x80
 8003fec:	0052      	lsls	r2, r2, #1
 8003fee:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8003ff0:	0021      	movs	r1, r4
 8003ff2:	187b      	adds	r3, r7, r1
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003ff8:	187b      	adds	r3, r7, r1
 8003ffa:	2240      	movs	r2, #64	; 0x40
 8003ffc:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003ffe:	187b      	adds	r3, r7, r1
 8004000:	2201      	movs	r2, #1
 8004002:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004004:	187b      	adds	r3, r7, r1
 8004006:	2202      	movs	r2, #2
 8004008:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800400a:	187b      	adds	r3, r7, r1
 800400c:	2202      	movs	r2, #2
 800400e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8004010:	187b      	adds	r3, r7, r1
 8004012:	2200      	movs	r2, #0
 8004014:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8004016:	187b      	adds	r3, r7, r1
 8004018:	2208      	movs	r2, #8
 800401a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800401c:	187b      	adds	r3, r7, r1
 800401e:	2280      	movs	r2, #128	; 0x80
 8004020:	0292      	lsls	r2, r2, #10
 8004022:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004024:	187b      	adds	r3, r7, r1
 8004026:	2280      	movs	r2, #128	; 0x80
 8004028:	0592      	lsls	r2, r2, #22
 800402a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800402c:	187b      	adds	r3, r7, r1
 800402e:	0018      	movs	r0, r3
 8004030:	f003 fe4a 	bl	8007cc8 <HAL_RCC_OscConfig>
 8004034:	1e03      	subs	r3, r0, #0
 8004036:	d001      	beq.n	800403c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8004038:	f000 fd26 	bl	8004a88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800403c:	1d3b      	adds	r3, r7, #4
 800403e:	2207      	movs	r2, #7
 8004040:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004042:	1d3b      	adds	r3, r7, #4
 8004044:	2202      	movs	r2, #2
 8004046:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004048:	1d3b      	adds	r3, r7, #4
 800404a:	2200      	movs	r2, #0
 800404c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800404e:	1d3b      	adds	r3, r7, #4
 8004050:	2200      	movs	r2, #0
 8004052:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004054:	1d3b      	adds	r3, r7, #4
 8004056:	2102      	movs	r1, #2
 8004058:	0018      	movs	r0, r3
 800405a:	f004 f945 	bl	80082e8 <HAL_RCC_ClockConfig>
 800405e:	1e03      	subs	r3, r0, #0
 8004060:	d001      	beq.n	8004066 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8004062:	f000 fd11 	bl	8004a88 <Error_Handler>
  }
}
 8004066:	46c0      	nop			; (mov r8, r8)
 8004068:	46bd      	mov	sp, r7
 800406a:	b013      	add	sp, #76	; 0x4c
 800406c:	bd90      	pop	{r4, r7, pc}
	...

08004070 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004076:	1d3b      	adds	r3, r7, #4
 8004078:	0018      	movs	r0, r3
 800407a:	230c      	movs	r3, #12
 800407c:	001a      	movs	r2, r3
 800407e:	2100      	movs	r1, #0
 8004080:	f007 fdd2 	bl	800bc28 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8004084:	4b46      	ldr	r3, [pc, #280]	; (80041a0 <MX_ADC1_Init+0x130>)
 8004086:	4a47      	ldr	r2, [pc, #284]	; (80041a4 <MX_ADC1_Init+0x134>)
 8004088:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800408a:	4b45      	ldr	r3, [pc, #276]	; (80041a0 <MX_ADC1_Init+0x130>)
 800408c:	2280      	movs	r2, #128	; 0x80
 800408e:	0312      	lsls	r2, r2, #12
 8004090:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004092:	4b43      	ldr	r3, [pc, #268]	; (80041a0 <MX_ADC1_Init+0x130>)
 8004094:	2200      	movs	r2, #0
 8004096:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004098:	4b41      	ldr	r3, [pc, #260]	; (80041a0 <MX_ADC1_Init+0x130>)
 800409a:	2200      	movs	r2, #0
 800409c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800409e:	4b40      	ldr	r3, [pc, #256]	; (80041a0 <MX_ADC1_Init+0x130>)
 80040a0:	2280      	movs	r2, #128	; 0x80
 80040a2:	0392      	lsls	r2, r2, #14
 80040a4:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80040a6:	4b3e      	ldr	r3, [pc, #248]	; (80041a0 <MX_ADC1_Init+0x130>)
 80040a8:	2204      	movs	r2, #4
 80040aa:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80040ac:	4b3c      	ldr	r3, [pc, #240]	; (80041a0 <MX_ADC1_Init+0x130>)
 80040ae:	2200      	movs	r2, #0
 80040b0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80040b2:	4b3b      	ldr	r3, [pc, #236]	; (80041a0 <MX_ADC1_Init+0x130>)
 80040b4:	2200      	movs	r2, #0
 80040b6:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80040b8:	4b39      	ldr	r3, [pc, #228]	; (80041a0 <MX_ADC1_Init+0x130>)
 80040ba:	2201      	movs	r2, #1
 80040bc:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 4;
 80040be:	4b38      	ldr	r3, [pc, #224]	; (80041a0 <MX_ADC1_Init+0x130>)
 80040c0:	2204      	movs	r2, #4
 80040c2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80040c4:	4b36      	ldr	r3, [pc, #216]	; (80041a0 <MX_ADC1_Init+0x130>)
 80040c6:	2220      	movs	r2, #32
 80040c8:	2100      	movs	r1, #0
 80040ca:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80040cc:	4b34      	ldr	r3, [pc, #208]	; (80041a0 <MX_ADC1_Init+0x130>)
 80040ce:	2200      	movs	r2, #0
 80040d0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80040d2:	4b33      	ldr	r3, [pc, #204]	; (80041a0 <MX_ADC1_Init+0x130>)
 80040d4:	2200      	movs	r2, #0
 80040d6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80040d8:	4b31      	ldr	r3, [pc, #196]	; (80041a0 <MX_ADC1_Init+0x130>)
 80040da:	222c      	movs	r2, #44	; 0x2c
 80040dc:	2101      	movs	r1, #1
 80040de:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80040e0:	4b2f      	ldr	r3, [pc, #188]	; (80041a0 <MX_ADC1_Init+0x130>)
 80040e2:	2200      	movs	r2, #0
 80040e4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 80040e6:	4b2e      	ldr	r3, [pc, #184]	; (80041a0 <MX_ADC1_Init+0x130>)
 80040e8:	2207      	movs	r2, #7
 80040ea:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 80040ec:	4b2c      	ldr	r3, [pc, #176]	; (80041a0 <MX_ADC1_Init+0x130>)
 80040ee:	2207      	movs	r2, #7
 80040f0:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80040f2:	4b2b      	ldr	r3, [pc, #172]	; (80041a0 <MX_ADC1_Init+0x130>)
 80040f4:	223c      	movs	r2, #60	; 0x3c
 80040f6:	2100      	movs	r1, #0
 80040f8:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80040fa:	4b29      	ldr	r3, [pc, #164]	; (80041a0 <MX_ADC1_Init+0x130>)
 80040fc:	2200      	movs	r2, #0
 80040fe:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004100:	4b27      	ldr	r3, [pc, #156]	; (80041a0 <MX_ADC1_Init+0x130>)
 8004102:	0018      	movs	r0, r3
 8004104:	f001 fb12 	bl	800572c <HAL_ADC_Init>
 8004108:	1e03      	subs	r3, r0, #0
 800410a:	d001      	beq.n	8004110 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 800410c:	f000 fcbc 	bl	8004a88 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8004110:	1d3b      	adds	r3, r7, #4
 8004112:	4a25      	ldr	r2, [pc, #148]	; (80041a8 <MX_ADC1_Init+0x138>)
 8004114:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004116:	1d3b      	adds	r3, r7, #4
 8004118:	2200      	movs	r2, #0
 800411a:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800411c:	1d3b      	adds	r3, r7, #4
 800411e:	2200      	movs	r2, #0
 8004120:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004122:	1d3a      	adds	r2, r7, #4
 8004124:	4b1e      	ldr	r3, [pc, #120]	; (80041a0 <MX_ADC1_Init+0x130>)
 8004126:	0011      	movs	r1, r2
 8004128:	0018      	movs	r0, r3
 800412a:	f001 fe65 	bl	8005df8 <HAL_ADC_ConfigChannel>
 800412e:	1e03      	subs	r3, r0, #0
 8004130:	d001      	beq.n	8004136 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8004132:	f000 fca9 	bl	8004a88 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8004136:	1d3b      	adds	r3, r7, #4
 8004138:	4a1c      	ldr	r2, [pc, #112]	; (80041ac <MX_ADC1_Init+0x13c>)
 800413a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800413c:	1d3b      	adds	r3, r7, #4
 800413e:	2204      	movs	r2, #4
 8004140:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004142:	1d3a      	adds	r2, r7, #4
 8004144:	4b16      	ldr	r3, [pc, #88]	; (80041a0 <MX_ADC1_Init+0x130>)
 8004146:	0011      	movs	r1, r2
 8004148:	0018      	movs	r0, r3
 800414a:	f001 fe55 	bl	8005df8 <HAL_ADC_ConfigChannel>
 800414e:	1e03      	subs	r3, r0, #0
 8004150:	d001      	beq.n	8004156 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8004152:	f000 fc99 	bl	8004a88 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8004156:	1d3b      	adds	r3, r7, #4
 8004158:	4a15      	ldr	r2, [pc, #84]	; (80041b0 <MX_ADC1_Init+0x140>)
 800415a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800415c:	1d3b      	adds	r3, r7, #4
 800415e:	2208      	movs	r2, #8
 8004160:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004162:	1d3a      	adds	r2, r7, #4
 8004164:	4b0e      	ldr	r3, [pc, #56]	; (80041a0 <MX_ADC1_Init+0x130>)
 8004166:	0011      	movs	r1, r2
 8004168:	0018      	movs	r0, r3
 800416a:	f001 fe45 	bl	8005df8 <HAL_ADC_ConfigChannel>
 800416e:	1e03      	subs	r3, r0, #0
 8004170:	d001      	beq.n	8004176 <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 8004172:	f000 fc89 	bl	8004a88 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8004176:	1d3b      	adds	r3, r7, #4
 8004178:	4a0e      	ldr	r2, [pc, #56]	; (80041b4 <MX_ADC1_Init+0x144>)
 800417a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800417c:	1d3b      	adds	r3, r7, #4
 800417e:	220c      	movs	r2, #12
 8004180:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004182:	1d3a      	adds	r2, r7, #4
 8004184:	4b06      	ldr	r3, [pc, #24]	; (80041a0 <MX_ADC1_Init+0x130>)
 8004186:	0011      	movs	r1, r2
 8004188:	0018      	movs	r0, r3
 800418a:	f001 fe35 	bl	8005df8 <HAL_ADC_ConfigChannel>
 800418e:	1e03      	subs	r3, r0, #0
 8004190:	d001      	beq.n	8004196 <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 8004192:	f000 fc79 	bl	8004a88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004196:	46c0      	nop			; (mov r8, r8)
 8004198:	46bd      	mov	sp, r7
 800419a:	b004      	add	sp, #16
 800419c:	bd80      	pop	{r7, pc}
 800419e:	46c0      	nop			; (mov r8, r8)
 80041a0:	20000558 	.word	0x20000558
 80041a4:	40012400 	.word	0x40012400
 80041a8:	08000004 	.word	0x08000004
 80041ac:	0c000008 	.word	0x0c000008
 80041b0:	10000010 	.word	0x10000010
 80041b4:	14000020 	.word	0x14000020

080041b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80041bc:	4b1b      	ldr	r3, [pc, #108]	; (800422c <MX_I2C1_Init+0x74>)
 80041be:	4a1c      	ldr	r2, [pc, #112]	; (8004230 <MX_I2C1_Init+0x78>)
 80041c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 80041c2:	4b1a      	ldr	r3, [pc, #104]	; (800422c <MX_I2C1_Init+0x74>)
 80041c4:	4a1b      	ldr	r2, [pc, #108]	; (8004234 <MX_I2C1_Init+0x7c>)
 80041c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80041c8:	4b18      	ldr	r3, [pc, #96]	; (800422c <MX_I2C1_Init+0x74>)
 80041ca:	2200      	movs	r2, #0
 80041cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80041ce:	4b17      	ldr	r3, [pc, #92]	; (800422c <MX_I2C1_Init+0x74>)
 80041d0:	2201      	movs	r2, #1
 80041d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80041d4:	4b15      	ldr	r3, [pc, #84]	; (800422c <MX_I2C1_Init+0x74>)
 80041d6:	2200      	movs	r2, #0
 80041d8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80041da:	4b14      	ldr	r3, [pc, #80]	; (800422c <MX_I2C1_Init+0x74>)
 80041dc:	2200      	movs	r2, #0
 80041de:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80041e0:	4b12      	ldr	r3, [pc, #72]	; (800422c <MX_I2C1_Init+0x74>)
 80041e2:	2200      	movs	r2, #0
 80041e4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80041e6:	4b11      	ldr	r3, [pc, #68]	; (800422c <MX_I2C1_Init+0x74>)
 80041e8:	2200      	movs	r2, #0
 80041ea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80041ec:	4b0f      	ldr	r3, [pc, #60]	; (800422c <MX_I2C1_Init+0x74>)
 80041ee:	2200      	movs	r2, #0
 80041f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80041f2:	4b0e      	ldr	r3, [pc, #56]	; (800422c <MX_I2C1_Init+0x74>)
 80041f4:	0018      	movs	r0, r3
 80041f6:	f003 f861 	bl	80072bc <HAL_I2C_Init>
 80041fa:	1e03      	subs	r3, r0, #0
 80041fc:	d001      	beq.n	8004202 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80041fe:	f000 fc43 	bl	8004a88 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004202:	4b0a      	ldr	r3, [pc, #40]	; (800422c <MX_I2C1_Init+0x74>)
 8004204:	2100      	movs	r1, #0
 8004206:	0018      	movs	r0, r3
 8004208:	f003 fc18 	bl	8007a3c <HAL_I2CEx_ConfigAnalogFilter>
 800420c:	1e03      	subs	r3, r0, #0
 800420e:	d001      	beq.n	8004214 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004210:	f000 fc3a 	bl	8004a88 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004214:	4b05      	ldr	r3, [pc, #20]	; (800422c <MX_I2C1_Init+0x74>)
 8004216:	2100      	movs	r1, #0
 8004218:	0018      	movs	r0, r3
 800421a:	f003 fc5b 	bl	8007ad4 <HAL_I2CEx_ConfigDigitalFilter>
 800421e:	1e03      	subs	r3, r0, #0
 8004220:	d001      	beq.n	8004226 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8004222:	f000 fc31 	bl	8004a88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004226:	46c0      	nop			; (mov r8, r8)
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	200004b0 	.word	0x200004b0
 8004230:	40005400 	.word	0x40005400
 8004234:	10707dbc 	.word	0x10707dbc

08004238 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800423c:	4b0b      	ldr	r3, [pc, #44]	; (800426c <MX_IWDG_Init+0x34>)
 800423e:	4a0c      	ldr	r2, [pc, #48]	; (8004270 <MX_IWDG_Init+0x38>)
 8004240:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 8004242:	4b0a      	ldr	r3, [pc, #40]	; (800426c <MX_IWDG_Init+0x34>)
 8004244:	2203      	movs	r2, #3
 8004246:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8004248:	4b08      	ldr	r3, [pc, #32]	; (800426c <MX_IWDG_Init+0x34>)
 800424a:	4a0a      	ldr	r2, [pc, #40]	; (8004274 <MX_IWDG_Init+0x3c>)
 800424c:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 800424e:	4b07      	ldr	r3, [pc, #28]	; (800426c <MX_IWDG_Init+0x34>)
 8004250:	4a08      	ldr	r2, [pc, #32]	; (8004274 <MX_IWDG_Init+0x3c>)
 8004252:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8004254:	4b05      	ldr	r3, [pc, #20]	; (800426c <MX_IWDG_Init+0x34>)
 8004256:	0018      	movs	r0, r3
 8004258:	f003 fc88 	bl	8007b6c <HAL_IWDG_Init>
 800425c:	1e03      	subs	r3, r0, #0
 800425e:	d001      	beq.n	8004264 <MX_IWDG_Init+0x2c>
  {
    Error_Handler();
 8004260:	f000 fc12 	bl	8004a88 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8004264:	46c0      	nop			; (mov r8, r8)
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	46c0      	nop			; (mov r8, r8)
 800426c:	200004fc 	.word	0x200004fc
 8004270:	40003000 	.word	0x40003000
 8004274:	00000fff 	.word	0x00000fff

08004278 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b08e      	sub	sp, #56	; 0x38
 800427c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800427e:	2328      	movs	r3, #40	; 0x28
 8004280:	18fb      	adds	r3, r7, r3
 8004282:	0018      	movs	r0, r3
 8004284:	2310      	movs	r3, #16
 8004286:	001a      	movs	r2, r3
 8004288:	2100      	movs	r1, #0
 800428a:	f007 fccd 	bl	800bc28 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800428e:	231c      	movs	r3, #28
 8004290:	18fb      	adds	r3, r7, r3
 8004292:	0018      	movs	r0, r3
 8004294:	230c      	movs	r3, #12
 8004296:	001a      	movs	r2, r3
 8004298:	2100      	movs	r1, #0
 800429a:	f007 fcc5 	bl	800bc28 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800429e:	003b      	movs	r3, r7
 80042a0:	0018      	movs	r0, r3
 80042a2:	231c      	movs	r3, #28
 80042a4:	001a      	movs	r2, r3
 80042a6:	2100      	movs	r1, #0
 80042a8:	f007 fcbe 	bl	800bc28 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80042ac:	4b4c      	ldr	r3, [pc, #304]	; (80043e0 <MX_TIM3_Init+0x168>)
 80042ae:	4a4d      	ldr	r2, [pc, #308]	; (80043e4 <MX_TIM3_Init+0x16c>)
 80042b0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 5;
 80042b2:	4b4b      	ldr	r3, [pc, #300]	; (80043e0 <MX_TIM3_Init+0x168>)
 80042b4:	2205      	movs	r2, #5
 80042b6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042b8:	4b49      	ldr	r3, [pc, #292]	; (80043e0 <MX_TIM3_Init+0x168>)
 80042ba:	2200      	movs	r2, #0
 80042bc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 38000;
 80042be:	4b48      	ldr	r3, [pc, #288]	; (80043e0 <MX_TIM3_Init+0x168>)
 80042c0:	4a49      	ldr	r2, [pc, #292]	; (80043e8 <MX_TIM3_Init+0x170>)
 80042c2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042c4:	4b46      	ldr	r3, [pc, #280]	; (80043e0 <MX_TIM3_Init+0x168>)
 80042c6:	2200      	movs	r2, #0
 80042c8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80042ca:	4b45      	ldr	r3, [pc, #276]	; (80043e0 <MX_TIM3_Init+0x168>)
 80042cc:	2280      	movs	r2, #128	; 0x80
 80042ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80042d0:	4b43      	ldr	r3, [pc, #268]	; (80043e0 <MX_TIM3_Init+0x168>)
 80042d2:	0018      	movs	r0, r3
 80042d4:	f004 fae6 	bl	80088a4 <HAL_TIM_Base_Init>
 80042d8:	1e03      	subs	r3, r0, #0
 80042da:	d001      	beq.n	80042e0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80042dc:	f000 fbd4 	bl	8004a88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80042e0:	2128      	movs	r1, #40	; 0x28
 80042e2:	187b      	adds	r3, r7, r1
 80042e4:	2280      	movs	r2, #128	; 0x80
 80042e6:	0152      	lsls	r2, r2, #5
 80042e8:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80042ea:	187a      	adds	r2, r7, r1
 80042ec:	4b3c      	ldr	r3, [pc, #240]	; (80043e0 <MX_TIM3_Init+0x168>)
 80042ee:	0011      	movs	r1, r2
 80042f0:	0018      	movs	r0, r3
 80042f2:	f004 fe17 	bl	8008f24 <HAL_TIM_ConfigClockSource>
 80042f6:	1e03      	subs	r3, r0, #0
 80042f8:	d001      	beq.n	80042fe <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80042fa:	f000 fbc5 	bl	8004a88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80042fe:	4b38      	ldr	r3, [pc, #224]	; (80043e0 <MX_TIM3_Init+0x168>)
 8004300:	0018      	movs	r0, r3
 8004302:	f004 fb7d 	bl	8008a00 <HAL_TIM_PWM_Init>
 8004306:	1e03      	subs	r3, r0, #0
 8004308:	d001      	beq.n	800430e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800430a:	f000 fbbd 	bl	8004a88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800430e:	211c      	movs	r1, #28
 8004310:	187b      	adds	r3, r7, r1
 8004312:	2200      	movs	r2, #0
 8004314:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004316:	187b      	adds	r3, r7, r1
 8004318:	2200      	movs	r2, #0
 800431a:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800431c:	187a      	adds	r2, r7, r1
 800431e:	4b30      	ldr	r3, [pc, #192]	; (80043e0 <MX_TIM3_Init+0x168>)
 8004320:	0011      	movs	r1, r2
 8004322:	0018      	movs	r0, r3
 8004324:	f005 faca 	bl	80098bc <HAL_TIMEx_MasterConfigSynchronization>
 8004328:	1e03      	subs	r3, r0, #0
 800432a:	d001      	beq.n	8004330 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 800432c:	f000 fbac 	bl	8004a88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004330:	003b      	movs	r3, r7
 8004332:	2260      	movs	r2, #96	; 0x60
 8004334:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8004336:	003b      	movs	r3, r7
 8004338:	2200      	movs	r2, #0
 800433a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800433c:	003b      	movs	r3, r7
 800433e:	2202      	movs	r2, #2
 8004340:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8004342:	003b      	movs	r3, r7
 8004344:	2204      	movs	r2, #4
 8004346:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004348:	0039      	movs	r1, r7
 800434a:	4b25      	ldr	r3, [pc, #148]	; (80043e0 <MX_TIM3_Init+0x168>)
 800434c:	2200      	movs	r2, #0
 800434e:	0018      	movs	r0, r3
 8004350:	f004 fce8 	bl	8008d24 <HAL_TIM_PWM_ConfigChannel>
 8004354:	1e03      	subs	r3, r0, #0
 8004356:	d001      	beq.n	800435c <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8004358:	f000 fb96 	bl	8004a88 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_1);
 800435c:	4b20      	ldr	r3, [pc, #128]	; (80043e0 <MX_TIM3_Init+0x168>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	699a      	ldr	r2, [r3, #24]
 8004362:	4b1f      	ldr	r3, [pc, #124]	; (80043e0 <MX_TIM3_Init+0x168>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2108      	movs	r1, #8
 8004368:	438a      	bics	r2, r1
 800436a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800436c:	0039      	movs	r1, r7
 800436e:	4b1c      	ldr	r3, [pc, #112]	; (80043e0 <MX_TIM3_Init+0x168>)
 8004370:	2204      	movs	r2, #4
 8004372:	0018      	movs	r0, r3
 8004374:	f004 fcd6 	bl	8008d24 <HAL_TIM_PWM_ConfigChannel>
 8004378:	1e03      	subs	r3, r0, #0
 800437a:	d001      	beq.n	8004380 <MX_TIM3_Init+0x108>
  {
    Error_Handler();
 800437c:	f000 fb84 	bl	8004a88 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_2);
 8004380:	4b17      	ldr	r3, [pc, #92]	; (80043e0 <MX_TIM3_Init+0x168>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	699a      	ldr	r2, [r3, #24]
 8004386:	4b16      	ldr	r3, [pc, #88]	; (80043e0 <MX_TIM3_Init+0x168>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4918      	ldr	r1, [pc, #96]	; (80043ec <MX_TIM3_Init+0x174>)
 800438c:	400a      	ands	r2, r1
 800438e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004390:	0039      	movs	r1, r7
 8004392:	4b13      	ldr	r3, [pc, #76]	; (80043e0 <MX_TIM3_Init+0x168>)
 8004394:	2208      	movs	r2, #8
 8004396:	0018      	movs	r0, r3
 8004398:	f004 fcc4 	bl	8008d24 <HAL_TIM_PWM_ConfigChannel>
 800439c:	1e03      	subs	r3, r0, #0
 800439e:	d001      	beq.n	80043a4 <MX_TIM3_Init+0x12c>
  {
    Error_Handler();
 80043a0:	f000 fb72 	bl	8004a88 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_3);
 80043a4:	4b0e      	ldr	r3, [pc, #56]	; (80043e0 <MX_TIM3_Init+0x168>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	69da      	ldr	r2, [r3, #28]
 80043aa:	4b0d      	ldr	r3, [pc, #52]	; (80043e0 <MX_TIM3_Init+0x168>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2108      	movs	r1, #8
 80043b0:	438a      	bics	r2, r1
 80043b2:	61da      	str	r2, [r3, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80043b4:	003b      	movs	r3, r7
 80043b6:	2200      	movs	r2, #0
 80043b8:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80043ba:	0039      	movs	r1, r7
 80043bc:	4b08      	ldr	r3, [pc, #32]	; (80043e0 <MX_TIM3_Init+0x168>)
 80043be:	220c      	movs	r2, #12
 80043c0:	0018      	movs	r0, r3
 80043c2:	f004 fcaf 	bl	8008d24 <HAL_TIM_PWM_ConfigChannel>
 80043c6:	1e03      	subs	r3, r0, #0
 80043c8:	d001      	beq.n	80043ce <MX_TIM3_Init+0x156>
  {
    Error_Handler();
 80043ca:	f000 fb5d 	bl	8004a88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80043ce:	4b04      	ldr	r3, [pc, #16]	; (80043e0 <MX_TIM3_Init+0x168>)
 80043d0:	0018      	movs	r0, r3
 80043d2:	f000 fcf9 	bl	8004dc8 <HAL_TIM_MspPostInit>

}
 80043d6:	46c0      	nop			; (mov r8, r8)
 80043d8:	46bd      	mov	sp, r7
 80043da:	b00e      	add	sp, #56	; 0x38
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	46c0      	nop			; (mov r8, r8)
 80043e0:	2000050c 	.word	0x2000050c
 80043e4:	40000400 	.word	0x40000400
 80043e8:	00009470 	.word	0x00009470
 80043ec:	fffff7ff 	.word	0xfffff7ff

080043f0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043f6:	1d3b      	adds	r3, r7, #4
 80043f8:	0018      	movs	r0, r3
 80043fa:	230c      	movs	r3, #12
 80043fc:	001a      	movs	r2, r3
 80043fe:	2100      	movs	r1, #0
 8004400:	f007 fc12 	bl	800bc28 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004404:	4b15      	ldr	r3, [pc, #84]	; (800445c <MX_TIM6_Init+0x6c>)
 8004406:	4a16      	ldr	r2, [pc, #88]	; (8004460 <MX_TIM6_Init+0x70>)
 8004408:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 64;
 800440a:	4b14      	ldr	r3, [pc, #80]	; (800445c <MX_TIM6_Init+0x6c>)
 800440c:	2240      	movs	r2, #64	; 0x40
 800440e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004410:	4b12      	ldr	r3, [pc, #72]	; (800445c <MX_TIM6_Init+0x6c>)
 8004412:	2200      	movs	r2, #0
 8004414:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 103;
 8004416:	4b11      	ldr	r3, [pc, #68]	; (800445c <MX_TIM6_Init+0x6c>)
 8004418:	2267      	movs	r2, #103	; 0x67
 800441a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800441c:	4b0f      	ldr	r3, [pc, #60]	; (800445c <MX_TIM6_Init+0x6c>)
 800441e:	2200      	movs	r2, #0
 8004420:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004422:	4b0e      	ldr	r3, [pc, #56]	; (800445c <MX_TIM6_Init+0x6c>)
 8004424:	0018      	movs	r0, r3
 8004426:	f004 fa3d 	bl	80088a4 <HAL_TIM_Base_Init>
 800442a:	1e03      	subs	r3, r0, #0
 800442c:	d001      	beq.n	8004432 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800442e:	f000 fb2b 	bl	8004a88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004432:	1d3b      	adds	r3, r7, #4
 8004434:	2200      	movs	r2, #0
 8004436:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004438:	1d3b      	adds	r3, r7, #4
 800443a:	2200      	movs	r2, #0
 800443c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800443e:	1d3a      	adds	r2, r7, #4
 8004440:	4b06      	ldr	r3, [pc, #24]	; (800445c <MX_TIM6_Init+0x6c>)
 8004442:	0011      	movs	r1, r2
 8004444:	0018      	movs	r0, r3
 8004446:	f005 fa39 	bl	80098bc <HAL_TIMEx_MasterConfigSynchronization>
 800444a:	1e03      	subs	r3, r0, #0
 800444c:	d001      	beq.n	8004452 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800444e:	f000 fb1b 	bl	8004a88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004452:	46c0      	nop			; (mov r8, r8)
 8004454:	46bd      	mov	sp, r7
 8004456:	b004      	add	sp, #16
 8004458:	bd80      	pop	{r7, pc}
 800445a:	46c0      	nop			; (mov r8, r8)
 800445c:	200006b8 	.word	0x200006b8
 8004460:	40001000 	.word	0x40001000

08004464 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800446a:	1d3b      	adds	r3, r7, #4
 800446c:	0018      	movs	r0, r3
 800446e:	230c      	movs	r3, #12
 8004470:	001a      	movs	r2, r3
 8004472:	2100      	movs	r1, #0
 8004474:	f007 fbd8 	bl	800bc28 <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004478:	4b15      	ldr	r3, [pc, #84]	; (80044d0 <MX_TIM7_Init+0x6c>)
 800447a:	4a16      	ldr	r2, [pc, #88]	; (80044d4 <MX_TIM7_Init+0x70>)
 800447c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 64;
 800447e:	4b14      	ldr	r3, [pc, #80]	; (80044d0 <MX_TIM7_Init+0x6c>)
 8004480:	2240      	movs	r2, #64	; 0x40
 8004482:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004484:	4b12      	ldr	r3, [pc, #72]	; (80044d0 <MX_TIM7_Init+0x6c>)
 8004486:	2200      	movs	r2, #0
 8004488:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 99;
 800448a:	4b11      	ldr	r3, [pc, #68]	; (80044d0 <MX_TIM7_Init+0x6c>)
 800448c:	2263      	movs	r2, #99	; 0x63
 800448e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004490:	4b0f      	ldr	r3, [pc, #60]	; (80044d0 <MX_TIM7_Init+0x6c>)
 8004492:	2280      	movs	r2, #128	; 0x80
 8004494:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004496:	4b0e      	ldr	r3, [pc, #56]	; (80044d0 <MX_TIM7_Init+0x6c>)
 8004498:	0018      	movs	r0, r3
 800449a:	f004 fa03 	bl	80088a4 <HAL_TIM_Base_Init>
 800449e:	1e03      	subs	r3, r0, #0
 80044a0:	d001      	beq.n	80044a6 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80044a2:	f000 faf1 	bl	8004a88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80044a6:	1d3b      	adds	r3, r7, #4
 80044a8:	2200      	movs	r2, #0
 80044aa:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044ac:	1d3b      	adds	r3, r7, #4
 80044ae:	2200      	movs	r2, #0
 80044b0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80044b2:	1d3a      	adds	r2, r7, #4
 80044b4:	4b06      	ldr	r3, [pc, #24]	; (80044d0 <MX_TIM7_Init+0x6c>)
 80044b6:	0011      	movs	r1, r2
 80044b8:	0018      	movs	r0, r3
 80044ba:	f005 f9ff 	bl	80098bc <HAL_TIMEx_MasterConfigSynchronization>
 80044be:	1e03      	subs	r3, r0, #0
 80044c0:	d001      	beq.n	80044c6 <MX_TIM7_Init+0x62>
  {
    Error_Handler();
 80044c2:	f000 fae1 	bl	8004a88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80044c6:	46c0      	nop			; (mov r8, r8)
 80044c8:	46bd      	mov	sp, r7
 80044ca:	b004      	add	sp, #16
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	46c0      	nop			; (mov r8, r8)
 80044d0:	20000870 	.word	0x20000870
 80044d4:	40001400 	.word	0x40001400

080044d8 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80044dc:	4b0e      	ldr	r3, [pc, #56]	; (8004518 <MX_TIM14_Init+0x40>)
 80044de:	4a0f      	ldr	r2, [pc, #60]	; (800451c <MX_TIM14_Init+0x44>)
 80044e0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 64;
 80044e2:	4b0d      	ldr	r3, [pc, #52]	; (8004518 <MX_TIM14_Init+0x40>)
 80044e4:	2240      	movs	r2, #64	; 0x40
 80044e6:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044e8:	4b0b      	ldr	r3, [pc, #44]	; (8004518 <MX_TIM14_Init+0x40>)
 80044ea:	2200      	movs	r2, #0
 80044ec:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 103;
 80044ee:	4b0a      	ldr	r3, [pc, #40]	; (8004518 <MX_TIM14_Init+0x40>)
 80044f0:	2267      	movs	r2, #103	; 0x67
 80044f2:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044f4:	4b08      	ldr	r3, [pc, #32]	; (8004518 <MX_TIM14_Init+0x40>)
 80044f6:	2200      	movs	r2, #0
 80044f8:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80044fa:	4b07      	ldr	r3, [pc, #28]	; (8004518 <MX_TIM14_Init+0x40>)
 80044fc:	2280      	movs	r2, #128	; 0x80
 80044fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8004500:	4b05      	ldr	r3, [pc, #20]	; (8004518 <MX_TIM14_Init+0x40>)
 8004502:	0018      	movs	r0, r3
 8004504:	f004 f9ce 	bl	80088a4 <HAL_TIM_Base_Init>
 8004508:	1e03      	subs	r3, r0, #0
 800450a:	d001      	beq.n	8004510 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 800450c:	f000 fabc 	bl	8004a88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8004510:	46c0      	nop			; (mov r8, r8)
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	46c0      	nop			; (mov r8, r8)
 8004518:	20000824 	.word	0x20000824
 800451c:	40002000 	.word	0x40002000

08004520 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004524:	4b23      	ldr	r3, [pc, #140]	; (80045b4 <MX_USART1_UART_Init+0x94>)
 8004526:	4a24      	ldr	r2, [pc, #144]	; (80045b8 <MX_USART1_UART_Init+0x98>)
 8004528:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800452a:	4b22      	ldr	r3, [pc, #136]	; (80045b4 <MX_USART1_UART_Init+0x94>)
 800452c:	22e1      	movs	r2, #225	; 0xe1
 800452e:	0252      	lsls	r2, r2, #9
 8004530:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004532:	4b20      	ldr	r3, [pc, #128]	; (80045b4 <MX_USART1_UART_Init+0x94>)
 8004534:	2200      	movs	r2, #0
 8004536:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004538:	4b1e      	ldr	r3, [pc, #120]	; (80045b4 <MX_USART1_UART_Init+0x94>)
 800453a:	2200      	movs	r2, #0
 800453c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800453e:	4b1d      	ldr	r3, [pc, #116]	; (80045b4 <MX_USART1_UART_Init+0x94>)
 8004540:	2200      	movs	r2, #0
 8004542:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004544:	4b1b      	ldr	r3, [pc, #108]	; (80045b4 <MX_USART1_UART_Init+0x94>)
 8004546:	220c      	movs	r2, #12
 8004548:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800454a:	4b1a      	ldr	r3, [pc, #104]	; (80045b4 <MX_USART1_UART_Init+0x94>)
 800454c:	2200      	movs	r2, #0
 800454e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004550:	4b18      	ldr	r3, [pc, #96]	; (80045b4 <MX_USART1_UART_Init+0x94>)
 8004552:	2200      	movs	r2, #0
 8004554:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004556:	4b17      	ldr	r3, [pc, #92]	; (80045b4 <MX_USART1_UART_Init+0x94>)
 8004558:	2200      	movs	r2, #0
 800455a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800455c:	4b15      	ldr	r3, [pc, #84]	; (80045b4 <MX_USART1_UART_Init+0x94>)
 800455e:	2200      	movs	r2, #0
 8004560:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004562:	4b14      	ldr	r3, [pc, #80]	; (80045b4 <MX_USART1_UART_Init+0x94>)
 8004564:	2200      	movs	r2, #0
 8004566:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004568:	4b12      	ldr	r3, [pc, #72]	; (80045b4 <MX_USART1_UART_Init+0x94>)
 800456a:	0018      	movs	r0, r3
 800456c:	f005 fa26 	bl	80099bc <HAL_UART_Init>
 8004570:	1e03      	subs	r3, r0, #0
 8004572:	d001      	beq.n	8004578 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8004574:	f000 fa88 	bl	8004a88 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004578:	4b0e      	ldr	r3, [pc, #56]	; (80045b4 <MX_USART1_UART_Init+0x94>)
 800457a:	2100      	movs	r1, #0
 800457c:	0018      	movs	r0, r3
 800457e:	f007 fa49 	bl	800ba14 <HAL_UARTEx_SetTxFifoThreshold>
 8004582:	1e03      	subs	r3, r0, #0
 8004584:	d001      	beq.n	800458a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8004586:	f000 fa7f 	bl	8004a88 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800458a:	4b0a      	ldr	r3, [pc, #40]	; (80045b4 <MX_USART1_UART_Init+0x94>)
 800458c:	2100      	movs	r1, #0
 800458e:	0018      	movs	r0, r3
 8004590:	f007 fa80 	bl	800ba94 <HAL_UARTEx_SetRxFifoThreshold>
 8004594:	1e03      	subs	r3, r0, #0
 8004596:	d001      	beq.n	800459c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8004598:	f000 fa76 	bl	8004a88 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800459c:	4b05      	ldr	r3, [pc, #20]	; (80045b4 <MX_USART1_UART_Init+0x94>)
 800459e:	0018      	movs	r0, r3
 80045a0:	f007 f9fe 	bl	800b9a0 <HAL_UARTEx_DisableFifoMode>
 80045a4:	1e03      	subs	r3, r0, #0
 80045a6:	d001      	beq.n	80045ac <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80045a8:	f000 fa6e 	bl	8004a88 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80045ac:	46c0      	nop			; (mov r8, r8)
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	46c0      	nop			; (mov r8, r8)
 80045b4:	200005cc 	.word	0x200005cc
 80045b8:	40013800 	.word	0x40013800

080045bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80045c0:	4b23      	ldr	r3, [pc, #140]	; (8004650 <MX_USART2_UART_Init+0x94>)
 80045c2:	4a24      	ldr	r2, [pc, #144]	; (8004654 <MX_USART2_UART_Init+0x98>)
 80045c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80045c6:	4b22      	ldr	r3, [pc, #136]	; (8004650 <MX_USART2_UART_Init+0x94>)
 80045c8:	2296      	movs	r2, #150	; 0x96
 80045ca:	0192      	lsls	r2, r2, #6
 80045cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80045ce:	4b20      	ldr	r3, [pc, #128]	; (8004650 <MX_USART2_UART_Init+0x94>)
 80045d0:	2200      	movs	r2, #0
 80045d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80045d4:	4b1e      	ldr	r3, [pc, #120]	; (8004650 <MX_USART2_UART_Init+0x94>)
 80045d6:	2200      	movs	r2, #0
 80045d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80045da:	4b1d      	ldr	r3, [pc, #116]	; (8004650 <MX_USART2_UART_Init+0x94>)
 80045dc:	2200      	movs	r2, #0
 80045de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80045e0:	4b1b      	ldr	r3, [pc, #108]	; (8004650 <MX_USART2_UART_Init+0x94>)
 80045e2:	220c      	movs	r2, #12
 80045e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80045e6:	4b1a      	ldr	r3, [pc, #104]	; (8004650 <MX_USART2_UART_Init+0x94>)
 80045e8:	2200      	movs	r2, #0
 80045ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80045ec:	4b18      	ldr	r3, [pc, #96]	; (8004650 <MX_USART2_UART_Init+0x94>)
 80045ee:	2200      	movs	r2, #0
 80045f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80045f2:	4b17      	ldr	r3, [pc, #92]	; (8004650 <MX_USART2_UART_Init+0x94>)
 80045f4:	2200      	movs	r2, #0
 80045f6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80045f8:	4b15      	ldr	r3, [pc, #84]	; (8004650 <MX_USART2_UART_Init+0x94>)
 80045fa:	2200      	movs	r2, #0
 80045fc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80045fe:	4b14      	ldr	r3, [pc, #80]	; (8004650 <MX_USART2_UART_Init+0x94>)
 8004600:	2200      	movs	r2, #0
 8004602:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004604:	4b12      	ldr	r3, [pc, #72]	; (8004650 <MX_USART2_UART_Init+0x94>)
 8004606:	0018      	movs	r0, r3
 8004608:	f005 f9d8 	bl	80099bc <HAL_UART_Init>
 800460c:	1e03      	subs	r3, r0, #0
 800460e:	d001      	beq.n	8004614 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8004610:	f000 fa3a 	bl	8004a88 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004614:	4b0e      	ldr	r3, [pc, #56]	; (8004650 <MX_USART2_UART_Init+0x94>)
 8004616:	2100      	movs	r1, #0
 8004618:	0018      	movs	r0, r3
 800461a:	f007 f9fb 	bl	800ba14 <HAL_UARTEx_SetTxFifoThreshold>
 800461e:	1e03      	subs	r3, r0, #0
 8004620:	d001      	beq.n	8004626 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8004622:	f000 fa31 	bl	8004a88 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004626:	4b0a      	ldr	r3, [pc, #40]	; (8004650 <MX_USART2_UART_Init+0x94>)
 8004628:	2100      	movs	r1, #0
 800462a:	0018      	movs	r0, r3
 800462c:	f007 fa32 	bl	800ba94 <HAL_UARTEx_SetRxFifoThreshold>
 8004630:	1e03      	subs	r3, r0, #0
 8004632:	d001      	beq.n	8004638 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8004634:	f000 fa28 	bl	8004a88 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8004638:	4b05      	ldr	r3, [pc, #20]	; (8004650 <MX_USART2_UART_Init+0x94>)
 800463a:	0018      	movs	r0, r3
 800463c:	f007 f9b0 	bl	800b9a0 <HAL_UARTEx_DisableFifoMode>
 8004640:	1e03      	subs	r3, r0, #0
 8004642:	d001      	beq.n	8004648 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8004644:	f000 fa20 	bl	8004a88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004648:	46c0      	nop			; (mov r8, r8)
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	46c0      	nop			; (mov r8, r8)
 8004650:	20000794 	.word	0x20000794
 8004654:	40004400 	.word	0x40004400

08004658 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800465c:	4b16      	ldr	r3, [pc, #88]	; (80046b8 <MX_USART3_UART_Init+0x60>)
 800465e:	4a17      	ldr	r2, [pc, #92]	; (80046bc <MX_USART3_UART_Init+0x64>)
 8004660:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8004662:	4b15      	ldr	r3, [pc, #84]	; (80046b8 <MX_USART3_UART_Init+0x60>)
 8004664:	2296      	movs	r2, #150	; 0x96
 8004666:	0192      	lsls	r2, r2, #6
 8004668:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800466a:	4b13      	ldr	r3, [pc, #76]	; (80046b8 <MX_USART3_UART_Init+0x60>)
 800466c:	2200      	movs	r2, #0
 800466e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004670:	4b11      	ldr	r3, [pc, #68]	; (80046b8 <MX_USART3_UART_Init+0x60>)
 8004672:	2200      	movs	r2, #0
 8004674:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004676:	4b10      	ldr	r3, [pc, #64]	; (80046b8 <MX_USART3_UART_Init+0x60>)
 8004678:	2200      	movs	r2, #0
 800467a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800467c:	4b0e      	ldr	r3, [pc, #56]	; (80046b8 <MX_USART3_UART_Init+0x60>)
 800467e:	220c      	movs	r2, #12
 8004680:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004682:	4b0d      	ldr	r3, [pc, #52]	; (80046b8 <MX_USART3_UART_Init+0x60>)
 8004684:	2200      	movs	r2, #0
 8004686:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004688:	4b0b      	ldr	r3, [pc, #44]	; (80046b8 <MX_USART3_UART_Init+0x60>)
 800468a:	2200      	movs	r2, #0
 800468c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800468e:	4b0a      	ldr	r3, [pc, #40]	; (80046b8 <MX_USART3_UART_Init+0x60>)
 8004690:	2200      	movs	r2, #0
 8004692:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004694:	4b08      	ldr	r3, [pc, #32]	; (80046b8 <MX_USART3_UART_Init+0x60>)
 8004696:	2200      	movs	r2, #0
 8004698:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800469a:	4b07      	ldr	r3, [pc, #28]	; (80046b8 <MX_USART3_UART_Init+0x60>)
 800469c:	2200      	movs	r2, #0
 800469e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80046a0:	4b05      	ldr	r3, [pc, #20]	; (80046b8 <MX_USART3_UART_Init+0x60>)
 80046a2:	0018      	movs	r0, r3
 80046a4:	f005 f98a 	bl	80099bc <HAL_UART_Init>
 80046a8:	1e03      	subs	r3, r0, #0
 80046aa:	d001      	beq.n	80046b0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80046ac:	f000 f9ec 	bl	8004a88 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80046b0:	46c0      	nop			; (mov r8, r8)
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	46c0      	nop			; (mov r8, r8)
 80046b8:	20000420 	.word	0x20000420
 80046bc:	40004800 	.word	0x40004800

080046c0 <MX_USART4_UART_Init>:
  * @brief USART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART4_UART_Init(void)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 80046c4:	4b16      	ldr	r3, [pc, #88]	; (8004720 <MX_USART4_UART_Init+0x60>)
 80046c6:	4a17      	ldr	r2, [pc, #92]	; (8004724 <MX_USART4_UART_Init+0x64>)
 80046c8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80046ca:	4b15      	ldr	r3, [pc, #84]	; (8004720 <MX_USART4_UART_Init+0x60>)
 80046cc:	2296      	movs	r2, #150	; 0x96
 80046ce:	0192      	lsls	r2, r2, #6
 80046d0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80046d2:	4b13      	ldr	r3, [pc, #76]	; (8004720 <MX_USART4_UART_Init+0x60>)
 80046d4:	2200      	movs	r2, #0
 80046d6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80046d8:	4b11      	ldr	r3, [pc, #68]	; (8004720 <MX_USART4_UART_Init+0x60>)
 80046da:	2200      	movs	r2, #0
 80046dc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80046de:	4b10      	ldr	r3, [pc, #64]	; (8004720 <MX_USART4_UART_Init+0x60>)
 80046e0:	2200      	movs	r2, #0
 80046e2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80046e4:	4b0e      	ldr	r3, [pc, #56]	; (8004720 <MX_USART4_UART_Init+0x60>)
 80046e6:	220c      	movs	r2, #12
 80046e8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80046ea:	4b0d      	ldr	r3, [pc, #52]	; (8004720 <MX_USART4_UART_Init+0x60>)
 80046ec:	2200      	movs	r2, #0
 80046ee:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80046f0:	4b0b      	ldr	r3, [pc, #44]	; (8004720 <MX_USART4_UART_Init+0x60>)
 80046f2:	2200      	movs	r2, #0
 80046f4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80046f6:	4b0a      	ldr	r3, [pc, #40]	; (8004720 <MX_USART4_UART_Init+0x60>)
 80046f8:	2200      	movs	r2, #0
 80046fa:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80046fc:	4b08      	ldr	r3, [pc, #32]	; (8004720 <MX_USART4_UART_Init+0x60>)
 80046fe:	2200      	movs	r2, #0
 8004700:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004702:	4b07      	ldr	r3, [pc, #28]	; (8004720 <MX_USART4_UART_Init+0x60>)
 8004704:	2200      	movs	r2, #0
 8004706:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8004708:	4b05      	ldr	r3, [pc, #20]	; (8004720 <MX_USART4_UART_Init+0x60>)
 800470a:	0018      	movs	r0, r3
 800470c:	f005 f956 	bl	80099bc <HAL_UART_Init>
 8004710:	1e03      	subs	r3, r0, #0
 8004712:	d001      	beq.n	8004718 <MX_USART4_UART_Init+0x58>
  {
    Error_Handler();
 8004714:	f000 f9b8 	bl	8004a88 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8004718:	46c0      	nop			; (mov r8, r8)
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	46c0      	nop			; (mov r8, r8)
 8004720:	20000704 	.word	0x20000704
 8004724:	40004c00 	.word	0x40004c00

08004728 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800472e:	4b0c      	ldr	r3, [pc, #48]	; (8004760 <MX_DMA_Init+0x38>)
 8004730:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004732:	4b0b      	ldr	r3, [pc, #44]	; (8004760 <MX_DMA_Init+0x38>)
 8004734:	2101      	movs	r1, #1
 8004736:	430a      	orrs	r2, r1
 8004738:	639a      	str	r2, [r3, #56]	; 0x38
 800473a:	4b09      	ldr	r3, [pc, #36]	; (8004760 <MX_DMA_Init+0x38>)
 800473c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800473e:	2201      	movs	r2, #1
 8004740:	4013      	ands	r3, r2
 8004742:	607b      	str	r3, [r7, #4]
 8004744:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004746:	2200      	movs	r2, #0
 8004748:	2100      	movs	r1, #0
 800474a:	2009      	movs	r0, #9
 800474c:	f002 f8c0 	bl	80068d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004750:	2009      	movs	r0, #9
 8004752:	f002 f8d2 	bl	80068fa <HAL_NVIC_EnableIRQ>

}
 8004756:	46c0      	nop			; (mov r8, r8)
 8004758:	46bd      	mov	sp, r7
 800475a:	b002      	add	sp, #8
 800475c:	bd80      	pop	{r7, pc}
 800475e:	46c0      	nop			; (mov r8, r8)
 8004760:	40021000 	.word	0x40021000

08004764 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004764:	b590      	push	{r4, r7, lr}
 8004766:	b08b      	sub	sp, #44	; 0x2c
 8004768:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800476a:	2414      	movs	r4, #20
 800476c:	193b      	adds	r3, r7, r4
 800476e:	0018      	movs	r0, r3
 8004770:	2314      	movs	r3, #20
 8004772:	001a      	movs	r2, r3
 8004774:	2100      	movs	r1, #0
 8004776:	f007 fa57 	bl	800bc28 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800477a:	4bba      	ldr	r3, [pc, #744]	; (8004a64 <MX_GPIO_Init+0x300>)
 800477c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800477e:	4bb9      	ldr	r3, [pc, #740]	; (8004a64 <MX_GPIO_Init+0x300>)
 8004780:	2104      	movs	r1, #4
 8004782:	430a      	orrs	r2, r1
 8004784:	635a      	str	r2, [r3, #52]	; 0x34
 8004786:	4bb7      	ldr	r3, [pc, #732]	; (8004a64 <MX_GPIO_Init+0x300>)
 8004788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800478a:	2204      	movs	r2, #4
 800478c:	4013      	ands	r3, r2
 800478e:	613b      	str	r3, [r7, #16]
 8004790:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004792:	4bb4      	ldr	r3, [pc, #720]	; (8004a64 <MX_GPIO_Init+0x300>)
 8004794:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004796:	4bb3      	ldr	r3, [pc, #716]	; (8004a64 <MX_GPIO_Init+0x300>)
 8004798:	2101      	movs	r1, #1
 800479a:	430a      	orrs	r2, r1
 800479c:	635a      	str	r2, [r3, #52]	; 0x34
 800479e:	4bb1      	ldr	r3, [pc, #708]	; (8004a64 <MX_GPIO_Init+0x300>)
 80047a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047a2:	2201      	movs	r2, #1
 80047a4:	4013      	ands	r3, r2
 80047a6:	60fb      	str	r3, [r7, #12]
 80047a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80047aa:	4bae      	ldr	r3, [pc, #696]	; (8004a64 <MX_GPIO_Init+0x300>)
 80047ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047ae:	4bad      	ldr	r3, [pc, #692]	; (8004a64 <MX_GPIO_Init+0x300>)
 80047b0:	2102      	movs	r1, #2
 80047b2:	430a      	orrs	r2, r1
 80047b4:	635a      	str	r2, [r3, #52]	; 0x34
 80047b6:	4bab      	ldr	r3, [pc, #684]	; (8004a64 <MX_GPIO_Init+0x300>)
 80047b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ba:	2202      	movs	r2, #2
 80047bc:	4013      	ands	r3, r2
 80047be:	60bb      	str	r3, [r7, #8]
 80047c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80047c2:	4ba8      	ldr	r3, [pc, #672]	; (8004a64 <MX_GPIO_Init+0x300>)
 80047c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047c6:	4ba7      	ldr	r3, [pc, #668]	; (8004a64 <MX_GPIO_Init+0x300>)
 80047c8:	2108      	movs	r1, #8
 80047ca:	430a      	orrs	r2, r1
 80047cc:	635a      	str	r2, [r3, #52]	; 0x34
 80047ce:	4ba5      	ldr	r3, [pc, #660]	; (8004a64 <MX_GPIO_Init+0x300>)
 80047d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047d2:	2208      	movs	r2, #8
 80047d4:	4013      	ands	r3, r2
 80047d6:	607b      	str	r3, [r7, #4]
 80047d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SSDRAIN_SIGNAL_Pin|SS_5V_CTRL_Pin, GPIO_PIN_SET);
 80047da:	2390      	movs	r3, #144	; 0x90
 80047dc:	021b      	lsls	r3, r3, #8
 80047de:	48a2      	ldr	r0, [pc, #648]	; (8004a68 <MX_GPIO_Init+0x304>)
 80047e0:	2201      	movs	r2, #1
 80047e2:	0019      	movs	r1, r3
 80047e4:	f002 fd4d 	bl	8007282 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PC14_Pin|LED2_BL_Pin|BUZ_Pin|LED1_YE_Pin
 80047e8:	49a0      	ldr	r1, [pc, #640]	; (8004a6c <MX_GPIO_Init+0x308>)
 80047ea:	4b9f      	ldr	r3, [pc, #636]	; (8004a68 <MX_GPIO_Init+0x304>)
 80047ec:	2200      	movs	r2, #0
 80047ee:	0018      	movs	r0, r3
 80047f0:	f002 fd47 	bl	8007282 <HAL_GPIO_WritePin>
                          |DIM_TRIAC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FAN_Pin|RL_SS_STEAM_Pin|TO_MASS_Pin|BLE_EN_Pin
 80047f4:	23ee      	movs	r3, #238	; 0xee
 80047f6:	0159      	lsls	r1, r3, #5
 80047f8:	23a0      	movs	r3, #160	; 0xa0
 80047fa:	05db      	lsls	r3, r3, #23
 80047fc:	2200      	movs	r2, #0
 80047fe:	0018      	movs	r0, r3
 8004800:	f002 fd3f 	bl	8007282 <HAL_GPIO_WritePin>
                          |PA11_Pin|PA12_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RL_DRAIN_Pin|RL_WHIRL_Pin|RL_AIR_Pin|RL_STEAM100_Pin
 8004804:	499a      	ldr	r1, [pc, #616]	; (8004a70 <MX_GPIO_Init+0x30c>)
 8004806:	4b9b      	ldr	r3, [pc, #620]	; (8004a74 <MX_GPIO_Init+0x310>)
 8004808:	2200      	movs	r2, #0
 800480a:	0018      	movs	r0, r3
 800480c:	f002 fd39 	bl	8007282 <HAL_GPIO_WritePin>
                          |RL_STEAM50_Pin|RL_COM_Pin|BUG_IO_Pin|PB3_Pin
                          |RL_SOL_COM_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PD0_GPIO_Port, PD0_Pin, GPIO_PIN_RESET);
 8004810:	4b99      	ldr	r3, [pc, #612]	; (8004a78 <MX_GPIO_Init+0x314>)
 8004812:	2200      	movs	r2, #0
 8004814:	2101      	movs	r1, #1
 8004816:	0018      	movs	r0, r3
 8004818:	f002 fd33 	bl	8007282 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, FET_DOME_LIGHT_Pin|FET_SOL_AF_Pin|FET_SOL_STEAM_Pin, GPIO_PIN_SET);
 800481c:	4b96      	ldr	r3, [pc, #600]	; (8004a78 <MX_GPIO_Init+0x314>)
 800481e:	2201      	movs	r2, #1
 8004820:	211a      	movs	r1, #26
 8004822:	0018      	movs	r0, r3
 8004824:	f002 fd2d 	bl	8007282 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SSDRAIN_LOGIC_Pin IN_SAFETY_Pin BLE_STATE_Pin SSWATER_LOGIC_Pin */
  GPIO_InitStruct.Pin = SSDRAIN_LOGIC_Pin|IN_SAFETY_Pin|BLE_STATE_Pin|SSWATER_LOGIC_Pin;
 8004828:	193b      	adds	r3, r7, r4
 800482a:	22b2      	movs	r2, #178	; 0xb2
 800482c:	0192      	lsls	r2, r2, #6
 800482e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004830:	193b      	adds	r3, r7, r4
 8004832:	2200      	movs	r2, #0
 8004834:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004836:	193b      	adds	r3, r7, r4
 8004838:	2201      	movs	r2, #1
 800483a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800483c:	193b      	adds	r3, r7, r4
 800483e:	4a8a      	ldr	r2, [pc, #552]	; (8004a68 <MX_GPIO_Init+0x304>)
 8004840:	0019      	movs	r1, r3
 8004842:	0010      	movs	r0, r2
 8004844:	f002 fb9c 	bl	8006f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : SSDRAIN_SIGNAL_Pin */
  GPIO_InitStruct.Pin = SSDRAIN_SIGNAL_Pin;
 8004848:	0021      	movs	r1, r4
 800484a:	187b      	adds	r3, r7, r1
 800484c:	2280      	movs	r2, #128	; 0x80
 800484e:	0152      	lsls	r2, r2, #5
 8004850:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004852:	000c      	movs	r4, r1
 8004854:	193b      	adds	r3, r7, r4
 8004856:	2201      	movs	r2, #1
 8004858:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800485a:	193b      	adds	r3, r7, r4
 800485c:	2201      	movs	r2, #1
 800485e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004860:	193b      	adds	r3, r7, r4
 8004862:	2201      	movs	r2, #1
 8004864:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SSDRAIN_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 8004866:	193b      	adds	r3, r7, r4
 8004868:	4a7f      	ldr	r2, [pc, #508]	; (8004a68 <MX_GPIO_Init+0x304>)
 800486a:	0019      	movs	r1, r3
 800486c:	0010      	movs	r0, r2
 800486e:	f002 fb87 	bl	8006f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14_Pin LED2_BL_Pin LED1_YE_Pin */
  GPIO_InitStruct.Pin = PC14_Pin|LED2_BL_Pin|LED1_YE_Pin;
 8004872:	193b      	adds	r3, r7, r4
 8004874:	4a81      	ldr	r2, [pc, #516]	; (8004a7c <MX_GPIO_Init+0x318>)
 8004876:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004878:	193b      	adds	r3, r7, r4
 800487a:	2201      	movs	r2, #1
 800487c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800487e:	193b      	adds	r3, r7, r4
 8004880:	2200      	movs	r2, #0
 8004882:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004884:	193b      	adds	r3, r7, r4
 8004886:	2200      	movs	r2, #0
 8004888:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800488a:	193b      	adds	r3, r7, r4
 800488c:	4a76      	ldr	r2, [pc, #472]	; (8004a68 <MX_GPIO_Init+0x304>)
 800488e:	0019      	movs	r1, r3
 8004890:	0010      	movs	r0, r2
 8004892:	f002 fb75 	bl	8006f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : SS_5V_CTRL_Pin */
  GPIO_InitStruct.Pin = SS_5V_CTRL_Pin;
 8004896:	0021      	movs	r1, r4
 8004898:	187b      	adds	r3, r7, r1
 800489a:	2280      	movs	r2, #128	; 0x80
 800489c:	0212      	lsls	r2, r2, #8
 800489e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80048a0:	000c      	movs	r4, r1
 80048a2:	193b      	adds	r3, r7, r4
 80048a4:	2201      	movs	r2, #1
 80048a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80048a8:	193b      	adds	r3, r7, r4
 80048aa:	2201      	movs	r2, #1
 80048ac:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048ae:	193b      	adds	r3, r7, r4
 80048b0:	2200      	movs	r2, #0
 80048b2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SS_5V_CTRL_GPIO_Port, &GPIO_InitStruct);
 80048b4:	193b      	adds	r3, r7, r4
 80048b6:	4a6c      	ldr	r2, [pc, #432]	; (8004a68 <MX_GPIO_Init+0x304>)
 80048b8:	0019      	movs	r1, r3
 80048ba:	0010      	movs	r0, r2
 80048bc:	f002 fb60 	bl	8006f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZ_Pin */
  GPIO_InitStruct.Pin = BUZ_Pin;
 80048c0:	193b      	adds	r3, r7, r4
 80048c2:	2204      	movs	r2, #4
 80048c4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80048c6:	193b      	adds	r3, r7, r4
 80048c8:	2201      	movs	r2, #1
 80048ca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80048cc:	193b      	adds	r3, r7, r4
 80048ce:	2202      	movs	r2, #2
 80048d0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048d2:	193b      	adds	r3, r7, r4
 80048d4:	2200      	movs	r2, #0
 80048d6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BUZ_GPIO_Port, &GPIO_InitStruct);
 80048d8:	193b      	adds	r3, r7, r4
 80048da:	4a63      	ldr	r2, [pc, #396]	; (8004a68 <MX_GPIO_Init+0x304>)
 80048dc:	0019      	movs	r1, r3
 80048de:	0010      	movs	r0, r2
 80048e0:	f002 fb4e 	bl	8006f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : FAN_Pin RL_SS_STEAM_Pin TO_MASS_Pin BLE_EN_Pin */
  GPIO_InitStruct.Pin = FAN_Pin|RL_SS_STEAM_Pin|TO_MASS_Pin|BLE_EN_Pin;
 80048e4:	0021      	movs	r1, r4
 80048e6:	187b      	adds	r3, r7, r1
 80048e8:	22b8      	movs	r2, #184	; 0xb8
 80048ea:	00d2      	lsls	r2, r2, #3
 80048ec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80048ee:	000c      	movs	r4, r1
 80048f0:	193b      	adds	r3, r7, r4
 80048f2:	2201      	movs	r2, #1
 80048f4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80048f6:	193b      	adds	r3, r7, r4
 80048f8:	2202      	movs	r2, #2
 80048fa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048fc:	193b      	adds	r3, r7, r4
 80048fe:	2200      	movs	r2, #0
 8004900:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004902:	193a      	adds	r2, r7, r4
 8004904:	23a0      	movs	r3, #160	; 0xa0
 8004906:	05db      	lsls	r3, r3, #23
 8004908:	0011      	movs	r1, r2
 800490a:	0018      	movs	r0, r3
 800490c:	f002 fb38 	bl	8006f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : RL_DRAIN_Pin RL_WHIRL_Pin RL_AIR_Pin RL_STEAM100_Pin
                           RL_STEAM50_Pin RL_COM_Pin RL_SOL_COM_Pin */
  GPIO_InitStruct.Pin = RL_DRAIN_Pin|RL_WHIRL_Pin|RL_AIR_Pin|RL_STEAM100_Pin
 8004910:	193b      	adds	r3, r7, r4
 8004912:	4a5b      	ldr	r2, [pc, #364]	; (8004a80 <MX_GPIO_Init+0x31c>)
 8004914:	601a      	str	r2, [r3, #0]
                          |RL_STEAM50_Pin|RL_COM_Pin|RL_SOL_COM_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004916:	193b      	adds	r3, r7, r4
 8004918:	2201      	movs	r2, #1
 800491a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800491c:	193b      	adds	r3, r7, r4
 800491e:	2202      	movs	r2, #2
 8004920:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004922:	193b      	adds	r3, r7, r4
 8004924:	2200      	movs	r2, #0
 8004926:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004928:	193b      	adds	r3, r7, r4
 800492a:	4a52      	ldr	r2, [pc, #328]	; (8004a74 <MX_GPIO_Init+0x310>)
 800492c:	0019      	movs	r1, r3
 800492e:	0010      	movs	r0, r2
 8004930:	f002 fb26 	bl	8006f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUG_IO_Pin */
  GPIO_InitStruct.Pin = BUG_IO_Pin;
 8004934:	0021      	movs	r1, r4
 8004936:	187b      	adds	r3, r7, r1
 8004938:	2280      	movs	r2, #128	; 0x80
 800493a:	0192      	lsls	r2, r2, #6
 800493c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800493e:	000c      	movs	r4, r1
 8004940:	193b      	adds	r3, r7, r4
 8004942:	2201      	movs	r2, #1
 8004944:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004946:	193b      	adds	r3, r7, r4
 8004948:	2201      	movs	r2, #1
 800494a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800494c:	193b      	adds	r3, r7, r4
 800494e:	2203      	movs	r2, #3
 8004950:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BUG_IO_GPIO_Port, &GPIO_InitStruct);
 8004952:	193b      	adds	r3, r7, r4
 8004954:	4a47      	ldr	r2, [pc, #284]	; (8004a74 <MX_GPIO_Init+0x310>)
 8004956:	0019      	movs	r1, r3
 8004958:	0010      	movs	r0, r2
 800495a:	f002 fb11 	bl	8006f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_BUTTON_Pin IN_EN_DEBUG_Pin IN_JETSW_Pin */
  GPIO_InitStruct.Pin = IN_BUTTON_Pin|IN_EN_DEBUG_Pin|IN_JETSW_Pin;
 800495e:	193b      	adds	r3, r7, r4
 8004960:	4a48      	ldr	r2, [pc, #288]	; (8004a84 <MX_GPIO_Init+0x320>)
 8004962:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004964:	193b      	adds	r3, r7, r4
 8004966:	2200      	movs	r2, #0
 8004968:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800496a:	193b      	adds	r3, r7, r4
 800496c:	2201      	movs	r2, #1
 800496e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004970:	193b      	adds	r3, r7, r4
 8004972:	4a40      	ldr	r2, [pc, #256]	; (8004a74 <MX_GPIO_Init+0x310>)
 8004974:	0019      	movs	r1, r3
 8004976:	0010      	movs	r0, r2
 8004978:	f002 fb02 	bl	8006f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_EL814_Pin */
  GPIO_InitStruct.Pin = IN_EL814_Pin;
 800497c:	193b      	adds	r3, r7, r4
 800497e:	2280      	movs	r2, #128	; 0x80
 8004980:	0092      	lsls	r2, r2, #2
 8004982:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004984:	193b      	adds	r3, r7, r4
 8004986:	2200      	movs	r2, #0
 8004988:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800498a:	193b      	adds	r3, r7, r4
 800498c:	2201      	movs	r2, #1
 800498e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(IN_EL814_GPIO_Port, &GPIO_InitStruct);
 8004990:	193a      	adds	r2, r7, r4
 8004992:	23a0      	movs	r3, #160	; 0xa0
 8004994:	05db      	lsls	r3, r3, #23
 8004996:	0011      	movs	r1, r2
 8004998:	0018      	movs	r0, r3
 800499a:	f002 faf1 	bl	8006f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIM_TRIAC_Pin */
  GPIO_InitStruct.Pin = DIM_TRIAC_Pin;
 800499e:	193b      	adds	r3, r7, r4
 80049a0:	2240      	movs	r2, #64	; 0x40
 80049a2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80049a4:	193b      	adds	r3, r7, r4
 80049a6:	2201      	movs	r2, #1
 80049a8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80049aa:	193b      	adds	r3, r7, r4
 80049ac:	2202      	movs	r2, #2
 80049ae:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80049b0:	193b      	adds	r3, r7, r4
 80049b2:	2202      	movs	r2, #2
 80049b4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DIM_TRIAC_GPIO_Port, &GPIO_InitStruct);
 80049b6:	193b      	adds	r3, r7, r4
 80049b8:	4a2b      	ldr	r2, [pc, #172]	; (8004a68 <MX_GPIO_Init+0x304>)
 80049ba:	0019      	movs	r1, r3
 80049bc:	0010      	movs	r0, r2
 80049be:	f002 fadf 	bl	8006f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11_Pin PA12_Pin */
  GPIO_InitStruct.Pin = PA11_Pin|PA12_Pin;
 80049c2:	0021      	movs	r1, r4
 80049c4:	187b      	adds	r3, r7, r1
 80049c6:	22c0      	movs	r2, #192	; 0xc0
 80049c8:	0152      	lsls	r2, r2, #5
 80049ca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80049cc:	000c      	movs	r4, r1
 80049ce:	193b      	adds	r3, r7, r4
 80049d0:	2201      	movs	r2, #1
 80049d2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049d4:	193b      	adds	r3, r7, r4
 80049d6:	2200      	movs	r2, #0
 80049d8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049da:	193b      	adds	r3, r7, r4
 80049dc:	2200      	movs	r2, #0
 80049de:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049e0:	193a      	adds	r2, r7, r4
 80049e2:	23a0      	movs	r3, #160	; 0xa0
 80049e4:	05db      	lsls	r3, r3, #23
 80049e6:	0011      	movs	r1, r2
 80049e8:	0018      	movs	r0, r3
 80049ea:	f002 fac9 	bl	8006f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0_Pin */
  GPIO_InitStruct.Pin = PD0_Pin;
 80049ee:	193b      	adds	r3, r7, r4
 80049f0:	2201      	movs	r2, #1
 80049f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80049f4:	193b      	adds	r3, r7, r4
 80049f6:	2201      	movs	r2, #1
 80049f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049fa:	193b      	adds	r3, r7, r4
 80049fc:	2200      	movs	r2, #0
 80049fe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a00:	193b      	adds	r3, r7, r4
 8004a02:	2200      	movs	r2, #0
 8004a04:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(PD0_GPIO_Port, &GPIO_InitStruct);
 8004a06:	193b      	adds	r3, r7, r4
 8004a08:	4a1b      	ldr	r2, [pc, #108]	; (8004a78 <MX_GPIO_Init+0x314>)
 8004a0a:	0019      	movs	r1, r3
 8004a0c:	0010      	movs	r0, r2
 8004a0e:	f002 fab7 	bl	8006f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : FET_DOME_LIGHT_Pin FET_SOL_AF_Pin FET_SOL_STEAM_Pin */
  GPIO_InitStruct.Pin = FET_DOME_LIGHT_Pin|FET_SOL_AF_Pin|FET_SOL_STEAM_Pin;
 8004a12:	193b      	adds	r3, r7, r4
 8004a14:	221a      	movs	r2, #26
 8004a16:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a18:	193b      	adds	r3, r7, r4
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004a1e:	193b      	adds	r3, r7, r4
 8004a20:	2201      	movs	r2, #1
 8004a22:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a24:	193b      	adds	r3, r7, r4
 8004a26:	2200      	movs	r2, #0
 8004a28:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004a2a:	193b      	adds	r3, r7, r4
 8004a2c:	4a12      	ldr	r2, [pc, #72]	; (8004a78 <MX_GPIO_Init+0x314>)
 8004a2e:	0019      	movs	r1, r3
 8004a30:	0010      	movs	r0, r2
 8004a32:	f002 faa5 	bl	8006f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3_Pin */
  GPIO_InitStruct.Pin = PB3_Pin;
 8004a36:	0021      	movs	r1, r4
 8004a38:	187b      	adds	r3, r7, r1
 8004a3a:	2208      	movs	r2, #8
 8004a3c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a3e:	187b      	adds	r3, r7, r1
 8004a40:	2201      	movs	r2, #1
 8004a42:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a44:	187b      	adds	r3, r7, r1
 8004a46:	2200      	movs	r2, #0
 8004a48:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a4a:	187b      	adds	r3, r7, r1
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(PB3_GPIO_Port, &GPIO_InitStruct);
 8004a50:	187b      	adds	r3, r7, r1
 8004a52:	4a08      	ldr	r2, [pc, #32]	; (8004a74 <MX_GPIO_Init+0x310>)
 8004a54:	0019      	movs	r1, r3
 8004a56:	0010      	movs	r0, r2
 8004a58:	f002 fa92 	bl	8006f80 <HAL_GPIO_Init>

}
 8004a5c:	46c0      	nop			; (mov r8, r8)
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	b00b      	add	sp, #44	; 0x2c
 8004a62:	bd90      	pop	{r4, r7, pc}
 8004a64:	40021000 	.word	0x40021000
 8004a68:	50000800 	.word	0x50000800
 8004a6c:	0000404e 	.word	0x0000404e
 8004a70:	00003c4f 	.word	0x00003c4f
 8004a74:	50000400 	.word	0x50000400
 8004a78:	50000c00 	.word	0x50000c00
 8004a7c:	0000400a 	.word	0x0000400a
 8004a80:	00001c47 	.word	0x00001c47
 8004a84:	0000c080 	.word	0x0000c080

08004a88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004a8c:	46c0      	nop			; (mov r8, r8)
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
	...

08004a94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b082      	sub	sp, #8
 8004a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a9a:	4b11      	ldr	r3, [pc, #68]	; (8004ae0 <HAL_MspInit+0x4c>)
 8004a9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a9e:	4b10      	ldr	r3, [pc, #64]	; (8004ae0 <HAL_MspInit+0x4c>)
 8004aa0:	2101      	movs	r1, #1
 8004aa2:	430a      	orrs	r2, r1
 8004aa4:	641a      	str	r2, [r3, #64]	; 0x40
 8004aa6:	4b0e      	ldr	r3, [pc, #56]	; (8004ae0 <HAL_MspInit+0x4c>)
 8004aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aaa:	2201      	movs	r2, #1
 8004aac:	4013      	ands	r3, r2
 8004aae:	607b      	str	r3, [r7, #4]
 8004ab0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004ab2:	4b0b      	ldr	r3, [pc, #44]	; (8004ae0 <HAL_MspInit+0x4c>)
 8004ab4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ab6:	4b0a      	ldr	r3, [pc, #40]	; (8004ae0 <HAL_MspInit+0x4c>)
 8004ab8:	2180      	movs	r1, #128	; 0x80
 8004aba:	0549      	lsls	r1, r1, #21
 8004abc:	430a      	orrs	r2, r1
 8004abe:	63da      	str	r2, [r3, #60]	; 0x3c
 8004ac0:	4b07      	ldr	r3, [pc, #28]	; (8004ae0 <HAL_MspInit+0x4c>)
 8004ac2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ac4:	2380      	movs	r3, #128	; 0x80
 8004ac6:	055b      	lsls	r3, r3, #21
 8004ac8:	4013      	ands	r3, r2
 8004aca:	603b      	str	r3, [r7, #0]
 8004acc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8004ace:	23c0      	movs	r3, #192	; 0xc0
 8004ad0:	00db      	lsls	r3, r3, #3
 8004ad2:	0018      	movs	r0, r3
 8004ad4:	f000 fcb0 	bl	8005438 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004ad8:	46c0      	nop			; (mov r8, r8)
 8004ada:	46bd      	mov	sp, r7
 8004adc:	b002      	add	sp, #8
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	40021000 	.word	0x40021000

08004ae4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004ae4:	b590      	push	{r4, r7, lr}
 8004ae6:	b091      	sub	sp, #68	; 0x44
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004aec:	232c      	movs	r3, #44	; 0x2c
 8004aee:	18fb      	adds	r3, r7, r3
 8004af0:	0018      	movs	r0, r3
 8004af2:	2314      	movs	r3, #20
 8004af4:	001a      	movs	r2, r3
 8004af6:	2100      	movs	r1, #0
 8004af8:	f007 f896 	bl	800bc28 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004afc:	2410      	movs	r4, #16
 8004afe:	193b      	adds	r3, r7, r4
 8004b00:	0018      	movs	r0, r3
 8004b02:	231c      	movs	r3, #28
 8004b04:	001a      	movs	r2, r3
 8004b06:	2100      	movs	r1, #0
 8004b08:	f007 f88e 	bl	800bc28 <memset>
  if(hadc->Instance==ADC1)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a3a      	ldr	r2, [pc, #232]	; (8004bfc <HAL_ADC_MspInit+0x118>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d16d      	bne.n	8004bf2 <HAL_ADC_MspInit+0x10e>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8004b16:	193b      	adds	r3, r7, r4
 8004b18:	2280      	movs	r2, #128	; 0x80
 8004b1a:	01d2      	lsls	r2, r2, #7
 8004b1c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_HSI;
 8004b1e:	193b      	adds	r3, r7, r4
 8004b20:	2280      	movs	r2, #128	; 0x80
 8004b22:	0612      	lsls	r2, r2, #24
 8004b24:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004b26:	193b      	adds	r3, r7, r4
 8004b28:	0018      	movs	r0, r3
 8004b2a:	f003 fd87 	bl	800863c <HAL_RCCEx_PeriphCLKConfig>
 8004b2e:	1e03      	subs	r3, r0, #0
 8004b30:	d001      	beq.n	8004b36 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8004b32:	f7ff ffa9 	bl	8004a88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8004b36:	4b32      	ldr	r3, [pc, #200]	; (8004c00 <HAL_ADC_MspInit+0x11c>)
 8004b38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b3a:	4b31      	ldr	r3, [pc, #196]	; (8004c00 <HAL_ADC_MspInit+0x11c>)
 8004b3c:	2180      	movs	r1, #128	; 0x80
 8004b3e:	0349      	lsls	r1, r1, #13
 8004b40:	430a      	orrs	r2, r1
 8004b42:	641a      	str	r2, [r3, #64]	; 0x40
 8004b44:	4b2e      	ldr	r3, [pc, #184]	; (8004c00 <HAL_ADC_MspInit+0x11c>)
 8004b46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b48:	2380      	movs	r3, #128	; 0x80
 8004b4a:	035b      	lsls	r3, r3, #13
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	60fb      	str	r3, [r7, #12]
 8004b50:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b52:	4b2b      	ldr	r3, [pc, #172]	; (8004c00 <HAL_ADC_MspInit+0x11c>)
 8004b54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b56:	4b2a      	ldr	r3, [pc, #168]	; (8004c00 <HAL_ADC_MspInit+0x11c>)
 8004b58:	2101      	movs	r1, #1
 8004b5a:	430a      	orrs	r2, r1
 8004b5c:	635a      	str	r2, [r3, #52]	; 0x34
 8004b5e:	4b28      	ldr	r3, [pc, #160]	; (8004c00 <HAL_ADC_MspInit+0x11c>)
 8004b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b62:	2201      	movs	r2, #1
 8004b64:	4013      	ands	r3, r2
 8004b66:	60bb      	str	r3, [r7, #8]
 8004b68:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8004b6a:	212c      	movs	r1, #44	; 0x2c
 8004b6c:	187b      	adds	r3, r7, r1
 8004b6e:	223c      	movs	r2, #60	; 0x3c
 8004b70:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004b72:	187b      	adds	r3, r7, r1
 8004b74:	2203      	movs	r2, #3
 8004b76:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b78:	187b      	adds	r3, r7, r1
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b7e:	187a      	adds	r2, r7, r1
 8004b80:	23a0      	movs	r3, #160	; 0xa0
 8004b82:	05db      	lsls	r3, r3, #23
 8004b84:	0011      	movs	r1, r2
 8004b86:	0018      	movs	r0, r3
 8004b88:	f002 f9fa 	bl	8006f80 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8004b8c:	4b1d      	ldr	r3, [pc, #116]	; (8004c04 <HAL_ADC_MspInit+0x120>)
 8004b8e:	4a1e      	ldr	r2, [pc, #120]	; (8004c08 <HAL_ADC_MspInit+0x124>)
 8004b90:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8004b92:	4b1c      	ldr	r3, [pc, #112]	; (8004c04 <HAL_ADC_MspInit+0x120>)
 8004b94:	2205      	movs	r2, #5
 8004b96:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004b98:	4b1a      	ldr	r3, [pc, #104]	; (8004c04 <HAL_ADC_MspInit+0x120>)
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b9e:	4b19      	ldr	r3, [pc, #100]	; (8004c04 <HAL_ADC_MspInit+0x120>)
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004ba4:	4b17      	ldr	r3, [pc, #92]	; (8004c04 <HAL_ADC_MspInit+0x120>)
 8004ba6:	2280      	movs	r2, #128	; 0x80
 8004ba8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004baa:	4b16      	ldr	r3, [pc, #88]	; (8004c04 <HAL_ADC_MspInit+0x120>)
 8004bac:	2280      	movs	r2, #128	; 0x80
 8004bae:	0052      	lsls	r2, r2, #1
 8004bb0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004bb2:	4b14      	ldr	r3, [pc, #80]	; (8004c04 <HAL_ADC_MspInit+0x120>)
 8004bb4:	2280      	movs	r2, #128	; 0x80
 8004bb6:	00d2      	lsls	r2, r2, #3
 8004bb8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004bba:	4b12      	ldr	r3, [pc, #72]	; (8004c04 <HAL_ADC_MspInit+0x120>)
 8004bbc:	2220      	movs	r2, #32
 8004bbe:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004bc0:	4b10      	ldr	r3, [pc, #64]	; (8004c04 <HAL_ADC_MspInit+0x120>)
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004bc6:	4b0f      	ldr	r3, [pc, #60]	; (8004c04 <HAL_ADC_MspInit+0x120>)
 8004bc8:	0018      	movs	r0, r3
 8004bca:	f001 febb 	bl	8006944 <HAL_DMA_Init>
 8004bce:	1e03      	subs	r3, r0, #0
 8004bd0:	d001      	beq.n	8004bd6 <HAL_ADC_MspInit+0xf2>
    {
      Error_Handler();
 8004bd2:	f7ff ff59 	bl	8004a88 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a0a      	ldr	r2, [pc, #40]	; (8004c04 <HAL_ADC_MspInit+0x120>)
 8004bda:	651a      	str	r2, [r3, #80]	; 0x50
 8004bdc:	4b09      	ldr	r3, [pc, #36]	; (8004c04 <HAL_ADC_MspInit+0x120>)
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	629a      	str	r2, [r3, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8004be2:	2200      	movs	r2, #0
 8004be4:	2100      	movs	r1, #0
 8004be6:	200c      	movs	r0, #12
 8004be8:	f001 fe72 	bl	80068d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8004bec:	200c      	movs	r0, #12
 8004bee:	f001 fe84 	bl	80068fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004bf2:	46c0      	nop			; (mov r8, r8)
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	b011      	add	sp, #68	; 0x44
 8004bf8:	bd90      	pop	{r4, r7, pc}
 8004bfa:	46c0      	nop			; (mov r8, r8)
 8004bfc:	40012400 	.word	0x40012400
 8004c00:	40021000 	.word	0x40021000
 8004c04:	2000065c 	.word	0x2000065c
 8004c08:	40020008 	.word	0x40020008

08004c0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004c0c:	b590      	push	{r4, r7, lr}
 8004c0e:	b091      	sub	sp, #68	; 0x44
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c14:	232c      	movs	r3, #44	; 0x2c
 8004c16:	18fb      	adds	r3, r7, r3
 8004c18:	0018      	movs	r0, r3
 8004c1a:	2314      	movs	r3, #20
 8004c1c:	001a      	movs	r2, r3
 8004c1e:	2100      	movs	r1, #0
 8004c20:	f007 f802 	bl	800bc28 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004c24:	2410      	movs	r4, #16
 8004c26:	193b      	adds	r3, r7, r4
 8004c28:	0018      	movs	r0, r3
 8004c2a:	231c      	movs	r3, #28
 8004c2c:	001a      	movs	r2, r3
 8004c2e:	2100      	movs	r1, #0
 8004c30:	f006 fffa 	bl	800bc28 <memset>
  if(hi2c->Instance==I2C1)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a22      	ldr	r2, [pc, #136]	; (8004cc4 <HAL_I2C_MspInit+0xb8>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d13e      	bne.n	8004cbc <HAL_I2C_MspInit+0xb0>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004c3e:	193b      	adds	r3, r7, r4
 8004c40:	2220      	movs	r2, #32
 8004c42:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004c44:	193b      	adds	r3, r7, r4
 8004c46:	2200      	movs	r2, #0
 8004c48:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004c4a:	193b      	adds	r3, r7, r4
 8004c4c:	0018      	movs	r0, r3
 8004c4e:	f003 fcf5 	bl	800863c <HAL_RCCEx_PeriphCLKConfig>
 8004c52:	1e03      	subs	r3, r0, #0
 8004c54:	d001      	beq.n	8004c5a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8004c56:	f7ff ff17 	bl	8004a88 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c5a:	4b1b      	ldr	r3, [pc, #108]	; (8004cc8 <HAL_I2C_MspInit+0xbc>)
 8004c5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c5e:	4b1a      	ldr	r3, [pc, #104]	; (8004cc8 <HAL_I2C_MspInit+0xbc>)
 8004c60:	2102      	movs	r1, #2
 8004c62:	430a      	orrs	r2, r1
 8004c64:	635a      	str	r2, [r3, #52]	; 0x34
 8004c66:	4b18      	ldr	r3, [pc, #96]	; (8004cc8 <HAL_I2C_MspInit+0xbc>)
 8004c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c6a:	2202      	movs	r2, #2
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	60fb      	str	r3, [r7, #12]
 8004c70:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004c72:	212c      	movs	r1, #44	; 0x2c
 8004c74:	187b      	adds	r3, r7, r1
 8004c76:	22c0      	movs	r2, #192	; 0xc0
 8004c78:	0092      	lsls	r2, r2, #2
 8004c7a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004c7c:	187b      	adds	r3, r7, r1
 8004c7e:	2212      	movs	r2, #18
 8004c80:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004c82:	187b      	adds	r3, r7, r1
 8004c84:	2201      	movs	r2, #1
 8004c86:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c88:	187b      	adds	r3, r7, r1
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8004c8e:	187b      	adds	r3, r7, r1
 8004c90:	2206      	movs	r2, #6
 8004c92:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c94:	187b      	adds	r3, r7, r1
 8004c96:	4a0d      	ldr	r2, [pc, #52]	; (8004ccc <HAL_I2C_MspInit+0xc0>)
 8004c98:	0019      	movs	r1, r3
 8004c9a:	0010      	movs	r0, r2
 8004c9c:	f002 f970 	bl	8006f80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004ca0:	4b09      	ldr	r3, [pc, #36]	; (8004cc8 <HAL_I2C_MspInit+0xbc>)
 8004ca2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ca4:	4b08      	ldr	r3, [pc, #32]	; (8004cc8 <HAL_I2C_MspInit+0xbc>)
 8004ca6:	2180      	movs	r1, #128	; 0x80
 8004ca8:	0389      	lsls	r1, r1, #14
 8004caa:	430a      	orrs	r2, r1
 8004cac:	63da      	str	r2, [r3, #60]	; 0x3c
 8004cae:	4b06      	ldr	r3, [pc, #24]	; (8004cc8 <HAL_I2C_MspInit+0xbc>)
 8004cb0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cb2:	2380      	movs	r3, #128	; 0x80
 8004cb4:	039b      	lsls	r3, r3, #14
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	60bb      	str	r3, [r7, #8]
 8004cba:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004cbc:	46c0      	nop			; (mov r8, r8)
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	b011      	add	sp, #68	; 0x44
 8004cc2:	bd90      	pop	{r4, r7, pc}
 8004cc4:	40005400 	.word	0x40005400
 8004cc8:	40021000 	.word	0x40021000
 8004ccc:	50000400 	.word	0x50000400

08004cd0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b086      	sub	sp, #24
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a35      	ldr	r2, [pc, #212]	; (8004db4 <HAL_TIM_Base_MspInit+0xe4>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d114      	bne.n	8004d0c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004ce2:	4b35      	ldr	r3, [pc, #212]	; (8004db8 <HAL_TIM_Base_MspInit+0xe8>)
 8004ce4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ce6:	4b34      	ldr	r3, [pc, #208]	; (8004db8 <HAL_TIM_Base_MspInit+0xe8>)
 8004ce8:	2102      	movs	r1, #2
 8004cea:	430a      	orrs	r2, r1
 8004cec:	63da      	str	r2, [r3, #60]	; 0x3c
 8004cee:	4b32      	ldr	r3, [pc, #200]	; (8004db8 <HAL_TIM_Base_MspInit+0xe8>)
 8004cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cf2:	2202      	movs	r2, #2
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	617b      	str	r3, [r7, #20]
 8004cf8:	697b      	ldr	r3, [r7, #20]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	2102      	movs	r1, #2
 8004cfe:	2010      	movs	r0, #16
 8004d00:	f001 fde6 	bl	80068d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004d04:	2010      	movs	r0, #16
 8004d06:	f001 fdf8 	bl	80068fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8004d0a:	e04e      	b.n	8004daa <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM6)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a2a      	ldr	r2, [pc, #168]	; (8004dbc <HAL_TIM_Base_MspInit+0xec>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d114      	bne.n	8004d40 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004d16:	4b28      	ldr	r3, [pc, #160]	; (8004db8 <HAL_TIM_Base_MspInit+0xe8>)
 8004d18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d1a:	4b27      	ldr	r3, [pc, #156]	; (8004db8 <HAL_TIM_Base_MspInit+0xe8>)
 8004d1c:	2110      	movs	r1, #16
 8004d1e:	430a      	orrs	r2, r1
 8004d20:	63da      	str	r2, [r3, #60]	; 0x3c
 8004d22:	4b25      	ldr	r3, [pc, #148]	; (8004db8 <HAL_TIM_Base_MspInit+0xe8>)
 8004d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d26:	2210      	movs	r2, #16
 8004d28:	4013      	ands	r3, r2
 8004d2a:	613b      	str	r3, [r7, #16]
 8004d2c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8004d2e:	2200      	movs	r2, #0
 8004d30:	2100      	movs	r1, #0
 8004d32:	2011      	movs	r0, #17
 8004d34:	f001 fdcc 	bl	80068d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8004d38:	2011      	movs	r0, #17
 8004d3a:	f001 fdde 	bl	80068fa <HAL_NVIC_EnableIRQ>
}
 8004d3e:	e034      	b.n	8004daa <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM7)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a1e      	ldr	r2, [pc, #120]	; (8004dc0 <HAL_TIM_Base_MspInit+0xf0>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d114      	bne.n	8004d74 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004d4a:	4b1b      	ldr	r3, [pc, #108]	; (8004db8 <HAL_TIM_Base_MspInit+0xe8>)
 8004d4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d4e:	4b1a      	ldr	r3, [pc, #104]	; (8004db8 <HAL_TIM_Base_MspInit+0xe8>)
 8004d50:	2120      	movs	r1, #32
 8004d52:	430a      	orrs	r2, r1
 8004d54:	63da      	str	r2, [r3, #60]	; 0x3c
 8004d56:	4b18      	ldr	r3, [pc, #96]	; (8004db8 <HAL_TIM_Base_MspInit+0xe8>)
 8004d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d5a:	2220      	movs	r2, #32
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	60fb      	str	r3, [r7, #12]
 8004d60:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 8004d62:	2200      	movs	r2, #0
 8004d64:	2101      	movs	r1, #1
 8004d66:	2012      	movs	r0, #18
 8004d68:	f001 fdb2 	bl	80068d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004d6c:	2012      	movs	r0, #18
 8004d6e:	f001 fdc4 	bl	80068fa <HAL_NVIC_EnableIRQ>
}
 8004d72:	e01a      	b.n	8004daa <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM14)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a12      	ldr	r2, [pc, #72]	; (8004dc4 <HAL_TIM_Base_MspInit+0xf4>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d115      	bne.n	8004daa <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8004d7e:	4b0e      	ldr	r3, [pc, #56]	; (8004db8 <HAL_TIM_Base_MspInit+0xe8>)
 8004d80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d82:	4b0d      	ldr	r3, [pc, #52]	; (8004db8 <HAL_TIM_Base_MspInit+0xe8>)
 8004d84:	2180      	movs	r1, #128	; 0x80
 8004d86:	0209      	lsls	r1, r1, #8
 8004d88:	430a      	orrs	r2, r1
 8004d8a:	641a      	str	r2, [r3, #64]	; 0x40
 8004d8c:	4b0a      	ldr	r3, [pc, #40]	; (8004db8 <HAL_TIM_Base_MspInit+0xe8>)
 8004d8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d90:	2380      	movs	r3, #128	; 0x80
 8004d92:	021b      	lsls	r3, r3, #8
 8004d94:	4013      	ands	r3, r2
 8004d96:	60bb      	str	r3, [r7, #8]
 8004d98:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM14_IRQn, 2, 0);
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	2102      	movs	r1, #2
 8004d9e:	2013      	movs	r0, #19
 8004da0:	f001 fd96 	bl	80068d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8004da4:	2013      	movs	r0, #19
 8004da6:	f001 fda8 	bl	80068fa <HAL_NVIC_EnableIRQ>
}
 8004daa:	46c0      	nop			; (mov r8, r8)
 8004dac:	46bd      	mov	sp, r7
 8004dae:	b006      	add	sp, #24
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	46c0      	nop			; (mov r8, r8)
 8004db4:	40000400 	.word	0x40000400
 8004db8:	40021000 	.word	0x40021000
 8004dbc:	40001000 	.word	0x40001000
 8004dc0:	40001400 	.word	0x40001400
 8004dc4:	40002000 	.word	0x40002000

08004dc8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004dc8:	b590      	push	{r4, r7, lr}
 8004dca:	b08b      	sub	sp, #44	; 0x2c
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dd0:	2414      	movs	r4, #20
 8004dd2:	193b      	adds	r3, r7, r4
 8004dd4:	0018      	movs	r0, r3
 8004dd6:	2314      	movs	r3, #20
 8004dd8:	001a      	movs	r2, r3
 8004dda:	2100      	movs	r1, #0
 8004ddc:	f006 ff24 	bl	800bc28 <memset>
  if(htim->Instance==TIM3)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a25      	ldr	r2, [pc, #148]	; (8004e7c <HAL_TIM_MspPostInit+0xb4>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d143      	bne.n	8004e72 <HAL_TIM_MspPostInit+0xaa>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004dea:	4b25      	ldr	r3, [pc, #148]	; (8004e80 <HAL_TIM_MspPostInit+0xb8>)
 8004dec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dee:	4b24      	ldr	r3, [pc, #144]	; (8004e80 <HAL_TIM_MspPostInit+0xb8>)
 8004df0:	2104      	movs	r1, #4
 8004df2:	430a      	orrs	r2, r1
 8004df4:	635a      	str	r2, [r3, #52]	; 0x34
 8004df6:	4b22      	ldr	r3, [pc, #136]	; (8004e80 <HAL_TIM_MspPostInit+0xb8>)
 8004df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dfa:	2204      	movs	r2, #4
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	613b      	str	r3, [r7, #16]
 8004e00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e02:	4b1f      	ldr	r3, [pc, #124]	; (8004e80 <HAL_TIM_MspPostInit+0xb8>)
 8004e04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e06:	4b1e      	ldr	r3, [pc, #120]	; (8004e80 <HAL_TIM_MspPostInit+0xb8>)
 8004e08:	2102      	movs	r1, #2
 8004e0a:	430a      	orrs	r2, r1
 8004e0c:	635a      	str	r2, [r3, #52]	; 0x34
 8004e0e:	4b1c      	ldr	r3, [pc, #112]	; (8004e80 <HAL_TIM_MspPostInit+0xb8>)
 8004e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e12:	2202      	movs	r2, #2
 8004e14:	4013      	ands	r3, r2
 8004e16:	60fb      	str	r3, [r7, #12]
 8004e18:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = TIM3_CH3_R_Pin|TIM3_CH4_SPOT_Pin;
 8004e1a:	193b      	adds	r3, r7, r4
 8004e1c:	22c0      	movs	r2, #192	; 0xc0
 8004e1e:	0092      	lsls	r2, r2, #2
 8004e20:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e22:	193b      	adds	r3, r7, r4
 8004e24:	2202      	movs	r2, #2
 8004e26:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e28:	193b      	adds	r3, r7, r4
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e2e:	193b      	adds	r3, r7, r4
 8004e30:	2200      	movs	r2, #0
 8004e32:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8004e34:	193b      	adds	r3, r7, r4
 8004e36:	2201      	movs	r2, #1
 8004e38:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e3a:	193b      	adds	r3, r7, r4
 8004e3c:	4a11      	ldr	r2, [pc, #68]	; (8004e84 <HAL_TIM_MspPostInit+0xbc>)
 8004e3e:	0019      	movs	r1, r3
 8004e40:	0010      	movs	r0, r2
 8004e42:	f002 f89d 	bl	8006f80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TIM3_CH1_B_Pin|TIM3_CH2_G_Pin;
 8004e46:	0021      	movs	r1, r4
 8004e48:	187b      	adds	r3, r7, r1
 8004e4a:	2230      	movs	r2, #48	; 0x30
 8004e4c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e4e:	187b      	adds	r3, r7, r1
 8004e50:	2202      	movs	r2, #2
 8004e52:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e54:	187b      	adds	r3, r7, r1
 8004e56:	2200      	movs	r2, #0
 8004e58:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e5a:	187b      	adds	r3, r7, r1
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8004e60:	187b      	adds	r3, r7, r1
 8004e62:	2201      	movs	r2, #1
 8004e64:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e66:	187b      	adds	r3, r7, r1
 8004e68:	4a07      	ldr	r2, [pc, #28]	; (8004e88 <HAL_TIM_MspPostInit+0xc0>)
 8004e6a:	0019      	movs	r1, r3
 8004e6c:	0010      	movs	r0, r2
 8004e6e:	f002 f887 	bl	8006f80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004e72:	46c0      	nop			; (mov r8, r8)
 8004e74:	46bd      	mov	sp, r7
 8004e76:	b00b      	add	sp, #44	; 0x2c
 8004e78:	bd90      	pop	{r4, r7, pc}
 8004e7a:	46c0      	nop			; (mov r8, r8)
 8004e7c:	40000400 	.word	0x40000400
 8004e80:	40021000 	.word	0x40021000
 8004e84:	50000800 	.word	0x50000800
 8004e88:	50000400 	.word	0x50000400

08004e8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004e8c:	b590      	push	{r4, r7, lr}
 8004e8e:	b097      	sub	sp, #92	; 0x5c
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e94:	2344      	movs	r3, #68	; 0x44
 8004e96:	18fb      	adds	r3, r7, r3
 8004e98:	0018      	movs	r0, r3
 8004e9a:	2314      	movs	r3, #20
 8004e9c:	001a      	movs	r2, r3
 8004e9e:	2100      	movs	r1, #0
 8004ea0:	f006 fec2 	bl	800bc28 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004ea4:	2428      	movs	r4, #40	; 0x28
 8004ea6:	193b      	adds	r3, r7, r4
 8004ea8:	0018      	movs	r0, r3
 8004eaa:	231c      	movs	r3, #28
 8004eac:	001a      	movs	r2, r3
 8004eae:	2100      	movs	r1, #0
 8004eb0:	f006 feba 	bl	800bc28 <memset>
  if(huart->Instance==USART1)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a8b      	ldr	r2, [pc, #556]	; (80050e8 <HAL_UART_MspInit+0x25c>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d146      	bne.n	8004f4c <HAL_UART_MspInit+0xc0>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004ebe:	193b      	adds	r3, r7, r4
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8004ec4:	193b      	adds	r3, r7, r4
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004eca:	193b      	adds	r3, r7, r4
 8004ecc:	0018      	movs	r0, r3
 8004ece:	f003 fbb5 	bl	800863c <HAL_RCCEx_PeriphCLKConfig>
 8004ed2:	1e03      	subs	r3, r0, #0
 8004ed4:	d001      	beq.n	8004eda <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004ed6:	f7ff fdd7 	bl	8004a88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004eda:	4b84      	ldr	r3, [pc, #528]	; (80050ec <HAL_UART_MspInit+0x260>)
 8004edc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ede:	4b83      	ldr	r3, [pc, #524]	; (80050ec <HAL_UART_MspInit+0x260>)
 8004ee0:	2180      	movs	r1, #128	; 0x80
 8004ee2:	01c9      	lsls	r1, r1, #7
 8004ee4:	430a      	orrs	r2, r1
 8004ee6:	641a      	str	r2, [r3, #64]	; 0x40
 8004ee8:	4b80      	ldr	r3, [pc, #512]	; (80050ec <HAL_UART_MspInit+0x260>)
 8004eea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004eec:	2380      	movs	r3, #128	; 0x80
 8004eee:	01db      	lsls	r3, r3, #7
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ef6:	4b7d      	ldr	r3, [pc, #500]	; (80050ec <HAL_UART_MspInit+0x260>)
 8004ef8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004efa:	4b7c      	ldr	r3, [pc, #496]	; (80050ec <HAL_UART_MspInit+0x260>)
 8004efc:	2104      	movs	r1, #4
 8004efe:	430a      	orrs	r2, r1
 8004f00:	635a      	str	r2, [r3, #52]	; 0x34
 8004f02:	4b7a      	ldr	r3, [pc, #488]	; (80050ec <HAL_UART_MspInit+0x260>)
 8004f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f06:	2204      	movs	r2, #4
 8004f08:	4013      	ands	r3, r2
 8004f0a:	623b      	str	r3, [r7, #32]
 8004f0c:	6a3b      	ldr	r3, [r7, #32]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004f0e:	2144      	movs	r1, #68	; 0x44
 8004f10:	187b      	adds	r3, r7, r1
 8004f12:	2230      	movs	r2, #48	; 0x30
 8004f14:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f16:	187b      	adds	r3, r7, r1
 8004f18:	2202      	movs	r2, #2
 8004f1a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f1c:	187b      	adds	r3, r7, r1
 8004f1e:	2200      	movs	r2, #0
 8004f20:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f22:	187b      	adds	r3, r7, r1
 8004f24:	2200      	movs	r2, #0
 8004f26:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8004f28:	187b      	adds	r3, r7, r1
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f2e:	187b      	adds	r3, r7, r1
 8004f30:	4a6f      	ldr	r2, [pc, #444]	; (80050f0 <HAL_UART_MspInit+0x264>)
 8004f32:	0019      	movs	r1, r3
 8004f34:	0010      	movs	r0, r2
 8004f36:	f002 f823 	bl	8006f80 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	2100      	movs	r1, #0
 8004f3e:	201b      	movs	r0, #27
 8004f40:	f001 fcc6 	bl	80068d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004f44:	201b      	movs	r0, #27
 8004f46:	f001 fcd8 	bl	80068fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }

}
 8004f4a:	e0c9      	b.n	80050e0 <HAL_UART_MspInit+0x254>
  else if(huart->Instance==USART2)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a68      	ldr	r2, [pc, #416]	; (80050f4 <HAL_UART_MspInit+0x268>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d147      	bne.n	8004fe6 <HAL_UART_MspInit+0x15a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004f56:	2128      	movs	r1, #40	; 0x28
 8004f58:	187b      	adds	r3, r7, r1
 8004f5a:	2202      	movs	r2, #2
 8004f5c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004f5e:	187b      	adds	r3, r7, r1
 8004f60:	2200      	movs	r2, #0
 8004f62:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004f64:	187b      	adds	r3, r7, r1
 8004f66:	0018      	movs	r0, r3
 8004f68:	f003 fb68 	bl	800863c <HAL_RCCEx_PeriphCLKConfig>
 8004f6c:	1e03      	subs	r3, r0, #0
 8004f6e:	d001      	beq.n	8004f74 <HAL_UART_MspInit+0xe8>
      Error_Handler();
 8004f70:	f7ff fd8a 	bl	8004a88 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004f74:	4b5d      	ldr	r3, [pc, #372]	; (80050ec <HAL_UART_MspInit+0x260>)
 8004f76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f78:	4b5c      	ldr	r3, [pc, #368]	; (80050ec <HAL_UART_MspInit+0x260>)
 8004f7a:	2180      	movs	r1, #128	; 0x80
 8004f7c:	0289      	lsls	r1, r1, #10
 8004f7e:	430a      	orrs	r2, r1
 8004f80:	63da      	str	r2, [r3, #60]	; 0x3c
 8004f82:	4b5a      	ldr	r3, [pc, #360]	; (80050ec <HAL_UART_MspInit+0x260>)
 8004f84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f86:	2380      	movs	r3, #128	; 0x80
 8004f88:	029b      	lsls	r3, r3, #10
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	61fb      	str	r3, [r7, #28]
 8004f8e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004f90:	4b56      	ldr	r3, [pc, #344]	; (80050ec <HAL_UART_MspInit+0x260>)
 8004f92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f94:	4b55      	ldr	r3, [pc, #340]	; (80050ec <HAL_UART_MspInit+0x260>)
 8004f96:	2108      	movs	r1, #8
 8004f98:	430a      	orrs	r2, r1
 8004f9a:	635a      	str	r2, [r3, #52]	; 0x34
 8004f9c:	4b53      	ldr	r3, [pc, #332]	; (80050ec <HAL_UART_MspInit+0x260>)
 8004f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fa0:	2208      	movs	r2, #8
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	61bb      	str	r3, [r7, #24]
 8004fa6:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8004fa8:	2144      	movs	r1, #68	; 0x44
 8004faa:	187b      	adds	r3, r7, r1
 8004fac:	2260      	movs	r2, #96	; 0x60
 8004fae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fb0:	187b      	adds	r3, r7, r1
 8004fb2:	2202      	movs	r2, #2
 8004fb4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fb6:	187b      	adds	r3, r7, r1
 8004fb8:	2200      	movs	r2, #0
 8004fba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fbc:	187b      	adds	r3, r7, r1
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART2;
 8004fc2:	187b      	adds	r3, r7, r1
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004fc8:	187b      	adds	r3, r7, r1
 8004fca:	4a4b      	ldr	r2, [pc, #300]	; (80050f8 <HAL_UART_MspInit+0x26c>)
 8004fcc:	0019      	movs	r1, r3
 8004fce:	0010      	movs	r0, r2
 8004fd0:	f001 ffd6 	bl	8006f80 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	2100      	movs	r1, #0
 8004fd8:	201c      	movs	r0, #28
 8004fda:	f001 fc79 	bl	80068d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004fde:	201c      	movs	r0, #28
 8004fe0:	f001 fc8b 	bl	80068fa <HAL_NVIC_EnableIRQ>
}
 8004fe4:	e07c      	b.n	80050e0 <HAL_UART_MspInit+0x254>
  else if(huart->Instance==USART3)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a44      	ldr	r2, [pc, #272]	; (80050fc <HAL_UART_MspInit+0x270>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d139      	bne.n	8005064 <HAL_UART_MspInit+0x1d8>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004ff0:	4b3e      	ldr	r3, [pc, #248]	; (80050ec <HAL_UART_MspInit+0x260>)
 8004ff2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ff4:	4b3d      	ldr	r3, [pc, #244]	; (80050ec <HAL_UART_MspInit+0x260>)
 8004ff6:	2180      	movs	r1, #128	; 0x80
 8004ff8:	02c9      	lsls	r1, r1, #11
 8004ffa:	430a      	orrs	r2, r1
 8004ffc:	63da      	str	r2, [r3, #60]	; 0x3c
 8004ffe:	4b3b      	ldr	r3, [pc, #236]	; (80050ec <HAL_UART_MspInit+0x260>)
 8005000:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005002:	2380      	movs	r3, #128	; 0x80
 8005004:	02db      	lsls	r3, r3, #11
 8005006:	4013      	ands	r3, r2
 8005008:	617b      	str	r3, [r7, #20]
 800500a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800500c:	4b37      	ldr	r3, [pc, #220]	; (80050ec <HAL_UART_MspInit+0x260>)
 800500e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005010:	4b36      	ldr	r3, [pc, #216]	; (80050ec <HAL_UART_MspInit+0x260>)
 8005012:	2108      	movs	r1, #8
 8005014:	430a      	orrs	r2, r1
 8005016:	635a      	str	r2, [r3, #52]	; 0x34
 8005018:	4b34      	ldr	r3, [pc, #208]	; (80050ec <HAL_UART_MspInit+0x260>)
 800501a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800501c:	2208      	movs	r2, #8
 800501e:	4013      	ands	r3, r2
 8005020:	613b      	str	r3, [r7, #16]
 8005022:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005024:	2144      	movs	r1, #68	; 0x44
 8005026:	187b      	adds	r3, r7, r1
 8005028:	22c0      	movs	r2, #192	; 0xc0
 800502a:	0092      	lsls	r2, r2, #2
 800502c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800502e:	187b      	adds	r3, r7, r1
 8005030:	2202      	movs	r2, #2
 8005032:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005034:	187b      	adds	r3, r7, r1
 8005036:	2200      	movs	r2, #0
 8005038:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800503a:	187b      	adds	r3, r7, r1
 800503c:	2200      	movs	r2, #0
 800503e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART3;
 8005040:	187b      	adds	r3, r7, r1
 8005042:	2200      	movs	r2, #0
 8005044:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005046:	187b      	adds	r3, r7, r1
 8005048:	4a2b      	ldr	r2, [pc, #172]	; (80050f8 <HAL_UART_MspInit+0x26c>)
 800504a:	0019      	movs	r1, r3
 800504c:	0010      	movs	r0, r2
 800504e:	f001 ff97 	bl	8006f80 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 8005052:	2200      	movs	r2, #0
 8005054:	2100      	movs	r1, #0
 8005056:	201d      	movs	r0, #29
 8005058:	f001 fc3a 	bl	80068d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 800505c:	201d      	movs	r0, #29
 800505e:	f001 fc4c 	bl	80068fa <HAL_NVIC_EnableIRQ>
}
 8005062:	e03d      	b.n	80050e0 <HAL_UART_MspInit+0x254>
  else if(huart->Instance==USART4)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a25      	ldr	r2, [pc, #148]	; (8005100 <HAL_UART_MspInit+0x274>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d138      	bne.n	80050e0 <HAL_UART_MspInit+0x254>
    __HAL_RCC_USART4_CLK_ENABLE();
 800506e:	4b1f      	ldr	r3, [pc, #124]	; (80050ec <HAL_UART_MspInit+0x260>)
 8005070:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005072:	4b1e      	ldr	r3, [pc, #120]	; (80050ec <HAL_UART_MspInit+0x260>)
 8005074:	2180      	movs	r1, #128	; 0x80
 8005076:	0309      	lsls	r1, r1, #12
 8005078:	430a      	orrs	r2, r1
 800507a:	63da      	str	r2, [r3, #60]	; 0x3c
 800507c:	4b1b      	ldr	r3, [pc, #108]	; (80050ec <HAL_UART_MspInit+0x260>)
 800507e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005080:	2380      	movs	r3, #128	; 0x80
 8005082:	031b      	lsls	r3, r3, #12
 8005084:	4013      	ands	r3, r2
 8005086:	60fb      	str	r3, [r7, #12]
 8005088:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800508a:	4b18      	ldr	r3, [pc, #96]	; (80050ec <HAL_UART_MspInit+0x260>)
 800508c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800508e:	4b17      	ldr	r3, [pc, #92]	; (80050ec <HAL_UART_MspInit+0x260>)
 8005090:	2101      	movs	r1, #1
 8005092:	430a      	orrs	r2, r1
 8005094:	635a      	str	r2, [r3, #52]	; 0x34
 8005096:	4b15      	ldr	r3, [pc, #84]	; (80050ec <HAL_UART_MspInit+0x260>)
 8005098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800509a:	2201      	movs	r2, #1
 800509c:	4013      	ands	r3, r2
 800509e:	60bb      	str	r3, [r7, #8]
 80050a0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80050a2:	2144      	movs	r1, #68	; 0x44
 80050a4:	187b      	adds	r3, r7, r1
 80050a6:	2203      	movs	r2, #3
 80050a8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050aa:	187b      	adds	r3, r7, r1
 80050ac:	2202      	movs	r2, #2
 80050ae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050b0:	187b      	adds	r3, r7, r1
 80050b2:	2200      	movs	r2, #0
 80050b4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050b6:	187b      	adds	r3, r7, r1
 80050b8:	2200      	movs	r2, #0
 80050ba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART4;
 80050bc:	187b      	adds	r3, r7, r1
 80050be:	2204      	movs	r2, #4
 80050c0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050c2:	187a      	adds	r2, r7, r1
 80050c4:	23a0      	movs	r3, #160	; 0xa0
 80050c6:	05db      	lsls	r3, r3, #23
 80050c8:	0011      	movs	r1, r2
 80050ca:	0018      	movs	r0, r3
 80050cc:	f001 ff58 	bl	8006f80 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 80050d0:	2200      	movs	r2, #0
 80050d2:	2100      	movs	r1, #0
 80050d4:	201d      	movs	r0, #29
 80050d6:	f001 fbfb 	bl	80068d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 80050da:	201d      	movs	r0, #29
 80050dc:	f001 fc0d 	bl	80068fa <HAL_NVIC_EnableIRQ>
}
 80050e0:	46c0      	nop			; (mov r8, r8)
 80050e2:	46bd      	mov	sp, r7
 80050e4:	b017      	add	sp, #92	; 0x5c
 80050e6:	bd90      	pop	{r4, r7, pc}
 80050e8:	40013800 	.word	0x40013800
 80050ec:	40021000 	.word	0x40021000
 80050f0:	50000800 	.word	0x50000800
 80050f4:	40004400 	.word	0x40004400
 80050f8:	50000c00 	.word	0x50000c00
 80050fc:	40004800 	.word	0x40004800
 8005100:	40004c00 	.word	0x40004c00

08005104 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005108:	46c0      	nop			; (mov r8, r8)
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}

0800510e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800510e:	b580      	push	{r7, lr}
 8005110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005112:	e7fe      	b.n	8005112 <HardFault_Handler+0x4>

08005114 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8005118:	46c0      	nop			; (mov r8, r8)
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}

0800511e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800511e:	b580      	push	{r7, lr}
 8005120:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005122:	46c0      	nop			; (mov r8, r8)
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800512c:	f000 f944 	bl	80053b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8005130:	f001 fc00 	bl	8006934 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8005134:	46c0      	nop			; (mov r8, r8)
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
	...

0800513c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005140:	4b03      	ldr	r3, [pc, #12]	; (8005150 <DMA1_Channel1_IRQHandler+0x14>)
 8005142:	0018      	movs	r0, r3
 8005144:	f001 fdda 	bl	8006cfc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */
  //~86us every time

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005148:	46c0      	nop			; (mov r8, r8)
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	46c0      	nop			; (mov r8, r8)
 8005150:	2000065c 	.word	0x2000065c

08005154 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8005158:	4b03      	ldr	r3, [pc, #12]	; (8005168 <ADC1_IRQHandler+0x14>)
 800515a:	0018      	movs	r0, r3
 800515c:	f000 fd1c 	bl	8005b98 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8005160:	46c0      	nop			; (mov r8, r8)
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	46c0      	nop			; (mov r8, r8)
 8005168:	20000558 	.word	0x20000558

0800516c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005170:	4b03      	ldr	r3, [pc, #12]	; (8005180 <TIM3_IRQHandler+0x14>)
 8005172:	0018      	movs	r0, r3
 8005174:	f003 fca4 	bl	8008ac0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005178:	46c0      	nop			; (mov r8, r8)
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	46c0      	nop			; (mov r8, r8)
 8005180:	2000050c 	.word	0x2000050c

08005184 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005188:	4b03      	ldr	r3, [pc, #12]	; (8005198 <TIM6_IRQHandler+0x14>)
 800518a:	0018      	movs	r0, r3
 800518c:	f003 fc98 	bl	8008ac0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8005190:	46c0      	nop			; (mov r8, r8)
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}
 8005196:	46c0      	nop			; (mov r8, r8)
 8005198:	200006b8 	.word	0x200006b8

0800519c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80051a0:	4b03      	ldr	r3, [pc, #12]	; (80051b0 <TIM7_IRQHandler+0x14>)
 80051a2:	0018      	movs	r0, r3
 80051a4:	f003 fc8c 	bl	8008ac0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80051a8:	46c0      	nop			; (mov r8, r8)
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	46c0      	nop			; (mov r8, r8)
 80051b0:	20000870 	.word	0x20000870

080051b4 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80051b8:	4b03      	ldr	r3, [pc, #12]	; (80051c8 <TIM14_IRQHandler+0x14>)
 80051ba:	0018      	movs	r0, r3
 80051bc:	f003 fc80 	bl	8008ac0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 80051c0:	46c0      	nop			; (mov r8, r8)
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	46c0      	nop			; (mov r8, r8)
 80051c8:	20000824 	.word	0x20000824

080051cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80051d0:	4b03      	ldr	r3, [pc, #12]	; (80051e0 <USART1_IRQHandler+0x14>)
 80051d2:	0018      	movs	r0, r3
 80051d4:	f004 fd66 	bl	8009ca4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80051d8:	46c0      	nop			; (mov r8, r8)
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	46c0      	nop			; (mov r8, r8)
 80051e0:	200005cc 	.word	0x200005cc

080051e4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80051e8:	4b03      	ldr	r3, [pc, #12]	; (80051f8 <USART2_IRQHandler+0x14>)
 80051ea:	0018      	movs	r0, r3
 80051ec:	f004 fd5a 	bl	8009ca4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80051f0:	46c0      	nop			; (mov r8, r8)
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	46c0      	nop			; (mov r8, r8)
 80051f8:	20000794 	.word	0x20000794

080051fc <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 interrupts.
  */
void USART3_4_IRQHandler(void)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005200:	4b05      	ldr	r3, [pc, #20]	; (8005218 <USART3_4_IRQHandler+0x1c>)
 8005202:	0018      	movs	r0, r3
 8005204:	f004 fd4e 	bl	8009ca4 <HAL_UART_IRQHandler>
  HAL_UART_IRQHandler(&huart4);
 8005208:	4b04      	ldr	r3, [pc, #16]	; (800521c <USART3_4_IRQHandler+0x20>)
 800520a:	0018      	movs	r0, r3
 800520c:	f004 fd4a 	bl	8009ca4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 8005210:	46c0      	nop			; (mov r8, r8)
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
 8005216:	46c0      	nop			; (mov r8, r8)
 8005218:	20000420 	.word	0x20000420
 800521c:	20000704 	.word	0x20000704

08005220 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005228:	4b11      	ldr	r3, [pc, #68]	; (8005270 <_sbrk+0x50>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d102      	bne.n	8005236 <_sbrk+0x16>
		heap_end = &end;
 8005230:	4b0f      	ldr	r3, [pc, #60]	; (8005270 <_sbrk+0x50>)
 8005232:	4a10      	ldr	r2, [pc, #64]	; (8005274 <_sbrk+0x54>)
 8005234:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8005236:	4b0e      	ldr	r3, [pc, #56]	; (8005270 <_sbrk+0x50>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800523c:	4b0c      	ldr	r3, [pc, #48]	; (8005270 <_sbrk+0x50>)
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	18d2      	adds	r2, r2, r3
 8005244:	466b      	mov	r3, sp
 8005246:	429a      	cmp	r2, r3
 8005248:	d907      	bls.n	800525a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800524a:	f006 fcc3 	bl	800bbd4 <__errno>
 800524e:	0003      	movs	r3, r0
 8005250:	220c      	movs	r2, #12
 8005252:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8005254:	2301      	movs	r3, #1
 8005256:	425b      	negs	r3, r3
 8005258:	e006      	b.n	8005268 <_sbrk+0x48>
	}

	heap_end += incr;
 800525a:	4b05      	ldr	r3, [pc, #20]	; (8005270 <_sbrk+0x50>)
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	18d2      	adds	r2, r2, r3
 8005262:	4b03      	ldr	r3, [pc, #12]	; (8005270 <_sbrk+0x50>)
 8005264:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8005266:	68fb      	ldr	r3, [r7, #12]
}
 8005268:	0018      	movs	r0, r3
 800526a:	46bd      	mov	sp, r7
 800526c:	b004      	add	sp, #16
 800526e:	bd80      	pop	{r7, pc}
 8005270:	200000e0 	.word	0x200000e0
 8005274:	200008d0 	.word	0x200008d0

08005278 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800527c:	4b03      	ldr	r3, [pc, #12]	; (800528c <SystemInit+0x14>)
 800527e:	2280      	movs	r2, #128	; 0x80
 8005280:	0512      	lsls	r2, r2, #20
 8005282:	609a      	str	r2, [r3, #8]
#endif
}
 8005284:	46c0      	nop			; (mov r8, r8)
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
 800528a:	46c0      	nop			; (mov r8, r8)
 800528c:	e000ed00 	.word	0xe000ed00

08005290 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005290:	480d      	ldr	r0, [pc, #52]	; (80052c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005292:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8005294:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8005296:	e003      	b.n	80052a0 <LoopCopyDataInit>

08005298 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8005298:	4b0c      	ldr	r3, [pc, #48]	; (80052cc <LoopForever+0x6>)
  ldr r3, [r3, r1]
 800529a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800529c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800529e:	3104      	adds	r1, #4

080052a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80052a0:	480b      	ldr	r0, [pc, #44]	; (80052d0 <LoopForever+0xa>)
  ldr r3, =_edata
 80052a2:	4b0c      	ldr	r3, [pc, #48]	; (80052d4 <LoopForever+0xe>)
  adds r2, r0, r1
 80052a4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80052a6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80052a8:	d3f6      	bcc.n	8005298 <CopyDataInit>
  ldr r2, =_sbss
 80052aa:	4a0b      	ldr	r2, [pc, #44]	; (80052d8 <LoopForever+0x12>)
  b LoopFillZerobss
 80052ac:	e002      	b.n	80052b4 <LoopFillZerobss>

080052ae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80052ae:	2300      	movs	r3, #0
  str  r3, [r2]
 80052b0:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80052b2:	3204      	adds	r2, #4

080052b4 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80052b4:	4b09      	ldr	r3, [pc, #36]	; (80052dc <LoopForever+0x16>)
  cmp r2, r3
 80052b6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80052b8:	d3f9      	bcc.n	80052ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80052ba:	f7ff ffdd 	bl	8005278 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80052be:	f006 fc8f 	bl	800bbe0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80052c2:	f7fe fe47 	bl	8003f54 <main>

080052c6 <LoopForever>:

LoopForever:
    b LoopForever
 80052c6:	e7fe      	b.n	80052c6 <LoopForever>
  ldr   r0, =_estack
 80052c8:	20009000 	.word	0x20009000
  ldr r3, =_sidata
 80052cc:	0800c9ac 	.word	0x0800c9ac
  ldr r0, =_sdata
 80052d0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80052d4:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 80052d8:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 80052dc:	200008d0 	.word	0x200008d0

080052e0 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80052e0:	e7fe      	b.n	80052e0 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>
	...

080052e4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b082      	sub	sp, #8
 80052e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80052ea:	1dfb      	adds	r3, r7, #7
 80052ec:	2200      	movs	r2, #0
 80052ee:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80052f0:	4b0b      	ldr	r3, [pc, #44]	; (8005320 <HAL_Init+0x3c>)
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	4b0a      	ldr	r3, [pc, #40]	; (8005320 <HAL_Init+0x3c>)
 80052f6:	2180      	movs	r1, #128	; 0x80
 80052f8:	0049      	lsls	r1, r1, #1
 80052fa:	430a      	orrs	r2, r1
 80052fc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80052fe:	2000      	movs	r0, #0
 8005300:	f000 f810 	bl	8005324 <HAL_InitTick>
 8005304:	1e03      	subs	r3, r0, #0
 8005306:	d003      	beq.n	8005310 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8005308:	1dfb      	adds	r3, r7, #7
 800530a:	2201      	movs	r2, #1
 800530c:	701a      	strb	r2, [r3, #0]
 800530e:	e001      	b.n	8005314 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8005310:	f7ff fbc0 	bl	8004a94 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005314:	1dfb      	adds	r3, r7, #7
 8005316:	781b      	ldrb	r3, [r3, #0]
}
 8005318:	0018      	movs	r0, r3
 800531a:	46bd      	mov	sp, r7
 800531c:	b002      	add	sp, #8
 800531e:	bd80      	pop	{r7, pc}
 8005320:	40022000 	.word	0x40022000

08005324 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005324:	b590      	push	{r4, r7, lr}
 8005326:	b085      	sub	sp, #20
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800532c:	230f      	movs	r3, #15
 800532e:	18fb      	adds	r3, r7, r3
 8005330:	2200      	movs	r2, #0
 8005332:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8005334:	4b1d      	ldr	r3, [pc, #116]	; (80053ac <HAL_InitTick+0x88>)
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d02b      	beq.n	8005394 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800533c:	4b1c      	ldr	r3, [pc, #112]	; (80053b0 <HAL_InitTick+0x8c>)
 800533e:	681c      	ldr	r4, [r3, #0]
 8005340:	4b1a      	ldr	r3, [pc, #104]	; (80053ac <HAL_InitTick+0x88>)
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	0019      	movs	r1, r3
 8005346:	23fa      	movs	r3, #250	; 0xfa
 8005348:	0098      	lsls	r0, r3, #2
 800534a:	f7fa feeb 	bl	8000124 <__udivsi3>
 800534e:	0003      	movs	r3, r0
 8005350:	0019      	movs	r1, r3
 8005352:	0020      	movs	r0, r4
 8005354:	f7fa fee6 	bl	8000124 <__udivsi3>
 8005358:	0003      	movs	r3, r0
 800535a:	0018      	movs	r0, r3
 800535c:	f001 fadd 	bl	800691a <HAL_SYSTICK_Config>
 8005360:	1e03      	subs	r3, r0, #0
 8005362:	d112      	bne.n	800538a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2b03      	cmp	r3, #3
 8005368:	d80a      	bhi.n	8005380 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800536a:	6879      	ldr	r1, [r7, #4]
 800536c:	2301      	movs	r3, #1
 800536e:	425b      	negs	r3, r3
 8005370:	2200      	movs	r2, #0
 8005372:	0018      	movs	r0, r3
 8005374:	f001 faac 	bl	80068d0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005378:	4b0e      	ldr	r3, [pc, #56]	; (80053b4 <HAL_InitTick+0x90>)
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	601a      	str	r2, [r3, #0]
 800537e:	e00d      	b.n	800539c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8005380:	230f      	movs	r3, #15
 8005382:	18fb      	adds	r3, r7, r3
 8005384:	2201      	movs	r2, #1
 8005386:	701a      	strb	r2, [r3, #0]
 8005388:	e008      	b.n	800539c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800538a:	230f      	movs	r3, #15
 800538c:	18fb      	adds	r3, r7, r3
 800538e:	2201      	movs	r2, #1
 8005390:	701a      	strb	r2, [r3, #0]
 8005392:	e003      	b.n	800539c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005394:	230f      	movs	r3, #15
 8005396:	18fb      	adds	r3, r7, r3
 8005398:	2201      	movs	r2, #1
 800539a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800539c:	230f      	movs	r3, #15
 800539e:	18fb      	adds	r3, r7, r3
 80053a0:	781b      	ldrb	r3, [r3, #0]
}
 80053a2:	0018      	movs	r0, r3
 80053a4:	46bd      	mov	sp, r7
 80053a6:	b005      	add	sp, #20
 80053a8:	bd90      	pop	{r4, r7, pc}
 80053aa:	46c0      	nop			; (mov r8, r8)
 80053ac:	2000000c 	.word	0x2000000c
 80053b0:	20000004 	.word	0x20000004
 80053b4:	20000008 	.word	0x20000008

080053b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80053bc:	4b05      	ldr	r3, [pc, #20]	; (80053d4 <HAL_IncTick+0x1c>)
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	001a      	movs	r2, r3
 80053c2:	4b05      	ldr	r3, [pc, #20]	; (80053d8 <HAL_IncTick+0x20>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	18d2      	adds	r2, r2, r3
 80053c8:	4b03      	ldr	r3, [pc, #12]	; (80053d8 <HAL_IncTick+0x20>)
 80053ca:	601a      	str	r2, [r3, #0]
}
 80053cc:	46c0      	nop			; (mov r8, r8)
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	46c0      	nop			; (mov r8, r8)
 80053d4:	2000000c 	.word	0x2000000c
 80053d8:	200008bc 	.word	0x200008bc

080053dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	af00      	add	r7, sp, #0
  return uwTick;
 80053e0:	4b02      	ldr	r3, [pc, #8]	; (80053ec <HAL_GetTick+0x10>)
 80053e2:	681b      	ldr	r3, [r3, #0]
}
 80053e4:	0018      	movs	r0, r3
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	46c0      	nop			; (mov r8, r8)
 80053ec:	200008bc 	.word	0x200008bc

080053f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b084      	sub	sp, #16
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80053f8:	f7ff fff0 	bl	80053dc <HAL_GetTick>
 80053fc:	0003      	movs	r3, r0
 80053fe:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	3301      	adds	r3, #1
 8005408:	d005      	beq.n	8005416 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800540a:	4b0a      	ldr	r3, [pc, #40]	; (8005434 <HAL_Delay+0x44>)
 800540c:	781b      	ldrb	r3, [r3, #0]
 800540e:	001a      	movs	r2, r3
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	189b      	adds	r3, r3, r2
 8005414:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005416:	46c0      	nop			; (mov r8, r8)
 8005418:	f7ff ffe0 	bl	80053dc <HAL_GetTick>
 800541c:	0002      	movs	r2, r0
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	68fa      	ldr	r2, [r7, #12]
 8005424:	429a      	cmp	r2, r3
 8005426:	d8f7      	bhi.n	8005418 <HAL_Delay+0x28>
  {
  }
}
 8005428:	46c0      	nop			; (mov r8, r8)
 800542a:	46c0      	nop			; (mov r8, r8)
 800542c:	46bd      	mov	sp, r7
 800542e:	b004      	add	sp, #16
 8005430:	bd80      	pop	{r7, pc}
 8005432:	46c0      	nop			; (mov r8, r8)
 8005434:	2000000c 	.word	0x2000000c

08005438 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b082      	sub	sp, #8
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8005440:	4b06      	ldr	r3, [pc, #24]	; (800545c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a06      	ldr	r2, [pc, #24]	; (8005460 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8005446:	4013      	ands	r3, r2
 8005448:	0019      	movs	r1, r3
 800544a:	4b04      	ldr	r3, [pc, #16]	; (800545c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	430a      	orrs	r2, r1
 8005450:	601a      	str	r2, [r3, #0]
}
 8005452:	46c0      	nop			; (mov r8, r8)
 8005454:	46bd      	mov	sp, r7
 8005456:	b002      	add	sp, #8
 8005458:	bd80      	pop	{r7, pc}
 800545a:	46c0      	nop			; (mov r8, r8)
 800545c:	40010000 	.word	0x40010000
 8005460:	fffff9ff 	.word	0xfffff9ff

08005464 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b082      	sub	sp, #8
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a05      	ldr	r2, [pc, #20]	; (8005488 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8005474:	401a      	ands	r2, r3
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	431a      	orrs	r2, r3
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	601a      	str	r2, [r3, #0]
}
 800547e:	46c0      	nop			; (mov r8, r8)
 8005480:	46bd      	mov	sp, r7
 8005482:	b002      	add	sp, #8
 8005484:	bd80      	pop	{r7, pc}
 8005486:	46c0      	nop			; (mov r8, r8)
 8005488:	fe3fffff 	.word	0xfe3fffff

0800548c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b082      	sub	sp, #8
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	23e0      	movs	r3, #224	; 0xe0
 800549a:	045b      	lsls	r3, r3, #17
 800549c:	4013      	ands	r3, r2
}
 800549e:	0018      	movs	r0, r3
 80054a0:	46bd      	mov	sp, r7
 80054a2:	b002      	add	sp, #8
 80054a4:	bd80      	pop	{r7, pc}

080054a6 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80054a6:	b580      	push	{r7, lr}
 80054a8:	b084      	sub	sp, #16
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	60f8      	str	r0, [r7, #12]
 80054ae:	60b9      	str	r1, [r7, #8]
 80054b0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	695b      	ldr	r3, [r3, #20]
 80054b6:	68ba      	ldr	r2, [r7, #8]
 80054b8:	2104      	movs	r1, #4
 80054ba:	400a      	ands	r2, r1
 80054bc:	2107      	movs	r1, #7
 80054be:	4091      	lsls	r1, r2
 80054c0:	000a      	movs	r2, r1
 80054c2:	43d2      	mvns	r2, r2
 80054c4:	401a      	ands	r2, r3
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	2104      	movs	r1, #4
 80054ca:	400b      	ands	r3, r1
 80054cc:	6879      	ldr	r1, [r7, #4]
 80054ce:	4099      	lsls	r1, r3
 80054d0:	000b      	movs	r3, r1
 80054d2:	431a      	orrs	r2, r3
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80054d8:	46c0      	nop			; (mov r8, r8)
 80054da:	46bd      	mov	sp, r7
 80054dc:	b004      	add	sp, #16
 80054de:	bd80      	pop	{r7, pc}

080054e0 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b082      	sub	sp, #8
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	695b      	ldr	r3, [r3, #20]
 80054ee:	683a      	ldr	r2, [r7, #0]
 80054f0:	2104      	movs	r1, #4
 80054f2:	400a      	ands	r2, r1
 80054f4:	2107      	movs	r1, #7
 80054f6:	4091      	lsls	r1, r2
 80054f8:	000a      	movs	r2, r1
 80054fa:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	2104      	movs	r1, #4
 8005500:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8005502:	40da      	lsrs	r2, r3
 8005504:	0013      	movs	r3, r2
}
 8005506:	0018      	movs	r0, r3
 8005508:	46bd      	mov	sp, r7
 800550a:	b002      	add	sp, #8
 800550c:	bd80      	pop	{r7, pc}

0800550e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800550e:	b580      	push	{r7, lr}
 8005510:	b082      	sub	sp, #8
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	68da      	ldr	r2, [r3, #12]
 800551a:	23c0      	movs	r3, #192	; 0xc0
 800551c:	011b      	lsls	r3, r3, #4
 800551e:	4013      	ands	r3, r2
 8005520:	d101      	bne.n	8005526 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005522:	2301      	movs	r3, #1
 8005524:	e000      	b.n	8005528 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005526:	2300      	movs	r3, #0
}
 8005528:	0018      	movs	r0, r3
 800552a:	46bd      	mov	sp, r7
 800552c:	b002      	add	sp, #8
 800552e:	bd80      	pop	{r7, pc}

08005530 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005540:	68ba      	ldr	r2, [r7, #8]
 8005542:	211f      	movs	r1, #31
 8005544:	400a      	ands	r2, r1
 8005546:	210f      	movs	r1, #15
 8005548:	4091      	lsls	r1, r2
 800554a:	000a      	movs	r2, r1
 800554c:	43d2      	mvns	r2, r2
 800554e:	401a      	ands	r2, r3
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	0e9b      	lsrs	r3, r3, #26
 8005554:	210f      	movs	r1, #15
 8005556:	4019      	ands	r1, r3
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	201f      	movs	r0, #31
 800555c:	4003      	ands	r3, r0
 800555e:	4099      	lsls	r1, r3
 8005560:	000b      	movs	r3, r1
 8005562:	431a      	orrs	r2, r3
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005568:	46c0      	nop			; (mov r8, r8)
 800556a:	46bd      	mov	sp, r7
 800556c:	b004      	add	sp, #16
 800556e:	bd80      	pop	{r7, pc}

08005570 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b082      	sub	sp, #8
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	035b      	lsls	r3, r3, #13
 8005582:	0b5b      	lsrs	r3, r3, #13
 8005584:	431a      	orrs	r2, r3
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	629a      	str	r2, [r3, #40]	; 0x28
}
 800558a:	46c0      	nop			; (mov r8, r8)
 800558c:	46bd      	mov	sp, r7
 800558e:	b002      	add	sp, #8
 8005590:	bd80      	pop	{r7, pc}

08005592 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8005592:	b580      	push	{r7, lr}
 8005594:	b082      	sub	sp, #8
 8005596:	af00      	add	r7, sp, #0
 8005598:	6078      	str	r0, [r7, #4]
 800559a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a0:	683a      	ldr	r2, [r7, #0]
 80055a2:	0352      	lsls	r2, r2, #13
 80055a4:	0b52      	lsrs	r2, r2, #13
 80055a6:	43d2      	mvns	r2, r2
 80055a8:	401a      	ands	r2, r3
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	629a      	str	r2, [r3, #40]	; 0x28
}
 80055ae:	46c0      	nop			; (mov r8, r8)
 80055b0:	46bd      	mov	sp, r7
 80055b2:	b002      	add	sp, #8
 80055b4:	bd80      	pop	{r7, pc}

080055b6 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 80055b6:	b580      	push	{r7, lr}
 80055b8:	b082      	sub	sp, #8
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	2203      	movs	r2, #3
 80055c4:	4013      	ands	r3, r2
}
 80055c6:	0018      	movs	r0, r3
 80055c8:	46bd      	mov	sp, r7
 80055ca:	b002      	add	sp, #8
 80055cc:	bd80      	pop	{r7, pc}
	...

080055d0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	695b      	ldr	r3, [r3, #20]
 80055e0:	68ba      	ldr	r2, [r7, #8]
 80055e2:	0212      	lsls	r2, r2, #8
 80055e4:	43d2      	mvns	r2, r2
 80055e6:	401a      	ands	r2, r3
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	021b      	lsls	r3, r3, #8
 80055ec:	6879      	ldr	r1, [r7, #4]
 80055ee:	400b      	ands	r3, r1
 80055f0:	4904      	ldr	r1, [pc, #16]	; (8005604 <LL_ADC_SetChannelSamplingTime+0x34>)
 80055f2:	400b      	ands	r3, r1
 80055f4:	431a      	orrs	r2, r3
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80055fa:	46c0      	nop			; (mov r8, r8)
 80055fc:	46bd      	mov	sp, r7
 80055fe:	b004      	add	sp, #16
 8005600:	bd80      	pop	{r7, pc}
 8005602:	46c0      	nop			; (mov r8, r8)
 8005604:	07ffff00 	.word	0x07ffff00

08005608 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b082      	sub	sp, #8
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	4a05      	ldr	r2, [pc, #20]	; (800562c <LL_ADC_EnableInternalRegulator+0x24>)
 8005616:	4013      	ands	r3, r2
 8005618:	2280      	movs	r2, #128	; 0x80
 800561a:	0552      	lsls	r2, r2, #21
 800561c:	431a      	orrs	r2, r3
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005622:	46c0      	nop			; (mov r8, r8)
 8005624:	46bd      	mov	sp, r7
 8005626:	b002      	add	sp, #8
 8005628:	bd80      	pop	{r7, pc}
 800562a:	46c0      	nop			; (mov r8, r8)
 800562c:	6fffffe8 	.word	0x6fffffe8

08005630 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b082      	sub	sp, #8
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	689a      	ldr	r2, [r3, #8]
 800563c:	2380      	movs	r3, #128	; 0x80
 800563e:	055b      	lsls	r3, r3, #21
 8005640:	401a      	ands	r2, r3
 8005642:	2380      	movs	r3, #128	; 0x80
 8005644:	055b      	lsls	r3, r3, #21
 8005646:	429a      	cmp	r2, r3
 8005648:	d101      	bne.n	800564e <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800564a:	2301      	movs	r3, #1
 800564c:	e000      	b.n	8005650 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800564e:	2300      	movs	r3, #0
}
 8005650:	0018      	movs	r0, r3
 8005652:	46bd      	mov	sp, r7
 8005654:	b002      	add	sp, #8
 8005656:	bd80      	pop	{r7, pc}

08005658 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b082      	sub	sp, #8
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	4a04      	ldr	r2, [pc, #16]	; (8005678 <LL_ADC_Enable+0x20>)
 8005666:	4013      	ands	r3, r2
 8005668:	2201      	movs	r2, #1
 800566a:	431a      	orrs	r2, r3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005670:	46c0      	nop			; (mov r8, r8)
 8005672:	46bd      	mov	sp, r7
 8005674:	b002      	add	sp, #8
 8005676:	bd80      	pop	{r7, pc}
 8005678:	7fffffe8 	.word	0x7fffffe8

0800567c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b082      	sub	sp, #8
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	4a04      	ldr	r2, [pc, #16]	; (800569c <LL_ADC_Disable+0x20>)
 800568a:	4013      	ands	r3, r2
 800568c:	2202      	movs	r2, #2
 800568e:	431a      	orrs	r2, r3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8005694:	46c0      	nop			; (mov r8, r8)
 8005696:	46bd      	mov	sp, r7
 8005698:	b002      	add	sp, #8
 800569a:	bd80      	pop	{r7, pc}
 800569c:	7fffffe8 	.word	0x7fffffe8

080056a0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b082      	sub	sp, #8
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	2201      	movs	r2, #1
 80056ae:	4013      	ands	r3, r2
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d101      	bne.n	80056b8 <LL_ADC_IsEnabled+0x18>
 80056b4:	2301      	movs	r3, #1
 80056b6:	e000      	b.n	80056ba <LL_ADC_IsEnabled+0x1a>
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	0018      	movs	r0, r3
 80056bc:	46bd      	mov	sp, r7
 80056be:	b002      	add	sp, #8
 80056c0:	bd80      	pop	{r7, pc}

080056c2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80056c2:	b580      	push	{r7, lr}
 80056c4:	b082      	sub	sp, #8
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	2202      	movs	r2, #2
 80056d0:	4013      	ands	r3, r2
 80056d2:	2b02      	cmp	r3, #2
 80056d4:	d101      	bne.n	80056da <LL_ADC_IsDisableOngoing+0x18>
 80056d6:	2301      	movs	r3, #1
 80056d8:	e000      	b.n	80056dc <LL_ADC_IsDisableOngoing+0x1a>
 80056da:	2300      	movs	r3, #0
}
 80056dc:	0018      	movs	r0, r3
 80056de:	46bd      	mov	sp, r7
 80056e0:	b002      	add	sp, #8
 80056e2:	bd80      	pop	{r7, pc}

080056e4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b082      	sub	sp, #8
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	4a04      	ldr	r2, [pc, #16]	; (8005704 <LL_ADC_REG_StartConversion+0x20>)
 80056f2:	4013      	ands	r3, r2
 80056f4:	2204      	movs	r2, #4
 80056f6:	431a      	orrs	r2, r3
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80056fc:	46c0      	nop			; (mov r8, r8)
 80056fe:	46bd      	mov	sp, r7
 8005700:	b002      	add	sp, #8
 8005702:	bd80      	pop	{r7, pc}
 8005704:	7fffffe8 	.word	0x7fffffe8

08005708 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b082      	sub	sp, #8
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	2204      	movs	r2, #4
 8005716:	4013      	ands	r3, r2
 8005718:	2b04      	cmp	r3, #4
 800571a:	d101      	bne.n	8005720 <LL_ADC_REG_IsConversionOngoing+0x18>
 800571c:	2301      	movs	r3, #1
 800571e:	e000      	b.n	8005722 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005720:	2300      	movs	r3, #0
}
 8005722:	0018      	movs	r0, r3
 8005724:	46bd      	mov	sp, r7
 8005726:	b002      	add	sp, #8
 8005728:	bd80      	pop	{r7, pc}
	...

0800572c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b088      	sub	sp, #32
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005734:	231f      	movs	r3, #31
 8005736:	18fb      	adds	r3, r7, r3
 8005738:	2200      	movs	r2, #0
 800573a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 800573c:	2300      	movs	r3, #0
 800573e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8005740:	2300      	movs	r3, #0
 8005742:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005744:	2300      	movs	r3, #0
 8005746:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d101      	bne.n	8005752 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e17f      	b.n	8005a52 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005756:	2b00      	cmp	r3, #0
 8005758:	d10a      	bne.n	8005770 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	0018      	movs	r0, r3
 800575e:	f7ff f9c1 	bl	8004ae4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2254      	movs	r2, #84	; 0x54
 800576c:	2100      	movs	r1, #0
 800576e:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	0018      	movs	r0, r3
 8005776:	f7ff ff5b 	bl	8005630 <LL_ADC_IsInternalRegulatorEnabled>
 800577a:	1e03      	subs	r3, r0, #0
 800577c:	d115      	bne.n	80057aa <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	0018      	movs	r0, r3
 8005784:	f7ff ff40 	bl	8005608 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005788:	4bb4      	ldr	r3, [pc, #720]	; (8005a5c <HAL_ADC_Init+0x330>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	49b4      	ldr	r1, [pc, #720]	; (8005a60 <HAL_ADC_Init+0x334>)
 800578e:	0018      	movs	r0, r3
 8005790:	f7fa fcc8 	bl	8000124 <__udivsi3>
 8005794:	0003      	movs	r3, r0
 8005796:	3301      	adds	r3, #1
 8005798:	005b      	lsls	r3, r3, #1
 800579a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800579c:	e002      	b.n	80057a4 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	3b01      	subs	r3, #1
 80057a2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d1f9      	bne.n	800579e <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	0018      	movs	r0, r3
 80057b0:	f7ff ff3e 	bl	8005630 <LL_ADC_IsInternalRegulatorEnabled>
 80057b4:	1e03      	subs	r3, r0, #0
 80057b6:	d10f      	bne.n	80057d8 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057bc:	2210      	movs	r2, #16
 80057be:	431a      	orrs	r2, r3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057c8:	2201      	movs	r2, #1
 80057ca:	431a      	orrs	r2, r3
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80057d0:	231f      	movs	r3, #31
 80057d2:	18fb      	adds	r3, r7, r3
 80057d4:	2201      	movs	r2, #1
 80057d6:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	0018      	movs	r0, r3
 80057de:	f7ff ff93 	bl	8005708 <LL_ADC_REG_IsConversionOngoing>
 80057e2:	0003      	movs	r3, r0
 80057e4:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057ea:	2210      	movs	r2, #16
 80057ec:	4013      	ands	r3, r2
 80057ee:	d000      	beq.n	80057f2 <HAL_ADC_Init+0xc6>
 80057f0:	e122      	b.n	8005a38 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d000      	beq.n	80057fa <HAL_ADC_Init+0xce>
 80057f8:	e11e      	b.n	8005a38 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057fe:	4a99      	ldr	r2, [pc, #612]	; (8005a64 <HAL_ADC_Init+0x338>)
 8005800:	4013      	ands	r3, r2
 8005802:	2202      	movs	r2, #2
 8005804:	431a      	orrs	r2, r3
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	0018      	movs	r0, r3
 8005810:	f7ff ff46 	bl	80056a0 <LL_ADC_IsEnabled>
 8005814:	1e03      	subs	r3, r0, #0
 8005816:	d000      	beq.n	800581a <HAL_ADC_Init+0xee>
 8005818:	e0ad      	b.n	8005976 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	7e1b      	ldrb	r3, [r3, #24]
 8005822:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8005824:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	7e5b      	ldrb	r3, [r3, #25]
 800582a:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800582c:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	7e9b      	ldrb	r3, [r3, #26]
 8005832:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8005834:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800583a:	2b00      	cmp	r3, #0
 800583c:	d002      	beq.n	8005844 <HAL_ADC_Init+0x118>
 800583e:	2380      	movs	r3, #128	; 0x80
 8005840:	015b      	lsls	r3, r3, #5
 8005842:	e000      	b.n	8005846 <HAL_ADC_Init+0x11a>
 8005844:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8005846:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800584c:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	2b00      	cmp	r3, #0
 8005854:	da04      	bge.n	8005860 <HAL_ADC_Init+0x134>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	005b      	lsls	r3, r3, #1
 800585c:	085b      	lsrs	r3, r3, #1
 800585e:	e001      	b.n	8005864 <HAL_ADC_Init+0x138>
 8005860:	2380      	movs	r3, #128	; 0x80
 8005862:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8005864:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	212c      	movs	r1, #44	; 0x2c
 800586a:	5c5b      	ldrb	r3, [r3, r1]
 800586c:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800586e:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8005870:	69ba      	ldr	r2, [r7, #24]
 8005872:	4313      	orrs	r3, r2
 8005874:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2220      	movs	r2, #32
 800587a:	5c9b      	ldrb	r3, [r3, r2]
 800587c:	2b01      	cmp	r3, #1
 800587e:	d115      	bne.n	80058ac <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	7e9b      	ldrb	r3, [r3, #26]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d105      	bne.n	8005894 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8005888:	69bb      	ldr	r3, [r7, #24]
 800588a:	2280      	movs	r2, #128	; 0x80
 800588c:	0252      	lsls	r2, r2, #9
 800588e:	4313      	orrs	r3, r2
 8005890:	61bb      	str	r3, [r7, #24]
 8005892:	e00b      	b.n	80058ac <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005898:	2220      	movs	r2, #32
 800589a:	431a      	orrs	r2, r3
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058a4:	2201      	movs	r2, #1
 80058a6:	431a      	orrs	r2, r3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d00a      	beq.n	80058ca <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058b8:	23e0      	movs	r3, #224	; 0xe0
 80058ba:	005b      	lsls	r3, r3, #1
 80058bc:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80058c2:	4313      	orrs	r3, r2
 80058c4:	69ba      	ldr	r2, [r7, #24]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	4a65      	ldr	r2, [pc, #404]	; (8005a68 <HAL_ADC_Init+0x33c>)
 80058d2:	4013      	ands	r3, r2
 80058d4:	0019      	movs	r1, r3
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	69ba      	ldr	r2, [r7, #24]
 80058dc:	430a      	orrs	r2, r1
 80058de:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	0f9b      	lsrs	r3, r3, #30
 80058e6:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80058ec:	4313      	orrs	r3, r2
 80058ee:	697a      	ldr	r2, [r7, #20]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	223c      	movs	r2, #60	; 0x3c
 80058f8:	5c9b      	ldrb	r3, [r3, r2]
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d111      	bne.n	8005922 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	0f9b      	lsrs	r3, r3, #30
 8005904:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800590a:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8005910:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8005916:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	4313      	orrs	r3, r2
 800591c:	2201      	movs	r2, #1
 800591e:	4313      	orrs	r3, r2
 8005920:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	691b      	ldr	r3, [r3, #16]
 8005928:	4a50      	ldr	r2, [pc, #320]	; (8005a6c <HAL_ADC_Init+0x340>)
 800592a:	4013      	ands	r3, r2
 800592c:	0019      	movs	r1, r3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	697a      	ldr	r2, [r7, #20]
 8005934:	430a      	orrs	r2, r1
 8005936:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	685a      	ldr	r2, [r3, #4]
 800593c:	23c0      	movs	r3, #192	; 0xc0
 800593e:	061b      	lsls	r3, r3, #24
 8005940:	429a      	cmp	r2, r3
 8005942:	d018      	beq.n	8005976 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8005948:	2380      	movs	r3, #128	; 0x80
 800594a:	05db      	lsls	r3, r3, #23
 800594c:	429a      	cmp	r2, r3
 800594e:	d012      	beq.n	8005976 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8005954:	2380      	movs	r3, #128	; 0x80
 8005956:	061b      	lsls	r3, r3, #24
 8005958:	429a      	cmp	r2, r3
 800595a:	d00c      	beq.n	8005976 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 800595c:	4b44      	ldr	r3, [pc, #272]	; (8005a70 <HAL_ADC_Init+0x344>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a44      	ldr	r2, [pc, #272]	; (8005a74 <HAL_ADC_Init+0x348>)
 8005962:	4013      	ands	r3, r2
 8005964:	0019      	movs	r1, r3
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	685a      	ldr	r2, [r3, #4]
 800596a:	23f0      	movs	r3, #240	; 0xf0
 800596c:	039b      	lsls	r3, r3, #14
 800596e:	401a      	ands	r2, r3
 8005970:	4b3f      	ldr	r3, [pc, #252]	; (8005a70 <HAL_ADC_Init+0x344>)
 8005972:	430a      	orrs	r2, r1
 8005974:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6818      	ldr	r0, [r3, #0]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800597e:	001a      	movs	r2, r3
 8005980:	2100      	movs	r1, #0
 8005982:	f7ff fd90 	bl	80054a6 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6818      	ldr	r0, [r3, #0]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800598e:	493a      	ldr	r1, [pc, #232]	; (8005a78 <HAL_ADC_Init+0x34c>)
 8005990:	001a      	movs	r2, r3
 8005992:	f7ff fd88 	bl	80054a6 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d109      	bne.n	80059b2 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	2110      	movs	r1, #16
 80059aa:	4249      	negs	r1, r1
 80059ac:	430a      	orrs	r2, r1
 80059ae:	629a      	str	r2, [r3, #40]	; 0x28
 80059b0:	e018      	b.n	80059e4 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	691a      	ldr	r2, [r3, #16]
 80059b6:	2380      	movs	r3, #128	; 0x80
 80059b8:	039b      	lsls	r3, r3, #14
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d112      	bne.n	80059e4 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	69db      	ldr	r3, [r3, #28]
 80059c8:	3b01      	subs	r3, #1
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	221c      	movs	r2, #28
 80059ce:	4013      	ands	r3, r2
 80059d0:	2210      	movs	r2, #16
 80059d2:	4252      	negs	r2, r2
 80059d4:	409a      	lsls	r2, r3
 80059d6:	0011      	movs	r1, r2
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	430a      	orrs	r2, r1
 80059e2:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	2100      	movs	r1, #0
 80059ea:	0018      	movs	r0, r3
 80059ec:	f7ff fd78 	bl	80054e0 <LL_ADC_GetSamplingTimeCommonChannels>
 80059f0:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d10b      	bne.n	8005a12 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a04:	2203      	movs	r2, #3
 8005a06:	4393      	bics	r3, r2
 8005a08:	2201      	movs	r2, #1
 8005a0a:	431a      	orrs	r2, r3
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005a10:	e01c      	b.n	8005a4c <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a16:	2212      	movs	r2, #18
 8005a18:	4393      	bics	r3, r2
 8005a1a:	2210      	movs	r2, #16
 8005a1c:	431a      	orrs	r2, r3
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a26:	2201      	movs	r2, #1
 8005a28:	431a      	orrs	r2, r3
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8005a2e:	231f      	movs	r3, #31
 8005a30:	18fb      	adds	r3, r7, r3
 8005a32:	2201      	movs	r2, #1
 8005a34:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005a36:	e009      	b.n	8005a4c <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a3c:	2210      	movs	r2, #16
 8005a3e:	431a      	orrs	r2, r3
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005a44:	231f      	movs	r3, #31
 8005a46:	18fb      	adds	r3, r7, r3
 8005a48:	2201      	movs	r2, #1
 8005a4a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8005a4c:	231f      	movs	r3, #31
 8005a4e:	18fb      	adds	r3, r7, r3
 8005a50:	781b      	ldrb	r3, [r3, #0]
}
 8005a52:	0018      	movs	r0, r3
 8005a54:	46bd      	mov	sp, r7
 8005a56:	b008      	add	sp, #32
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	46c0      	nop			; (mov r8, r8)
 8005a5c:	20000004 	.word	0x20000004
 8005a60:	00030d40 	.word	0x00030d40
 8005a64:	fffffefd 	.word	0xfffffefd
 8005a68:	fffe0201 	.word	0xfffe0201
 8005a6c:	1ffffc02 	.word	0x1ffffc02
 8005a70:	40012708 	.word	0x40012708
 8005a74:	ffc3ffff 	.word	0xffc3ffff
 8005a78:	07ffff04 	.word	0x07ffff04

08005a7c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005a7c:	b5b0      	push	{r4, r5, r7, lr}
 8005a7e:	b086      	sub	sp, #24
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	60f8      	str	r0, [r7, #12]
 8005a84:	60b9      	str	r1, [r7, #8]
 8005a86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	0018      	movs	r0, r3
 8005a8e:	f7ff fe3b 	bl	8005708 <LL_ADC_REG_IsConversionOngoing>
 8005a92:	1e03      	subs	r3, r0, #0
 8005a94:	d16c      	bne.n	8005b70 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2254      	movs	r2, #84	; 0x54
 8005a9a:	5c9b      	ldrb	r3, [r3, r2]
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d101      	bne.n	8005aa4 <HAL_ADC_Start_DMA+0x28>
 8005aa0:	2302      	movs	r3, #2
 8005aa2:	e06c      	b.n	8005b7e <HAL_ADC_Start_DMA+0x102>
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2254      	movs	r2, #84	; 0x54
 8005aa8:	2101      	movs	r1, #1
 8005aaa:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	d113      	bne.n	8005ae0 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	0018      	movs	r0, r3
 8005abe:	f7ff fdef 	bl	80056a0 <LL_ADC_IsEnabled>
 8005ac2:	1e03      	subs	r3, r0, #0
 8005ac4:	d004      	beq.n	8005ad0 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	0018      	movs	r0, r3
 8005acc:	f7ff fdd6 	bl	800567c <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	68da      	ldr	r2, [r3, #12]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	2101      	movs	r1, #1
 8005adc:	430a      	orrs	r2, r1
 8005ade:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8005ae0:	2517      	movs	r5, #23
 8005ae2:	197c      	adds	r4, r7, r5
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	0018      	movs	r0, r3
 8005ae8:	f000 fb5e 	bl	80061a8 <ADC_Enable>
 8005aec:	0003      	movs	r3, r0
 8005aee:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8005af0:	002c      	movs	r4, r5
 8005af2:	193b      	adds	r3, r7, r4
 8005af4:	781b      	ldrb	r3, [r3, #0]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d13e      	bne.n	8005b78 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005afe:	4a22      	ldr	r2, [pc, #136]	; (8005b88 <HAL_ADC_Start_DMA+0x10c>)
 8005b00:	4013      	ands	r3, r2
 8005b02:	2280      	movs	r2, #128	; 0x80
 8005b04:	0052      	lsls	r2, r2, #1
 8005b06:	431a      	orrs	r2, r3
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b16:	4a1d      	ldr	r2, [pc, #116]	; (8005b8c <HAL_ADC_Start_DMA+0x110>)
 8005b18:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b1e:	4a1c      	ldr	r2, [pc, #112]	; (8005b90 <HAL_ADC_Start_DMA+0x114>)
 8005b20:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b26:	4a1b      	ldr	r2, [pc, #108]	; (8005b94 <HAL_ADC_Start_DMA+0x118>)
 8005b28:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	221c      	movs	r2, #28
 8005b30:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2254      	movs	r2, #84	; 0x54
 8005b36:	2100      	movs	r1, #0
 8005b38:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	685a      	ldr	r2, [r3, #4]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	2110      	movs	r1, #16
 8005b46:	430a      	orrs	r2, r1
 8005b48:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	3340      	adds	r3, #64	; 0x40
 8005b54:	0019      	movs	r1, r3
 8005b56:	68ba      	ldr	r2, [r7, #8]
 8005b58:	193c      	adds	r4, r7, r4
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f000 ff7c 	bl	8006a58 <HAL_DMA_Start_IT>
 8005b60:	0003      	movs	r3, r0
 8005b62:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	0018      	movs	r0, r3
 8005b6a:	f7ff fdbb 	bl	80056e4 <LL_ADC_REG_StartConversion>
 8005b6e:	e003      	b.n	8005b78 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005b70:	2317      	movs	r3, #23
 8005b72:	18fb      	adds	r3, r7, r3
 8005b74:	2202      	movs	r2, #2
 8005b76:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8005b78:	2317      	movs	r3, #23
 8005b7a:	18fb      	adds	r3, r7, r3
 8005b7c:	781b      	ldrb	r3, [r3, #0]
}
 8005b7e:	0018      	movs	r0, r3
 8005b80:	46bd      	mov	sp, r7
 8005b82:	b006      	add	sp, #24
 8005b84:	bdb0      	pop	{r4, r5, r7, pc}
 8005b86:	46c0      	nop			; (mov r8, r8)
 8005b88:	fffff0fe 	.word	0xfffff0fe
 8005b8c:	08006371 	.word	0x08006371
 8005b90:	08006439 	.word	0x08006439
 8005b94:	08006457 	.word	0x08006457

08005b98 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b086      	sub	sp, #24
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	2202      	movs	r2, #2
 8005bb8:	4013      	ands	r3, r2
 8005bba:	d017      	beq.n	8005bec <HAL_ADC_IRQHandler+0x54>
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2202      	movs	r2, #2
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	d013      	beq.n	8005bec <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bc8:	2210      	movs	r2, #16
 8005bca:	4013      	ands	r3, r2
 8005bcc:	d106      	bne.n	8005bdc <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bd2:	2280      	movs	r2, #128	; 0x80
 8005bd4:	0112      	lsls	r2, r2, #4
 8005bd6:	431a      	orrs	r2, r3
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	0018      	movs	r0, r3
 8005be0:	f000 fdba 	bl	8006758 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	2202      	movs	r2, #2
 8005bea:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	2204      	movs	r2, #4
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	d003      	beq.n	8005bfc <HAL_ADC_IRQHandler+0x64>
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2204      	movs	r2, #4
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	d107      	bne.n	8005c0c <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	2208      	movs	r2, #8
 8005c00:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005c02:	d04d      	beq.n	8005ca0 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2208      	movs	r2, #8
 8005c08:	4013      	ands	r3, r2
 8005c0a:	d049      	beq.n	8005ca0 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c10:	2210      	movs	r2, #16
 8005c12:	4013      	ands	r3, r2
 8005c14:	d106      	bne.n	8005c24 <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c1a:	2280      	movs	r2, #128	; 0x80
 8005c1c:	0092      	lsls	r2, r2, #2
 8005c1e:	431a      	orrs	r2, r3
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	0018      	movs	r0, r3
 8005c2a:	f7ff fc70 	bl	800550e <LL_ADC_REG_IsTriggerSourceSWStart>
 8005c2e:	1e03      	subs	r3, r0, #0
 8005c30:	d02e      	beq.n	8005c90 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	7e9b      	ldrb	r3, [r3, #26]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d12a      	bne.n	8005c90 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	2208      	movs	r2, #8
 8005c42:	4013      	ands	r3, r2
 8005c44:	2b08      	cmp	r3, #8
 8005c46:	d123      	bne.n	8005c90 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	0018      	movs	r0, r3
 8005c4e:	f7ff fd5b 	bl	8005708 <LL_ADC_REG_IsConversionOngoing>
 8005c52:	1e03      	subs	r3, r0, #0
 8005c54:	d110      	bne.n	8005c78 <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	685a      	ldr	r2, [r3, #4]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	210c      	movs	r1, #12
 8005c62:	438a      	bics	r2, r1
 8005c64:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c6a:	4a56      	ldr	r2, [pc, #344]	; (8005dc4 <HAL_ADC_IRQHandler+0x22c>)
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	2201      	movs	r2, #1
 8005c70:	431a      	orrs	r2, r3
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	659a      	str	r2, [r3, #88]	; 0x58
 8005c76:	e00b      	b.n	8005c90 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c7c:	2220      	movs	r2, #32
 8005c7e:	431a      	orrs	r2, r3
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c88:	2201      	movs	r2, #1
 8005c8a:	431a      	orrs	r2, r3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	0018      	movs	r0, r3
 8005c94:	f7fc fdd0 	bl	8002838 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	220c      	movs	r2, #12
 8005c9e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	2280      	movs	r2, #128	; 0x80
 8005ca4:	4013      	ands	r3, r2
 8005ca6:	d012      	beq.n	8005cce <HAL_ADC_IRQHandler+0x136>
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2280      	movs	r2, #128	; 0x80
 8005cac:	4013      	ands	r3, r2
 8005cae:	d00e      	beq.n	8005cce <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cb4:	2280      	movs	r2, #128	; 0x80
 8005cb6:	0252      	lsls	r2, r2, #9
 8005cb8:	431a      	orrs	r2, r3
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	0018      	movs	r0, r3
 8005cc2:	f000 f889 	bl	8005dd8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	2280      	movs	r2, #128	; 0x80
 8005ccc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005cce:	693a      	ldr	r2, [r7, #16]
 8005cd0:	2380      	movs	r3, #128	; 0x80
 8005cd2:	005b      	lsls	r3, r3, #1
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	d014      	beq.n	8005d02 <HAL_ADC_IRQHandler+0x16a>
 8005cd8:	68fa      	ldr	r2, [r7, #12]
 8005cda:	2380      	movs	r3, #128	; 0x80
 8005cdc:	005b      	lsls	r3, r3, #1
 8005cde:	4013      	ands	r3, r2
 8005ce0:	d00f      	beq.n	8005d02 <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ce6:	2280      	movs	r2, #128	; 0x80
 8005ce8:	0292      	lsls	r2, r2, #10
 8005cea:	431a      	orrs	r2, r3
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	0018      	movs	r0, r3
 8005cf4:	f000 fd20 	bl	8006738 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2280      	movs	r2, #128	; 0x80
 8005cfe:	0052      	lsls	r2, r2, #1
 8005d00:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8005d02:	693a      	ldr	r2, [r7, #16]
 8005d04:	2380      	movs	r3, #128	; 0x80
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	4013      	ands	r3, r2
 8005d0a:	d014      	beq.n	8005d36 <HAL_ADC_IRQHandler+0x19e>
 8005d0c:	68fa      	ldr	r2, [r7, #12]
 8005d0e:	2380      	movs	r3, #128	; 0x80
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	4013      	ands	r3, r2
 8005d14:	d00f      	beq.n	8005d36 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d1a:	2280      	movs	r2, #128	; 0x80
 8005d1c:	02d2      	lsls	r2, r2, #11
 8005d1e:	431a      	orrs	r2, r3
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	0018      	movs	r0, r3
 8005d28:	f000 fd0e 	bl	8006748 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	2280      	movs	r2, #128	; 0x80
 8005d32:	0092      	lsls	r2, r2, #2
 8005d34:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	2210      	movs	r2, #16
 8005d3a:	4013      	ands	r3, r2
 8005d3c:	d02b      	beq.n	8005d96 <HAL_ADC_IRQHandler+0x1fe>
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2210      	movs	r2, #16
 8005d42:	4013      	ands	r3, r2
 8005d44:	d027      	beq.n	8005d96 <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d102      	bne.n	8005d54 <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	617b      	str	r3, [r7, #20]
 8005d52:	e008      	b.n	8005d66 <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	0018      	movs	r0, r3
 8005d5a:	f7ff fc2c 	bl	80055b6 <LL_ADC_REG_GetDMATransfer>
 8005d5e:	1e03      	subs	r3, r0, #0
 8005d60:	d001      	beq.n	8005d66 <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 8005d62:	2301      	movs	r3, #1
 8005d64:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d110      	bne.n	8005d8e <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d70:	2280      	movs	r2, #128	; 0x80
 8005d72:	00d2      	lsls	r2, r2, #3
 8005d74:	431a      	orrs	r2, r3
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d7e:	2202      	movs	r2, #2
 8005d80:	431a      	orrs	r2, r3
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	0018      	movs	r0, r3
 8005d8a:	f000 f82d 	bl	8005de8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	2210      	movs	r2, #16
 8005d94:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 8005d96:	693a      	ldr	r2, [r7, #16]
 8005d98:	2380      	movs	r3, #128	; 0x80
 8005d9a:	019b      	lsls	r3, r3, #6
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	d00d      	beq.n	8005dbc <HAL_ADC_IRQHandler+0x224>
 8005da0:	68fa      	ldr	r2, [r7, #12]
 8005da2:	2380      	movs	r3, #128	; 0x80
 8005da4:	019b      	lsls	r3, r3, #6
 8005da6:	4013      	ands	r3, r2
 8005da8:	d008      	beq.n	8005dbc <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	0018      	movs	r0, r3
 8005dae:	f000 fcdb 	bl	8006768 <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	2280      	movs	r2, #128	; 0x80
 8005db8:	0192      	lsls	r2, r2, #6
 8005dba:	601a      	str	r2, [r3, #0]
  }
}
 8005dbc:	46c0      	nop			; (mov r8, r8)
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	b006      	add	sp, #24
 8005dc2:	bd80      	pop	{r7, pc}
 8005dc4:	fffffefe 	.word	0xfffffefe

08005dc8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b082      	sub	sp, #8
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005dd0:	46c0      	nop			; (mov r8, r8)
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	b002      	add	sp, #8
 8005dd6:	bd80      	pop	{r7, pc}

08005dd8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b082      	sub	sp, #8
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8005de0:	46c0      	nop			; (mov r8, r8)
 8005de2:	46bd      	mov	sp, r7
 8005de4:	b002      	add	sp, #8
 8005de6:	bd80      	pop	{r7, pc}

08005de8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b082      	sub	sp, #8
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005df0:	46c0      	nop			; (mov r8, r8)
 8005df2:	46bd      	mov	sp, r7
 8005df4:	b002      	add	sp, #8
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b086      	sub	sp, #24
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005e02:	2317      	movs	r3, #23
 8005e04:	18fb      	adds	r3, r7, r3
 8005e06:	2200      	movs	r2, #0
 8005e08:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2254      	movs	r2, #84	; 0x54
 8005e12:	5c9b      	ldrb	r3, [r3, r2]
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d101      	bne.n	8005e1c <HAL_ADC_ConfigChannel+0x24>
 8005e18:	2302      	movs	r3, #2
 8005e1a:	e1c0      	b.n	800619e <HAL_ADC_ConfigChannel+0x3a6>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2254      	movs	r2, #84	; 0x54
 8005e20:	2101      	movs	r1, #1
 8005e22:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	0018      	movs	r0, r3
 8005e2a:	f7ff fc6d 	bl	8005708 <LL_ADC_REG_IsConversionOngoing>
 8005e2e:	1e03      	subs	r3, r0, #0
 8005e30:	d000      	beq.n	8005e34 <HAL_ADC_ConfigChannel+0x3c>
 8005e32:	e1a3      	b.n	800617c <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	2b02      	cmp	r3, #2
 8005e3a:	d100      	bne.n	8005e3e <HAL_ADC_ConfigChannel+0x46>
 8005e3c:	e143      	b.n	80060c6 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	691a      	ldr	r2, [r3, #16]
 8005e42:	2380      	movs	r3, #128	; 0x80
 8005e44:	061b      	lsls	r3, r3, #24
 8005e46:	429a      	cmp	r2, r3
 8005e48:	d004      	beq.n	8005e54 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005e4e:	4ac1      	ldr	r2, [pc, #772]	; (8006154 <HAL_ADC_ConfigChannel+0x35c>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d108      	bne.n	8005e66 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	0019      	movs	r1, r3
 8005e5e:	0010      	movs	r0, r2
 8005e60:	f7ff fb86 	bl	8005570 <LL_ADC_REG_SetSequencerChAdd>
 8005e64:	e0c9      	b.n	8005ffa <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	211f      	movs	r1, #31
 8005e70:	400b      	ands	r3, r1
 8005e72:	210f      	movs	r1, #15
 8005e74:	4099      	lsls	r1, r3
 8005e76:	000b      	movs	r3, r1
 8005e78:	43db      	mvns	r3, r3
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	0019      	movs	r1, r3
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	035b      	lsls	r3, r3, #13
 8005e84:	0b5b      	lsrs	r3, r3, #13
 8005e86:	d105      	bne.n	8005e94 <HAL_ADC_ConfigChannel+0x9c>
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	0e9b      	lsrs	r3, r3, #26
 8005e8e:	221f      	movs	r2, #31
 8005e90:	4013      	ands	r3, r2
 8005e92:	e098      	b.n	8005fc6 <HAL_ADC_ConfigChannel+0x1ce>
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	2201      	movs	r2, #1
 8005e9a:	4013      	ands	r3, r2
 8005e9c:	d000      	beq.n	8005ea0 <HAL_ADC_ConfigChannel+0xa8>
 8005e9e:	e091      	b.n	8005fc4 <HAL_ADC_ConfigChannel+0x1cc>
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	2202      	movs	r2, #2
 8005ea6:	4013      	ands	r3, r2
 8005ea8:	d000      	beq.n	8005eac <HAL_ADC_ConfigChannel+0xb4>
 8005eaa:	e089      	b.n	8005fc0 <HAL_ADC_ConfigChannel+0x1c8>
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2204      	movs	r2, #4
 8005eb2:	4013      	ands	r3, r2
 8005eb4:	d000      	beq.n	8005eb8 <HAL_ADC_ConfigChannel+0xc0>
 8005eb6:	e081      	b.n	8005fbc <HAL_ADC_ConfigChannel+0x1c4>
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2208      	movs	r2, #8
 8005ebe:	4013      	ands	r3, r2
 8005ec0:	d000      	beq.n	8005ec4 <HAL_ADC_ConfigChannel+0xcc>
 8005ec2:	e079      	b.n	8005fb8 <HAL_ADC_ConfigChannel+0x1c0>
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2210      	movs	r2, #16
 8005eca:	4013      	ands	r3, r2
 8005ecc:	d000      	beq.n	8005ed0 <HAL_ADC_ConfigChannel+0xd8>
 8005ece:	e071      	b.n	8005fb4 <HAL_ADC_ConfigChannel+0x1bc>
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	2220      	movs	r2, #32
 8005ed6:	4013      	ands	r3, r2
 8005ed8:	d000      	beq.n	8005edc <HAL_ADC_ConfigChannel+0xe4>
 8005eda:	e069      	b.n	8005fb0 <HAL_ADC_ConfigChannel+0x1b8>
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2240      	movs	r2, #64	; 0x40
 8005ee2:	4013      	ands	r3, r2
 8005ee4:	d000      	beq.n	8005ee8 <HAL_ADC_ConfigChannel+0xf0>
 8005ee6:	e061      	b.n	8005fac <HAL_ADC_ConfigChannel+0x1b4>
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	2280      	movs	r2, #128	; 0x80
 8005eee:	4013      	ands	r3, r2
 8005ef0:	d000      	beq.n	8005ef4 <HAL_ADC_ConfigChannel+0xfc>
 8005ef2:	e059      	b.n	8005fa8 <HAL_ADC_ConfigChannel+0x1b0>
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	2380      	movs	r3, #128	; 0x80
 8005efa:	005b      	lsls	r3, r3, #1
 8005efc:	4013      	ands	r3, r2
 8005efe:	d151      	bne.n	8005fa4 <HAL_ADC_ConfigChannel+0x1ac>
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	2380      	movs	r3, #128	; 0x80
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	4013      	ands	r3, r2
 8005f0a:	d149      	bne.n	8005fa0 <HAL_ADC_ConfigChannel+0x1a8>
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	2380      	movs	r3, #128	; 0x80
 8005f12:	00db      	lsls	r3, r3, #3
 8005f14:	4013      	ands	r3, r2
 8005f16:	d141      	bne.n	8005f9c <HAL_ADC_ConfigChannel+0x1a4>
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	2380      	movs	r3, #128	; 0x80
 8005f1e:	011b      	lsls	r3, r3, #4
 8005f20:	4013      	ands	r3, r2
 8005f22:	d139      	bne.n	8005f98 <HAL_ADC_ConfigChannel+0x1a0>
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	2380      	movs	r3, #128	; 0x80
 8005f2a:	015b      	lsls	r3, r3, #5
 8005f2c:	4013      	ands	r3, r2
 8005f2e:	d131      	bne.n	8005f94 <HAL_ADC_ConfigChannel+0x19c>
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	2380      	movs	r3, #128	; 0x80
 8005f36:	019b      	lsls	r3, r3, #6
 8005f38:	4013      	ands	r3, r2
 8005f3a:	d129      	bne.n	8005f90 <HAL_ADC_ConfigChannel+0x198>
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	2380      	movs	r3, #128	; 0x80
 8005f42:	01db      	lsls	r3, r3, #7
 8005f44:	4013      	ands	r3, r2
 8005f46:	d121      	bne.n	8005f8c <HAL_ADC_ConfigChannel+0x194>
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	2380      	movs	r3, #128	; 0x80
 8005f4e:	021b      	lsls	r3, r3, #8
 8005f50:	4013      	ands	r3, r2
 8005f52:	d119      	bne.n	8005f88 <HAL_ADC_ConfigChannel+0x190>
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	2380      	movs	r3, #128	; 0x80
 8005f5a:	025b      	lsls	r3, r3, #9
 8005f5c:	4013      	ands	r3, r2
 8005f5e:	d111      	bne.n	8005f84 <HAL_ADC_ConfigChannel+0x18c>
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	2380      	movs	r3, #128	; 0x80
 8005f66:	029b      	lsls	r3, r3, #10
 8005f68:	4013      	ands	r3, r2
 8005f6a:	d109      	bne.n	8005f80 <HAL_ADC_ConfigChannel+0x188>
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	2380      	movs	r3, #128	; 0x80
 8005f72:	02db      	lsls	r3, r3, #11
 8005f74:	4013      	ands	r3, r2
 8005f76:	d001      	beq.n	8005f7c <HAL_ADC_ConfigChannel+0x184>
 8005f78:	2312      	movs	r3, #18
 8005f7a:	e024      	b.n	8005fc6 <HAL_ADC_ConfigChannel+0x1ce>
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	e022      	b.n	8005fc6 <HAL_ADC_ConfigChannel+0x1ce>
 8005f80:	2311      	movs	r3, #17
 8005f82:	e020      	b.n	8005fc6 <HAL_ADC_ConfigChannel+0x1ce>
 8005f84:	2310      	movs	r3, #16
 8005f86:	e01e      	b.n	8005fc6 <HAL_ADC_ConfigChannel+0x1ce>
 8005f88:	230f      	movs	r3, #15
 8005f8a:	e01c      	b.n	8005fc6 <HAL_ADC_ConfigChannel+0x1ce>
 8005f8c:	230e      	movs	r3, #14
 8005f8e:	e01a      	b.n	8005fc6 <HAL_ADC_ConfigChannel+0x1ce>
 8005f90:	230d      	movs	r3, #13
 8005f92:	e018      	b.n	8005fc6 <HAL_ADC_ConfigChannel+0x1ce>
 8005f94:	230c      	movs	r3, #12
 8005f96:	e016      	b.n	8005fc6 <HAL_ADC_ConfigChannel+0x1ce>
 8005f98:	230b      	movs	r3, #11
 8005f9a:	e014      	b.n	8005fc6 <HAL_ADC_ConfigChannel+0x1ce>
 8005f9c:	230a      	movs	r3, #10
 8005f9e:	e012      	b.n	8005fc6 <HAL_ADC_ConfigChannel+0x1ce>
 8005fa0:	2309      	movs	r3, #9
 8005fa2:	e010      	b.n	8005fc6 <HAL_ADC_ConfigChannel+0x1ce>
 8005fa4:	2308      	movs	r3, #8
 8005fa6:	e00e      	b.n	8005fc6 <HAL_ADC_ConfigChannel+0x1ce>
 8005fa8:	2307      	movs	r3, #7
 8005faa:	e00c      	b.n	8005fc6 <HAL_ADC_ConfigChannel+0x1ce>
 8005fac:	2306      	movs	r3, #6
 8005fae:	e00a      	b.n	8005fc6 <HAL_ADC_ConfigChannel+0x1ce>
 8005fb0:	2305      	movs	r3, #5
 8005fb2:	e008      	b.n	8005fc6 <HAL_ADC_ConfigChannel+0x1ce>
 8005fb4:	2304      	movs	r3, #4
 8005fb6:	e006      	b.n	8005fc6 <HAL_ADC_ConfigChannel+0x1ce>
 8005fb8:	2303      	movs	r3, #3
 8005fba:	e004      	b.n	8005fc6 <HAL_ADC_ConfigChannel+0x1ce>
 8005fbc:	2302      	movs	r3, #2
 8005fbe:	e002      	b.n	8005fc6 <HAL_ADC_ConfigChannel+0x1ce>
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e000      	b.n	8005fc6 <HAL_ADC_ConfigChannel+0x1ce>
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	683a      	ldr	r2, [r7, #0]
 8005fc8:	6852      	ldr	r2, [r2, #4]
 8005fca:	201f      	movs	r0, #31
 8005fcc:	4002      	ands	r2, r0
 8005fce:	4093      	lsls	r3, r2
 8005fd0:	000a      	movs	r2, r1
 8005fd2:	431a      	orrs	r2, r3
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	089b      	lsrs	r3, r3, #2
 8005fde:	1c5a      	adds	r2, r3, #1
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	69db      	ldr	r3, [r3, #28]
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d808      	bhi.n	8005ffa <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6818      	ldr	r0, [r3, #0]
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	6859      	ldr	r1, [r3, #4]
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	001a      	movs	r2, r3
 8005ff6:	f7ff fa9b 	bl	8005530 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6818      	ldr	r0, [r3, #0]
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	6819      	ldr	r1, [r3, #0]
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	001a      	movs	r2, r3
 8006008:	f7ff fae2 	bl	80055d0 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	2b00      	cmp	r3, #0
 8006012:	db00      	blt.n	8006016 <HAL_ADC_ConfigChannel+0x21e>
 8006014:	e0bc      	b.n	8006190 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006016:	4b50      	ldr	r3, [pc, #320]	; (8006158 <HAL_ADC_ConfigChannel+0x360>)
 8006018:	0018      	movs	r0, r3
 800601a:	f7ff fa37 	bl	800548c <LL_ADC_GetCommonPathInternalCh>
 800601e:	0003      	movs	r3, r0
 8006020:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a4d      	ldr	r2, [pc, #308]	; (800615c <HAL_ADC_ConfigChannel+0x364>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d122      	bne.n	8006072 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800602c:	693a      	ldr	r2, [r7, #16]
 800602e:	2380      	movs	r3, #128	; 0x80
 8006030:	041b      	lsls	r3, r3, #16
 8006032:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8006034:	d11d      	bne.n	8006072 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	2280      	movs	r2, #128	; 0x80
 800603a:	0412      	lsls	r2, r2, #16
 800603c:	4313      	orrs	r3, r2
 800603e:	4a46      	ldr	r2, [pc, #280]	; (8006158 <HAL_ADC_ConfigChannel+0x360>)
 8006040:	0019      	movs	r1, r3
 8006042:	0010      	movs	r0, r2
 8006044:	f7ff fa0e 	bl	8005464 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006048:	4b45      	ldr	r3, [pc, #276]	; (8006160 <HAL_ADC_ConfigChannel+0x368>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4945      	ldr	r1, [pc, #276]	; (8006164 <HAL_ADC_ConfigChannel+0x36c>)
 800604e:	0018      	movs	r0, r3
 8006050:	f7fa f868 	bl	8000124 <__udivsi3>
 8006054:	0003      	movs	r3, r0
 8006056:	1c5a      	adds	r2, r3, #1
 8006058:	0013      	movs	r3, r2
 800605a:	005b      	lsls	r3, r3, #1
 800605c:	189b      	adds	r3, r3, r2
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006062:	e002      	b.n	800606a <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	3b01      	subs	r3, #1
 8006068:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d1f9      	bne.n	8006064 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8006070:	e08e      	b.n	8006190 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a3c      	ldr	r2, [pc, #240]	; (8006168 <HAL_ADC_ConfigChannel+0x370>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d10e      	bne.n	800609a <HAL_ADC_ConfigChannel+0x2a2>
 800607c:	693a      	ldr	r2, [r7, #16]
 800607e:	2380      	movs	r3, #128	; 0x80
 8006080:	045b      	lsls	r3, r3, #17
 8006082:	4013      	ands	r3, r2
 8006084:	d109      	bne.n	800609a <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	2280      	movs	r2, #128	; 0x80
 800608a:	0452      	lsls	r2, r2, #17
 800608c:	4313      	orrs	r3, r2
 800608e:	4a32      	ldr	r2, [pc, #200]	; (8006158 <HAL_ADC_ConfigChannel+0x360>)
 8006090:	0019      	movs	r1, r3
 8006092:	0010      	movs	r0, r2
 8006094:	f7ff f9e6 	bl	8005464 <LL_ADC_SetCommonPathInternalCh>
 8006098:	e07a      	b.n	8006190 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a33      	ldr	r2, [pc, #204]	; (800616c <HAL_ADC_ConfigChannel+0x374>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d000      	beq.n	80060a6 <HAL_ADC_ConfigChannel+0x2ae>
 80060a4:	e074      	b.n	8006190 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80060a6:	693a      	ldr	r2, [r7, #16]
 80060a8:	2380      	movs	r3, #128	; 0x80
 80060aa:	03db      	lsls	r3, r3, #15
 80060ac:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80060ae:	d000      	beq.n	80060b2 <HAL_ADC_ConfigChannel+0x2ba>
 80060b0:	e06e      	b.n	8006190 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	2280      	movs	r2, #128	; 0x80
 80060b6:	03d2      	lsls	r2, r2, #15
 80060b8:	4313      	orrs	r3, r2
 80060ba:	4a27      	ldr	r2, [pc, #156]	; (8006158 <HAL_ADC_ConfigChannel+0x360>)
 80060bc:	0019      	movs	r1, r3
 80060be:	0010      	movs	r0, r2
 80060c0:	f7ff f9d0 	bl	8005464 <LL_ADC_SetCommonPathInternalCh>
 80060c4:	e064      	b.n	8006190 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	691a      	ldr	r2, [r3, #16]
 80060ca:	2380      	movs	r3, #128	; 0x80
 80060cc:	061b      	lsls	r3, r3, #24
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d004      	beq.n	80060dc <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80060d6:	4a1f      	ldr	r2, [pc, #124]	; (8006154 <HAL_ADC_ConfigChannel+0x35c>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d107      	bne.n	80060ec <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	0019      	movs	r1, r3
 80060e6:	0010      	movs	r0, r2
 80060e8:	f7ff fa53 	bl	8005592 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	da4d      	bge.n	8006190 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80060f4:	4b18      	ldr	r3, [pc, #96]	; (8006158 <HAL_ADC_ConfigChannel+0x360>)
 80060f6:	0018      	movs	r0, r3
 80060f8:	f7ff f9c8 	bl	800548c <LL_ADC_GetCommonPathInternalCh>
 80060fc:	0003      	movs	r3, r0
 80060fe:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a15      	ldr	r2, [pc, #84]	; (800615c <HAL_ADC_ConfigChannel+0x364>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d108      	bne.n	800611c <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	4a18      	ldr	r2, [pc, #96]	; (8006170 <HAL_ADC_ConfigChannel+0x378>)
 800610e:	4013      	ands	r3, r2
 8006110:	4a11      	ldr	r2, [pc, #68]	; (8006158 <HAL_ADC_ConfigChannel+0x360>)
 8006112:	0019      	movs	r1, r3
 8006114:	0010      	movs	r0, r2
 8006116:	f7ff f9a5 	bl	8005464 <LL_ADC_SetCommonPathInternalCh>
 800611a:	e039      	b.n	8006190 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a11      	ldr	r2, [pc, #68]	; (8006168 <HAL_ADC_ConfigChannel+0x370>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d108      	bne.n	8006138 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	4a12      	ldr	r2, [pc, #72]	; (8006174 <HAL_ADC_ConfigChannel+0x37c>)
 800612a:	4013      	ands	r3, r2
 800612c:	4a0a      	ldr	r2, [pc, #40]	; (8006158 <HAL_ADC_ConfigChannel+0x360>)
 800612e:	0019      	movs	r1, r3
 8006130:	0010      	movs	r0, r2
 8006132:	f7ff f997 	bl	8005464 <LL_ADC_SetCommonPathInternalCh>
 8006136:	e02b      	b.n	8006190 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a0b      	ldr	r2, [pc, #44]	; (800616c <HAL_ADC_ConfigChannel+0x374>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d126      	bne.n	8006190 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	4a0c      	ldr	r2, [pc, #48]	; (8006178 <HAL_ADC_ConfigChannel+0x380>)
 8006146:	4013      	ands	r3, r2
 8006148:	4a03      	ldr	r2, [pc, #12]	; (8006158 <HAL_ADC_ConfigChannel+0x360>)
 800614a:	0019      	movs	r1, r3
 800614c:	0010      	movs	r0, r2
 800614e:	f7ff f989 	bl	8005464 <LL_ADC_SetCommonPathInternalCh>
 8006152:	e01d      	b.n	8006190 <HAL_ADC_ConfigChannel+0x398>
 8006154:	80000004 	.word	0x80000004
 8006158:	40012708 	.word	0x40012708
 800615c:	b0001000 	.word	0xb0001000
 8006160:	20000004 	.word	0x20000004
 8006164:	00030d40 	.word	0x00030d40
 8006168:	b8004000 	.word	0xb8004000
 800616c:	b4002000 	.word	0xb4002000
 8006170:	ff7fffff 	.word	0xff7fffff
 8006174:	feffffff 	.word	0xfeffffff
 8006178:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006180:	2220      	movs	r2, #32
 8006182:	431a      	orrs	r2, r3
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8006188:	2317      	movs	r3, #23
 800618a:	18fb      	adds	r3, r7, r3
 800618c:	2201      	movs	r2, #1
 800618e:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2254      	movs	r2, #84	; 0x54
 8006194:	2100      	movs	r1, #0
 8006196:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8006198:	2317      	movs	r3, #23
 800619a:	18fb      	adds	r3, r7, r3
 800619c:	781b      	ldrb	r3, [r3, #0]
}
 800619e:	0018      	movs	r0, r3
 80061a0:	46bd      	mov	sp, r7
 80061a2:	b006      	add	sp, #24
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	46c0      	nop			; (mov r8, r8)

080061a8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b084      	sub	sp, #16
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80061b0:	2300      	movs	r3, #0
 80061b2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	0018      	movs	r0, r3
 80061ba:	f7ff fa71 	bl	80056a0 <LL_ADC_IsEnabled>
 80061be:	1e03      	subs	r3, r0, #0
 80061c0:	d000      	beq.n	80061c4 <ADC_Enable+0x1c>
 80061c2:	e069      	b.n	8006298 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	4a36      	ldr	r2, [pc, #216]	; (80062a4 <ADC_Enable+0xfc>)
 80061cc:	4013      	ands	r3, r2
 80061ce:	d00d      	beq.n	80061ec <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061d4:	2210      	movs	r2, #16
 80061d6:	431a      	orrs	r2, r3
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061e0:	2201      	movs	r2, #1
 80061e2:	431a      	orrs	r2, r3
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	e056      	b.n	800629a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	0018      	movs	r0, r3
 80061f2:	f7ff fa31 	bl	8005658 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80061f6:	4b2c      	ldr	r3, [pc, #176]	; (80062a8 <ADC_Enable+0x100>)
 80061f8:	0018      	movs	r0, r3
 80061fa:	f7ff f947 	bl	800548c <LL_ADC_GetCommonPathInternalCh>
 80061fe:	0002      	movs	r2, r0
 8006200:	2380      	movs	r3, #128	; 0x80
 8006202:	041b      	lsls	r3, r3, #16
 8006204:	4013      	ands	r3, r2
 8006206:	d00f      	beq.n	8006228 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006208:	4b28      	ldr	r3, [pc, #160]	; (80062ac <ADC_Enable+0x104>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4928      	ldr	r1, [pc, #160]	; (80062b0 <ADC_Enable+0x108>)
 800620e:	0018      	movs	r0, r3
 8006210:	f7f9 ff88 	bl	8000124 <__udivsi3>
 8006214:	0003      	movs	r3, r0
 8006216:	3301      	adds	r3, #1
 8006218:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800621a:	e002      	b.n	8006222 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	3b01      	subs	r3, #1
 8006220:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d1f9      	bne.n	800621c <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	7e5b      	ldrb	r3, [r3, #25]
 800622c:	2b01      	cmp	r3, #1
 800622e:	d033      	beq.n	8006298 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8006230:	f7ff f8d4 	bl	80053dc <HAL_GetTick>
 8006234:	0003      	movs	r3, r0
 8006236:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006238:	e027      	b.n	800628a <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	0018      	movs	r0, r3
 8006240:	f7ff fa2e 	bl	80056a0 <LL_ADC_IsEnabled>
 8006244:	1e03      	subs	r3, r0, #0
 8006246:	d104      	bne.n	8006252 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	0018      	movs	r0, r3
 800624e:	f7ff fa03 	bl	8005658 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006252:	f7ff f8c3 	bl	80053dc <HAL_GetTick>
 8006256:	0002      	movs	r2, r0
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	1ad3      	subs	r3, r2, r3
 800625c:	2b02      	cmp	r3, #2
 800625e:	d914      	bls.n	800628a <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	2201      	movs	r2, #1
 8006268:	4013      	ands	r3, r2
 800626a:	2b01      	cmp	r3, #1
 800626c:	d00d      	beq.n	800628a <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006272:	2210      	movs	r2, #16
 8006274:	431a      	orrs	r2, r3
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800627e:	2201      	movs	r2, #1
 8006280:	431a      	orrs	r2, r3
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	e007      	b.n	800629a <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	2201      	movs	r2, #1
 8006292:	4013      	ands	r3, r2
 8006294:	2b01      	cmp	r3, #1
 8006296:	d1d0      	bne.n	800623a <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006298:	2300      	movs	r3, #0
}
 800629a:	0018      	movs	r0, r3
 800629c:	46bd      	mov	sp, r7
 800629e:	b004      	add	sp, #16
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	46c0      	nop			; (mov r8, r8)
 80062a4:	80000017 	.word	0x80000017
 80062a8:	40012708 	.word	0x40012708
 80062ac:	20000004 	.word	0x20000004
 80062b0:	00030d40 	.word	0x00030d40

080062b4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b084      	sub	sp, #16
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	0018      	movs	r0, r3
 80062c2:	f7ff f9fe 	bl	80056c2 <LL_ADC_IsDisableOngoing>
 80062c6:	0003      	movs	r3, r0
 80062c8:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	0018      	movs	r0, r3
 80062d0:	f7ff f9e6 	bl	80056a0 <LL_ADC_IsEnabled>
 80062d4:	1e03      	subs	r3, r0, #0
 80062d6:	d046      	beq.n	8006366 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d143      	bne.n	8006366 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	2205      	movs	r2, #5
 80062e6:	4013      	ands	r3, r2
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d10d      	bne.n	8006308 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	0018      	movs	r0, r3
 80062f2:	f7ff f9c3 	bl	800567c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	2203      	movs	r2, #3
 80062fc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80062fe:	f7ff f86d 	bl	80053dc <HAL_GetTick>
 8006302:	0003      	movs	r3, r0
 8006304:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006306:	e028      	b.n	800635a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800630c:	2210      	movs	r2, #16
 800630e:	431a      	orrs	r2, r3
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006318:	2201      	movs	r2, #1
 800631a:	431a      	orrs	r2, r3
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8006320:	2301      	movs	r3, #1
 8006322:	e021      	b.n	8006368 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006324:	f7ff f85a 	bl	80053dc <HAL_GetTick>
 8006328:	0002      	movs	r2, r0
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	1ad3      	subs	r3, r2, r3
 800632e:	2b02      	cmp	r3, #2
 8006330:	d913      	bls.n	800635a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	2201      	movs	r2, #1
 800633a:	4013      	ands	r3, r2
 800633c:	d00d      	beq.n	800635a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006342:	2210      	movs	r2, #16
 8006344:	431a      	orrs	r2, r3
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800634e:	2201      	movs	r2, #1
 8006350:	431a      	orrs	r2, r3
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8006356:	2301      	movs	r3, #1
 8006358:	e006      	b.n	8006368 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	2201      	movs	r2, #1
 8006362:	4013      	ands	r3, r2
 8006364:	d1de      	bne.n	8006324 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006366:	2300      	movs	r3, #0
}
 8006368:	0018      	movs	r0, r3
 800636a:	46bd      	mov	sp, r7
 800636c:	b004      	add	sp, #16
 800636e:	bd80      	pop	{r7, pc}

08006370 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b084      	sub	sp, #16
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800637c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006382:	2250      	movs	r2, #80	; 0x50
 8006384:	4013      	ands	r3, r2
 8006386:	d141      	bne.n	800640c <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800638c:	2280      	movs	r2, #128	; 0x80
 800638e:	0092      	lsls	r2, r2, #2
 8006390:	431a      	orrs	r2, r3
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	0018      	movs	r0, r3
 800639c:	f7ff f8b7 	bl	800550e <LL_ADC_REG_IsTriggerSourceSWStart>
 80063a0:	1e03      	subs	r3, r0, #0
 80063a2:	d02e      	beq.n	8006402 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	7e9b      	ldrb	r3, [r3, #26]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d12a      	bne.n	8006402 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	2208      	movs	r2, #8
 80063b4:	4013      	ands	r3, r2
 80063b6:	2b08      	cmp	r3, #8
 80063b8:	d123      	bne.n	8006402 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	0018      	movs	r0, r3
 80063c0:	f7ff f9a2 	bl	8005708 <LL_ADC_REG_IsConversionOngoing>
 80063c4:	1e03      	subs	r3, r0, #0
 80063c6:	d110      	bne.n	80063ea <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	685a      	ldr	r2, [r3, #4]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	210c      	movs	r1, #12
 80063d4:	438a      	bics	r2, r1
 80063d6:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063dc:	4a15      	ldr	r2, [pc, #84]	; (8006434 <ADC_DMAConvCplt+0xc4>)
 80063de:	4013      	ands	r3, r2
 80063e0:	2201      	movs	r2, #1
 80063e2:	431a      	orrs	r2, r3
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	659a      	str	r2, [r3, #88]	; 0x58
 80063e8:	e00b      	b.n	8006402 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063ee:	2220      	movs	r2, #32
 80063f0:	431a      	orrs	r2, r3
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063fa:	2201      	movs	r2, #1
 80063fc:	431a      	orrs	r2, r3
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	0018      	movs	r0, r3
 8006406:	f7fc fa17 	bl	8002838 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800640a:	e00f      	b.n	800642c <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006410:	2210      	movs	r2, #16
 8006412:	4013      	ands	r3, r2
 8006414:	d004      	beq.n	8006420 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	0018      	movs	r0, r3
 800641a:	f7ff fce5 	bl	8005de8 <HAL_ADC_ErrorCallback>
}
 800641e:	e005      	b.n	800642c <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	0010      	movs	r0, r2
 800642a:	4798      	blx	r3
}
 800642c:	46c0      	nop			; (mov r8, r8)
 800642e:	46bd      	mov	sp, r7
 8006430:	b004      	add	sp, #16
 8006432:	bd80      	pop	{r7, pc}
 8006434:	fffffefe 	.word	0xfffffefe

08006438 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b084      	sub	sp, #16
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006444:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	0018      	movs	r0, r3
 800644a:	f7ff fcbd 	bl	8005dc8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800644e:	46c0      	nop			; (mov r8, r8)
 8006450:	46bd      	mov	sp, r7
 8006452:	b004      	add	sp, #16
 8006454:	bd80      	pop	{r7, pc}

08006456 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006456:	b580      	push	{r7, lr}
 8006458:	b084      	sub	sp, #16
 800645a:	af00      	add	r7, sp, #0
 800645c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006462:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006468:	2240      	movs	r2, #64	; 0x40
 800646a:	431a      	orrs	r2, r3
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006474:	2204      	movs	r2, #4
 8006476:	431a      	orrs	r2, r3
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	0018      	movs	r0, r3
 8006480:	f7ff fcb2 	bl	8005de8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006484:	46c0      	nop			; (mov r8, r8)
 8006486:	46bd      	mov	sp, r7
 8006488:	b004      	add	sp, #16
 800648a:	bd80      	pop	{r7, pc}

0800648c <LL_ADC_SetCalibrationFactor>:
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b082      	sub	sp, #8
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	22b4      	movs	r2, #180	; 0xb4
 800649a:	589b      	ldr	r3, [r3, r2]
 800649c:	227f      	movs	r2, #127	; 0x7f
 800649e:	4393      	bics	r3, r2
 80064a0:	001a      	movs	r2, r3
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	431a      	orrs	r2, r3
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	21b4      	movs	r1, #180	; 0xb4
 80064aa:	505a      	str	r2, [r3, r1]
}
 80064ac:	46c0      	nop			; (mov r8, r8)
 80064ae:	46bd      	mov	sp, r7
 80064b0:	b002      	add	sp, #8
 80064b2:	bd80      	pop	{r7, pc}

080064b4 <LL_ADC_GetCalibrationFactor>:
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b082      	sub	sp, #8
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	22b4      	movs	r2, #180	; 0xb4
 80064c0:	589b      	ldr	r3, [r3, r2]
 80064c2:	227f      	movs	r2, #127	; 0x7f
 80064c4:	4013      	ands	r3, r2
}
 80064c6:	0018      	movs	r0, r3
 80064c8:	46bd      	mov	sp, r7
 80064ca:	b002      	add	sp, #8
 80064cc:	bd80      	pop	{r7, pc}
	...

080064d0 <LL_ADC_Enable>:
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b082      	sub	sp, #8
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	4a04      	ldr	r2, [pc, #16]	; (80064f0 <LL_ADC_Enable+0x20>)
 80064de:	4013      	ands	r3, r2
 80064e0:	2201      	movs	r2, #1
 80064e2:	431a      	orrs	r2, r3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	609a      	str	r2, [r3, #8]
}
 80064e8:	46c0      	nop			; (mov r8, r8)
 80064ea:	46bd      	mov	sp, r7
 80064ec:	b002      	add	sp, #8
 80064ee:	bd80      	pop	{r7, pc}
 80064f0:	7fffffe8 	.word	0x7fffffe8

080064f4 <LL_ADC_Disable>:
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b082      	sub	sp, #8
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	4a04      	ldr	r2, [pc, #16]	; (8006514 <LL_ADC_Disable+0x20>)
 8006502:	4013      	ands	r3, r2
 8006504:	2202      	movs	r2, #2
 8006506:	431a      	orrs	r2, r3
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	609a      	str	r2, [r3, #8]
}
 800650c:	46c0      	nop			; (mov r8, r8)
 800650e:	46bd      	mov	sp, r7
 8006510:	b002      	add	sp, #8
 8006512:	bd80      	pop	{r7, pc}
 8006514:	7fffffe8 	.word	0x7fffffe8

08006518 <LL_ADC_IsEnabled>:
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b082      	sub	sp, #8
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	2201      	movs	r2, #1
 8006526:	4013      	ands	r3, r2
 8006528:	2b01      	cmp	r3, #1
 800652a:	d101      	bne.n	8006530 <LL_ADC_IsEnabled+0x18>
 800652c:	2301      	movs	r3, #1
 800652e:	e000      	b.n	8006532 <LL_ADC_IsEnabled+0x1a>
 8006530:	2300      	movs	r3, #0
}
 8006532:	0018      	movs	r0, r3
 8006534:	46bd      	mov	sp, r7
 8006536:	b002      	add	sp, #8
 8006538:	bd80      	pop	{r7, pc}
	...

0800653c <LL_ADC_StartCalibration>:
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b082      	sub	sp, #8
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	4a05      	ldr	r2, [pc, #20]	; (8006560 <LL_ADC_StartCalibration+0x24>)
 800654a:	4013      	ands	r3, r2
 800654c:	2280      	movs	r2, #128	; 0x80
 800654e:	0612      	lsls	r2, r2, #24
 8006550:	431a      	orrs	r2, r3
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	609a      	str	r2, [r3, #8]
}
 8006556:	46c0      	nop			; (mov r8, r8)
 8006558:	46bd      	mov	sp, r7
 800655a:	b002      	add	sp, #8
 800655c:	bd80      	pop	{r7, pc}
 800655e:	46c0      	nop			; (mov r8, r8)
 8006560:	7fffffe8 	.word	0x7fffffe8

08006564 <LL_ADC_IsCalibrationOnGoing>:
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b082      	sub	sp, #8
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	0fdb      	lsrs	r3, r3, #31
 8006572:	07da      	lsls	r2, r3, #31
 8006574:	2380      	movs	r3, #128	; 0x80
 8006576:	061b      	lsls	r3, r3, #24
 8006578:	429a      	cmp	r2, r3
 800657a:	d101      	bne.n	8006580 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800657c:	2301      	movs	r3, #1
 800657e:	e000      	b.n	8006582 <LL_ADC_IsCalibrationOnGoing+0x1e>
 8006580:	2300      	movs	r3, #0
}
 8006582:	0018      	movs	r0, r3
 8006584:	46bd      	mov	sp, r7
 8006586:	b002      	add	sp, #8
 8006588:	bd80      	pop	{r7, pc}
	...

0800658c <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 800658c:	b590      	push	{r4, r7, lr}
 800658e:	b089      	sub	sp, #36	; 0x24
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8006594:	2300      	movs	r3, #0
 8006596:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8006598:	2300      	movs	r3, #0
 800659a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2254      	movs	r2, #84	; 0x54
 80065a0:	5c9b      	ldrb	r3, [r3, r2]
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	d101      	bne.n	80065aa <HAL_ADCEx_Calibration_Start+0x1e>
 80065a6:	2302      	movs	r3, #2
 80065a8:	e0ba      	b.n	8006720 <HAL_ADCEx_Calibration_Start+0x194>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2254      	movs	r2, #84	; 0x54
 80065ae:	2101      	movs	r1, #1
 80065b0:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80065b2:	2317      	movs	r3, #23
 80065b4:	18fc      	adds	r4, r7, r3
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	0018      	movs	r0, r3
 80065ba:	f7ff fe7b 	bl	80062b4 <ADC_Disable>
 80065be:	0003      	movs	r3, r0
 80065c0:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	0018      	movs	r0, r3
 80065c8:	f7ff ffa6 	bl	8006518 <LL_ADC_IsEnabled>
 80065cc:	1e03      	subs	r3, r0, #0
 80065ce:	d000      	beq.n	80065d2 <HAL_ADCEx_Calibration_Start+0x46>
 80065d0:	e099      	b.n	8006706 <HAL_ADCEx_Calibration_Start+0x17a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065d6:	4a54      	ldr	r2, [pc, #336]	; (8006728 <HAL_ADCEx_Calibration_Start+0x19c>)
 80065d8:	4013      	ands	r3, r2
 80065da:	2202      	movs	r2, #2
 80065dc:	431a      	orrs	r2, r3
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	4a50      	ldr	r2, [pc, #320]	; (800672c <HAL_ADCEx_Calibration_Start+0x1a0>)
 80065ea:	4013      	ands	r3, r2
 80065ec:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	68da      	ldr	r2, [r3, #12]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	494d      	ldr	r1, [pc, #308]	; (8006730 <HAL_ADCEx_Calibration_Start+0x1a4>)
 80065fa:	400a      	ands	r2, r1
 80065fc:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80065fe:	2300      	movs	r3, #0
 8006600:	61fb      	str	r3, [r7, #28]
 8006602:	e02d      	b.n	8006660 <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	0018      	movs	r0, r3
 800660a:	f7ff ff97 	bl	800653c <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800660e:	e014      	b.n	800663a <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	3301      	adds	r3, #1
 8006614:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	4a46      	ldr	r2, [pc, #280]	; (8006734 <HAL_ADCEx_Calibration_Start+0x1a8>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d90d      	bls.n	800663a <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006622:	2212      	movs	r2, #18
 8006624:	4393      	bics	r3, r2
 8006626:	2210      	movs	r2, #16
 8006628:	431a      	orrs	r2, r3
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2254      	movs	r2, #84	; 0x54
 8006632:	2100      	movs	r1, #0
 8006634:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	e072      	b.n	8006720 <HAL_ADCEx_Calibration_Start+0x194>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	0018      	movs	r0, r3
 8006640:	f7ff ff90 	bl	8006564 <LL_ADC_IsCalibrationOnGoing>
 8006644:	1e03      	subs	r3, r0, #0
 8006646:	d1e3      	bne.n	8006610 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	0018      	movs	r0, r3
 800664e:	f7ff ff31 	bl	80064b4 <LL_ADC_GetCalibrationFactor>
 8006652:	0002      	movs	r2, r0
 8006654:	69bb      	ldr	r3, [r7, #24]
 8006656:	189b      	adds	r3, r3, r2
 8006658:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800665a:	69fb      	ldr	r3, [r7, #28]
 800665c:	3301      	adds	r3, #1
 800665e:	61fb      	str	r3, [r7, #28]
 8006660:	69fb      	ldr	r3, [r7, #28]
 8006662:	2b07      	cmp	r3, #7
 8006664:	d9ce      	bls.n	8006604 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8006666:	69f9      	ldr	r1, [r7, #28]
 8006668:	69b8      	ldr	r0, [r7, #24]
 800666a:	f7f9 fd5b 	bl	8000124 <__udivsi3>
 800666e:	0003      	movs	r3, r0
 8006670:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	0018      	movs	r0, r3
 8006678:	f7ff ff2a 	bl	80064d0 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	69ba      	ldr	r2, [r7, #24]
 8006682:	0011      	movs	r1, r2
 8006684:	0018      	movs	r0, r3
 8006686:	f7ff ff01 	bl	800648c <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	0018      	movs	r0, r3
 8006690:	f7ff ff30 	bl	80064f4 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006694:	f7fe fea2 	bl	80053dc <HAL_GetTick>
 8006698:	0003      	movs	r3, r0
 800669a:	60fb      	str	r3, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800669c:	e01b      	b.n	80066d6 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800669e:	f7fe fe9d 	bl	80053dc <HAL_GetTick>
 80066a2:	0002      	movs	r2, r0
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	1ad3      	subs	r3, r2, r3
 80066a8:	2b02      	cmp	r3, #2
 80066aa:	d914      	bls.n	80066d6 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	0018      	movs	r0, r3
 80066b2:	f7ff ff31 	bl	8006518 <LL_ADC_IsEnabled>
 80066b6:	1e03      	subs	r3, r0, #0
 80066b8:	d00d      	beq.n	80066d6 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066be:	2210      	movs	r2, #16
 80066c0:	431a      	orrs	r2, r3
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066ca:	2201      	movs	r2, #1
 80066cc:	431a      	orrs	r2, r3
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	e024      	b.n	8006720 <HAL_ADCEx_Calibration_Start+0x194>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	0018      	movs	r0, r3
 80066dc:	f7ff ff1c 	bl	8006518 <LL_ADC_IsEnabled>
 80066e0:	1e03      	subs	r3, r0, #0
 80066e2:	d1dc      	bne.n	800669e <HAL_ADCEx_Calibration_Start+0x112>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	68d9      	ldr	r1, [r3, #12]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	693a      	ldr	r2, [r7, #16]
 80066f0:	430a      	orrs	r2, r1
 80066f2:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066f8:	2203      	movs	r2, #3
 80066fa:	4393      	bics	r3, r2
 80066fc:	2201      	movs	r2, #1
 80066fe:	431a      	orrs	r2, r3
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	659a      	str	r2, [r3, #88]	; 0x58
 8006704:	e005      	b.n	8006712 <HAL_ADCEx_Calibration_Start+0x186>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800670a:	2210      	movs	r2, #16
 800670c:	431a      	orrs	r2, r3
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2254      	movs	r2, #84	; 0x54
 8006716:	2100      	movs	r1, #0
 8006718:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 800671a:	2317      	movs	r3, #23
 800671c:	18fb      	adds	r3, r7, r3
 800671e:	781b      	ldrb	r3, [r3, #0]
}
 8006720:	0018      	movs	r0, r3
 8006722:	46bd      	mov	sp, r7
 8006724:	b009      	add	sp, #36	; 0x24
 8006726:	bd90      	pop	{r4, r7, pc}
 8006728:	fffffefd 	.word	0xfffffefd
 800672c:	00008003 	.word	0x00008003
 8006730:	ffff7ffc 	.word	0xffff7ffc
 8006734:	0002f1ff 	.word	0x0002f1ff

08006738 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b082      	sub	sp, #8
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8006740:	46c0      	nop			; (mov r8, r8)
 8006742:	46bd      	mov	sp, r7
 8006744:	b002      	add	sp, #8
 8006746:	bd80      	pop	{r7, pc}

08006748 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b082      	sub	sp, #8
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8006750:	46c0      	nop			; (mov r8, r8)
 8006752:	46bd      	mov	sp, r7
 8006754:	b002      	add	sp, #8
 8006756:	bd80      	pop	{r7, pc}

08006758 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b082      	sub	sp, #8
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8006760:	46c0      	nop			; (mov r8, r8)
 8006762:	46bd      	mov	sp, r7
 8006764:	b002      	add	sp, #8
 8006766:	bd80      	pop	{r7, pc}

08006768 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b082      	sub	sp, #8
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 8006770:	46c0      	nop			; (mov r8, r8)
 8006772:	46bd      	mov	sp, r7
 8006774:	b002      	add	sp, #8
 8006776:	bd80      	pop	{r7, pc}

08006778 <__NVIC_EnableIRQ>:
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b082      	sub	sp, #8
 800677c:	af00      	add	r7, sp, #0
 800677e:	0002      	movs	r2, r0
 8006780:	1dfb      	adds	r3, r7, #7
 8006782:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006784:	1dfb      	adds	r3, r7, #7
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	2b7f      	cmp	r3, #127	; 0x7f
 800678a:	d809      	bhi.n	80067a0 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800678c:	1dfb      	adds	r3, r7, #7
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	001a      	movs	r2, r3
 8006792:	231f      	movs	r3, #31
 8006794:	401a      	ands	r2, r3
 8006796:	4b04      	ldr	r3, [pc, #16]	; (80067a8 <__NVIC_EnableIRQ+0x30>)
 8006798:	2101      	movs	r1, #1
 800679a:	4091      	lsls	r1, r2
 800679c:	000a      	movs	r2, r1
 800679e:	601a      	str	r2, [r3, #0]
}
 80067a0:	46c0      	nop			; (mov r8, r8)
 80067a2:	46bd      	mov	sp, r7
 80067a4:	b002      	add	sp, #8
 80067a6:	bd80      	pop	{r7, pc}
 80067a8:	e000e100 	.word	0xe000e100

080067ac <__NVIC_SetPriority>:
{
 80067ac:	b590      	push	{r4, r7, lr}
 80067ae:	b083      	sub	sp, #12
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	0002      	movs	r2, r0
 80067b4:	6039      	str	r1, [r7, #0]
 80067b6:	1dfb      	adds	r3, r7, #7
 80067b8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80067ba:	1dfb      	adds	r3, r7, #7
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	2b7f      	cmp	r3, #127	; 0x7f
 80067c0:	d828      	bhi.n	8006814 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80067c2:	4a2f      	ldr	r2, [pc, #188]	; (8006880 <__NVIC_SetPriority+0xd4>)
 80067c4:	1dfb      	adds	r3, r7, #7
 80067c6:	781b      	ldrb	r3, [r3, #0]
 80067c8:	b25b      	sxtb	r3, r3
 80067ca:	089b      	lsrs	r3, r3, #2
 80067cc:	33c0      	adds	r3, #192	; 0xc0
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	589b      	ldr	r3, [r3, r2]
 80067d2:	1dfa      	adds	r2, r7, #7
 80067d4:	7812      	ldrb	r2, [r2, #0]
 80067d6:	0011      	movs	r1, r2
 80067d8:	2203      	movs	r2, #3
 80067da:	400a      	ands	r2, r1
 80067dc:	00d2      	lsls	r2, r2, #3
 80067de:	21ff      	movs	r1, #255	; 0xff
 80067e0:	4091      	lsls	r1, r2
 80067e2:	000a      	movs	r2, r1
 80067e4:	43d2      	mvns	r2, r2
 80067e6:	401a      	ands	r2, r3
 80067e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	019b      	lsls	r3, r3, #6
 80067ee:	22ff      	movs	r2, #255	; 0xff
 80067f0:	401a      	ands	r2, r3
 80067f2:	1dfb      	adds	r3, r7, #7
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	0018      	movs	r0, r3
 80067f8:	2303      	movs	r3, #3
 80067fa:	4003      	ands	r3, r0
 80067fc:	00db      	lsls	r3, r3, #3
 80067fe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006800:	481f      	ldr	r0, [pc, #124]	; (8006880 <__NVIC_SetPriority+0xd4>)
 8006802:	1dfb      	adds	r3, r7, #7
 8006804:	781b      	ldrb	r3, [r3, #0]
 8006806:	b25b      	sxtb	r3, r3
 8006808:	089b      	lsrs	r3, r3, #2
 800680a:	430a      	orrs	r2, r1
 800680c:	33c0      	adds	r3, #192	; 0xc0
 800680e:	009b      	lsls	r3, r3, #2
 8006810:	501a      	str	r2, [r3, r0]
}
 8006812:	e031      	b.n	8006878 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006814:	4a1b      	ldr	r2, [pc, #108]	; (8006884 <__NVIC_SetPriority+0xd8>)
 8006816:	1dfb      	adds	r3, r7, #7
 8006818:	781b      	ldrb	r3, [r3, #0]
 800681a:	0019      	movs	r1, r3
 800681c:	230f      	movs	r3, #15
 800681e:	400b      	ands	r3, r1
 8006820:	3b08      	subs	r3, #8
 8006822:	089b      	lsrs	r3, r3, #2
 8006824:	3306      	adds	r3, #6
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	18d3      	adds	r3, r2, r3
 800682a:	3304      	adds	r3, #4
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	1dfa      	adds	r2, r7, #7
 8006830:	7812      	ldrb	r2, [r2, #0]
 8006832:	0011      	movs	r1, r2
 8006834:	2203      	movs	r2, #3
 8006836:	400a      	ands	r2, r1
 8006838:	00d2      	lsls	r2, r2, #3
 800683a:	21ff      	movs	r1, #255	; 0xff
 800683c:	4091      	lsls	r1, r2
 800683e:	000a      	movs	r2, r1
 8006840:	43d2      	mvns	r2, r2
 8006842:	401a      	ands	r2, r3
 8006844:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	019b      	lsls	r3, r3, #6
 800684a:	22ff      	movs	r2, #255	; 0xff
 800684c:	401a      	ands	r2, r3
 800684e:	1dfb      	adds	r3, r7, #7
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	0018      	movs	r0, r3
 8006854:	2303      	movs	r3, #3
 8006856:	4003      	ands	r3, r0
 8006858:	00db      	lsls	r3, r3, #3
 800685a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800685c:	4809      	ldr	r0, [pc, #36]	; (8006884 <__NVIC_SetPriority+0xd8>)
 800685e:	1dfb      	adds	r3, r7, #7
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	001c      	movs	r4, r3
 8006864:	230f      	movs	r3, #15
 8006866:	4023      	ands	r3, r4
 8006868:	3b08      	subs	r3, #8
 800686a:	089b      	lsrs	r3, r3, #2
 800686c:	430a      	orrs	r2, r1
 800686e:	3306      	adds	r3, #6
 8006870:	009b      	lsls	r3, r3, #2
 8006872:	18c3      	adds	r3, r0, r3
 8006874:	3304      	adds	r3, #4
 8006876:	601a      	str	r2, [r3, #0]
}
 8006878:	46c0      	nop			; (mov r8, r8)
 800687a:	46bd      	mov	sp, r7
 800687c:	b003      	add	sp, #12
 800687e:	bd90      	pop	{r4, r7, pc}
 8006880:	e000e100 	.word	0xe000e100
 8006884:	e000ed00 	.word	0xe000ed00

08006888 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	1e5a      	subs	r2, r3, #1
 8006894:	2380      	movs	r3, #128	; 0x80
 8006896:	045b      	lsls	r3, r3, #17
 8006898:	429a      	cmp	r2, r3
 800689a:	d301      	bcc.n	80068a0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800689c:	2301      	movs	r3, #1
 800689e:	e010      	b.n	80068c2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80068a0:	4b0a      	ldr	r3, [pc, #40]	; (80068cc <SysTick_Config+0x44>)
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	3a01      	subs	r2, #1
 80068a6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80068a8:	2301      	movs	r3, #1
 80068aa:	425b      	negs	r3, r3
 80068ac:	2103      	movs	r1, #3
 80068ae:	0018      	movs	r0, r3
 80068b0:	f7ff ff7c 	bl	80067ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80068b4:	4b05      	ldr	r3, [pc, #20]	; (80068cc <SysTick_Config+0x44>)
 80068b6:	2200      	movs	r2, #0
 80068b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80068ba:	4b04      	ldr	r3, [pc, #16]	; (80068cc <SysTick_Config+0x44>)
 80068bc:	2207      	movs	r2, #7
 80068be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	0018      	movs	r0, r3
 80068c4:	46bd      	mov	sp, r7
 80068c6:	b002      	add	sp, #8
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	46c0      	nop			; (mov r8, r8)
 80068cc:	e000e010 	.word	0xe000e010

080068d0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b084      	sub	sp, #16
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	60b9      	str	r1, [r7, #8]
 80068d8:	607a      	str	r2, [r7, #4]
 80068da:	210f      	movs	r1, #15
 80068dc:	187b      	adds	r3, r7, r1
 80068de:	1c02      	adds	r2, r0, #0
 80068e0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80068e2:	68ba      	ldr	r2, [r7, #8]
 80068e4:	187b      	adds	r3, r7, r1
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	b25b      	sxtb	r3, r3
 80068ea:	0011      	movs	r1, r2
 80068ec:	0018      	movs	r0, r3
 80068ee:	f7ff ff5d 	bl	80067ac <__NVIC_SetPriority>
}
 80068f2:	46c0      	nop			; (mov r8, r8)
 80068f4:	46bd      	mov	sp, r7
 80068f6:	b004      	add	sp, #16
 80068f8:	bd80      	pop	{r7, pc}

080068fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80068fa:	b580      	push	{r7, lr}
 80068fc:	b082      	sub	sp, #8
 80068fe:	af00      	add	r7, sp, #0
 8006900:	0002      	movs	r2, r0
 8006902:	1dfb      	adds	r3, r7, #7
 8006904:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006906:	1dfb      	adds	r3, r7, #7
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	b25b      	sxtb	r3, r3
 800690c:	0018      	movs	r0, r3
 800690e:	f7ff ff33 	bl	8006778 <__NVIC_EnableIRQ>
}
 8006912:	46c0      	nop			; (mov r8, r8)
 8006914:	46bd      	mov	sp, r7
 8006916:	b002      	add	sp, #8
 8006918:	bd80      	pop	{r7, pc}

0800691a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800691a:	b580      	push	{r7, lr}
 800691c:	b082      	sub	sp, #8
 800691e:	af00      	add	r7, sp, #0
 8006920:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	0018      	movs	r0, r3
 8006926:	f7ff ffaf 	bl	8006888 <SysTick_Config>
 800692a:	0003      	movs	r3, r0
}
 800692c:	0018      	movs	r0, r3
 800692e:	46bd      	mov	sp, r7
 8006930:	b002      	add	sp, #8
 8006932:	bd80      	pop	{r7, pc}

08006934 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8006938:	f7fb ffce 	bl	80028d8 <HAL_SYSTICK_Callback>
}
 800693c:	46c0      	nop			; (mov r8, r8)
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
	...

08006944 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b082      	sub	sp, #8
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d101      	bne.n	8006956 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006952:	2301      	movs	r3, #1
 8006954:	e077      	b.n	8006a46 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a3d      	ldr	r2, [pc, #244]	; (8006a50 <HAL_DMA_Init+0x10c>)
 800695c:	4694      	mov	ip, r2
 800695e:	4463      	add	r3, ip
 8006960:	2114      	movs	r1, #20
 8006962:	0018      	movs	r0, r3
 8006964:	f7f9 fbde 	bl	8000124 <__udivsi3>
 8006968:	0003      	movs	r3, r0
 800696a:	009a      	lsls	r2, r3, #2
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2225      	movs	r2, #37	; 0x25
 8006974:	2102      	movs	r1, #2
 8006976:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4934      	ldr	r1, [pc, #208]	; (8006a54 <HAL_DMA_Init+0x110>)
 8006984:	400a      	ands	r2, r1
 8006986:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	6819      	ldr	r1, [r3, #0]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	689a      	ldr	r2, [r3, #8]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	68db      	ldr	r3, [r3, #12]
 8006996:	431a      	orrs	r2, r3
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	691b      	ldr	r3, [r3, #16]
 800699c:	431a      	orrs	r2, r3
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	695b      	ldr	r3, [r3, #20]
 80069a2:	431a      	orrs	r2, r3
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	699b      	ldr	r3, [r3, #24]
 80069a8:	431a      	orrs	r2, r3
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	69db      	ldr	r3, [r3, #28]
 80069ae:	431a      	orrs	r2, r3
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6a1b      	ldr	r3, [r3, #32]
 80069b4:	431a      	orrs	r2, r3
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	430a      	orrs	r2, r1
 80069bc:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	0018      	movs	r0, r3
 80069c2:	f000 fa8d 	bl	8006ee0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	689a      	ldr	r2, [r3, #8]
 80069ca:	2380      	movs	r3, #128	; 0x80
 80069cc:	01db      	lsls	r3, r3, #7
 80069ce:	429a      	cmp	r2, r3
 80069d0:	d102      	bne.n	80069d8 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	685a      	ldr	r2, [r3, #4]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069e0:	213f      	movs	r1, #63	; 0x3f
 80069e2:	400a      	ands	r2, r1
 80069e4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80069ee:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d011      	beq.n	8006a1c <HAL_DMA_Init+0xd8>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	2b04      	cmp	r3, #4
 80069fe:	d80d      	bhi.n	8006a1c <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	0018      	movs	r0, r3
 8006a04:	f000 fa98 	bl	8006f38 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006a18:	605a      	str	r2, [r3, #4]
 8006a1a:	e008      	b.n	8006a2e <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2200      	movs	r2, #0
 8006a26:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2200      	movs	r2, #0
 8006a32:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2225      	movs	r2, #37	; 0x25
 8006a38:	2101      	movs	r1, #1
 8006a3a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2224      	movs	r2, #36	; 0x24
 8006a40:	2100      	movs	r1, #0
 8006a42:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006a44:	2300      	movs	r3, #0
}
 8006a46:	0018      	movs	r0, r3
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	b002      	add	sp, #8
 8006a4c:	bd80      	pop	{r7, pc}
 8006a4e:	46c0      	nop			; (mov r8, r8)
 8006a50:	bffdfff8 	.word	0xbffdfff8
 8006a54:	ffff800f 	.word	0xffff800f

08006a58 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b086      	sub	sp, #24
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	60f8      	str	r0, [r7, #12]
 8006a60:	60b9      	str	r1, [r7, #8]
 8006a62:	607a      	str	r2, [r7, #4]
 8006a64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a66:	2317      	movs	r3, #23
 8006a68:	18fb      	adds	r3, r7, r3
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2224      	movs	r2, #36	; 0x24
 8006a72:	5c9b      	ldrb	r3, [r3, r2]
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d101      	bne.n	8006a7c <HAL_DMA_Start_IT+0x24>
 8006a78:	2302      	movs	r3, #2
 8006a7a:	e06f      	b.n	8006b5c <HAL_DMA_Start_IT+0x104>
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2224      	movs	r2, #36	; 0x24
 8006a80:	2101      	movs	r1, #1
 8006a82:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2225      	movs	r2, #37	; 0x25
 8006a88:	5c9b      	ldrb	r3, [r3, r2]
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d157      	bne.n	8006b40 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2225      	movs	r2, #37	; 0x25
 8006a94:	2102      	movs	r1, #2
 8006a96:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	681a      	ldr	r2, [r3, #0]
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	2101      	movs	r1, #1
 8006aaa:	438a      	bics	r2, r1
 8006aac:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	687a      	ldr	r2, [r7, #4]
 8006ab2:	68b9      	ldr	r1, [r7, #8]
 8006ab4:	68f8      	ldr	r0, [r7, #12]
 8006ab6:	f000 f9d3 	bl	8006e60 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d008      	beq.n	8006ad4 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	210e      	movs	r1, #14
 8006ace:	430a      	orrs	r2, r1
 8006ad0:	601a      	str	r2, [r3, #0]
 8006ad2:	e00f      	b.n	8006af4 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	2104      	movs	r1, #4
 8006ae0:	438a      	bics	r2, r1
 8006ae2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	681a      	ldr	r2, [r3, #0]
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	210a      	movs	r1, #10
 8006af0:	430a      	orrs	r2, r1
 8006af2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006af8:	681a      	ldr	r2, [r3, #0]
 8006afa:	2380      	movs	r3, #128	; 0x80
 8006afc:	025b      	lsls	r3, r3, #9
 8006afe:	4013      	ands	r3, r2
 8006b00:	d008      	beq.n	8006b14 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b06:	681a      	ldr	r2, [r3, #0]
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b0c:	2180      	movs	r1, #128	; 0x80
 8006b0e:	0049      	lsls	r1, r1, #1
 8006b10:	430a      	orrs	r2, r1
 8006b12:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d008      	beq.n	8006b2e <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b26:	2180      	movs	r1, #128	; 0x80
 8006b28:	0049      	lsls	r1, r1, #1
 8006b2a:	430a      	orrs	r2, r1
 8006b2c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	681a      	ldr	r2, [r3, #0]
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	2101      	movs	r1, #1
 8006b3a:	430a      	orrs	r2, r1
 8006b3c:	601a      	str	r2, [r3, #0]
 8006b3e:	e00a      	b.n	8006b56 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2280      	movs	r2, #128	; 0x80
 8006b44:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2224      	movs	r2, #36	; 0x24
 8006b4a:	2100      	movs	r1, #0
 8006b4c:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8006b4e:	2317      	movs	r3, #23
 8006b50:	18fb      	adds	r3, r7, r3
 8006b52:	2201      	movs	r2, #1
 8006b54:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8006b56:	2317      	movs	r3, #23
 8006b58:	18fb      	adds	r3, r7, r3
 8006b5a:	781b      	ldrb	r3, [r3, #0]
}
 8006b5c:	0018      	movs	r0, r3
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	b006      	add	sp, #24
 8006b62:	bd80      	pop	{r7, pc}

08006b64 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b082      	sub	sp, #8
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d101      	bne.n	8006b76 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8006b72:	2301      	movs	r3, #1
 8006b74:	e050      	b.n	8006c18 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2225      	movs	r2, #37	; 0x25
 8006b7a:	5c9b      	ldrb	r3, [r3, r2]
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	2b02      	cmp	r3, #2
 8006b80:	d008      	beq.n	8006b94 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2204      	movs	r2, #4
 8006b86:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2224      	movs	r2, #36	; 0x24
 8006b8c:	2100      	movs	r1, #0
 8006b8e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8006b90:	2301      	movs	r3, #1
 8006b92:	e041      	b.n	8006c18 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	210e      	movs	r1, #14
 8006ba0:	438a      	bics	r2, r1
 8006ba2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ba8:	681a      	ldr	r2, [r3, #0]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bae:	491c      	ldr	r1, [pc, #112]	; (8006c20 <HAL_DMA_Abort+0xbc>)
 8006bb0:	400a      	ands	r2, r1
 8006bb2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	2101      	movs	r1, #1
 8006bc0:	438a      	bics	r2, r1
 8006bc2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8006bc4:	4b17      	ldr	r3, [pc, #92]	; (8006c24 <HAL_DMA_Abort+0xc0>)
 8006bc6:	6859      	ldr	r1, [r3, #4]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bcc:	221c      	movs	r2, #28
 8006bce:	4013      	ands	r3, r2
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	409a      	lsls	r2, r3
 8006bd4:	4b13      	ldr	r3, [pc, #76]	; (8006c24 <HAL_DMA_Abort+0xc0>)
 8006bd6:	430a      	orrs	r2, r1
 8006bd8:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006be2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d00c      	beq.n	8006c06 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bf0:	681a      	ldr	r2, [r3, #0]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bf6:	490a      	ldr	r1, [pc, #40]	; (8006c20 <HAL_DMA_Abort+0xbc>)
 8006bf8:	400a      	ands	r2, r1
 8006bfa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006c04:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2225      	movs	r2, #37	; 0x25
 8006c0a:	2101      	movs	r1, #1
 8006c0c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2224      	movs	r2, #36	; 0x24
 8006c12:	2100      	movs	r1, #0
 8006c14:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8006c16:	2300      	movs	r3, #0
}
 8006c18:	0018      	movs	r0, r3
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	b002      	add	sp, #8
 8006c1e:	bd80      	pop	{r7, pc}
 8006c20:	fffffeff 	.word	0xfffffeff
 8006c24:	40020000 	.word	0x40020000

08006c28 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b084      	sub	sp, #16
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c30:	210f      	movs	r1, #15
 8006c32:	187b      	adds	r3, r7, r1
 8006c34:	2200      	movs	r2, #0
 8006c36:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2225      	movs	r2, #37	; 0x25
 8006c3c:	5c9b      	ldrb	r3, [r3, r2]
 8006c3e:	b2db      	uxtb	r3, r3
 8006c40:	2b02      	cmp	r3, #2
 8006c42:	d006      	beq.n	8006c52 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2204      	movs	r2, #4
 8006c48:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8006c4a:	187b      	adds	r3, r7, r1
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	701a      	strb	r2, [r3, #0]
 8006c50:	e049      	b.n	8006ce6 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	210e      	movs	r1, #14
 8006c5e:	438a      	bics	r2, r1
 8006c60:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	2101      	movs	r1, #1
 8006c6e:	438a      	bics	r2, r1
 8006c70:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c7c:	491d      	ldr	r1, [pc, #116]	; (8006cf4 <HAL_DMA_Abort_IT+0xcc>)
 8006c7e:	400a      	ands	r2, r1
 8006c80:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8006c82:	4b1d      	ldr	r3, [pc, #116]	; (8006cf8 <HAL_DMA_Abort_IT+0xd0>)
 8006c84:	6859      	ldr	r1, [r3, #4]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c8a:	221c      	movs	r2, #28
 8006c8c:	4013      	ands	r3, r2
 8006c8e:	2201      	movs	r2, #1
 8006c90:	409a      	lsls	r2, r3
 8006c92:	4b19      	ldr	r3, [pc, #100]	; (8006cf8 <HAL_DMA_Abort_IT+0xd0>)
 8006c94:	430a      	orrs	r2, r1
 8006c96:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c9c:	687a      	ldr	r2, [r7, #4]
 8006c9e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006ca0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d00c      	beq.n	8006cc4 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cae:	681a      	ldr	r2, [r3, #0]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cb4:	490f      	ldr	r1, [pc, #60]	; (8006cf4 <HAL_DMA_Abort_IT+0xcc>)
 8006cb6:	400a      	ands	r2, r1
 8006cb8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006cc2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2225      	movs	r2, #37	; 0x25
 8006cc8:	2101      	movs	r1, #1
 8006cca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2224      	movs	r2, #36	; 0x24
 8006cd0:	2100      	movs	r1, #0
 8006cd2:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d004      	beq.n	8006ce6 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ce0:	687a      	ldr	r2, [r7, #4]
 8006ce2:	0010      	movs	r0, r2
 8006ce4:	4798      	blx	r3
    }
  }
  return status;
 8006ce6:	230f      	movs	r3, #15
 8006ce8:	18fb      	adds	r3, r7, r3
 8006cea:	781b      	ldrb	r3, [r3, #0]
}
 8006cec:	0018      	movs	r0, r3
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	b004      	add	sp, #16
 8006cf2:	bd80      	pop	{r7, pc}
 8006cf4:	fffffeff 	.word	0xfffffeff
 8006cf8:	40020000 	.word	0x40020000

08006cfc <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b084      	sub	sp, #16
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8006d04:	4b55      	ldr	r3, [pc, #340]	; (8006e5c <HAL_DMA_IRQHandler+0x160>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d16:	221c      	movs	r2, #28
 8006d18:	4013      	ands	r3, r2
 8006d1a:	2204      	movs	r2, #4
 8006d1c:	409a      	lsls	r2, r3
 8006d1e:	0013      	movs	r3, r2
 8006d20:	68fa      	ldr	r2, [r7, #12]
 8006d22:	4013      	ands	r3, r2
 8006d24:	d027      	beq.n	8006d76 <HAL_DMA_IRQHandler+0x7a>
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	2204      	movs	r2, #4
 8006d2a:	4013      	ands	r3, r2
 8006d2c:	d023      	beq.n	8006d76 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	2220      	movs	r2, #32
 8006d36:	4013      	ands	r3, r2
 8006d38:	d107      	bne.n	8006d4a <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	2104      	movs	r1, #4
 8006d46:	438a      	bics	r2, r1
 8006d48:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8006d4a:	4b44      	ldr	r3, [pc, #272]	; (8006e5c <HAL_DMA_IRQHandler+0x160>)
 8006d4c:	6859      	ldr	r1, [r3, #4]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d52:	221c      	movs	r2, #28
 8006d54:	4013      	ands	r3, r2
 8006d56:	2204      	movs	r2, #4
 8006d58:	409a      	lsls	r2, r3
 8006d5a:	4b40      	ldr	r3, [pc, #256]	; (8006e5c <HAL_DMA_IRQHandler+0x160>)
 8006d5c:	430a      	orrs	r2, r1
 8006d5e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d100      	bne.n	8006d6a <HAL_DMA_IRQHandler+0x6e>
 8006d68:	e073      	b.n	8006e52 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	0010      	movs	r0, r2
 8006d72:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8006d74:	e06d      	b.n	8006e52 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d7a:	221c      	movs	r2, #28
 8006d7c:	4013      	ands	r3, r2
 8006d7e:	2202      	movs	r2, #2
 8006d80:	409a      	lsls	r2, r3
 8006d82:	0013      	movs	r3, r2
 8006d84:	68fa      	ldr	r2, [r7, #12]
 8006d86:	4013      	ands	r3, r2
 8006d88:	d02e      	beq.n	8006de8 <HAL_DMA_IRQHandler+0xec>
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	2202      	movs	r2, #2
 8006d8e:	4013      	ands	r3, r2
 8006d90:	d02a      	beq.n	8006de8 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	2220      	movs	r2, #32
 8006d9a:	4013      	ands	r3, r2
 8006d9c:	d10b      	bne.n	8006db6 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	681a      	ldr	r2, [r3, #0]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	210a      	movs	r1, #10
 8006daa:	438a      	bics	r2, r1
 8006dac:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2225      	movs	r2, #37	; 0x25
 8006db2:	2101      	movs	r1, #1
 8006db4:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8006db6:	4b29      	ldr	r3, [pc, #164]	; (8006e5c <HAL_DMA_IRQHandler+0x160>)
 8006db8:	6859      	ldr	r1, [r3, #4]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dbe:	221c      	movs	r2, #28
 8006dc0:	4013      	ands	r3, r2
 8006dc2:	2202      	movs	r2, #2
 8006dc4:	409a      	lsls	r2, r3
 8006dc6:	4b25      	ldr	r3, [pc, #148]	; (8006e5c <HAL_DMA_IRQHandler+0x160>)
 8006dc8:	430a      	orrs	r2, r1
 8006dca:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2224      	movs	r2, #36	; 0x24
 8006dd0:	2100      	movs	r1, #0
 8006dd2:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d03a      	beq.n	8006e52 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	0010      	movs	r0, r2
 8006de4:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8006de6:	e034      	b.n	8006e52 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dec:	221c      	movs	r2, #28
 8006dee:	4013      	ands	r3, r2
 8006df0:	2208      	movs	r2, #8
 8006df2:	409a      	lsls	r2, r3
 8006df4:	0013      	movs	r3, r2
 8006df6:	68fa      	ldr	r2, [r7, #12]
 8006df8:	4013      	ands	r3, r2
 8006dfa:	d02b      	beq.n	8006e54 <HAL_DMA_IRQHandler+0x158>
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	2208      	movs	r2, #8
 8006e00:	4013      	ands	r3, r2
 8006e02:	d027      	beq.n	8006e54 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	681a      	ldr	r2, [r3, #0]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	210e      	movs	r1, #14
 8006e10:	438a      	bics	r2, r1
 8006e12:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8006e14:	4b11      	ldr	r3, [pc, #68]	; (8006e5c <HAL_DMA_IRQHandler+0x160>)
 8006e16:	6859      	ldr	r1, [r3, #4]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e1c:	221c      	movs	r2, #28
 8006e1e:	4013      	ands	r3, r2
 8006e20:	2201      	movs	r2, #1
 8006e22:	409a      	lsls	r2, r3
 8006e24:	4b0d      	ldr	r3, [pc, #52]	; (8006e5c <HAL_DMA_IRQHandler+0x160>)
 8006e26:	430a      	orrs	r2, r1
 8006e28:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2225      	movs	r2, #37	; 0x25
 8006e34:	2101      	movs	r1, #1
 8006e36:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2224      	movs	r2, #36	; 0x24
 8006e3c:	2100      	movs	r1, #0
 8006e3e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d005      	beq.n	8006e54 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	0010      	movs	r0, r2
 8006e50:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006e52:	46c0      	nop			; (mov r8, r8)
 8006e54:	46c0      	nop			; (mov r8, r8)
}
 8006e56:	46bd      	mov	sp, r7
 8006e58:	b004      	add	sp, #16
 8006e5a:	bd80      	pop	{r7, pc}
 8006e5c:	40020000 	.word	0x40020000

08006e60 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b084      	sub	sp, #16
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	60f8      	str	r0, [r7, #12]
 8006e68:	60b9      	str	r1, [r7, #8]
 8006e6a:	607a      	str	r2, [r7, #4]
 8006e6c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e72:	68fa      	ldr	r2, [r7, #12]
 8006e74:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006e76:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d004      	beq.n	8006e8a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e84:	68fa      	ldr	r2, [r7, #12]
 8006e86:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006e88:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8006e8a:	4b14      	ldr	r3, [pc, #80]	; (8006edc <DMA_SetConfig+0x7c>)
 8006e8c:	6859      	ldr	r1, [r3, #4]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e92:	221c      	movs	r2, #28
 8006e94:	4013      	ands	r3, r2
 8006e96:	2201      	movs	r2, #1
 8006e98:	409a      	lsls	r2, r3
 8006e9a:	4b10      	ldr	r3, [pc, #64]	; (8006edc <DMA_SetConfig+0x7c>)
 8006e9c:	430a      	orrs	r2, r1
 8006e9e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	683a      	ldr	r2, [r7, #0]
 8006ea6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	689b      	ldr	r3, [r3, #8]
 8006eac:	2b10      	cmp	r3, #16
 8006eae:	d108      	bne.n	8006ec2 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	687a      	ldr	r2, [r7, #4]
 8006eb6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	68ba      	ldr	r2, [r7, #8]
 8006ebe:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006ec0:	e007      	b.n	8006ed2 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	68ba      	ldr	r2, [r7, #8]
 8006ec8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	60da      	str	r2, [r3, #12]
}
 8006ed2:	46c0      	nop			; (mov r8, r8)
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	b004      	add	sp, #16
 8006ed8:	bd80      	pop	{r7, pc}
 8006eda:	46c0      	nop			; (mov r8, r8)
 8006edc:	40020000 	.word	0x40020000

08006ee0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b084      	sub	sp, #16
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eec:	089b      	lsrs	r3, r3, #2
 8006eee:	4a10      	ldr	r2, [pc, #64]	; (8006f30 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8006ef0:	4694      	mov	ip, r2
 8006ef2:	4463      	add	r3, ip
 8006ef4:	009b      	lsls	r3, r3, #2
 8006ef6:	001a      	movs	r2, r3
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	001a      	movs	r2, r3
 8006f02:	23ff      	movs	r3, #255	; 0xff
 8006f04:	4013      	ands	r3, r2
 8006f06:	3b08      	subs	r3, #8
 8006f08:	2114      	movs	r1, #20
 8006f0a:	0018      	movs	r0, r3
 8006f0c:	f7f9 f90a 	bl	8000124 <__udivsi3>
 8006f10:	0003      	movs	r3, r0
 8006f12:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	4a07      	ldr	r2, [pc, #28]	; (8006f34 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8006f18:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	221f      	movs	r2, #31
 8006f1e:	4013      	ands	r3, r2
 8006f20:	2201      	movs	r2, #1
 8006f22:	409a      	lsls	r2, r3
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8006f28:	46c0      	nop			; (mov r8, r8)
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	b004      	add	sp, #16
 8006f2e:	bd80      	pop	{r7, pc}
 8006f30:	10008200 	.word	0x10008200
 8006f34:	40020880 	.word	0x40020880

08006f38 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b084      	sub	sp, #16
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	223f      	movs	r2, #63	; 0x3f
 8006f46:	4013      	ands	r3, r2
 8006f48:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	4a0a      	ldr	r2, [pc, #40]	; (8006f78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006f4e:	4694      	mov	ip, r2
 8006f50:	4463      	add	r3, ip
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	001a      	movs	r2, r3
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	4a07      	ldr	r2, [pc, #28]	; (8006f7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006f5e:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	3b01      	subs	r3, #1
 8006f64:	2203      	movs	r2, #3
 8006f66:	4013      	ands	r3, r2
 8006f68:	2201      	movs	r2, #1
 8006f6a:	409a      	lsls	r2, r3
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	659a      	str	r2, [r3, #88]	; 0x58
}
 8006f70:	46c0      	nop			; (mov r8, r8)
 8006f72:	46bd      	mov	sp, r7
 8006f74:	b004      	add	sp, #16
 8006f76:	bd80      	pop	{r7, pc}
 8006f78:	1000823f 	.word	0x1000823f
 8006f7c:	40020940 	.word	0x40020940

08006f80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b086      	sub	sp, #24
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006f8e:	e147      	b.n	8007220 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	2101      	movs	r1, #1
 8006f96:	697a      	ldr	r2, [r7, #20]
 8006f98:	4091      	lsls	r1, r2
 8006f9a:	000a      	movs	r2, r1
 8006f9c:	4013      	ands	r3, r2
 8006f9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d100      	bne.n	8006fa8 <HAL_GPIO_Init+0x28>
 8006fa6:	e138      	b.n	800721a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	2203      	movs	r2, #3
 8006fae:	4013      	ands	r3, r2
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d005      	beq.n	8006fc0 <HAL_GPIO_Init+0x40>
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	2203      	movs	r2, #3
 8006fba:	4013      	ands	r3, r2
 8006fbc:	2b02      	cmp	r3, #2
 8006fbe:	d130      	bne.n	8007022 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	005b      	lsls	r3, r3, #1
 8006fca:	2203      	movs	r2, #3
 8006fcc:	409a      	lsls	r2, r3
 8006fce:	0013      	movs	r3, r2
 8006fd0:	43da      	mvns	r2, r3
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	4013      	ands	r3, r2
 8006fd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	68da      	ldr	r2, [r3, #12]
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	005b      	lsls	r3, r3, #1
 8006fe0:	409a      	lsls	r2, r3
 8006fe2:	0013      	movs	r3, r2
 8006fe4:	693a      	ldr	r2, [r7, #16]
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	693a      	ldr	r2, [r7, #16]
 8006fee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	409a      	lsls	r2, r3
 8006ffc:	0013      	movs	r3, r2
 8006ffe:	43da      	mvns	r2, r3
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	4013      	ands	r3, r2
 8007004:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	091b      	lsrs	r3, r3, #4
 800700c:	2201      	movs	r2, #1
 800700e:	401a      	ands	r2, r3
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	409a      	lsls	r2, r3
 8007014:	0013      	movs	r3, r2
 8007016:	693a      	ldr	r2, [r7, #16]
 8007018:	4313      	orrs	r3, r2
 800701a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	693a      	ldr	r2, [r7, #16]
 8007020:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	2203      	movs	r2, #3
 8007028:	4013      	ands	r3, r2
 800702a:	2b03      	cmp	r3, #3
 800702c:	d017      	beq.n	800705e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	68db      	ldr	r3, [r3, #12]
 8007032:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	005b      	lsls	r3, r3, #1
 8007038:	2203      	movs	r2, #3
 800703a:	409a      	lsls	r2, r3
 800703c:	0013      	movs	r3, r2
 800703e:	43da      	mvns	r2, r3
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	4013      	ands	r3, r2
 8007044:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	689a      	ldr	r2, [r3, #8]
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	005b      	lsls	r3, r3, #1
 800704e:	409a      	lsls	r2, r3
 8007050:	0013      	movs	r3, r2
 8007052:	693a      	ldr	r2, [r7, #16]
 8007054:	4313      	orrs	r3, r2
 8007056:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	693a      	ldr	r2, [r7, #16]
 800705c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	2203      	movs	r2, #3
 8007064:	4013      	ands	r3, r2
 8007066:	2b02      	cmp	r3, #2
 8007068:	d123      	bne.n	80070b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	08da      	lsrs	r2, r3, #3
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	3208      	adds	r2, #8
 8007072:	0092      	lsls	r2, r2, #2
 8007074:	58d3      	ldr	r3, [r2, r3]
 8007076:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	2207      	movs	r2, #7
 800707c:	4013      	ands	r3, r2
 800707e:	009b      	lsls	r3, r3, #2
 8007080:	220f      	movs	r2, #15
 8007082:	409a      	lsls	r2, r3
 8007084:	0013      	movs	r3, r2
 8007086:	43da      	mvns	r2, r3
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	4013      	ands	r3, r2
 800708c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	691a      	ldr	r2, [r3, #16]
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	2107      	movs	r1, #7
 8007096:	400b      	ands	r3, r1
 8007098:	009b      	lsls	r3, r3, #2
 800709a:	409a      	lsls	r2, r3
 800709c:	0013      	movs	r3, r2
 800709e:	693a      	ldr	r2, [r7, #16]
 80070a0:	4313      	orrs	r3, r2
 80070a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	08da      	lsrs	r2, r3, #3
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	3208      	adds	r2, #8
 80070ac:	0092      	lsls	r2, r2, #2
 80070ae:	6939      	ldr	r1, [r7, #16]
 80070b0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	005b      	lsls	r3, r3, #1
 80070bc:	2203      	movs	r2, #3
 80070be:	409a      	lsls	r2, r3
 80070c0:	0013      	movs	r3, r2
 80070c2:	43da      	mvns	r2, r3
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	4013      	ands	r3, r2
 80070c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	2203      	movs	r2, #3
 80070d0:	401a      	ands	r2, r3
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	005b      	lsls	r3, r3, #1
 80070d6:	409a      	lsls	r2, r3
 80070d8:	0013      	movs	r3, r2
 80070da:	693a      	ldr	r2, [r7, #16]
 80070dc:	4313      	orrs	r3, r2
 80070de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	693a      	ldr	r2, [r7, #16]
 80070e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	685a      	ldr	r2, [r3, #4]
 80070ea:	23c0      	movs	r3, #192	; 0xc0
 80070ec:	029b      	lsls	r3, r3, #10
 80070ee:	4013      	ands	r3, r2
 80070f0:	d100      	bne.n	80070f4 <HAL_GPIO_Init+0x174>
 80070f2:	e092      	b.n	800721a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80070f4:	4a50      	ldr	r2, [pc, #320]	; (8007238 <HAL_GPIO_Init+0x2b8>)
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	089b      	lsrs	r3, r3, #2
 80070fa:	3318      	adds	r3, #24
 80070fc:	009b      	lsls	r3, r3, #2
 80070fe:	589b      	ldr	r3, [r3, r2]
 8007100:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	2203      	movs	r2, #3
 8007106:	4013      	ands	r3, r2
 8007108:	00db      	lsls	r3, r3, #3
 800710a:	220f      	movs	r2, #15
 800710c:	409a      	lsls	r2, r3
 800710e:	0013      	movs	r3, r2
 8007110:	43da      	mvns	r2, r3
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	4013      	ands	r3, r2
 8007116:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8007118:	687a      	ldr	r2, [r7, #4]
 800711a:	23a0      	movs	r3, #160	; 0xa0
 800711c:	05db      	lsls	r3, r3, #23
 800711e:	429a      	cmp	r2, r3
 8007120:	d013      	beq.n	800714a <HAL_GPIO_Init+0x1ca>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	4a45      	ldr	r2, [pc, #276]	; (800723c <HAL_GPIO_Init+0x2bc>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d00d      	beq.n	8007146 <HAL_GPIO_Init+0x1c6>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	4a44      	ldr	r2, [pc, #272]	; (8007240 <HAL_GPIO_Init+0x2c0>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d007      	beq.n	8007142 <HAL_GPIO_Init+0x1c2>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	4a43      	ldr	r2, [pc, #268]	; (8007244 <HAL_GPIO_Init+0x2c4>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d101      	bne.n	800713e <HAL_GPIO_Init+0x1be>
 800713a:	2303      	movs	r3, #3
 800713c:	e006      	b.n	800714c <HAL_GPIO_Init+0x1cc>
 800713e:	2305      	movs	r3, #5
 8007140:	e004      	b.n	800714c <HAL_GPIO_Init+0x1cc>
 8007142:	2302      	movs	r3, #2
 8007144:	e002      	b.n	800714c <HAL_GPIO_Init+0x1cc>
 8007146:	2301      	movs	r3, #1
 8007148:	e000      	b.n	800714c <HAL_GPIO_Init+0x1cc>
 800714a:	2300      	movs	r3, #0
 800714c:	697a      	ldr	r2, [r7, #20]
 800714e:	2103      	movs	r1, #3
 8007150:	400a      	ands	r2, r1
 8007152:	00d2      	lsls	r2, r2, #3
 8007154:	4093      	lsls	r3, r2
 8007156:	693a      	ldr	r2, [r7, #16]
 8007158:	4313      	orrs	r3, r2
 800715a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800715c:	4936      	ldr	r1, [pc, #216]	; (8007238 <HAL_GPIO_Init+0x2b8>)
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	089b      	lsrs	r3, r3, #2
 8007162:	3318      	adds	r3, #24
 8007164:	009b      	lsls	r3, r3, #2
 8007166:	693a      	ldr	r2, [r7, #16]
 8007168:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800716a:	4b33      	ldr	r3, [pc, #204]	; (8007238 <HAL_GPIO_Init+0x2b8>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	43da      	mvns	r2, r3
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	4013      	ands	r3, r2
 8007178:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	685a      	ldr	r2, [r3, #4]
 800717e:	2380      	movs	r3, #128	; 0x80
 8007180:	035b      	lsls	r3, r3, #13
 8007182:	4013      	ands	r3, r2
 8007184:	d003      	beq.n	800718e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8007186:	693a      	ldr	r2, [r7, #16]
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	4313      	orrs	r3, r2
 800718c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800718e:	4b2a      	ldr	r3, [pc, #168]	; (8007238 <HAL_GPIO_Init+0x2b8>)
 8007190:	693a      	ldr	r2, [r7, #16]
 8007192:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8007194:	4b28      	ldr	r3, [pc, #160]	; (8007238 <HAL_GPIO_Init+0x2b8>)
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	43da      	mvns	r2, r3
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	4013      	ands	r3, r2
 80071a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	685a      	ldr	r2, [r3, #4]
 80071a8:	2380      	movs	r3, #128	; 0x80
 80071aa:	039b      	lsls	r3, r3, #14
 80071ac:	4013      	ands	r3, r2
 80071ae:	d003      	beq.n	80071b8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80071b0:	693a      	ldr	r2, [r7, #16]
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	4313      	orrs	r3, r2
 80071b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80071b8:	4b1f      	ldr	r3, [pc, #124]	; (8007238 <HAL_GPIO_Init+0x2b8>)
 80071ba:	693a      	ldr	r2, [r7, #16]
 80071bc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80071be:	4a1e      	ldr	r2, [pc, #120]	; (8007238 <HAL_GPIO_Init+0x2b8>)
 80071c0:	2384      	movs	r3, #132	; 0x84
 80071c2:	58d3      	ldr	r3, [r2, r3]
 80071c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	43da      	mvns	r2, r3
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	4013      	ands	r3, r2
 80071ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	685a      	ldr	r2, [r3, #4]
 80071d4:	2380      	movs	r3, #128	; 0x80
 80071d6:	029b      	lsls	r3, r3, #10
 80071d8:	4013      	ands	r3, r2
 80071da:	d003      	beq.n	80071e4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80071dc:	693a      	ldr	r2, [r7, #16]
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	4313      	orrs	r3, r2
 80071e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80071e4:	4914      	ldr	r1, [pc, #80]	; (8007238 <HAL_GPIO_Init+0x2b8>)
 80071e6:	2284      	movs	r2, #132	; 0x84
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80071ec:	4a12      	ldr	r2, [pc, #72]	; (8007238 <HAL_GPIO_Init+0x2b8>)
 80071ee:	2380      	movs	r3, #128	; 0x80
 80071f0:	58d3      	ldr	r3, [r2, r3]
 80071f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	43da      	mvns	r2, r3
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	4013      	ands	r3, r2
 80071fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	685a      	ldr	r2, [r3, #4]
 8007202:	2380      	movs	r3, #128	; 0x80
 8007204:	025b      	lsls	r3, r3, #9
 8007206:	4013      	ands	r3, r2
 8007208:	d003      	beq.n	8007212 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800720a:	693a      	ldr	r2, [r7, #16]
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	4313      	orrs	r3, r2
 8007210:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007212:	4909      	ldr	r1, [pc, #36]	; (8007238 <HAL_GPIO_Init+0x2b8>)
 8007214:	2280      	movs	r2, #128	; 0x80
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	3301      	adds	r3, #1
 800721e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	681a      	ldr	r2, [r3, #0]
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	40da      	lsrs	r2, r3
 8007228:	1e13      	subs	r3, r2, #0
 800722a:	d000      	beq.n	800722e <HAL_GPIO_Init+0x2ae>
 800722c:	e6b0      	b.n	8006f90 <HAL_GPIO_Init+0x10>
  }
}
 800722e:	46c0      	nop			; (mov r8, r8)
 8007230:	46c0      	nop			; (mov r8, r8)
 8007232:	46bd      	mov	sp, r7
 8007234:	b006      	add	sp, #24
 8007236:	bd80      	pop	{r7, pc}
 8007238:	40021800 	.word	0x40021800
 800723c:	50000400 	.word	0x50000400
 8007240:	50000800 	.word	0x50000800
 8007244:	50000c00 	.word	0x50000c00

08007248 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b084      	sub	sp, #16
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	000a      	movs	r2, r1
 8007252:	1cbb      	adds	r3, r7, #2
 8007254:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	691b      	ldr	r3, [r3, #16]
 800725a:	1cba      	adds	r2, r7, #2
 800725c:	8812      	ldrh	r2, [r2, #0]
 800725e:	4013      	ands	r3, r2
 8007260:	d004      	beq.n	800726c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8007262:	230f      	movs	r3, #15
 8007264:	18fb      	adds	r3, r7, r3
 8007266:	2201      	movs	r2, #1
 8007268:	701a      	strb	r2, [r3, #0]
 800726a:	e003      	b.n	8007274 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800726c:	230f      	movs	r3, #15
 800726e:	18fb      	adds	r3, r7, r3
 8007270:	2200      	movs	r2, #0
 8007272:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8007274:	230f      	movs	r3, #15
 8007276:	18fb      	adds	r3, r7, r3
 8007278:	781b      	ldrb	r3, [r3, #0]
}
 800727a:	0018      	movs	r0, r3
 800727c:	46bd      	mov	sp, r7
 800727e:	b004      	add	sp, #16
 8007280:	bd80      	pop	{r7, pc}

08007282 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007282:	b580      	push	{r7, lr}
 8007284:	b082      	sub	sp, #8
 8007286:	af00      	add	r7, sp, #0
 8007288:	6078      	str	r0, [r7, #4]
 800728a:	0008      	movs	r0, r1
 800728c:	0011      	movs	r1, r2
 800728e:	1cbb      	adds	r3, r7, #2
 8007290:	1c02      	adds	r2, r0, #0
 8007292:	801a      	strh	r2, [r3, #0]
 8007294:	1c7b      	adds	r3, r7, #1
 8007296:	1c0a      	adds	r2, r1, #0
 8007298:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800729a:	1c7b      	adds	r3, r7, #1
 800729c:	781b      	ldrb	r3, [r3, #0]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d004      	beq.n	80072ac <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80072a2:	1cbb      	adds	r3, r7, #2
 80072a4:	881a      	ldrh	r2, [r3, #0]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80072aa:	e003      	b.n	80072b4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80072ac:	1cbb      	adds	r3, r7, #2
 80072ae:	881a      	ldrh	r2, [r3, #0]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80072b4:	46c0      	nop			; (mov r8, r8)
 80072b6:	46bd      	mov	sp, r7
 80072b8:	b002      	add	sp, #8
 80072ba:	bd80      	pop	{r7, pc}

080072bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b082      	sub	sp, #8
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d101      	bne.n	80072ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80072ca:	2301      	movs	r3, #1
 80072cc:	e082      	b.n	80073d4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2241      	movs	r2, #65	; 0x41
 80072d2:	5c9b      	ldrb	r3, [r3, r2]
 80072d4:	b2db      	uxtb	r3, r3
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d107      	bne.n	80072ea <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2240      	movs	r2, #64	; 0x40
 80072de:	2100      	movs	r1, #0
 80072e0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	0018      	movs	r0, r3
 80072e6:	f7fd fc91 	bl	8004c0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2241      	movs	r2, #65	; 0x41
 80072ee:	2124      	movs	r1, #36	; 0x24
 80072f0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	681a      	ldr	r2, [r3, #0]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	2101      	movs	r1, #1
 80072fe:	438a      	bics	r2, r1
 8007300:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	685a      	ldr	r2, [r3, #4]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4934      	ldr	r1, [pc, #208]	; (80073dc <HAL_I2C_Init+0x120>)
 800730c:	400a      	ands	r2, r1
 800730e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	689a      	ldr	r2, [r3, #8]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4931      	ldr	r1, [pc, #196]	; (80073e0 <HAL_I2C_Init+0x124>)
 800731c:	400a      	ands	r2, r1
 800731e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	68db      	ldr	r3, [r3, #12]
 8007324:	2b01      	cmp	r3, #1
 8007326:	d108      	bne.n	800733a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	689a      	ldr	r2, [r3, #8]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	2180      	movs	r1, #128	; 0x80
 8007332:	0209      	lsls	r1, r1, #8
 8007334:	430a      	orrs	r2, r1
 8007336:	609a      	str	r2, [r3, #8]
 8007338:	e007      	b.n	800734a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	689a      	ldr	r2, [r3, #8]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	2184      	movs	r1, #132	; 0x84
 8007344:	0209      	lsls	r1, r1, #8
 8007346:	430a      	orrs	r2, r1
 8007348:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	68db      	ldr	r3, [r3, #12]
 800734e:	2b02      	cmp	r3, #2
 8007350:	d104      	bne.n	800735c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	2280      	movs	r2, #128	; 0x80
 8007358:	0112      	lsls	r2, r2, #4
 800735a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	685a      	ldr	r2, [r3, #4]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	491f      	ldr	r1, [pc, #124]	; (80073e4 <HAL_I2C_Init+0x128>)
 8007368:	430a      	orrs	r2, r1
 800736a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	68da      	ldr	r2, [r3, #12]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	491a      	ldr	r1, [pc, #104]	; (80073e0 <HAL_I2C_Init+0x124>)
 8007378:	400a      	ands	r2, r1
 800737a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	691a      	ldr	r2, [r3, #16]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	695b      	ldr	r3, [r3, #20]
 8007384:	431a      	orrs	r2, r3
 8007386:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	699b      	ldr	r3, [r3, #24]
 800738c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	430a      	orrs	r2, r1
 8007394:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	69d9      	ldr	r1, [r3, #28]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6a1a      	ldr	r2, [r3, #32]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	430a      	orrs	r2, r1
 80073a4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	681a      	ldr	r2, [r3, #0]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	2101      	movs	r1, #1
 80073b2:	430a      	orrs	r2, r1
 80073b4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2200      	movs	r2, #0
 80073ba:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2241      	movs	r2, #65	; 0x41
 80073c0:	2120      	movs	r1, #32
 80073c2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2200      	movs	r2, #0
 80073c8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2242      	movs	r2, #66	; 0x42
 80073ce:	2100      	movs	r1, #0
 80073d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80073d2:	2300      	movs	r3, #0
}
 80073d4:	0018      	movs	r0, r3
 80073d6:	46bd      	mov	sp, r7
 80073d8:	b002      	add	sp, #8
 80073da:	bd80      	pop	{r7, pc}
 80073dc:	f0ffffff 	.word	0xf0ffffff
 80073e0:	ffff7fff 	.word	0xffff7fff
 80073e4:	02008000 	.word	0x02008000

080073e8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80073e8:	b590      	push	{r4, r7, lr}
 80073ea:	b089      	sub	sp, #36	; 0x24
 80073ec:	af02      	add	r7, sp, #8
 80073ee:	60f8      	str	r0, [r7, #12]
 80073f0:	0008      	movs	r0, r1
 80073f2:	607a      	str	r2, [r7, #4]
 80073f4:	0019      	movs	r1, r3
 80073f6:	230a      	movs	r3, #10
 80073f8:	18fb      	adds	r3, r7, r3
 80073fa:	1c02      	adds	r2, r0, #0
 80073fc:	801a      	strh	r2, [r3, #0]
 80073fe:	2308      	movs	r3, #8
 8007400:	18fb      	adds	r3, r7, r3
 8007402:	1c0a      	adds	r2, r1, #0
 8007404:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2241      	movs	r2, #65	; 0x41
 800740a:	5c9b      	ldrb	r3, [r3, r2]
 800740c:	b2db      	uxtb	r3, r3
 800740e:	2b20      	cmp	r3, #32
 8007410:	d000      	beq.n	8007414 <HAL_I2C_Master_Transmit+0x2c>
 8007412:	e0e7      	b.n	80075e4 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2240      	movs	r2, #64	; 0x40
 8007418:	5c9b      	ldrb	r3, [r3, r2]
 800741a:	2b01      	cmp	r3, #1
 800741c:	d101      	bne.n	8007422 <HAL_I2C_Master_Transmit+0x3a>
 800741e:	2302      	movs	r3, #2
 8007420:	e0e1      	b.n	80075e6 <HAL_I2C_Master_Transmit+0x1fe>
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2240      	movs	r2, #64	; 0x40
 8007426:	2101      	movs	r1, #1
 8007428:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800742a:	f7fd ffd7 	bl	80053dc <HAL_GetTick>
 800742e:	0003      	movs	r3, r0
 8007430:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007432:	2380      	movs	r3, #128	; 0x80
 8007434:	0219      	lsls	r1, r3, #8
 8007436:	68f8      	ldr	r0, [r7, #12]
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	9300      	str	r3, [sp, #0]
 800743c:	2319      	movs	r3, #25
 800743e:	2201      	movs	r2, #1
 8007440:	f000 f8fc 	bl	800763c <I2C_WaitOnFlagUntilTimeout>
 8007444:	1e03      	subs	r3, r0, #0
 8007446:	d001      	beq.n	800744c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8007448:	2301      	movs	r3, #1
 800744a:	e0cc      	b.n	80075e6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2241      	movs	r2, #65	; 0x41
 8007450:	2121      	movs	r1, #33	; 0x21
 8007452:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	2242      	movs	r2, #66	; 0x42
 8007458:	2110      	movs	r1, #16
 800745a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2200      	movs	r2, #0
 8007460:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	687a      	ldr	r2, [r7, #4]
 8007466:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2208      	movs	r2, #8
 800746c:	18ba      	adds	r2, r7, r2
 800746e:	8812      	ldrh	r2, [r2, #0]
 8007470:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2200      	movs	r2, #0
 8007476:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800747c:	b29b      	uxth	r3, r3
 800747e:	2bff      	cmp	r3, #255	; 0xff
 8007480:	d911      	bls.n	80074a6 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	22ff      	movs	r2, #255	; 0xff
 8007486:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800748c:	b2da      	uxtb	r2, r3
 800748e:	2380      	movs	r3, #128	; 0x80
 8007490:	045c      	lsls	r4, r3, #17
 8007492:	230a      	movs	r3, #10
 8007494:	18fb      	adds	r3, r7, r3
 8007496:	8819      	ldrh	r1, [r3, #0]
 8007498:	68f8      	ldr	r0, [r7, #12]
 800749a:	4b55      	ldr	r3, [pc, #340]	; (80075f0 <HAL_I2C_Master_Transmit+0x208>)
 800749c:	9300      	str	r3, [sp, #0]
 800749e:	0023      	movs	r3, r4
 80074a0:	f000 fa92 	bl	80079c8 <I2C_TransferConfig>
 80074a4:	e075      	b.n	8007592 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074aa:	b29a      	uxth	r2, r3
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074b4:	b2da      	uxtb	r2, r3
 80074b6:	2380      	movs	r3, #128	; 0x80
 80074b8:	049c      	lsls	r4, r3, #18
 80074ba:	230a      	movs	r3, #10
 80074bc:	18fb      	adds	r3, r7, r3
 80074be:	8819      	ldrh	r1, [r3, #0]
 80074c0:	68f8      	ldr	r0, [r7, #12]
 80074c2:	4b4b      	ldr	r3, [pc, #300]	; (80075f0 <HAL_I2C_Master_Transmit+0x208>)
 80074c4:	9300      	str	r3, [sp, #0]
 80074c6:	0023      	movs	r3, r4
 80074c8:	f000 fa7e 	bl	80079c8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80074cc:	e061      	b.n	8007592 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80074ce:	697a      	ldr	r2, [r7, #20]
 80074d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	0018      	movs	r0, r3
 80074d6:	f000 f8f0 	bl	80076ba <I2C_WaitOnTXISFlagUntilTimeout>
 80074da:	1e03      	subs	r3, r0, #0
 80074dc:	d001      	beq.n	80074e2 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80074de:	2301      	movs	r3, #1
 80074e0:	e081      	b.n	80075e6 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e6:	781a      	ldrb	r2, [r3, #0]
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f2:	1c5a      	adds	r2, r3, #1
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	3b01      	subs	r3, #1
 8007500:	b29a      	uxth	r2, r3
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800750a:	3b01      	subs	r3, #1
 800750c:	b29a      	uxth	r2, r3
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007516:	b29b      	uxth	r3, r3
 8007518:	2b00      	cmp	r3, #0
 800751a:	d03a      	beq.n	8007592 <HAL_I2C_Master_Transmit+0x1aa>
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007520:	2b00      	cmp	r3, #0
 8007522:	d136      	bne.n	8007592 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007524:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007526:	68f8      	ldr	r0, [r7, #12]
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	9300      	str	r3, [sp, #0]
 800752c:	0013      	movs	r3, r2
 800752e:	2200      	movs	r2, #0
 8007530:	2180      	movs	r1, #128	; 0x80
 8007532:	f000 f883 	bl	800763c <I2C_WaitOnFlagUntilTimeout>
 8007536:	1e03      	subs	r3, r0, #0
 8007538:	d001      	beq.n	800753e <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800753a:	2301      	movs	r3, #1
 800753c:	e053      	b.n	80075e6 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007542:	b29b      	uxth	r3, r3
 8007544:	2bff      	cmp	r3, #255	; 0xff
 8007546:	d911      	bls.n	800756c <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	22ff      	movs	r2, #255	; 0xff
 800754c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007552:	b2da      	uxtb	r2, r3
 8007554:	2380      	movs	r3, #128	; 0x80
 8007556:	045c      	lsls	r4, r3, #17
 8007558:	230a      	movs	r3, #10
 800755a:	18fb      	adds	r3, r7, r3
 800755c:	8819      	ldrh	r1, [r3, #0]
 800755e:	68f8      	ldr	r0, [r7, #12]
 8007560:	2300      	movs	r3, #0
 8007562:	9300      	str	r3, [sp, #0]
 8007564:	0023      	movs	r3, r4
 8007566:	f000 fa2f 	bl	80079c8 <I2C_TransferConfig>
 800756a:	e012      	b.n	8007592 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007570:	b29a      	uxth	r2, r3
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800757a:	b2da      	uxtb	r2, r3
 800757c:	2380      	movs	r3, #128	; 0x80
 800757e:	049c      	lsls	r4, r3, #18
 8007580:	230a      	movs	r3, #10
 8007582:	18fb      	adds	r3, r7, r3
 8007584:	8819      	ldrh	r1, [r3, #0]
 8007586:	68f8      	ldr	r0, [r7, #12]
 8007588:	2300      	movs	r3, #0
 800758a:	9300      	str	r3, [sp, #0]
 800758c:	0023      	movs	r3, r4
 800758e:	f000 fa1b 	bl	80079c8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007596:	b29b      	uxth	r3, r3
 8007598:	2b00      	cmp	r3, #0
 800759a:	d198      	bne.n	80074ce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800759c:	697a      	ldr	r2, [r7, #20]
 800759e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	0018      	movs	r0, r3
 80075a4:	f000 f8c8 	bl	8007738 <I2C_WaitOnSTOPFlagUntilTimeout>
 80075a8:	1e03      	subs	r3, r0, #0
 80075aa:	d001      	beq.n	80075b0 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80075ac:	2301      	movs	r3, #1
 80075ae:	e01a      	b.n	80075e6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	2220      	movs	r2, #32
 80075b6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	685a      	ldr	r2, [r3, #4]
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	490c      	ldr	r1, [pc, #48]	; (80075f4 <HAL_I2C_Master_Transmit+0x20c>)
 80075c4:	400a      	ands	r2, r1
 80075c6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2241      	movs	r2, #65	; 0x41
 80075cc:	2120      	movs	r1, #32
 80075ce:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2242      	movs	r2, #66	; 0x42
 80075d4:	2100      	movs	r1, #0
 80075d6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2240      	movs	r2, #64	; 0x40
 80075dc:	2100      	movs	r1, #0
 80075de:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80075e0:	2300      	movs	r3, #0
 80075e2:	e000      	b.n	80075e6 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80075e4:	2302      	movs	r3, #2
  }
}
 80075e6:	0018      	movs	r0, r3
 80075e8:	46bd      	mov	sp, r7
 80075ea:	b007      	add	sp, #28
 80075ec:	bd90      	pop	{r4, r7, pc}
 80075ee:	46c0      	nop			; (mov r8, r8)
 80075f0:	80002000 	.word	0x80002000
 80075f4:	fe00e800 	.word	0xfe00e800

080075f8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b082      	sub	sp, #8
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	699b      	ldr	r3, [r3, #24]
 8007606:	2202      	movs	r2, #2
 8007608:	4013      	ands	r3, r2
 800760a:	2b02      	cmp	r3, #2
 800760c:	d103      	bne.n	8007616 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	2200      	movs	r2, #0
 8007614:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	699b      	ldr	r3, [r3, #24]
 800761c:	2201      	movs	r2, #1
 800761e:	4013      	ands	r3, r2
 8007620:	2b01      	cmp	r3, #1
 8007622:	d007      	beq.n	8007634 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	699a      	ldr	r2, [r3, #24]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	2101      	movs	r1, #1
 8007630:	430a      	orrs	r2, r1
 8007632:	619a      	str	r2, [r3, #24]
  }
}
 8007634:	46c0      	nop			; (mov r8, r8)
 8007636:	46bd      	mov	sp, r7
 8007638:	b002      	add	sp, #8
 800763a:	bd80      	pop	{r7, pc}

0800763c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b084      	sub	sp, #16
 8007640:	af00      	add	r7, sp, #0
 8007642:	60f8      	str	r0, [r7, #12]
 8007644:	60b9      	str	r1, [r7, #8]
 8007646:	603b      	str	r3, [r7, #0]
 8007648:	1dfb      	adds	r3, r7, #7
 800764a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800764c:	e021      	b.n	8007692 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	3301      	adds	r3, #1
 8007652:	d01e      	beq.n	8007692 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007654:	f7fd fec2 	bl	80053dc <HAL_GetTick>
 8007658:	0002      	movs	r2, r0
 800765a:	69bb      	ldr	r3, [r7, #24]
 800765c:	1ad3      	subs	r3, r2, r3
 800765e:	683a      	ldr	r2, [r7, #0]
 8007660:	429a      	cmp	r2, r3
 8007662:	d302      	bcc.n	800766a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d113      	bne.n	8007692 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800766e:	2220      	movs	r2, #32
 8007670:	431a      	orrs	r2, r3
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2241      	movs	r2, #65	; 0x41
 800767a:	2120      	movs	r1, #32
 800767c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2242      	movs	r2, #66	; 0x42
 8007682:	2100      	movs	r1, #0
 8007684:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2240      	movs	r2, #64	; 0x40
 800768a:	2100      	movs	r1, #0
 800768c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800768e:	2301      	movs	r3, #1
 8007690:	e00f      	b.n	80076b2 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	699b      	ldr	r3, [r3, #24]
 8007698:	68ba      	ldr	r2, [r7, #8]
 800769a:	4013      	ands	r3, r2
 800769c:	68ba      	ldr	r2, [r7, #8]
 800769e:	1ad3      	subs	r3, r2, r3
 80076a0:	425a      	negs	r2, r3
 80076a2:	4153      	adcs	r3, r2
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	001a      	movs	r2, r3
 80076a8:	1dfb      	adds	r3, r7, #7
 80076aa:	781b      	ldrb	r3, [r3, #0]
 80076ac:	429a      	cmp	r2, r3
 80076ae:	d0ce      	beq.n	800764e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80076b0:	2300      	movs	r3, #0
}
 80076b2:	0018      	movs	r0, r3
 80076b4:	46bd      	mov	sp, r7
 80076b6:	b004      	add	sp, #16
 80076b8:	bd80      	pop	{r7, pc}

080076ba <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80076ba:	b580      	push	{r7, lr}
 80076bc:	b084      	sub	sp, #16
 80076be:	af00      	add	r7, sp, #0
 80076c0:	60f8      	str	r0, [r7, #12]
 80076c2:	60b9      	str	r1, [r7, #8]
 80076c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80076c6:	e02b      	b.n	8007720 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80076c8:	687a      	ldr	r2, [r7, #4]
 80076ca:	68b9      	ldr	r1, [r7, #8]
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	0018      	movs	r0, r3
 80076d0:	f000 f86e 	bl	80077b0 <I2C_IsErrorOccurred>
 80076d4:	1e03      	subs	r3, r0, #0
 80076d6:	d001      	beq.n	80076dc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	e029      	b.n	8007730 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	3301      	adds	r3, #1
 80076e0:	d01e      	beq.n	8007720 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076e2:	f7fd fe7b 	bl	80053dc <HAL_GetTick>
 80076e6:	0002      	movs	r2, r0
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	1ad3      	subs	r3, r2, r3
 80076ec:	68ba      	ldr	r2, [r7, #8]
 80076ee:	429a      	cmp	r2, r3
 80076f0:	d302      	bcc.n	80076f8 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d113      	bne.n	8007720 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076fc:	2220      	movs	r2, #32
 80076fe:	431a      	orrs	r2, r3
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2241      	movs	r2, #65	; 0x41
 8007708:	2120      	movs	r1, #32
 800770a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2242      	movs	r2, #66	; 0x42
 8007710:	2100      	movs	r1, #0
 8007712:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2240      	movs	r2, #64	; 0x40
 8007718:	2100      	movs	r1, #0
 800771a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800771c:	2301      	movs	r3, #1
 800771e:	e007      	b.n	8007730 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	699b      	ldr	r3, [r3, #24]
 8007726:	2202      	movs	r2, #2
 8007728:	4013      	ands	r3, r2
 800772a:	2b02      	cmp	r3, #2
 800772c:	d1cc      	bne.n	80076c8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800772e:	2300      	movs	r3, #0
}
 8007730:	0018      	movs	r0, r3
 8007732:	46bd      	mov	sp, r7
 8007734:	b004      	add	sp, #16
 8007736:	bd80      	pop	{r7, pc}

08007738 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b084      	sub	sp, #16
 800773c:	af00      	add	r7, sp, #0
 800773e:	60f8      	str	r0, [r7, #12]
 8007740:	60b9      	str	r1, [r7, #8]
 8007742:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007744:	e028      	b.n	8007798 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007746:	687a      	ldr	r2, [r7, #4]
 8007748:	68b9      	ldr	r1, [r7, #8]
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	0018      	movs	r0, r3
 800774e:	f000 f82f 	bl	80077b0 <I2C_IsErrorOccurred>
 8007752:	1e03      	subs	r3, r0, #0
 8007754:	d001      	beq.n	800775a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007756:	2301      	movs	r3, #1
 8007758:	e026      	b.n	80077a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800775a:	f7fd fe3f 	bl	80053dc <HAL_GetTick>
 800775e:	0002      	movs	r2, r0
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	1ad3      	subs	r3, r2, r3
 8007764:	68ba      	ldr	r2, [r7, #8]
 8007766:	429a      	cmp	r2, r3
 8007768:	d302      	bcc.n	8007770 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d113      	bne.n	8007798 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007774:	2220      	movs	r2, #32
 8007776:	431a      	orrs	r2, r3
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	2241      	movs	r2, #65	; 0x41
 8007780:	2120      	movs	r1, #32
 8007782:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	2242      	movs	r2, #66	; 0x42
 8007788:	2100      	movs	r1, #0
 800778a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	2240      	movs	r2, #64	; 0x40
 8007790:	2100      	movs	r1, #0
 8007792:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8007794:	2301      	movs	r3, #1
 8007796:	e007      	b.n	80077a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	699b      	ldr	r3, [r3, #24]
 800779e:	2220      	movs	r2, #32
 80077a0:	4013      	ands	r3, r2
 80077a2:	2b20      	cmp	r3, #32
 80077a4:	d1cf      	bne.n	8007746 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80077a6:	2300      	movs	r3, #0
}
 80077a8:	0018      	movs	r0, r3
 80077aa:	46bd      	mov	sp, r7
 80077ac:	b004      	add	sp, #16
 80077ae:	bd80      	pop	{r7, pc}

080077b0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80077b0:	b590      	push	{r4, r7, lr}
 80077b2:	b08b      	sub	sp, #44	; 0x2c
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	60f8      	str	r0, [r7, #12]
 80077b8:	60b9      	str	r1, [r7, #8]
 80077ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80077bc:	2327      	movs	r3, #39	; 0x27
 80077be:	18fb      	adds	r3, r7, r3
 80077c0:	2200      	movs	r2, #0
 80077c2:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	699b      	ldr	r3, [r3, #24]
 80077ca:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80077cc:	2300      	movs	r3, #0
 80077ce:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80077d4:	69bb      	ldr	r3, [r7, #24]
 80077d6:	2210      	movs	r2, #16
 80077d8:	4013      	ands	r3, r2
 80077da:	d100      	bne.n	80077de <I2C_IsErrorOccurred+0x2e>
 80077dc:	e08e      	b.n	80078fc <I2C_IsErrorOccurred+0x14c>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	2210      	movs	r2, #16
 80077e4:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80077e6:	e06c      	b.n	80078c2 <I2C_IsErrorOccurred+0x112>
 80077e8:	2427      	movs	r4, #39	; 0x27
 80077ea:	193b      	adds	r3, r7, r4
 80077ec:	193a      	adds	r2, r7, r4
 80077ee:	7812      	ldrb	r2, [r2, #0]
 80077f0:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	3301      	adds	r3, #1
 80077f6:	d064      	beq.n	80078c2 <I2C_IsErrorOccurred+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80077f8:	f7fd fdf0 	bl	80053dc <HAL_GetTick>
 80077fc:	0002      	movs	r2, r0
 80077fe:	69fb      	ldr	r3, [r7, #28]
 8007800:	1ad3      	subs	r3, r2, r3
 8007802:	68ba      	ldr	r2, [r7, #8]
 8007804:	429a      	cmp	r2, r3
 8007806:	d306      	bcc.n	8007816 <I2C_IsErrorOccurred+0x66>
 8007808:	193b      	adds	r3, r7, r4
 800780a:	193a      	adds	r2, r7, r4
 800780c:	7812      	ldrb	r2, [r2, #0]
 800780e:	701a      	strb	r2, [r3, #0]
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d155      	bne.n	80078c2 <I2C_IsErrorOccurred+0x112>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	685a      	ldr	r2, [r3, #4]
 800781c:	2380      	movs	r3, #128	; 0x80
 800781e:	01db      	lsls	r3, r3, #7
 8007820:	4013      	ands	r3, r2
 8007822:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007824:	2013      	movs	r0, #19
 8007826:	183b      	adds	r3, r7, r0
 8007828:	68fa      	ldr	r2, [r7, #12]
 800782a:	2142      	movs	r1, #66	; 0x42
 800782c:	5c52      	ldrb	r2, [r2, r1]
 800782e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	699a      	ldr	r2, [r3, #24]
 8007836:	2380      	movs	r3, #128	; 0x80
 8007838:	021b      	lsls	r3, r3, #8
 800783a:	401a      	ands	r2, r3
 800783c:	2380      	movs	r3, #128	; 0x80
 800783e:	021b      	lsls	r3, r3, #8
 8007840:	429a      	cmp	r2, r3
 8007842:	d137      	bne.n	80078b4 <I2C_IsErrorOccurred+0x104>
 8007844:	697a      	ldr	r2, [r7, #20]
 8007846:	2380      	movs	r3, #128	; 0x80
 8007848:	01db      	lsls	r3, r3, #7
 800784a:	429a      	cmp	r2, r3
 800784c:	d032      	beq.n	80078b4 <I2C_IsErrorOccurred+0x104>
              (tmp1 != I2C_CR2_STOP) && \
 800784e:	183b      	adds	r3, r7, r0
 8007850:	781b      	ldrb	r3, [r3, #0]
 8007852:	2b20      	cmp	r3, #32
 8007854:	d02e      	beq.n	80078b4 <I2C_IsErrorOccurred+0x104>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	685a      	ldr	r2, [r3, #4]
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	2180      	movs	r1, #128	; 0x80
 8007862:	01c9      	lsls	r1, r1, #7
 8007864:	430a      	orrs	r2, r1
 8007866:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007868:	f7fd fdb8 	bl	80053dc <HAL_GetTick>
 800786c:	0003      	movs	r3, r0
 800786e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007870:	e020      	b.n	80078b4 <I2C_IsErrorOccurred+0x104>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007872:	f7fd fdb3 	bl	80053dc <HAL_GetTick>
 8007876:	0002      	movs	r2, r0
 8007878:	69fb      	ldr	r3, [r7, #28]
 800787a:	1ad3      	subs	r3, r2, r3
 800787c:	2027      	movs	r0, #39	; 0x27
 800787e:	183a      	adds	r2, r7, r0
 8007880:	1839      	adds	r1, r7, r0
 8007882:	7809      	ldrb	r1, [r1, #0]
 8007884:	7011      	strb	r1, [r2, #0]
 8007886:	2b19      	cmp	r3, #25
 8007888:	d914      	bls.n	80078b4 <I2C_IsErrorOccurred+0x104>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800788e:	2220      	movs	r2, #32
 8007890:	431a      	orrs	r2, r3
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2241      	movs	r2, #65	; 0x41
 800789a:	2120      	movs	r1, #32
 800789c:	5499      	strb	r1, [r3, r2]
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	2242      	movs	r2, #66	; 0x42
 80078a2:	2100      	movs	r1, #0
 80078a4:	5499      	strb	r1, [r3, r2]

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2240      	movs	r2, #64	; 0x40
 80078aa:	2100      	movs	r1, #0
 80078ac:	5499      	strb	r1, [r3, r2]

              status = HAL_ERROR;
 80078ae:	183b      	adds	r3, r7, r0
 80078b0:	2201      	movs	r2, #1
 80078b2:	701a      	strb	r2, [r3, #0]
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	699b      	ldr	r3, [r3, #24]
 80078ba:	2220      	movs	r2, #32
 80078bc:	4013      	ands	r3, r2
 80078be:	2b20      	cmp	r3, #32
 80078c0:	d1d7      	bne.n	8007872 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	699b      	ldr	r3, [r3, #24]
 80078c8:	2220      	movs	r2, #32
 80078ca:	4013      	ands	r3, r2
 80078cc:	2b20      	cmp	r3, #32
 80078ce:	d004      	beq.n	80078da <I2C_IsErrorOccurred+0x12a>
 80078d0:	2327      	movs	r3, #39	; 0x27
 80078d2:	18fb      	adds	r3, r7, r3
 80078d4:	781b      	ldrb	r3, [r3, #0]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d086      	beq.n	80077e8 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80078da:	2327      	movs	r3, #39	; 0x27
 80078dc:	18fb      	adds	r3, r7, r3
 80078de:	781b      	ldrb	r3, [r3, #0]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d103      	bne.n	80078ec <I2C_IsErrorOccurred+0x13c>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	2220      	movs	r2, #32
 80078ea:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80078ec:	6a3b      	ldr	r3, [r7, #32]
 80078ee:	2204      	movs	r2, #4
 80078f0:	4313      	orrs	r3, r2
 80078f2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80078f4:	2327      	movs	r3, #39	; 0x27
 80078f6:	18fb      	adds	r3, r7, r3
 80078f8:	2201      	movs	r2, #1
 80078fa:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	699b      	ldr	r3, [r3, #24]
 8007902:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007904:	69ba      	ldr	r2, [r7, #24]
 8007906:	2380      	movs	r3, #128	; 0x80
 8007908:	005b      	lsls	r3, r3, #1
 800790a:	4013      	ands	r3, r2
 800790c:	d00c      	beq.n	8007928 <I2C_IsErrorOccurred+0x178>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800790e:	6a3b      	ldr	r3, [r7, #32]
 8007910:	2201      	movs	r2, #1
 8007912:	4313      	orrs	r3, r2
 8007914:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	2280      	movs	r2, #128	; 0x80
 800791c:	0052      	lsls	r2, r2, #1
 800791e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007920:	2327      	movs	r3, #39	; 0x27
 8007922:	18fb      	adds	r3, r7, r3
 8007924:	2201      	movs	r2, #1
 8007926:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007928:	69ba      	ldr	r2, [r7, #24]
 800792a:	2380      	movs	r3, #128	; 0x80
 800792c:	00db      	lsls	r3, r3, #3
 800792e:	4013      	ands	r3, r2
 8007930:	d00c      	beq.n	800794c <I2C_IsErrorOccurred+0x19c>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007932:	6a3b      	ldr	r3, [r7, #32]
 8007934:	2208      	movs	r2, #8
 8007936:	4313      	orrs	r3, r2
 8007938:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	2280      	movs	r2, #128	; 0x80
 8007940:	00d2      	lsls	r2, r2, #3
 8007942:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007944:	2327      	movs	r3, #39	; 0x27
 8007946:	18fb      	adds	r3, r7, r3
 8007948:	2201      	movs	r2, #1
 800794a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800794c:	69ba      	ldr	r2, [r7, #24]
 800794e:	2380      	movs	r3, #128	; 0x80
 8007950:	009b      	lsls	r3, r3, #2
 8007952:	4013      	ands	r3, r2
 8007954:	d00c      	beq.n	8007970 <I2C_IsErrorOccurred+0x1c0>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007956:	6a3b      	ldr	r3, [r7, #32]
 8007958:	2202      	movs	r2, #2
 800795a:	4313      	orrs	r3, r2
 800795c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	2280      	movs	r2, #128	; 0x80
 8007964:	0092      	lsls	r2, r2, #2
 8007966:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007968:	2327      	movs	r3, #39	; 0x27
 800796a:	18fb      	adds	r3, r7, r3
 800796c:	2201      	movs	r2, #1
 800796e:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8007970:	2327      	movs	r3, #39	; 0x27
 8007972:	18fb      	adds	r3, r7, r3
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d01d      	beq.n	80079b6 <I2C_IsErrorOccurred+0x206>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	0018      	movs	r0, r3
 800797e:	f7ff fe3b 	bl	80075f8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	685a      	ldr	r2, [r3, #4]
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	490d      	ldr	r1, [pc, #52]	; (80079c4 <I2C_IsErrorOccurred+0x214>)
 800798e:	400a      	ands	r2, r1
 8007990:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007996:	6a3b      	ldr	r3, [r7, #32]
 8007998:	431a      	orrs	r2, r3
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2241      	movs	r2, #65	; 0x41
 80079a2:	2120      	movs	r1, #32
 80079a4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2242      	movs	r2, #66	; 0x42
 80079aa:	2100      	movs	r1, #0
 80079ac:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2240      	movs	r2, #64	; 0x40
 80079b2:	2100      	movs	r1, #0
 80079b4:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80079b6:	2327      	movs	r3, #39	; 0x27
 80079b8:	18fb      	adds	r3, r7, r3
 80079ba:	781b      	ldrb	r3, [r3, #0]
}
 80079bc:	0018      	movs	r0, r3
 80079be:	46bd      	mov	sp, r7
 80079c0:	b00b      	add	sp, #44	; 0x2c
 80079c2:	bd90      	pop	{r4, r7, pc}
 80079c4:	fe00e800 	.word	0xfe00e800

080079c8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80079c8:	b590      	push	{r4, r7, lr}
 80079ca:	b087      	sub	sp, #28
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	60f8      	str	r0, [r7, #12]
 80079d0:	0008      	movs	r0, r1
 80079d2:	0011      	movs	r1, r2
 80079d4:	607b      	str	r3, [r7, #4]
 80079d6:	240a      	movs	r4, #10
 80079d8:	193b      	adds	r3, r7, r4
 80079da:	1c02      	adds	r2, r0, #0
 80079dc:	801a      	strh	r2, [r3, #0]
 80079de:	2009      	movs	r0, #9
 80079e0:	183b      	adds	r3, r7, r0
 80079e2:	1c0a      	adds	r2, r1, #0
 80079e4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80079e6:	193b      	adds	r3, r7, r4
 80079e8:	881b      	ldrh	r3, [r3, #0]
 80079ea:	059b      	lsls	r3, r3, #22
 80079ec:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80079ee:	183b      	adds	r3, r7, r0
 80079f0:	781b      	ldrb	r3, [r3, #0]
 80079f2:	0419      	lsls	r1, r3, #16
 80079f4:	23ff      	movs	r3, #255	; 0xff
 80079f6:	041b      	lsls	r3, r3, #16
 80079f8:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80079fa:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a02:	4313      	orrs	r3, r2
 8007a04:	005b      	lsls	r3, r3, #1
 8007a06:	085b      	lsrs	r3, r3, #1
 8007a08:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a12:	0d51      	lsrs	r1, r2, #21
 8007a14:	2280      	movs	r2, #128	; 0x80
 8007a16:	00d2      	lsls	r2, r2, #3
 8007a18:	400a      	ands	r2, r1
 8007a1a:	4907      	ldr	r1, [pc, #28]	; (8007a38 <I2C_TransferConfig+0x70>)
 8007a1c:	430a      	orrs	r2, r1
 8007a1e:	43d2      	mvns	r2, r2
 8007a20:	401a      	ands	r2, r3
 8007a22:	0011      	movs	r1, r2
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	697a      	ldr	r2, [r7, #20]
 8007a2a:	430a      	orrs	r2, r1
 8007a2c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007a2e:	46c0      	nop			; (mov r8, r8)
 8007a30:	46bd      	mov	sp, r7
 8007a32:	b007      	add	sp, #28
 8007a34:	bd90      	pop	{r4, r7, pc}
 8007a36:	46c0      	nop			; (mov r8, r8)
 8007a38:	03ff63ff 	.word	0x03ff63ff

08007a3c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b082      	sub	sp, #8
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2241      	movs	r2, #65	; 0x41
 8007a4a:	5c9b      	ldrb	r3, [r3, r2]
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	2b20      	cmp	r3, #32
 8007a50:	d138      	bne.n	8007ac4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2240      	movs	r2, #64	; 0x40
 8007a56:	5c9b      	ldrb	r3, [r3, r2]
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	d101      	bne.n	8007a60 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007a5c:	2302      	movs	r3, #2
 8007a5e:	e032      	b.n	8007ac6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2240      	movs	r2, #64	; 0x40
 8007a64:	2101      	movs	r1, #1
 8007a66:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2241      	movs	r2, #65	; 0x41
 8007a6c:	2124      	movs	r1, #36	; 0x24
 8007a6e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	681a      	ldr	r2, [r3, #0]
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	2101      	movs	r1, #1
 8007a7c:	438a      	bics	r2, r1
 8007a7e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	681a      	ldr	r2, [r3, #0]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4911      	ldr	r1, [pc, #68]	; (8007ad0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8007a8c:	400a      	ands	r2, r1
 8007a8e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	6819      	ldr	r1, [r3, #0]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	683a      	ldr	r2, [r7, #0]
 8007a9c:	430a      	orrs	r2, r1
 8007a9e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	681a      	ldr	r2, [r3, #0]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	2101      	movs	r1, #1
 8007aac:	430a      	orrs	r2, r1
 8007aae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2241      	movs	r2, #65	; 0x41
 8007ab4:	2120      	movs	r1, #32
 8007ab6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2240      	movs	r2, #64	; 0x40
 8007abc:	2100      	movs	r1, #0
 8007abe:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	e000      	b.n	8007ac6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007ac4:	2302      	movs	r3, #2
  }
}
 8007ac6:	0018      	movs	r0, r3
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	b002      	add	sp, #8
 8007acc:	bd80      	pop	{r7, pc}
 8007ace:	46c0      	nop			; (mov r8, r8)
 8007ad0:	ffffefff 	.word	0xffffefff

08007ad4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b084      	sub	sp, #16
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2241      	movs	r2, #65	; 0x41
 8007ae2:	5c9b      	ldrb	r3, [r3, r2]
 8007ae4:	b2db      	uxtb	r3, r3
 8007ae6:	2b20      	cmp	r3, #32
 8007ae8:	d139      	bne.n	8007b5e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2240      	movs	r2, #64	; 0x40
 8007aee:	5c9b      	ldrb	r3, [r3, r2]
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	d101      	bne.n	8007af8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007af4:	2302      	movs	r3, #2
 8007af6:	e033      	b.n	8007b60 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2240      	movs	r2, #64	; 0x40
 8007afc:	2101      	movs	r1, #1
 8007afe:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2241      	movs	r2, #65	; 0x41
 8007b04:	2124      	movs	r1, #36	; 0x24
 8007b06:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	681a      	ldr	r2, [r3, #0]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	2101      	movs	r1, #1
 8007b14:	438a      	bics	r2, r1
 8007b16:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	4a11      	ldr	r2, [pc, #68]	; (8007b68 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8007b24:	4013      	ands	r3, r2
 8007b26:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	021b      	lsls	r3, r3, #8
 8007b2c:	68fa      	ldr	r2, [r7, #12]
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	68fa      	ldr	r2, [r7, #12]
 8007b38:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	681a      	ldr	r2, [r3, #0]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	2101      	movs	r1, #1
 8007b46:	430a      	orrs	r2, r1
 8007b48:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2241      	movs	r2, #65	; 0x41
 8007b4e:	2120      	movs	r1, #32
 8007b50:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2240      	movs	r2, #64	; 0x40
 8007b56:	2100      	movs	r1, #0
 8007b58:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	e000      	b.n	8007b60 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007b5e:	2302      	movs	r3, #2
  }
}
 8007b60:	0018      	movs	r0, r3
 8007b62:	46bd      	mov	sp, r7
 8007b64:	b004      	add	sp, #16
 8007b66:	bd80      	pop	{r7, pc}
 8007b68:	fffff0ff 	.word	0xfffff0ff

08007b6c <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b084      	sub	sp, #16
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d101      	bne.n	8007b7e <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	e03d      	b.n	8007bfa <HAL_IWDG_Init+0x8e>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4a20      	ldr	r2, [pc, #128]	; (8007c04 <HAL_IWDG_Init+0x98>)
 8007b84:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4a1f      	ldr	r2, [pc, #124]	; (8007c08 <HAL_IWDG_Init+0x9c>)
 8007b8c:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	687a      	ldr	r2, [r7, #4]
 8007b94:	6852      	ldr	r2, [r2, #4]
 8007b96:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	687a      	ldr	r2, [r7, #4]
 8007b9e:	6892      	ldr	r2, [r2, #8]
 8007ba0:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8007ba2:	f7fd fc1b 	bl	80053dc <HAL_GetTick>
 8007ba6:	0003      	movs	r3, r0
 8007ba8:	60fb      	str	r3, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8007baa:	e00e      	b.n	8007bca <HAL_IWDG_Init+0x5e>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8007bac:	f7fd fc16 	bl	80053dc <HAL_GetTick>
 8007bb0:	0002      	movs	r2, r0
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	1ad3      	subs	r3, r2, r3
 8007bb6:	2b31      	cmp	r3, #49	; 0x31
 8007bb8:	d907      	bls.n	8007bca <HAL_IWDG_Init+0x5e>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	68db      	ldr	r3, [r3, #12]
 8007bc0:	2207      	movs	r2, #7
 8007bc2:	4013      	ands	r3, r2
 8007bc4:	d001      	beq.n	8007bca <HAL_IWDG_Init+0x5e>
      {
        return HAL_TIMEOUT;
 8007bc6:	2303      	movs	r3, #3
 8007bc8:	e017      	b.n	8007bfa <HAL_IWDG_Init+0x8e>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	68db      	ldr	r3, [r3, #12]
 8007bd0:	2207      	movs	r2, #7
 8007bd2:	4013      	ands	r3, r2
 8007bd4:	d1ea      	bne.n	8007bac <HAL_IWDG_Init+0x40>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	691a      	ldr	r2, [r3, #16]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	68db      	ldr	r3, [r3, #12]
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d005      	beq.n	8007bf0 <HAL_IWDG_Init+0x84>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	687a      	ldr	r2, [r7, #4]
 8007bea:	68d2      	ldr	r2, [r2, #12]
 8007bec:	611a      	str	r2, [r3, #16]
 8007bee:	e003      	b.n	8007bf8 <HAL_IWDG_Init+0x8c>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a05      	ldr	r2, [pc, #20]	; (8007c0c <HAL_IWDG_Init+0xa0>)
 8007bf6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007bf8:	2300      	movs	r3, #0
}
 8007bfa:	0018      	movs	r0, r3
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	b004      	add	sp, #16
 8007c00:	bd80      	pop	{r7, pc}
 8007c02:	46c0      	nop			; (mov r8, r8)
 8007c04:	0000cccc 	.word	0x0000cccc
 8007c08:	00005555 	.word	0x00005555
 8007c0c:	0000aaaa 	.word	0x0000aaaa

08007c10 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b082      	sub	sp, #8
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a03      	ldr	r2, [pc, #12]	; (8007c2c <HAL_IWDG_Refresh+0x1c>)
 8007c1e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007c20:	2300      	movs	r3, #0
}
 8007c22:	0018      	movs	r0, r3
 8007c24:	46bd      	mov	sp, r7
 8007c26:	b002      	add	sp, #8
 8007c28:	bd80      	pop	{r7, pc}
 8007c2a:	46c0      	nop			; (mov r8, r8)
 8007c2c:	0000aaaa 	.word	0x0000aaaa

08007c30 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b084      	sub	sp, #16
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8007c38:	4b19      	ldr	r3, [pc, #100]	; (8007ca0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4a19      	ldr	r2, [pc, #100]	; (8007ca4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8007c3e:	4013      	ands	r3, r2
 8007c40:	0019      	movs	r1, r3
 8007c42:	4b17      	ldr	r3, [pc, #92]	; (8007ca0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8007c44:	687a      	ldr	r2, [r7, #4]
 8007c46:	430a      	orrs	r2, r1
 8007c48:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007c4a:	687a      	ldr	r2, [r7, #4]
 8007c4c:	2380      	movs	r3, #128	; 0x80
 8007c4e:	009b      	lsls	r3, r3, #2
 8007c50:	429a      	cmp	r2, r3
 8007c52:	d11f      	bne.n	8007c94 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8007c54:	4b14      	ldr	r3, [pc, #80]	; (8007ca8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8007c56:	681a      	ldr	r2, [r3, #0]
 8007c58:	0013      	movs	r3, r2
 8007c5a:	005b      	lsls	r3, r3, #1
 8007c5c:	189b      	adds	r3, r3, r2
 8007c5e:	005b      	lsls	r3, r3, #1
 8007c60:	4912      	ldr	r1, [pc, #72]	; (8007cac <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8007c62:	0018      	movs	r0, r3
 8007c64:	f7f8 fa5e 	bl	8000124 <__udivsi3>
 8007c68:	0003      	movs	r3, r0
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007c6e:	e008      	b.n	8007c82 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d003      	beq.n	8007c7e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	3b01      	subs	r3, #1
 8007c7a:	60fb      	str	r3, [r7, #12]
 8007c7c:	e001      	b.n	8007c82 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8007c7e:	2303      	movs	r3, #3
 8007c80:	e009      	b.n	8007c96 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007c82:	4b07      	ldr	r3, [pc, #28]	; (8007ca0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8007c84:	695a      	ldr	r2, [r3, #20]
 8007c86:	2380      	movs	r3, #128	; 0x80
 8007c88:	00db      	lsls	r3, r3, #3
 8007c8a:	401a      	ands	r2, r3
 8007c8c:	2380      	movs	r3, #128	; 0x80
 8007c8e:	00db      	lsls	r3, r3, #3
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d0ed      	beq.n	8007c70 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8007c94:	2300      	movs	r3, #0
}
 8007c96:	0018      	movs	r0, r3
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	b004      	add	sp, #16
 8007c9c:	bd80      	pop	{r7, pc}
 8007c9e:	46c0      	nop			; (mov r8, r8)
 8007ca0:	40007000 	.word	0x40007000
 8007ca4:	fffff9ff 	.word	0xfffff9ff
 8007ca8:	20000004 	.word	0x20000004
 8007cac:	000f4240 	.word	0x000f4240

08007cb0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8007cb4:	4b03      	ldr	r3, [pc, #12]	; (8007cc4 <LL_RCC_GetAPB1Prescaler+0x14>)
 8007cb6:	689a      	ldr	r2, [r3, #8]
 8007cb8:	23e0      	movs	r3, #224	; 0xe0
 8007cba:	01db      	lsls	r3, r3, #7
 8007cbc:	4013      	ands	r3, r2
}
 8007cbe:	0018      	movs	r0, r3
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}
 8007cc4:	40021000 	.word	0x40021000

08007cc8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b088      	sub	sp, #32
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d101      	bne.n	8007cda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	e2f3      	b.n	80082c2 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	2201      	movs	r2, #1
 8007ce0:	4013      	ands	r3, r2
 8007ce2:	d100      	bne.n	8007ce6 <HAL_RCC_OscConfig+0x1e>
 8007ce4:	e07c      	b.n	8007de0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007ce6:	4bc3      	ldr	r3, [pc, #780]	; (8007ff4 <HAL_RCC_OscConfig+0x32c>)
 8007ce8:	689b      	ldr	r3, [r3, #8]
 8007cea:	2238      	movs	r2, #56	; 0x38
 8007cec:	4013      	ands	r3, r2
 8007cee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007cf0:	4bc0      	ldr	r3, [pc, #768]	; (8007ff4 <HAL_RCC_OscConfig+0x32c>)
 8007cf2:	68db      	ldr	r3, [r3, #12]
 8007cf4:	2203      	movs	r2, #3
 8007cf6:	4013      	ands	r3, r2
 8007cf8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8007cfa:	69bb      	ldr	r3, [r7, #24]
 8007cfc:	2b10      	cmp	r3, #16
 8007cfe:	d102      	bne.n	8007d06 <HAL_RCC_OscConfig+0x3e>
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	2b03      	cmp	r3, #3
 8007d04:	d002      	beq.n	8007d0c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8007d06:	69bb      	ldr	r3, [r7, #24]
 8007d08:	2b08      	cmp	r3, #8
 8007d0a:	d10b      	bne.n	8007d24 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d0c:	4bb9      	ldr	r3, [pc, #740]	; (8007ff4 <HAL_RCC_OscConfig+0x32c>)
 8007d0e:	681a      	ldr	r2, [r3, #0]
 8007d10:	2380      	movs	r3, #128	; 0x80
 8007d12:	029b      	lsls	r3, r3, #10
 8007d14:	4013      	ands	r3, r2
 8007d16:	d062      	beq.n	8007dde <HAL_RCC_OscConfig+0x116>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	685b      	ldr	r3, [r3, #4]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d15e      	bne.n	8007dde <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8007d20:	2301      	movs	r3, #1
 8007d22:	e2ce      	b.n	80082c2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	685a      	ldr	r2, [r3, #4]
 8007d28:	2380      	movs	r3, #128	; 0x80
 8007d2a:	025b      	lsls	r3, r3, #9
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d107      	bne.n	8007d40 <HAL_RCC_OscConfig+0x78>
 8007d30:	4bb0      	ldr	r3, [pc, #704]	; (8007ff4 <HAL_RCC_OscConfig+0x32c>)
 8007d32:	681a      	ldr	r2, [r3, #0]
 8007d34:	4baf      	ldr	r3, [pc, #700]	; (8007ff4 <HAL_RCC_OscConfig+0x32c>)
 8007d36:	2180      	movs	r1, #128	; 0x80
 8007d38:	0249      	lsls	r1, r1, #9
 8007d3a:	430a      	orrs	r2, r1
 8007d3c:	601a      	str	r2, [r3, #0]
 8007d3e:	e020      	b.n	8007d82 <HAL_RCC_OscConfig+0xba>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	685a      	ldr	r2, [r3, #4]
 8007d44:	23a0      	movs	r3, #160	; 0xa0
 8007d46:	02db      	lsls	r3, r3, #11
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	d10e      	bne.n	8007d6a <HAL_RCC_OscConfig+0xa2>
 8007d4c:	4ba9      	ldr	r3, [pc, #676]	; (8007ff4 <HAL_RCC_OscConfig+0x32c>)
 8007d4e:	681a      	ldr	r2, [r3, #0]
 8007d50:	4ba8      	ldr	r3, [pc, #672]	; (8007ff4 <HAL_RCC_OscConfig+0x32c>)
 8007d52:	2180      	movs	r1, #128	; 0x80
 8007d54:	02c9      	lsls	r1, r1, #11
 8007d56:	430a      	orrs	r2, r1
 8007d58:	601a      	str	r2, [r3, #0]
 8007d5a:	4ba6      	ldr	r3, [pc, #664]	; (8007ff4 <HAL_RCC_OscConfig+0x32c>)
 8007d5c:	681a      	ldr	r2, [r3, #0]
 8007d5e:	4ba5      	ldr	r3, [pc, #660]	; (8007ff4 <HAL_RCC_OscConfig+0x32c>)
 8007d60:	2180      	movs	r1, #128	; 0x80
 8007d62:	0249      	lsls	r1, r1, #9
 8007d64:	430a      	orrs	r2, r1
 8007d66:	601a      	str	r2, [r3, #0]
 8007d68:	e00b      	b.n	8007d82 <HAL_RCC_OscConfig+0xba>
 8007d6a:	4ba2      	ldr	r3, [pc, #648]	; (8007ff4 <HAL_RCC_OscConfig+0x32c>)
 8007d6c:	681a      	ldr	r2, [r3, #0]
 8007d6e:	4ba1      	ldr	r3, [pc, #644]	; (8007ff4 <HAL_RCC_OscConfig+0x32c>)
 8007d70:	49a1      	ldr	r1, [pc, #644]	; (8007ff8 <HAL_RCC_OscConfig+0x330>)
 8007d72:	400a      	ands	r2, r1
 8007d74:	601a      	str	r2, [r3, #0]
 8007d76:	4b9f      	ldr	r3, [pc, #636]	; (8007ff4 <HAL_RCC_OscConfig+0x32c>)
 8007d78:	681a      	ldr	r2, [r3, #0]
 8007d7a:	4b9e      	ldr	r3, [pc, #632]	; (8007ff4 <HAL_RCC_OscConfig+0x32c>)
 8007d7c:	499f      	ldr	r1, [pc, #636]	; (8007ffc <HAL_RCC_OscConfig+0x334>)
 8007d7e:	400a      	ands	r2, r1
 8007d80:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	685b      	ldr	r3, [r3, #4]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d014      	beq.n	8007db4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d8a:	f7fd fb27 	bl	80053dc <HAL_GetTick>
 8007d8e:	0003      	movs	r3, r0
 8007d90:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007d92:	e008      	b.n	8007da6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007d94:	f7fd fb22 	bl	80053dc <HAL_GetTick>
 8007d98:	0002      	movs	r2, r0
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	1ad3      	subs	r3, r2, r3
 8007d9e:	2b64      	cmp	r3, #100	; 0x64
 8007da0:	d901      	bls.n	8007da6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8007da2:	2303      	movs	r3, #3
 8007da4:	e28d      	b.n	80082c2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007da6:	4b93      	ldr	r3, [pc, #588]	; (8007ff4 <HAL_RCC_OscConfig+0x32c>)
 8007da8:	681a      	ldr	r2, [r3, #0]
 8007daa:	2380      	movs	r3, #128	; 0x80
 8007dac:	029b      	lsls	r3, r3, #10
 8007dae:	4013      	ands	r3, r2
 8007db0:	d0f0      	beq.n	8007d94 <HAL_RCC_OscConfig+0xcc>
 8007db2:	e015      	b.n	8007de0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007db4:	f7fd fb12 	bl	80053dc <HAL_GetTick>
 8007db8:	0003      	movs	r3, r0
 8007dba:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007dbc:	e008      	b.n	8007dd0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007dbe:	f7fd fb0d 	bl	80053dc <HAL_GetTick>
 8007dc2:	0002      	movs	r2, r0
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	1ad3      	subs	r3, r2, r3
 8007dc8:	2b64      	cmp	r3, #100	; 0x64
 8007dca:	d901      	bls.n	8007dd0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8007dcc:	2303      	movs	r3, #3
 8007dce:	e278      	b.n	80082c2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007dd0:	4b88      	ldr	r3, [pc, #544]	; (8007ff4 <HAL_RCC_OscConfig+0x32c>)
 8007dd2:	681a      	ldr	r2, [r3, #0]
 8007dd4:	2380      	movs	r3, #128	; 0x80
 8007dd6:	029b      	lsls	r3, r3, #10
 8007dd8:	4013      	ands	r3, r2
 8007dda:	d1f0      	bne.n	8007dbe <HAL_RCC_OscConfig+0xf6>
 8007ddc:	e000      	b.n	8007de0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007dde:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	2202      	movs	r2, #2
 8007de6:	4013      	ands	r3, r2
 8007de8:	d100      	bne.n	8007dec <HAL_RCC_OscConfig+0x124>
 8007dea:	e099      	b.n	8007f20 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007dec:	4b81      	ldr	r3, [pc, #516]	; (8007ff4 <HAL_RCC_OscConfig+0x32c>)
 8007dee:	689b      	ldr	r3, [r3, #8]
 8007df0:	2238      	movs	r2, #56	; 0x38
 8007df2:	4013      	ands	r3, r2
 8007df4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007df6:	4b7f      	ldr	r3, [pc, #508]	; (8007ff4 <HAL_RCC_OscConfig+0x32c>)
 8007df8:	68db      	ldr	r3, [r3, #12]
 8007dfa:	2203      	movs	r2, #3
 8007dfc:	4013      	ands	r3, r2
 8007dfe:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8007e00:	69bb      	ldr	r3, [r7, #24]
 8007e02:	2b10      	cmp	r3, #16
 8007e04:	d102      	bne.n	8007e0c <HAL_RCC_OscConfig+0x144>
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	2b02      	cmp	r3, #2
 8007e0a:	d002      	beq.n	8007e12 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8007e0c:	69bb      	ldr	r3, [r7, #24]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d135      	bne.n	8007e7e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007e12:	4b78      	ldr	r3, [pc, #480]	; (8007ff4 <HAL_RCC_OscConfig+0x32c>)
 8007e14:	681a      	ldr	r2, [r3, #0]
 8007e16:	2380      	movs	r3, #128	; 0x80
 8007e18:	00db      	lsls	r3, r3, #3
 8007e1a:	4013      	ands	r3, r2
 8007e1c:	d005      	beq.n	8007e2a <HAL_RCC_OscConfig+0x162>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	68db      	ldr	r3, [r3, #12]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d101      	bne.n	8007e2a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8007e26:	2301      	movs	r3, #1
 8007e28:	e24b      	b.n	80082c2 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e2a:	4b72      	ldr	r3, [pc, #456]	; (8007ff4 <HAL_RCC_OscConfig+0x32c>)
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	4a74      	ldr	r2, [pc, #464]	; (8008000 <HAL_RCC_OscConfig+0x338>)
 8007e30:	4013      	ands	r3, r2
 8007e32:	0019      	movs	r1, r3
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	695b      	ldr	r3, [r3, #20]
 8007e38:	021a      	lsls	r2, r3, #8
 8007e3a:	4b6e      	ldr	r3, [pc, #440]	; (8007ff4 <HAL_RCC_OscConfig+0x32c>)
 8007e3c:	430a      	orrs	r2, r1
 8007e3e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007e40:	69bb      	ldr	r3, [r7, #24]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d112      	bne.n	8007e6c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8007e46:	4b6b      	ldr	r3, [pc, #428]	; (8007ff4 <HAL_RCC_OscConfig+0x32c>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a6e      	ldr	r2, [pc, #440]	; (8008004 <HAL_RCC_OscConfig+0x33c>)
 8007e4c:	4013      	ands	r3, r2
 8007e4e:	0019      	movs	r1, r3
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	691a      	ldr	r2, [r3, #16]
 8007e54:	4b67      	ldr	r3, [pc, #412]	; (8007ff4 <HAL_RCC_OscConfig+0x32c>)
 8007e56:	430a      	orrs	r2, r1
 8007e58:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8007e5a:	4b66      	ldr	r3, [pc, #408]	; (8007ff4 <HAL_RCC_OscConfig+0x32c>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	0adb      	lsrs	r3, r3, #11
 8007e60:	2207      	movs	r2, #7
 8007e62:	4013      	ands	r3, r2
 8007e64:	4a68      	ldr	r2, [pc, #416]	; (8008008 <HAL_RCC_OscConfig+0x340>)
 8007e66:	40da      	lsrs	r2, r3
 8007e68:	4b68      	ldr	r3, [pc, #416]	; (800800c <HAL_RCC_OscConfig+0x344>)
 8007e6a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007e6c:	4b68      	ldr	r3, [pc, #416]	; (8008010 <HAL_RCC_OscConfig+0x348>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	0018      	movs	r0, r3
 8007e72:	f7fd fa57 	bl	8005324 <HAL_InitTick>
 8007e76:	1e03      	subs	r3, r0, #0
 8007e78:	d051      	beq.n	8007f1e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	e221      	b.n	80082c2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	68db      	ldr	r3, [r3, #12]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d030      	beq.n	8007ee8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8007e86:	4b5b      	ldr	r3, [pc, #364]	; (8007ff4 <HAL_RCC_OscConfig+0x32c>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4a5e      	ldr	r2, [pc, #376]	; (8008004 <HAL_RCC_OscConfig+0x33c>)
 8007e8c:	4013      	ands	r3, r2
 8007e8e:	0019      	movs	r1, r3
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	691a      	ldr	r2, [r3, #16]
 8007e94:	4b57      	ldr	r3, [pc, #348]	; (8007ff4 <HAL_RCC_OscConfig+0x32c>)
 8007e96:	430a      	orrs	r2, r1
 8007e98:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8007e9a:	4b56      	ldr	r3, [pc, #344]	; (8007ff4 <HAL_RCC_OscConfig+0x32c>)
 8007e9c:	681a      	ldr	r2, [r3, #0]
 8007e9e:	4b55      	ldr	r3, [pc, #340]	; (8007ff4 <HAL_RCC_OscConfig+0x32c>)
 8007ea0:	2180      	movs	r1, #128	; 0x80
 8007ea2:	0049      	lsls	r1, r1, #1
 8007ea4:	430a      	orrs	r2, r1
 8007ea6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ea8:	f7fd fa98 	bl	80053dc <HAL_GetTick>
 8007eac:	0003      	movs	r3, r0
 8007eae:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007eb0:	e008      	b.n	8007ec4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007eb2:	f7fd fa93 	bl	80053dc <HAL_GetTick>
 8007eb6:	0002      	movs	r2, r0
 8007eb8:	693b      	ldr	r3, [r7, #16]
 8007eba:	1ad3      	subs	r3, r2, r3
 8007ebc:	2b02      	cmp	r3, #2
 8007ebe:	d901      	bls.n	8007ec4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8007ec0:	2303      	movs	r3, #3
 8007ec2:	e1fe      	b.n	80082c2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007ec4:	4b4b      	ldr	r3, [pc, #300]	; (8007ff4 <HAL_RCC_OscConfig+0x32c>)
 8007ec6:	681a      	ldr	r2, [r3, #0]
 8007ec8:	2380      	movs	r3, #128	; 0x80
 8007eca:	00db      	lsls	r3, r3, #3
 8007ecc:	4013      	ands	r3, r2
 8007ece:	d0f0      	beq.n	8007eb2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ed0:	4b48      	ldr	r3, [pc, #288]	; (8007ff4 <HAL_RCC_OscConfig+0x32c>)
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	4a4a      	ldr	r2, [pc, #296]	; (8008000 <HAL_RCC_OscConfig+0x338>)
 8007ed6:	4013      	ands	r3, r2
 8007ed8:	0019      	movs	r1, r3
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	695b      	ldr	r3, [r3, #20]
 8007ede:	021a      	lsls	r2, r3, #8
 8007ee0:	4b44      	ldr	r3, [pc, #272]	; (8007ff4 <HAL_RCC_OscConfig+0x32c>)
 8007ee2:	430a      	orrs	r2, r1
 8007ee4:	605a      	str	r2, [r3, #4]
 8007ee6:	e01b      	b.n	8007f20 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8007ee8:	4b42      	ldr	r3, [pc, #264]	; (8007ff4 <HAL_RCC_OscConfig+0x32c>)
 8007eea:	681a      	ldr	r2, [r3, #0]
 8007eec:	4b41      	ldr	r3, [pc, #260]	; (8007ff4 <HAL_RCC_OscConfig+0x32c>)
 8007eee:	4949      	ldr	r1, [pc, #292]	; (8008014 <HAL_RCC_OscConfig+0x34c>)
 8007ef0:	400a      	ands	r2, r1
 8007ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ef4:	f7fd fa72 	bl	80053dc <HAL_GetTick>
 8007ef8:	0003      	movs	r3, r0
 8007efa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007efc:	e008      	b.n	8007f10 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007efe:	f7fd fa6d 	bl	80053dc <HAL_GetTick>
 8007f02:	0002      	movs	r2, r0
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	1ad3      	subs	r3, r2, r3
 8007f08:	2b02      	cmp	r3, #2
 8007f0a:	d901      	bls.n	8007f10 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8007f0c:	2303      	movs	r3, #3
 8007f0e:	e1d8      	b.n	80082c2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007f10:	4b38      	ldr	r3, [pc, #224]	; (8007ff4 <HAL_RCC_OscConfig+0x32c>)
 8007f12:	681a      	ldr	r2, [r3, #0]
 8007f14:	2380      	movs	r3, #128	; 0x80
 8007f16:	00db      	lsls	r3, r3, #3
 8007f18:	4013      	ands	r3, r2
 8007f1a:	d1f0      	bne.n	8007efe <HAL_RCC_OscConfig+0x236>
 8007f1c:	e000      	b.n	8007f20 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007f1e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	2208      	movs	r2, #8
 8007f26:	4013      	ands	r3, r2
 8007f28:	d047      	beq.n	8007fba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8007f2a:	4b32      	ldr	r3, [pc, #200]	; (8007ff4 <HAL_RCC_OscConfig+0x32c>)
 8007f2c:	689b      	ldr	r3, [r3, #8]
 8007f2e:	2238      	movs	r2, #56	; 0x38
 8007f30:	4013      	ands	r3, r2
 8007f32:	2b18      	cmp	r3, #24
 8007f34:	d10a      	bne.n	8007f4c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8007f36:	4b2f      	ldr	r3, [pc, #188]	; (8007ff4 <HAL_RCC_OscConfig+0x32c>)
 8007f38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f3a:	2202      	movs	r2, #2
 8007f3c:	4013      	ands	r3, r2
 8007f3e:	d03c      	beq.n	8007fba <HAL_RCC_OscConfig+0x2f2>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	699b      	ldr	r3, [r3, #24]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d138      	bne.n	8007fba <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8007f48:	2301      	movs	r3, #1
 8007f4a:	e1ba      	b.n	80082c2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	699b      	ldr	r3, [r3, #24]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d019      	beq.n	8007f88 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8007f54:	4b27      	ldr	r3, [pc, #156]	; (8007ff4 <HAL_RCC_OscConfig+0x32c>)
 8007f56:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007f58:	4b26      	ldr	r3, [pc, #152]	; (8007ff4 <HAL_RCC_OscConfig+0x32c>)
 8007f5a:	2101      	movs	r1, #1
 8007f5c:	430a      	orrs	r2, r1
 8007f5e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f60:	f7fd fa3c 	bl	80053dc <HAL_GetTick>
 8007f64:	0003      	movs	r3, r0
 8007f66:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007f68:	e008      	b.n	8007f7c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007f6a:	f7fd fa37 	bl	80053dc <HAL_GetTick>
 8007f6e:	0002      	movs	r2, r0
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	1ad3      	subs	r3, r2, r3
 8007f74:	2b02      	cmp	r3, #2
 8007f76:	d901      	bls.n	8007f7c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8007f78:	2303      	movs	r3, #3
 8007f7a:	e1a2      	b.n	80082c2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007f7c:	4b1d      	ldr	r3, [pc, #116]	; (8007ff4 <HAL_RCC_OscConfig+0x32c>)
 8007f7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f80:	2202      	movs	r2, #2
 8007f82:	4013      	ands	r3, r2
 8007f84:	d0f1      	beq.n	8007f6a <HAL_RCC_OscConfig+0x2a2>
 8007f86:	e018      	b.n	8007fba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8007f88:	4b1a      	ldr	r3, [pc, #104]	; (8007ff4 <HAL_RCC_OscConfig+0x32c>)
 8007f8a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007f8c:	4b19      	ldr	r3, [pc, #100]	; (8007ff4 <HAL_RCC_OscConfig+0x32c>)
 8007f8e:	2101      	movs	r1, #1
 8007f90:	438a      	bics	r2, r1
 8007f92:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f94:	f7fd fa22 	bl	80053dc <HAL_GetTick>
 8007f98:	0003      	movs	r3, r0
 8007f9a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007f9c:	e008      	b.n	8007fb0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007f9e:	f7fd fa1d 	bl	80053dc <HAL_GetTick>
 8007fa2:	0002      	movs	r2, r0
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	1ad3      	subs	r3, r2, r3
 8007fa8:	2b02      	cmp	r3, #2
 8007faa:	d901      	bls.n	8007fb0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8007fac:	2303      	movs	r3, #3
 8007fae:	e188      	b.n	80082c2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007fb0:	4b10      	ldr	r3, [pc, #64]	; (8007ff4 <HAL_RCC_OscConfig+0x32c>)
 8007fb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fb4:	2202      	movs	r2, #2
 8007fb6:	4013      	ands	r3, r2
 8007fb8:	d1f1      	bne.n	8007f9e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	2204      	movs	r2, #4
 8007fc0:	4013      	ands	r3, r2
 8007fc2:	d100      	bne.n	8007fc6 <HAL_RCC_OscConfig+0x2fe>
 8007fc4:	e0c6      	b.n	8008154 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007fc6:	231f      	movs	r3, #31
 8007fc8:	18fb      	adds	r3, r7, r3
 8007fca:	2200      	movs	r2, #0
 8007fcc:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8007fce:	4b09      	ldr	r3, [pc, #36]	; (8007ff4 <HAL_RCC_OscConfig+0x32c>)
 8007fd0:	689b      	ldr	r3, [r3, #8]
 8007fd2:	2238      	movs	r2, #56	; 0x38
 8007fd4:	4013      	ands	r3, r2
 8007fd6:	2b20      	cmp	r3, #32
 8007fd8:	d11e      	bne.n	8008018 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8007fda:	4b06      	ldr	r3, [pc, #24]	; (8007ff4 <HAL_RCC_OscConfig+0x32c>)
 8007fdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fde:	2202      	movs	r2, #2
 8007fe0:	4013      	ands	r3, r2
 8007fe2:	d100      	bne.n	8007fe6 <HAL_RCC_OscConfig+0x31e>
 8007fe4:	e0b6      	b.n	8008154 <HAL_RCC_OscConfig+0x48c>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	689b      	ldr	r3, [r3, #8]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d000      	beq.n	8007ff0 <HAL_RCC_OscConfig+0x328>
 8007fee:	e0b1      	b.n	8008154 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	e166      	b.n	80082c2 <HAL_RCC_OscConfig+0x5fa>
 8007ff4:	40021000 	.word	0x40021000
 8007ff8:	fffeffff 	.word	0xfffeffff
 8007ffc:	fffbffff 	.word	0xfffbffff
 8008000:	ffff80ff 	.word	0xffff80ff
 8008004:	ffffc7ff 	.word	0xffffc7ff
 8008008:	00f42400 	.word	0x00f42400
 800800c:	20000004 	.word	0x20000004
 8008010:	20000008 	.word	0x20000008
 8008014:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008018:	4bac      	ldr	r3, [pc, #688]	; (80082cc <HAL_RCC_OscConfig+0x604>)
 800801a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800801c:	2380      	movs	r3, #128	; 0x80
 800801e:	055b      	lsls	r3, r3, #21
 8008020:	4013      	ands	r3, r2
 8008022:	d101      	bne.n	8008028 <HAL_RCC_OscConfig+0x360>
 8008024:	2301      	movs	r3, #1
 8008026:	e000      	b.n	800802a <HAL_RCC_OscConfig+0x362>
 8008028:	2300      	movs	r3, #0
 800802a:	2b00      	cmp	r3, #0
 800802c:	d011      	beq.n	8008052 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800802e:	4ba7      	ldr	r3, [pc, #668]	; (80082cc <HAL_RCC_OscConfig+0x604>)
 8008030:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008032:	4ba6      	ldr	r3, [pc, #664]	; (80082cc <HAL_RCC_OscConfig+0x604>)
 8008034:	2180      	movs	r1, #128	; 0x80
 8008036:	0549      	lsls	r1, r1, #21
 8008038:	430a      	orrs	r2, r1
 800803a:	63da      	str	r2, [r3, #60]	; 0x3c
 800803c:	4ba3      	ldr	r3, [pc, #652]	; (80082cc <HAL_RCC_OscConfig+0x604>)
 800803e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008040:	2380      	movs	r3, #128	; 0x80
 8008042:	055b      	lsls	r3, r3, #21
 8008044:	4013      	ands	r3, r2
 8008046:	60fb      	str	r3, [r7, #12]
 8008048:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800804a:	231f      	movs	r3, #31
 800804c:	18fb      	adds	r3, r7, r3
 800804e:	2201      	movs	r2, #1
 8008050:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008052:	4b9f      	ldr	r3, [pc, #636]	; (80082d0 <HAL_RCC_OscConfig+0x608>)
 8008054:	681a      	ldr	r2, [r3, #0]
 8008056:	2380      	movs	r3, #128	; 0x80
 8008058:	005b      	lsls	r3, r3, #1
 800805a:	4013      	ands	r3, r2
 800805c:	d11a      	bne.n	8008094 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800805e:	4b9c      	ldr	r3, [pc, #624]	; (80082d0 <HAL_RCC_OscConfig+0x608>)
 8008060:	681a      	ldr	r2, [r3, #0]
 8008062:	4b9b      	ldr	r3, [pc, #620]	; (80082d0 <HAL_RCC_OscConfig+0x608>)
 8008064:	2180      	movs	r1, #128	; 0x80
 8008066:	0049      	lsls	r1, r1, #1
 8008068:	430a      	orrs	r2, r1
 800806a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800806c:	f7fd f9b6 	bl	80053dc <HAL_GetTick>
 8008070:	0003      	movs	r3, r0
 8008072:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008074:	e008      	b.n	8008088 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008076:	f7fd f9b1 	bl	80053dc <HAL_GetTick>
 800807a:	0002      	movs	r2, r0
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	1ad3      	subs	r3, r2, r3
 8008080:	2b02      	cmp	r3, #2
 8008082:	d901      	bls.n	8008088 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8008084:	2303      	movs	r3, #3
 8008086:	e11c      	b.n	80082c2 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008088:	4b91      	ldr	r3, [pc, #580]	; (80082d0 <HAL_RCC_OscConfig+0x608>)
 800808a:	681a      	ldr	r2, [r3, #0]
 800808c:	2380      	movs	r3, #128	; 0x80
 800808e:	005b      	lsls	r3, r3, #1
 8008090:	4013      	ands	r3, r2
 8008092:	d0f0      	beq.n	8008076 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	689b      	ldr	r3, [r3, #8]
 8008098:	2b01      	cmp	r3, #1
 800809a:	d106      	bne.n	80080aa <HAL_RCC_OscConfig+0x3e2>
 800809c:	4b8b      	ldr	r3, [pc, #556]	; (80082cc <HAL_RCC_OscConfig+0x604>)
 800809e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80080a0:	4b8a      	ldr	r3, [pc, #552]	; (80082cc <HAL_RCC_OscConfig+0x604>)
 80080a2:	2101      	movs	r1, #1
 80080a4:	430a      	orrs	r2, r1
 80080a6:	65da      	str	r2, [r3, #92]	; 0x5c
 80080a8:	e01c      	b.n	80080e4 <HAL_RCC_OscConfig+0x41c>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	689b      	ldr	r3, [r3, #8]
 80080ae:	2b05      	cmp	r3, #5
 80080b0:	d10c      	bne.n	80080cc <HAL_RCC_OscConfig+0x404>
 80080b2:	4b86      	ldr	r3, [pc, #536]	; (80082cc <HAL_RCC_OscConfig+0x604>)
 80080b4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80080b6:	4b85      	ldr	r3, [pc, #532]	; (80082cc <HAL_RCC_OscConfig+0x604>)
 80080b8:	2104      	movs	r1, #4
 80080ba:	430a      	orrs	r2, r1
 80080bc:	65da      	str	r2, [r3, #92]	; 0x5c
 80080be:	4b83      	ldr	r3, [pc, #524]	; (80082cc <HAL_RCC_OscConfig+0x604>)
 80080c0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80080c2:	4b82      	ldr	r3, [pc, #520]	; (80082cc <HAL_RCC_OscConfig+0x604>)
 80080c4:	2101      	movs	r1, #1
 80080c6:	430a      	orrs	r2, r1
 80080c8:	65da      	str	r2, [r3, #92]	; 0x5c
 80080ca:	e00b      	b.n	80080e4 <HAL_RCC_OscConfig+0x41c>
 80080cc:	4b7f      	ldr	r3, [pc, #508]	; (80082cc <HAL_RCC_OscConfig+0x604>)
 80080ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80080d0:	4b7e      	ldr	r3, [pc, #504]	; (80082cc <HAL_RCC_OscConfig+0x604>)
 80080d2:	2101      	movs	r1, #1
 80080d4:	438a      	bics	r2, r1
 80080d6:	65da      	str	r2, [r3, #92]	; 0x5c
 80080d8:	4b7c      	ldr	r3, [pc, #496]	; (80082cc <HAL_RCC_OscConfig+0x604>)
 80080da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80080dc:	4b7b      	ldr	r3, [pc, #492]	; (80082cc <HAL_RCC_OscConfig+0x604>)
 80080de:	2104      	movs	r1, #4
 80080e0:	438a      	bics	r2, r1
 80080e2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	689b      	ldr	r3, [r3, #8]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d014      	beq.n	8008116 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080ec:	f7fd f976 	bl	80053dc <HAL_GetTick>
 80080f0:	0003      	movs	r3, r0
 80080f2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80080f4:	e009      	b.n	800810a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80080f6:	f7fd f971 	bl	80053dc <HAL_GetTick>
 80080fa:	0002      	movs	r2, r0
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	1ad3      	subs	r3, r2, r3
 8008100:	4a74      	ldr	r2, [pc, #464]	; (80082d4 <HAL_RCC_OscConfig+0x60c>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d901      	bls.n	800810a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8008106:	2303      	movs	r3, #3
 8008108:	e0db      	b.n	80082c2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800810a:	4b70      	ldr	r3, [pc, #448]	; (80082cc <HAL_RCC_OscConfig+0x604>)
 800810c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800810e:	2202      	movs	r2, #2
 8008110:	4013      	ands	r3, r2
 8008112:	d0f0      	beq.n	80080f6 <HAL_RCC_OscConfig+0x42e>
 8008114:	e013      	b.n	800813e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008116:	f7fd f961 	bl	80053dc <HAL_GetTick>
 800811a:	0003      	movs	r3, r0
 800811c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800811e:	e009      	b.n	8008134 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008120:	f7fd f95c 	bl	80053dc <HAL_GetTick>
 8008124:	0002      	movs	r2, r0
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	1ad3      	subs	r3, r2, r3
 800812a:	4a6a      	ldr	r2, [pc, #424]	; (80082d4 <HAL_RCC_OscConfig+0x60c>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d901      	bls.n	8008134 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8008130:	2303      	movs	r3, #3
 8008132:	e0c6      	b.n	80082c2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008134:	4b65      	ldr	r3, [pc, #404]	; (80082cc <HAL_RCC_OscConfig+0x604>)
 8008136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008138:	2202      	movs	r2, #2
 800813a:	4013      	ands	r3, r2
 800813c:	d1f0      	bne.n	8008120 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800813e:	231f      	movs	r3, #31
 8008140:	18fb      	adds	r3, r7, r3
 8008142:	781b      	ldrb	r3, [r3, #0]
 8008144:	2b01      	cmp	r3, #1
 8008146:	d105      	bne.n	8008154 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8008148:	4b60      	ldr	r3, [pc, #384]	; (80082cc <HAL_RCC_OscConfig+0x604>)
 800814a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800814c:	4b5f      	ldr	r3, [pc, #380]	; (80082cc <HAL_RCC_OscConfig+0x604>)
 800814e:	4962      	ldr	r1, [pc, #392]	; (80082d8 <HAL_RCC_OscConfig+0x610>)
 8008150:	400a      	ands	r2, r1
 8008152:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	69db      	ldr	r3, [r3, #28]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d100      	bne.n	800815e <HAL_RCC_OscConfig+0x496>
 800815c:	e0b0      	b.n	80082c0 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800815e:	4b5b      	ldr	r3, [pc, #364]	; (80082cc <HAL_RCC_OscConfig+0x604>)
 8008160:	689b      	ldr	r3, [r3, #8]
 8008162:	2238      	movs	r2, #56	; 0x38
 8008164:	4013      	ands	r3, r2
 8008166:	2b10      	cmp	r3, #16
 8008168:	d100      	bne.n	800816c <HAL_RCC_OscConfig+0x4a4>
 800816a:	e078      	b.n	800825e <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	69db      	ldr	r3, [r3, #28]
 8008170:	2b02      	cmp	r3, #2
 8008172:	d153      	bne.n	800821c <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008174:	4b55      	ldr	r3, [pc, #340]	; (80082cc <HAL_RCC_OscConfig+0x604>)
 8008176:	681a      	ldr	r2, [r3, #0]
 8008178:	4b54      	ldr	r3, [pc, #336]	; (80082cc <HAL_RCC_OscConfig+0x604>)
 800817a:	4958      	ldr	r1, [pc, #352]	; (80082dc <HAL_RCC_OscConfig+0x614>)
 800817c:	400a      	ands	r2, r1
 800817e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008180:	f7fd f92c 	bl	80053dc <HAL_GetTick>
 8008184:	0003      	movs	r3, r0
 8008186:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008188:	e008      	b.n	800819c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800818a:	f7fd f927 	bl	80053dc <HAL_GetTick>
 800818e:	0002      	movs	r2, r0
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	1ad3      	subs	r3, r2, r3
 8008194:	2b02      	cmp	r3, #2
 8008196:	d901      	bls.n	800819c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8008198:	2303      	movs	r3, #3
 800819a:	e092      	b.n	80082c2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800819c:	4b4b      	ldr	r3, [pc, #300]	; (80082cc <HAL_RCC_OscConfig+0x604>)
 800819e:	681a      	ldr	r2, [r3, #0]
 80081a0:	2380      	movs	r3, #128	; 0x80
 80081a2:	049b      	lsls	r3, r3, #18
 80081a4:	4013      	ands	r3, r2
 80081a6:	d1f0      	bne.n	800818a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80081a8:	4b48      	ldr	r3, [pc, #288]	; (80082cc <HAL_RCC_OscConfig+0x604>)
 80081aa:	68db      	ldr	r3, [r3, #12]
 80081ac:	4a4c      	ldr	r2, [pc, #304]	; (80082e0 <HAL_RCC_OscConfig+0x618>)
 80081ae:	4013      	ands	r3, r2
 80081b0:	0019      	movs	r1, r3
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6a1a      	ldr	r2, [r3, #32]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ba:	431a      	orrs	r2, r3
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081c0:	021b      	lsls	r3, r3, #8
 80081c2:	431a      	orrs	r2, r3
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081c8:	431a      	orrs	r2, r3
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ce:	431a      	orrs	r2, r3
 80081d0:	4b3e      	ldr	r3, [pc, #248]	; (80082cc <HAL_RCC_OscConfig+0x604>)
 80081d2:	430a      	orrs	r2, r1
 80081d4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80081d6:	4b3d      	ldr	r3, [pc, #244]	; (80082cc <HAL_RCC_OscConfig+0x604>)
 80081d8:	681a      	ldr	r2, [r3, #0]
 80081da:	4b3c      	ldr	r3, [pc, #240]	; (80082cc <HAL_RCC_OscConfig+0x604>)
 80081dc:	2180      	movs	r1, #128	; 0x80
 80081de:	0449      	lsls	r1, r1, #17
 80081e0:	430a      	orrs	r2, r1
 80081e2:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80081e4:	4b39      	ldr	r3, [pc, #228]	; (80082cc <HAL_RCC_OscConfig+0x604>)
 80081e6:	68da      	ldr	r2, [r3, #12]
 80081e8:	4b38      	ldr	r3, [pc, #224]	; (80082cc <HAL_RCC_OscConfig+0x604>)
 80081ea:	2180      	movs	r1, #128	; 0x80
 80081ec:	0549      	lsls	r1, r1, #21
 80081ee:	430a      	orrs	r2, r1
 80081f0:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081f2:	f7fd f8f3 	bl	80053dc <HAL_GetTick>
 80081f6:	0003      	movs	r3, r0
 80081f8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80081fa:	e008      	b.n	800820e <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80081fc:	f7fd f8ee 	bl	80053dc <HAL_GetTick>
 8008200:	0002      	movs	r2, r0
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	1ad3      	subs	r3, r2, r3
 8008206:	2b02      	cmp	r3, #2
 8008208:	d901      	bls.n	800820e <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800820a:	2303      	movs	r3, #3
 800820c:	e059      	b.n	80082c2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800820e:	4b2f      	ldr	r3, [pc, #188]	; (80082cc <HAL_RCC_OscConfig+0x604>)
 8008210:	681a      	ldr	r2, [r3, #0]
 8008212:	2380      	movs	r3, #128	; 0x80
 8008214:	049b      	lsls	r3, r3, #18
 8008216:	4013      	ands	r3, r2
 8008218:	d0f0      	beq.n	80081fc <HAL_RCC_OscConfig+0x534>
 800821a:	e051      	b.n	80082c0 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800821c:	4b2b      	ldr	r3, [pc, #172]	; (80082cc <HAL_RCC_OscConfig+0x604>)
 800821e:	681a      	ldr	r2, [r3, #0]
 8008220:	4b2a      	ldr	r3, [pc, #168]	; (80082cc <HAL_RCC_OscConfig+0x604>)
 8008222:	492e      	ldr	r1, [pc, #184]	; (80082dc <HAL_RCC_OscConfig+0x614>)
 8008224:	400a      	ands	r2, r1
 8008226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008228:	f7fd f8d8 	bl	80053dc <HAL_GetTick>
 800822c:	0003      	movs	r3, r0
 800822e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008230:	e008      	b.n	8008244 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008232:	f7fd f8d3 	bl	80053dc <HAL_GetTick>
 8008236:	0002      	movs	r2, r0
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	1ad3      	subs	r3, r2, r3
 800823c:	2b02      	cmp	r3, #2
 800823e:	d901      	bls.n	8008244 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8008240:	2303      	movs	r3, #3
 8008242:	e03e      	b.n	80082c2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008244:	4b21      	ldr	r3, [pc, #132]	; (80082cc <HAL_RCC_OscConfig+0x604>)
 8008246:	681a      	ldr	r2, [r3, #0]
 8008248:	2380      	movs	r3, #128	; 0x80
 800824a:	049b      	lsls	r3, r3, #18
 800824c:	4013      	ands	r3, r2
 800824e:	d1f0      	bne.n	8008232 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8008250:	4b1e      	ldr	r3, [pc, #120]	; (80082cc <HAL_RCC_OscConfig+0x604>)
 8008252:	68da      	ldr	r2, [r3, #12]
 8008254:	4b1d      	ldr	r3, [pc, #116]	; (80082cc <HAL_RCC_OscConfig+0x604>)
 8008256:	4923      	ldr	r1, [pc, #140]	; (80082e4 <HAL_RCC_OscConfig+0x61c>)
 8008258:	400a      	ands	r2, r1
 800825a:	60da      	str	r2, [r3, #12]
 800825c:	e030      	b.n	80082c0 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	69db      	ldr	r3, [r3, #28]
 8008262:	2b01      	cmp	r3, #1
 8008264:	d101      	bne.n	800826a <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8008266:	2301      	movs	r3, #1
 8008268:	e02b      	b.n	80082c2 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800826a:	4b18      	ldr	r3, [pc, #96]	; (80082cc <HAL_RCC_OscConfig+0x604>)
 800826c:	68db      	ldr	r3, [r3, #12]
 800826e:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	2203      	movs	r2, #3
 8008274:	401a      	ands	r2, r3
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6a1b      	ldr	r3, [r3, #32]
 800827a:	429a      	cmp	r2, r3
 800827c:	d11e      	bne.n	80082bc <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	2270      	movs	r2, #112	; 0x70
 8008282:	401a      	ands	r2, r3
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008288:	429a      	cmp	r2, r3
 800828a:	d117      	bne.n	80082bc <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800828c:	697a      	ldr	r2, [r7, #20]
 800828e:	23fe      	movs	r3, #254	; 0xfe
 8008290:	01db      	lsls	r3, r3, #7
 8008292:	401a      	ands	r2, r3
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008298:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800829a:	429a      	cmp	r2, r3
 800829c:	d10e      	bne.n	80082bc <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800829e:	697a      	ldr	r2, [r7, #20]
 80082a0:	23f8      	movs	r3, #248	; 0xf8
 80082a2:	039b      	lsls	r3, r3, #14
 80082a4:	401a      	ands	r2, r3
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80082aa:	429a      	cmp	r2, r3
 80082ac:	d106      	bne.n	80082bc <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	0f5b      	lsrs	r3, r3, #29
 80082b2:	075a      	lsls	r2, r3, #29
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80082b8:	429a      	cmp	r2, r3
 80082ba:	d001      	beq.n	80082c0 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 80082bc:	2301      	movs	r3, #1
 80082be:	e000      	b.n	80082c2 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 80082c0:	2300      	movs	r3, #0
}
 80082c2:	0018      	movs	r0, r3
 80082c4:	46bd      	mov	sp, r7
 80082c6:	b008      	add	sp, #32
 80082c8:	bd80      	pop	{r7, pc}
 80082ca:	46c0      	nop			; (mov r8, r8)
 80082cc:	40021000 	.word	0x40021000
 80082d0:	40007000 	.word	0x40007000
 80082d4:	00001388 	.word	0x00001388
 80082d8:	efffffff 	.word	0xefffffff
 80082dc:	feffffff 	.word	0xfeffffff
 80082e0:	1fc1808c 	.word	0x1fc1808c
 80082e4:	effefffc 	.word	0xeffefffc

080082e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b084      	sub	sp, #16
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d101      	bne.n	80082fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80082f8:	2301      	movs	r3, #1
 80082fa:	e0e9      	b.n	80084d0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80082fc:	4b76      	ldr	r3, [pc, #472]	; (80084d8 <HAL_RCC_ClockConfig+0x1f0>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	2207      	movs	r2, #7
 8008302:	4013      	ands	r3, r2
 8008304:	683a      	ldr	r2, [r7, #0]
 8008306:	429a      	cmp	r2, r3
 8008308:	d91e      	bls.n	8008348 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800830a:	4b73      	ldr	r3, [pc, #460]	; (80084d8 <HAL_RCC_ClockConfig+0x1f0>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	2207      	movs	r2, #7
 8008310:	4393      	bics	r3, r2
 8008312:	0019      	movs	r1, r3
 8008314:	4b70      	ldr	r3, [pc, #448]	; (80084d8 <HAL_RCC_ClockConfig+0x1f0>)
 8008316:	683a      	ldr	r2, [r7, #0]
 8008318:	430a      	orrs	r2, r1
 800831a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800831c:	f7fd f85e 	bl	80053dc <HAL_GetTick>
 8008320:	0003      	movs	r3, r0
 8008322:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008324:	e009      	b.n	800833a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008326:	f7fd f859 	bl	80053dc <HAL_GetTick>
 800832a:	0002      	movs	r2, r0
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	1ad3      	subs	r3, r2, r3
 8008330:	4a6a      	ldr	r2, [pc, #424]	; (80084dc <HAL_RCC_ClockConfig+0x1f4>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d901      	bls.n	800833a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8008336:	2303      	movs	r3, #3
 8008338:	e0ca      	b.n	80084d0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800833a:	4b67      	ldr	r3, [pc, #412]	; (80084d8 <HAL_RCC_ClockConfig+0x1f0>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	2207      	movs	r2, #7
 8008340:	4013      	ands	r3, r2
 8008342:	683a      	ldr	r2, [r7, #0]
 8008344:	429a      	cmp	r2, r3
 8008346:	d1ee      	bne.n	8008326 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	2202      	movs	r2, #2
 800834e:	4013      	ands	r3, r2
 8008350:	d015      	beq.n	800837e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	2204      	movs	r2, #4
 8008358:	4013      	ands	r3, r2
 800835a:	d006      	beq.n	800836a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800835c:	4b60      	ldr	r3, [pc, #384]	; (80084e0 <HAL_RCC_ClockConfig+0x1f8>)
 800835e:	689a      	ldr	r2, [r3, #8]
 8008360:	4b5f      	ldr	r3, [pc, #380]	; (80084e0 <HAL_RCC_ClockConfig+0x1f8>)
 8008362:	21e0      	movs	r1, #224	; 0xe0
 8008364:	01c9      	lsls	r1, r1, #7
 8008366:	430a      	orrs	r2, r1
 8008368:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800836a:	4b5d      	ldr	r3, [pc, #372]	; (80084e0 <HAL_RCC_ClockConfig+0x1f8>)
 800836c:	689b      	ldr	r3, [r3, #8]
 800836e:	4a5d      	ldr	r2, [pc, #372]	; (80084e4 <HAL_RCC_ClockConfig+0x1fc>)
 8008370:	4013      	ands	r3, r2
 8008372:	0019      	movs	r1, r3
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	689a      	ldr	r2, [r3, #8]
 8008378:	4b59      	ldr	r3, [pc, #356]	; (80084e0 <HAL_RCC_ClockConfig+0x1f8>)
 800837a:	430a      	orrs	r2, r1
 800837c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	2201      	movs	r2, #1
 8008384:	4013      	ands	r3, r2
 8008386:	d057      	beq.n	8008438 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	685b      	ldr	r3, [r3, #4]
 800838c:	2b01      	cmp	r3, #1
 800838e:	d107      	bne.n	80083a0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008390:	4b53      	ldr	r3, [pc, #332]	; (80084e0 <HAL_RCC_ClockConfig+0x1f8>)
 8008392:	681a      	ldr	r2, [r3, #0]
 8008394:	2380      	movs	r3, #128	; 0x80
 8008396:	029b      	lsls	r3, r3, #10
 8008398:	4013      	ands	r3, r2
 800839a:	d12b      	bne.n	80083f4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800839c:	2301      	movs	r3, #1
 800839e:	e097      	b.n	80084d0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	685b      	ldr	r3, [r3, #4]
 80083a4:	2b02      	cmp	r3, #2
 80083a6:	d107      	bne.n	80083b8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80083a8:	4b4d      	ldr	r3, [pc, #308]	; (80084e0 <HAL_RCC_ClockConfig+0x1f8>)
 80083aa:	681a      	ldr	r2, [r3, #0]
 80083ac:	2380      	movs	r3, #128	; 0x80
 80083ae:	049b      	lsls	r3, r3, #18
 80083b0:	4013      	ands	r3, r2
 80083b2:	d11f      	bne.n	80083f4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80083b4:	2301      	movs	r3, #1
 80083b6:	e08b      	b.n	80084d0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d107      	bne.n	80083d0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80083c0:	4b47      	ldr	r3, [pc, #284]	; (80084e0 <HAL_RCC_ClockConfig+0x1f8>)
 80083c2:	681a      	ldr	r2, [r3, #0]
 80083c4:	2380      	movs	r3, #128	; 0x80
 80083c6:	00db      	lsls	r3, r3, #3
 80083c8:	4013      	ands	r3, r2
 80083ca:	d113      	bne.n	80083f4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80083cc:	2301      	movs	r3, #1
 80083ce:	e07f      	b.n	80084d0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	2b03      	cmp	r3, #3
 80083d6:	d106      	bne.n	80083e6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80083d8:	4b41      	ldr	r3, [pc, #260]	; (80084e0 <HAL_RCC_ClockConfig+0x1f8>)
 80083da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083dc:	2202      	movs	r2, #2
 80083de:	4013      	ands	r3, r2
 80083e0:	d108      	bne.n	80083f4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80083e2:	2301      	movs	r3, #1
 80083e4:	e074      	b.n	80084d0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80083e6:	4b3e      	ldr	r3, [pc, #248]	; (80084e0 <HAL_RCC_ClockConfig+0x1f8>)
 80083e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083ea:	2202      	movs	r2, #2
 80083ec:	4013      	ands	r3, r2
 80083ee:	d101      	bne.n	80083f4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80083f0:	2301      	movs	r3, #1
 80083f2:	e06d      	b.n	80084d0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80083f4:	4b3a      	ldr	r3, [pc, #232]	; (80084e0 <HAL_RCC_ClockConfig+0x1f8>)
 80083f6:	689b      	ldr	r3, [r3, #8]
 80083f8:	2207      	movs	r2, #7
 80083fa:	4393      	bics	r3, r2
 80083fc:	0019      	movs	r1, r3
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	685a      	ldr	r2, [r3, #4]
 8008402:	4b37      	ldr	r3, [pc, #220]	; (80084e0 <HAL_RCC_ClockConfig+0x1f8>)
 8008404:	430a      	orrs	r2, r1
 8008406:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008408:	f7fc ffe8 	bl	80053dc <HAL_GetTick>
 800840c:	0003      	movs	r3, r0
 800840e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008410:	e009      	b.n	8008426 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008412:	f7fc ffe3 	bl	80053dc <HAL_GetTick>
 8008416:	0002      	movs	r2, r0
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	1ad3      	subs	r3, r2, r3
 800841c:	4a2f      	ldr	r2, [pc, #188]	; (80084dc <HAL_RCC_ClockConfig+0x1f4>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d901      	bls.n	8008426 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8008422:	2303      	movs	r3, #3
 8008424:	e054      	b.n	80084d0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008426:	4b2e      	ldr	r3, [pc, #184]	; (80084e0 <HAL_RCC_ClockConfig+0x1f8>)
 8008428:	689b      	ldr	r3, [r3, #8]
 800842a:	2238      	movs	r2, #56	; 0x38
 800842c:	401a      	ands	r2, r3
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	00db      	lsls	r3, r3, #3
 8008434:	429a      	cmp	r2, r3
 8008436:	d1ec      	bne.n	8008412 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008438:	4b27      	ldr	r3, [pc, #156]	; (80084d8 <HAL_RCC_ClockConfig+0x1f0>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	2207      	movs	r2, #7
 800843e:	4013      	ands	r3, r2
 8008440:	683a      	ldr	r2, [r7, #0]
 8008442:	429a      	cmp	r2, r3
 8008444:	d21e      	bcs.n	8008484 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008446:	4b24      	ldr	r3, [pc, #144]	; (80084d8 <HAL_RCC_ClockConfig+0x1f0>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	2207      	movs	r2, #7
 800844c:	4393      	bics	r3, r2
 800844e:	0019      	movs	r1, r3
 8008450:	4b21      	ldr	r3, [pc, #132]	; (80084d8 <HAL_RCC_ClockConfig+0x1f0>)
 8008452:	683a      	ldr	r2, [r7, #0]
 8008454:	430a      	orrs	r2, r1
 8008456:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008458:	f7fc ffc0 	bl	80053dc <HAL_GetTick>
 800845c:	0003      	movs	r3, r0
 800845e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008460:	e009      	b.n	8008476 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008462:	f7fc ffbb 	bl	80053dc <HAL_GetTick>
 8008466:	0002      	movs	r2, r0
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	1ad3      	subs	r3, r2, r3
 800846c:	4a1b      	ldr	r2, [pc, #108]	; (80084dc <HAL_RCC_ClockConfig+0x1f4>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d901      	bls.n	8008476 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8008472:	2303      	movs	r3, #3
 8008474:	e02c      	b.n	80084d0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008476:	4b18      	ldr	r3, [pc, #96]	; (80084d8 <HAL_RCC_ClockConfig+0x1f0>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	2207      	movs	r2, #7
 800847c:	4013      	ands	r3, r2
 800847e:	683a      	ldr	r2, [r7, #0]
 8008480:	429a      	cmp	r2, r3
 8008482:	d1ee      	bne.n	8008462 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	2204      	movs	r2, #4
 800848a:	4013      	ands	r3, r2
 800848c:	d009      	beq.n	80084a2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800848e:	4b14      	ldr	r3, [pc, #80]	; (80084e0 <HAL_RCC_ClockConfig+0x1f8>)
 8008490:	689b      	ldr	r3, [r3, #8]
 8008492:	4a15      	ldr	r2, [pc, #84]	; (80084e8 <HAL_RCC_ClockConfig+0x200>)
 8008494:	4013      	ands	r3, r2
 8008496:	0019      	movs	r1, r3
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	68da      	ldr	r2, [r3, #12]
 800849c:	4b10      	ldr	r3, [pc, #64]	; (80084e0 <HAL_RCC_ClockConfig+0x1f8>)
 800849e:	430a      	orrs	r2, r1
 80084a0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80084a2:	f000 f829 	bl	80084f8 <HAL_RCC_GetSysClockFreq>
 80084a6:	0001      	movs	r1, r0
 80084a8:	4b0d      	ldr	r3, [pc, #52]	; (80084e0 <HAL_RCC_ClockConfig+0x1f8>)
 80084aa:	689b      	ldr	r3, [r3, #8]
 80084ac:	0a1b      	lsrs	r3, r3, #8
 80084ae:	220f      	movs	r2, #15
 80084b0:	401a      	ands	r2, r3
 80084b2:	4b0e      	ldr	r3, [pc, #56]	; (80084ec <HAL_RCC_ClockConfig+0x204>)
 80084b4:	0092      	lsls	r2, r2, #2
 80084b6:	58d3      	ldr	r3, [r2, r3]
 80084b8:	221f      	movs	r2, #31
 80084ba:	4013      	ands	r3, r2
 80084bc:	000a      	movs	r2, r1
 80084be:	40da      	lsrs	r2, r3
 80084c0:	4b0b      	ldr	r3, [pc, #44]	; (80084f0 <HAL_RCC_ClockConfig+0x208>)
 80084c2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80084c4:	4b0b      	ldr	r3, [pc, #44]	; (80084f4 <HAL_RCC_ClockConfig+0x20c>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	0018      	movs	r0, r3
 80084ca:	f7fc ff2b 	bl	8005324 <HAL_InitTick>
 80084ce:	0003      	movs	r3, r0
}
 80084d0:	0018      	movs	r0, r3
 80084d2:	46bd      	mov	sp, r7
 80084d4:	b004      	add	sp, #16
 80084d6:	bd80      	pop	{r7, pc}
 80084d8:	40022000 	.word	0x40022000
 80084dc:	00001388 	.word	0x00001388
 80084e0:	40021000 	.word	0x40021000
 80084e4:	fffff0ff 	.word	0xfffff0ff
 80084e8:	ffff8fff 	.word	0xffff8fff
 80084ec:	0800c894 	.word	0x0800c894
 80084f0:	20000004 	.word	0x20000004
 80084f4:	20000008 	.word	0x20000008

080084f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b086      	sub	sp, #24
 80084fc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80084fe:	4b3c      	ldr	r3, [pc, #240]	; (80085f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008500:	689b      	ldr	r3, [r3, #8]
 8008502:	2238      	movs	r2, #56	; 0x38
 8008504:	4013      	ands	r3, r2
 8008506:	d10f      	bne.n	8008528 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8008508:	4b39      	ldr	r3, [pc, #228]	; (80085f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	0adb      	lsrs	r3, r3, #11
 800850e:	2207      	movs	r2, #7
 8008510:	4013      	ands	r3, r2
 8008512:	2201      	movs	r2, #1
 8008514:	409a      	lsls	r2, r3
 8008516:	0013      	movs	r3, r2
 8008518:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800851a:	6839      	ldr	r1, [r7, #0]
 800851c:	4835      	ldr	r0, [pc, #212]	; (80085f4 <HAL_RCC_GetSysClockFreq+0xfc>)
 800851e:	f7f7 fe01 	bl	8000124 <__udivsi3>
 8008522:	0003      	movs	r3, r0
 8008524:	613b      	str	r3, [r7, #16]
 8008526:	e05d      	b.n	80085e4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008528:	4b31      	ldr	r3, [pc, #196]	; (80085f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800852a:	689b      	ldr	r3, [r3, #8]
 800852c:	2238      	movs	r2, #56	; 0x38
 800852e:	4013      	ands	r3, r2
 8008530:	2b08      	cmp	r3, #8
 8008532:	d102      	bne.n	800853a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008534:	4b30      	ldr	r3, [pc, #192]	; (80085f8 <HAL_RCC_GetSysClockFreq+0x100>)
 8008536:	613b      	str	r3, [r7, #16]
 8008538:	e054      	b.n	80085e4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800853a:	4b2d      	ldr	r3, [pc, #180]	; (80085f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800853c:	689b      	ldr	r3, [r3, #8]
 800853e:	2238      	movs	r2, #56	; 0x38
 8008540:	4013      	ands	r3, r2
 8008542:	2b10      	cmp	r3, #16
 8008544:	d138      	bne.n	80085b8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8008546:	4b2a      	ldr	r3, [pc, #168]	; (80085f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008548:	68db      	ldr	r3, [r3, #12]
 800854a:	2203      	movs	r2, #3
 800854c:	4013      	ands	r3, r2
 800854e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008550:	4b27      	ldr	r3, [pc, #156]	; (80085f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008552:	68db      	ldr	r3, [r3, #12]
 8008554:	091b      	lsrs	r3, r3, #4
 8008556:	2207      	movs	r2, #7
 8008558:	4013      	ands	r3, r2
 800855a:	3301      	adds	r3, #1
 800855c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2b03      	cmp	r3, #3
 8008562:	d10d      	bne.n	8008580 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008564:	68b9      	ldr	r1, [r7, #8]
 8008566:	4824      	ldr	r0, [pc, #144]	; (80085f8 <HAL_RCC_GetSysClockFreq+0x100>)
 8008568:	f7f7 fddc 	bl	8000124 <__udivsi3>
 800856c:	0003      	movs	r3, r0
 800856e:	0019      	movs	r1, r3
 8008570:	4b1f      	ldr	r3, [pc, #124]	; (80085f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008572:	68db      	ldr	r3, [r3, #12]
 8008574:	0a1b      	lsrs	r3, r3, #8
 8008576:	227f      	movs	r2, #127	; 0x7f
 8008578:	4013      	ands	r3, r2
 800857a:	434b      	muls	r3, r1
 800857c:	617b      	str	r3, [r7, #20]
        break;
 800857e:	e00d      	b.n	800859c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8008580:	68b9      	ldr	r1, [r7, #8]
 8008582:	481c      	ldr	r0, [pc, #112]	; (80085f4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8008584:	f7f7 fdce 	bl	8000124 <__udivsi3>
 8008588:	0003      	movs	r3, r0
 800858a:	0019      	movs	r1, r3
 800858c:	4b18      	ldr	r3, [pc, #96]	; (80085f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800858e:	68db      	ldr	r3, [r3, #12]
 8008590:	0a1b      	lsrs	r3, r3, #8
 8008592:	227f      	movs	r2, #127	; 0x7f
 8008594:	4013      	ands	r3, r2
 8008596:	434b      	muls	r3, r1
 8008598:	617b      	str	r3, [r7, #20]
        break;
 800859a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800859c:	4b14      	ldr	r3, [pc, #80]	; (80085f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800859e:	68db      	ldr	r3, [r3, #12]
 80085a0:	0f5b      	lsrs	r3, r3, #29
 80085a2:	2207      	movs	r2, #7
 80085a4:	4013      	ands	r3, r2
 80085a6:	3301      	adds	r3, #1
 80085a8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80085aa:	6879      	ldr	r1, [r7, #4]
 80085ac:	6978      	ldr	r0, [r7, #20]
 80085ae:	f7f7 fdb9 	bl	8000124 <__udivsi3>
 80085b2:	0003      	movs	r3, r0
 80085b4:	613b      	str	r3, [r7, #16]
 80085b6:	e015      	b.n	80085e4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80085b8:	4b0d      	ldr	r3, [pc, #52]	; (80085f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80085ba:	689b      	ldr	r3, [r3, #8]
 80085bc:	2238      	movs	r2, #56	; 0x38
 80085be:	4013      	ands	r3, r2
 80085c0:	2b20      	cmp	r3, #32
 80085c2:	d103      	bne.n	80085cc <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80085c4:	2380      	movs	r3, #128	; 0x80
 80085c6:	021b      	lsls	r3, r3, #8
 80085c8:	613b      	str	r3, [r7, #16]
 80085ca:	e00b      	b.n	80085e4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80085cc:	4b08      	ldr	r3, [pc, #32]	; (80085f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80085ce:	689b      	ldr	r3, [r3, #8]
 80085d0:	2238      	movs	r2, #56	; 0x38
 80085d2:	4013      	ands	r3, r2
 80085d4:	2b18      	cmp	r3, #24
 80085d6:	d103      	bne.n	80085e0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80085d8:	23fa      	movs	r3, #250	; 0xfa
 80085da:	01db      	lsls	r3, r3, #7
 80085dc:	613b      	str	r3, [r7, #16]
 80085de:	e001      	b.n	80085e4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80085e0:	2300      	movs	r3, #0
 80085e2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80085e4:	693b      	ldr	r3, [r7, #16]
}
 80085e6:	0018      	movs	r0, r3
 80085e8:	46bd      	mov	sp, r7
 80085ea:	b006      	add	sp, #24
 80085ec:	bd80      	pop	{r7, pc}
 80085ee:	46c0      	nop			; (mov r8, r8)
 80085f0:	40021000 	.word	0x40021000
 80085f4:	00f42400 	.word	0x00f42400
 80085f8:	007a1200 	.word	0x007a1200

080085fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008600:	4b02      	ldr	r3, [pc, #8]	; (800860c <HAL_RCC_GetHCLKFreq+0x10>)
 8008602:	681b      	ldr	r3, [r3, #0]
}
 8008604:	0018      	movs	r0, r3
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}
 800860a:	46c0      	nop			; (mov r8, r8)
 800860c:	20000004 	.word	0x20000004

08008610 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008610:	b5b0      	push	{r4, r5, r7, lr}
 8008612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8008614:	f7ff fff2 	bl	80085fc <HAL_RCC_GetHCLKFreq>
 8008618:	0004      	movs	r4, r0
 800861a:	f7ff fb49 	bl	8007cb0 <LL_RCC_GetAPB1Prescaler>
 800861e:	0003      	movs	r3, r0
 8008620:	0b1a      	lsrs	r2, r3, #12
 8008622:	4b05      	ldr	r3, [pc, #20]	; (8008638 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008624:	0092      	lsls	r2, r2, #2
 8008626:	58d3      	ldr	r3, [r2, r3]
 8008628:	221f      	movs	r2, #31
 800862a:	4013      	ands	r3, r2
 800862c:	40dc      	lsrs	r4, r3
 800862e:	0023      	movs	r3, r4
}
 8008630:	0018      	movs	r0, r3
 8008632:	46bd      	mov	sp, r7
 8008634:	bdb0      	pop	{r4, r5, r7, pc}
 8008636:	46c0      	nop			; (mov r8, r8)
 8008638:	0800c8d4 	.word	0x0800c8d4

0800863c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b086      	sub	sp, #24
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8008644:	2313      	movs	r3, #19
 8008646:	18fb      	adds	r3, r7, r3
 8008648:	2200      	movs	r2, #0
 800864a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800864c:	2312      	movs	r3, #18
 800864e:	18fb      	adds	r3, r7, r3
 8008650:	2200      	movs	r2, #0
 8008652:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681a      	ldr	r2, [r3, #0]
 8008658:	2380      	movs	r3, #128	; 0x80
 800865a:	029b      	lsls	r3, r3, #10
 800865c:	4013      	ands	r3, r2
 800865e:	d100      	bne.n	8008662 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8008660:	e0a3      	b.n	80087aa <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008662:	2011      	movs	r0, #17
 8008664:	183b      	adds	r3, r7, r0
 8008666:	2200      	movs	r2, #0
 8008668:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800866a:	4b86      	ldr	r3, [pc, #536]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800866c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800866e:	2380      	movs	r3, #128	; 0x80
 8008670:	055b      	lsls	r3, r3, #21
 8008672:	4013      	ands	r3, r2
 8008674:	d110      	bne.n	8008698 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008676:	4b83      	ldr	r3, [pc, #524]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008678:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800867a:	4b82      	ldr	r3, [pc, #520]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800867c:	2180      	movs	r1, #128	; 0x80
 800867e:	0549      	lsls	r1, r1, #21
 8008680:	430a      	orrs	r2, r1
 8008682:	63da      	str	r2, [r3, #60]	; 0x3c
 8008684:	4b7f      	ldr	r3, [pc, #508]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008686:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008688:	2380      	movs	r3, #128	; 0x80
 800868a:	055b      	lsls	r3, r3, #21
 800868c:	4013      	ands	r3, r2
 800868e:	60bb      	str	r3, [r7, #8]
 8008690:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008692:	183b      	adds	r3, r7, r0
 8008694:	2201      	movs	r2, #1
 8008696:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008698:	4b7b      	ldr	r3, [pc, #492]	; (8008888 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800869a:	681a      	ldr	r2, [r3, #0]
 800869c:	4b7a      	ldr	r3, [pc, #488]	; (8008888 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800869e:	2180      	movs	r1, #128	; 0x80
 80086a0:	0049      	lsls	r1, r1, #1
 80086a2:	430a      	orrs	r2, r1
 80086a4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80086a6:	f7fc fe99 	bl	80053dc <HAL_GetTick>
 80086aa:	0003      	movs	r3, r0
 80086ac:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80086ae:	e00b      	b.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80086b0:	f7fc fe94 	bl	80053dc <HAL_GetTick>
 80086b4:	0002      	movs	r2, r0
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	1ad3      	subs	r3, r2, r3
 80086ba:	2b02      	cmp	r3, #2
 80086bc:	d904      	bls.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80086be:	2313      	movs	r3, #19
 80086c0:	18fb      	adds	r3, r7, r3
 80086c2:	2203      	movs	r2, #3
 80086c4:	701a      	strb	r2, [r3, #0]
        break;
 80086c6:	e005      	b.n	80086d4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80086c8:	4b6f      	ldr	r3, [pc, #444]	; (8008888 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80086ca:	681a      	ldr	r2, [r3, #0]
 80086cc:	2380      	movs	r3, #128	; 0x80
 80086ce:	005b      	lsls	r3, r3, #1
 80086d0:	4013      	ands	r3, r2
 80086d2:	d0ed      	beq.n	80086b0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80086d4:	2313      	movs	r3, #19
 80086d6:	18fb      	adds	r3, r7, r3
 80086d8:	781b      	ldrb	r3, [r3, #0]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d154      	bne.n	8008788 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80086de:	4b69      	ldr	r3, [pc, #420]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80086e0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80086e2:	23c0      	movs	r3, #192	; 0xc0
 80086e4:	009b      	lsls	r3, r3, #2
 80086e6:	4013      	ands	r3, r2
 80086e8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d019      	beq.n	8008724 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	699b      	ldr	r3, [r3, #24]
 80086f4:	697a      	ldr	r2, [r7, #20]
 80086f6:	429a      	cmp	r2, r3
 80086f8:	d014      	beq.n	8008724 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80086fa:	4b62      	ldr	r3, [pc, #392]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80086fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086fe:	4a63      	ldr	r2, [pc, #396]	; (800888c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8008700:	4013      	ands	r3, r2
 8008702:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008704:	4b5f      	ldr	r3, [pc, #380]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008706:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008708:	4b5e      	ldr	r3, [pc, #376]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800870a:	2180      	movs	r1, #128	; 0x80
 800870c:	0249      	lsls	r1, r1, #9
 800870e:	430a      	orrs	r2, r1
 8008710:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008712:	4b5c      	ldr	r3, [pc, #368]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008714:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008716:	4b5b      	ldr	r3, [pc, #364]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008718:	495d      	ldr	r1, [pc, #372]	; (8008890 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800871a:	400a      	ands	r2, r1
 800871c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800871e:	4b59      	ldr	r3, [pc, #356]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008720:	697a      	ldr	r2, [r7, #20]
 8008722:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	2201      	movs	r2, #1
 8008728:	4013      	ands	r3, r2
 800872a:	d016      	beq.n	800875a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800872c:	f7fc fe56 	bl	80053dc <HAL_GetTick>
 8008730:	0003      	movs	r3, r0
 8008732:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008734:	e00c      	b.n	8008750 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008736:	f7fc fe51 	bl	80053dc <HAL_GetTick>
 800873a:	0002      	movs	r2, r0
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	1ad3      	subs	r3, r2, r3
 8008740:	4a54      	ldr	r2, [pc, #336]	; (8008894 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d904      	bls.n	8008750 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8008746:	2313      	movs	r3, #19
 8008748:	18fb      	adds	r3, r7, r3
 800874a:	2203      	movs	r2, #3
 800874c:	701a      	strb	r2, [r3, #0]
            break;
 800874e:	e004      	b.n	800875a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008750:	4b4c      	ldr	r3, [pc, #304]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008754:	2202      	movs	r2, #2
 8008756:	4013      	ands	r3, r2
 8008758:	d0ed      	beq.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800875a:	2313      	movs	r3, #19
 800875c:	18fb      	adds	r3, r7, r3
 800875e:	781b      	ldrb	r3, [r3, #0]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d10a      	bne.n	800877a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008764:	4b47      	ldr	r3, [pc, #284]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008768:	4a48      	ldr	r2, [pc, #288]	; (800888c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800876a:	4013      	ands	r3, r2
 800876c:	0019      	movs	r1, r3
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	699a      	ldr	r2, [r3, #24]
 8008772:	4b44      	ldr	r3, [pc, #272]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008774:	430a      	orrs	r2, r1
 8008776:	65da      	str	r2, [r3, #92]	; 0x5c
 8008778:	e00c      	b.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800877a:	2312      	movs	r3, #18
 800877c:	18fb      	adds	r3, r7, r3
 800877e:	2213      	movs	r2, #19
 8008780:	18ba      	adds	r2, r7, r2
 8008782:	7812      	ldrb	r2, [r2, #0]
 8008784:	701a      	strb	r2, [r3, #0]
 8008786:	e005      	b.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008788:	2312      	movs	r3, #18
 800878a:	18fb      	adds	r3, r7, r3
 800878c:	2213      	movs	r2, #19
 800878e:	18ba      	adds	r2, r7, r2
 8008790:	7812      	ldrb	r2, [r2, #0]
 8008792:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008794:	2311      	movs	r3, #17
 8008796:	18fb      	adds	r3, r7, r3
 8008798:	781b      	ldrb	r3, [r3, #0]
 800879a:	2b01      	cmp	r3, #1
 800879c:	d105      	bne.n	80087aa <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800879e:	4b39      	ldr	r3, [pc, #228]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80087a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80087a2:	4b38      	ldr	r3, [pc, #224]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80087a4:	493c      	ldr	r1, [pc, #240]	; (8008898 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80087a6:	400a      	ands	r2, r1
 80087a8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	2201      	movs	r2, #1
 80087b0:	4013      	ands	r3, r2
 80087b2:	d009      	beq.n	80087c8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80087b4:	4b33      	ldr	r3, [pc, #204]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80087b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087b8:	2203      	movs	r2, #3
 80087ba:	4393      	bics	r3, r2
 80087bc:	0019      	movs	r1, r3
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	685a      	ldr	r2, [r3, #4]
 80087c2:	4b30      	ldr	r3, [pc, #192]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80087c4:	430a      	orrs	r2, r1
 80087c6:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	2202      	movs	r2, #2
 80087ce:	4013      	ands	r3, r2
 80087d0:	d009      	beq.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80087d2:	4b2c      	ldr	r3, [pc, #176]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80087d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087d6:	220c      	movs	r2, #12
 80087d8:	4393      	bics	r3, r2
 80087da:	0019      	movs	r1, r3
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	689a      	ldr	r2, [r3, #8]
 80087e0:	4b28      	ldr	r3, [pc, #160]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80087e2:	430a      	orrs	r2, r1
 80087e4:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	2220      	movs	r2, #32
 80087ec:	4013      	ands	r3, r2
 80087ee:	d009      	beq.n	8008804 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80087f0:	4b24      	ldr	r3, [pc, #144]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80087f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087f4:	4a29      	ldr	r2, [pc, #164]	; (800889c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80087f6:	4013      	ands	r3, r2
 80087f8:	0019      	movs	r1, r3
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	68da      	ldr	r2, [r3, #12]
 80087fe:	4b21      	ldr	r3, [pc, #132]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008800:	430a      	orrs	r2, r1
 8008802:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681a      	ldr	r2, [r3, #0]
 8008808:	2380      	movs	r3, #128	; 0x80
 800880a:	01db      	lsls	r3, r3, #7
 800880c:	4013      	ands	r3, r2
 800880e:	d015      	beq.n	800883c <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008810:	4b1c      	ldr	r3, [pc, #112]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008814:	009b      	lsls	r3, r3, #2
 8008816:	0899      	lsrs	r1, r3, #2
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	695a      	ldr	r2, [r3, #20]
 800881c:	4b19      	ldr	r3, [pc, #100]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800881e:	430a      	orrs	r2, r1
 8008820:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	695a      	ldr	r2, [r3, #20]
 8008826:	2380      	movs	r3, #128	; 0x80
 8008828:	05db      	lsls	r3, r3, #23
 800882a:	429a      	cmp	r2, r3
 800882c:	d106      	bne.n	800883c <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800882e:	4b15      	ldr	r3, [pc, #84]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008830:	68da      	ldr	r2, [r3, #12]
 8008832:	4b14      	ldr	r3, [pc, #80]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008834:	2180      	movs	r1, #128	; 0x80
 8008836:	0249      	lsls	r1, r1, #9
 8008838:	430a      	orrs	r2, r1
 800883a:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681a      	ldr	r2, [r3, #0]
 8008840:	2380      	movs	r3, #128	; 0x80
 8008842:	011b      	lsls	r3, r3, #4
 8008844:	4013      	ands	r3, r2
 8008846:	d016      	beq.n	8008876 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8008848:	4b0e      	ldr	r3, [pc, #56]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800884a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800884c:	4a14      	ldr	r2, [pc, #80]	; (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800884e:	4013      	ands	r3, r2
 8008850:	0019      	movs	r1, r3
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	691a      	ldr	r2, [r3, #16]
 8008856:	4b0b      	ldr	r3, [pc, #44]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008858:	430a      	orrs	r2, r1
 800885a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	691a      	ldr	r2, [r3, #16]
 8008860:	2380      	movs	r3, #128	; 0x80
 8008862:	01db      	lsls	r3, r3, #7
 8008864:	429a      	cmp	r2, r3
 8008866:	d106      	bne.n	8008876 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8008868:	4b06      	ldr	r3, [pc, #24]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800886a:	68da      	ldr	r2, [r3, #12]
 800886c:	4b05      	ldr	r3, [pc, #20]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800886e:	2180      	movs	r1, #128	; 0x80
 8008870:	0249      	lsls	r1, r1, #9
 8008872:	430a      	orrs	r2, r1
 8008874:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8008876:	2312      	movs	r3, #18
 8008878:	18fb      	adds	r3, r7, r3
 800887a:	781b      	ldrb	r3, [r3, #0]
}
 800887c:	0018      	movs	r0, r3
 800887e:	46bd      	mov	sp, r7
 8008880:	b006      	add	sp, #24
 8008882:	bd80      	pop	{r7, pc}
 8008884:	40021000 	.word	0x40021000
 8008888:	40007000 	.word	0x40007000
 800888c:	fffffcff 	.word	0xfffffcff
 8008890:	fffeffff 	.word	0xfffeffff
 8008894:	00001388 	.word	0x00001388
 8008898:	efffffff 	.word	0xefffffff
 800889c:	ffffcfff 	.word	0xffffcfff
 80088a0:	ffff3fff 	.word	0xffff3fff

080088a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b082      	sub	sp, #8
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d101      	bne.n	80088b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80088b2:	2301      	movs	r3, #1
 80088b4:	e04a      	b.n	800894c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	223d      	movs	r2, #61	; 0x3d
 80088ba:	5c9b      	ldrb	r3, [r3, r2]
 80088bc:	b2db      	uxtb	r3, r3
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d107      	bne.n	80088d2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	223c      	movs	r2, #60	; 0x3c
 80088c6:	2100      	movs	r1, #0
 80088c8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	0018      	movs	r0, r3
 80088ce:	f7fc f9ff 	bl	8004cd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	223d      	movs	r2, #61	; 0x3d
 80088d6:	2102      	movs	r1, #2
 80088d8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681a      	ldr	r2, [r3, #0]
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	3304      	adds	r3, #4
 80088e2:	0019      	movs	r1, r3
 80088e4:	0010      	movs	r0, r2
 80088e6:	f000 fc13 	bl	8009110 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2248      	movs	r2, #72	; 0x48
 80088ee:	2101      	movs	r1, #1
 80088f0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	223e      	movs	r2, #62	; 0x3e
 80088f6:	2101      	movs	r1, #1
 80088f8:	5499      	strb	r1, [r3, r2]
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	223f      	movs	r2, #63	; 0x3f
 80088fe:	2101      	movs	r1, #1
 8008900:	5499      	strb	r1, [r3, r2]
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2240      	movs	r2, #64	; 0x40
 8008906:	2101      	movs	r1, #1
 8008908:	5499      	strb	r1, [r3, r2]
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2241      	movs	r2, #65	; 0x41
 800890e:	2101      	movs	r1, #1
 8008910:	5499      	strb	r1, [r3, r2]
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2242      	movs	r2, #66	; 0x42
 8008916:	2101      	movs	r1, #1
 8008918:	5499      	strb	r1, [r3, r2]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2243      	movs	r2, #67	; 0x43
 800891e:	2101      	movs	r1, #1
 8008920:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2244      	movs	r2, #68	; 0x44
 8008926:	2101      	movs	r1, #1
 8008928:	5499      	strb	r1, [r3, r2]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2245      	movs	r2, #69	; 0x45
 800892e:	2101      	movs	r1, #1
 8008930:	5499      	strb	r1, [r3, r2]
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2246      	movs	r2, #70	; 0x46
 8008936:	2101      	movs	r1, #1
 8008938:	5499      	strb	r1, [r3, r2]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2247      	movs	r2, #71	; 0x47
 800893e:	2101      	movs	r1, #1
 8008940:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	223d      	movs	r2, #61	; 0x3d
 8008946:	2101      	movs	r1, #1
 8008948:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800894a:	2300      	movs	r3, #0
}
 800894c:	0018      	movs	r0, r3
 800894e:	46bd      	mov	sp, r7
 8008950:	b002      	add	sp, #8
 8008952:	bd80      	pop	{r7, pc}

08008954 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b084      	sub	sp, #16
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	223d      	movs	r2, #61	; 0x3d
 8008960:	5c9b      	ldrb	r3, [r3, r2]
 8008962:	b2db      	uxtb	r3, r3
 8008964:	2b01      	cmp	r3, #1
 8008966:	d001      	beq.n	800896c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008968:	2301      	movs	r3, #1
 800896a:	e03c      	b.n	80089e6 <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	223d      	movs	r2, #61	; 0x3d
 8008970:	2102      	movs	r1, #2
 8008972:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	68da      	ldr	r2, [r3, #12]
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	2101      	movs	r1, #1
 8008980:	430a      	orrs	r2, r1
 8008982:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4a19      	ldr	r2, [pc, #100]	; (80089f0 <HAL_TIM_Base_Start_IT+0x9c>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d009      	beq.n	80089a2 <HAL_TIM_Base_Start_IT+0x4e>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4a18      	ldr	r2, [pc, #96]	; (80089f4 <HAL_TIM_Base_Start_IT+0xa0>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d004      	beq.n	80089a2 <HAL_TIM_Base_Start_IT+0x4e>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4a16      	ldr	r2, [pc, #88]	; (80089f8 <HAL_TIM_Base_Start_IT+0xa4>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d116      	bne.n	80089d0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	689b      	ldr	r3, [r3, #8]
 80089a8:	4a14      	ldr	r2, [pc, #80]	; (80089fc <HAL_TIM_Base_Start_IT+0xa8>)
 80089aa:	4013      	ands	r3, r2
 80089ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	2b06      	cmp	r3, #6
 80089b2:	d016      	beq.n	80089e2 <HAL_TIM_Base_Start_IT+0x8e>
 80089b4:	68fa      	ldr	r2, [r7, #12]
 80089b6:	2380      	movs	r3, #128	; 0x80
 80089b8:	025b      	lsls	r3, r3, #9
 80089ba:	429a      	cmp	r2, r3
 80089bc:	d011      	beq.n	80089e2 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	681a      	ldr	r2, [r3, #0]
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	2101      	movs	r1, #1
 80089ca:	430a      	orrs	r2, r1
 80089cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089ce:	e008      	b.n	80089e2 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	681a      	ldr	r2, [r3, #0]
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	2101      	movs	r1, #1
 80089dc:	430a      	orrs	r2, r1
 80089de:	601a      	str	r2, [r3, #0]
 80089e0:	e000      	b.n	80089e4 <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089e2:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80089e4:	2300      	movs	r3, #0
}
 80089e6:	0018      	movs	r0, r3
 80089e8:	46bd      	mov	sp, r7
 80089ea:	b004      	add	sp, #16
 80089ec:	bd80      	pop	{r7, pc}
 80089ee:	46c0      	nop			; (mov r8, r8)
 80089f0:	40012c00 	.word	0x40012c00
 80089f4:	40000400 	.word	0x40000400
 80089f8:	40014000 	.word	0x40014000
 80089fc:	00010007 	.word	0x00010007

08008a00 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b082      	sub	sp, #8
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d101      	bne.n	8008a12 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008a0e:	2301      	movs	r3, #1
 8008a10:	e04a      	b.n	8008aa8 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	223d      	movs	r2, #61	; 0x3d
 8008a16:	5c9b      	ldrb	r3, [r3, r2]
 8008a18:	b2db      	uxtb	r3, r3
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d107      	bne.n	8008a2e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	223c      	movs	r2, #60	; 0x3c
 8008a22:	2100      	movs	r1, #0
 8008a24:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	0018      	movs	r0, r3
 8008a2a:	f000 f841 	bl	8008ab0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	223d      	movs	r2, #61	; 0x3d
 8008a32:	2102      	movs	r1, #2
 8008a34:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681a      	ldr	r2, [r3, #0]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	3304      	adds	r3, #4
 8008a3e:	0019      	movs	r1, r3
 8008a40:	0010      	movs	r0, r2
 8008a42:	f000 fb65 	bl	8009110 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2248      	movs	r2, #72	; 0x48
 8008a4a:	2101      	movs	r1, #1
 8008a4c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	223e      	movs	r2, #62	; 0x3e
 8008a52:	2101      	movs	r1, #1
 8008a54:	5499      	strb	r1, [r3, r2]
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	223f      	movs	r2, #63	; 0x3f
 8008a5a:	2101      	movs	r1, #1
 8008a5c:	5499      	strb	r1, [r3, r2]
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2240      	movs	r2, #64	; 0x40
 8008a62:	2101      	movs	r1, #1
 8008a64:	5499      	strb	r1, [r3, r2]
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2241      	movs	r2, #65	; 0x41
 8008a6a:	2101      	movs	r1, #1
 8008a6c:	5499      	strb	r1, [r3, r2]
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2242      	movs	r2, #66	; 0x42
 8008a72:	2101      	movs	r1, #1
 8008a74:	5499      	strb	r1, [r3, r2]
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2243      	movs	r2, #67	; 0x43
 8008a7a:	2101      	movs	r1, #1
 8008a7c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2244      	movs	r2, #68	; 0x44
 8008a82:	2101      	movs	r1, #1
 8008a84:	5499      	strb	r1, [r3, r2]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2245      	movs	r2, #69	; 0x45
 8008a8a:	2101      	movs	r1, #1
 8008a8c:	5499      	strb	r1, [r3, r2]
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2246      	movs	r2, #70	; 0x46
 8008a92:	2101      	movs	r1, #1
 8008a94:	5499      	strb	r1, [r3, r2]
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2247      	movs	r2, #71	; 0x47
 8008a9a:	2101      	movs	r1, #1
 8008a9c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	223d      	movs	r2, #61	; 0x3d
 8008aa2:	2101      	movs	r1, #1
 8008aa4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008aa6:	2300      	movs	r3, #0
}
 8008aa8:	0018      	movs	r0, r3
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	b002      	add	sp, #8
 8008aae:	bd80      	pop	{r7, pc}

08008ab0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b082      	sub	sp, #8
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008ab8:	46c0      	nop			; (mov r8, r8)
 8008aba:	46bd      	mov	sp, r7
 8008abc:	b002      	add	sp, #8
 8008abe:	bd80      	pop	{r7, pc}

08008ac0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b082      	sub	sp, #8
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	691b      	ldr	r3, [r3, #16]
 8008ace:	2202      	movs	r2, #2
 8008ad0:	4013      	ands	r3, r2
 8008ad2:	2b02      	cmp	r3, #2
 8008ad4:	d124      	bne.n	8008b20 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	68db      	ldr	r3, [r3, #12]
 8008adc:	2202      	movs	r2, #2
 8008ade:	4013      	ands	r3, r2
 8008ae0:	2b02      	cmp	r3, #2
 8008ae2:	d11d      	bne.n	8008b20 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	2203      	movs	r2, #3
 8008aea:	4252      	negs	r2, r2
 8008aec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2201      	movs	r2, #1
 8008af2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	699b      	ldr	r3, [r3, #24]
 8008afa:	2203      	movs	r2, #3
 8008afc:	4013      	ands	r3, r2
 8008afe:	d004      	beq.n	8008b0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	0018      	movs	r0, r3
 8008b04:	f000 faec 	bl	80090e0 <HAL_TIM_IC_CaptureCallback>
 8008b08:	e007      	b.n	8008b1a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	0018      	movs	r0, r3
 8008b0e:	f000 fadf 	bl	80090d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	0018      	movs	r0, r3
 8008b16:	f000 faeb 	bl	80090f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	691b      	ldr	r3, [r3, #16]
 8008b26:	2204      	movs	r2, #4
 8008b28:	4013      	ands	r3, r2
 8008b2a:	2b04      	cmp	r3, #4
 8008b2c:	d125      	bne.n	8008b7a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	68db      	ldr	r3, [r3, #12]
 8008b34:	2204      	movs	r2, #4
 8008b36:	4013      	ands	r3, r2
 8008b38:	2b04      	cmp	r3, #4
 8008b3a:	d11e      	bne.n	8008b7a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	2205      	movs	r2, #5
 8008b42:	4252      	negs	r2, r2
 8008b44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2202      	movs	r2, #2
 8008b4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	699a      	ldr	r2, [r3, #24]
 8008b52:	23c0      	movs	r3, #192	; 0xc0
 8008b54:	009b      	lsls	r3, r3, #2
 8008b56:	4013      	ands	r3, r2
 8008b58:	d004      	beq.n	8008b64 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	0018      	movs	r0, r3
 8008b5e:	f000 fabf 	bl	80090e0 <HAL_TIM_IC_CaptureCallback>
 8008b62:	e007      	b.n	8008b74 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	0018      	movs	r0, r3
 8008b68:	f000 fab2 	bl	80090d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	0018      	movs	r0, r3
 8008b70:	f000 fabe 	bl	80090f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2200      	movs	r2, #0
 8008b78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	691b      	ldr	r3, [r3, #16]
 8008b80:	2208      	movs	r2, #8
 8008b82:	4013      	ands	r3, r2
 8008b84:	2b08      	cmp	r3, #8
 8008b86:	d124      	bne.n	8008bd2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	68db      	ldr	r3, [r3, #12]
 8008b8e:	2208      	movs	r2, #8
 8008b90:	4013      	ands	r3, r2
 8008b92:	2b08      	cmp	r3, #8
 8008b94:	d11d      	bne.n	8008bd2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	2209      	movs	r2, #9
 8008b9c:	4252      	negs	r2, r2
 8008b9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2204      	movs	r2, #4
 8008ba4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	69db      	ldr	r3, [r3, #28]
 8008bac:	2203      	movs	r2, #3
 8008bae:	4013      	ands	r3, r2
 8008bb0:	d004      	beq.n	8008bbc <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	0018      	movs	r0, r3
 8008bb6:	f000 fa93 	bl	80090e0 <HAL_TIM_IC_CaptureCallback>
 8008bba:	e007      	b.n	8008bcc <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	0018      	movs	r0, r3
 8008bc0:	f000 fa86 	bl	80090d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	0018      	movs	r0, r3
 8008bc8:	f000 fa92 	bl	80090f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	691b      	ldr	r3, [r3, #16]
 8008bd8:	2210      	movs	r2, #16
 8008bda:	4013      	ands	r3, r2
 8008bdc:	2b10      	cmp	r3, #16
 8008bde:	d125      	bne.n	8008c2c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	68db      	ldr	r3, [r3, #12]
 8008be6:	2210      	movs	r2, #16
 8008be8:	4013      	ands	r3, r2
 8008bea:	2b10      	cmp	r3, #16
 8008bec:	d11e      	bne.n	8008c2c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	2211      	movs	r2, #17
 8008bf4:	4252      	negs	r2, r2
 8008bf6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2208      	movs	r2, #8
 8008bfc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	69da      	ldr	r2, [r3, #28]
 8008c04:	23c0      	movs	r3, #192	; 0xc0
 8008c06:	009b      	lsls	r3, r3, #2
 8008c08:	4013      	ands	r3, r2
 8008c0a:	d004      	beq.n	8008c16 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	0018      	movs	r0, r3
 8008c10:	f000 fa66 	bl	80090e0 <HAL_TIM_IC_CaptureCallback>
 8008c14:	e007      	b.n	8008c26 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	0018      	movs	r0, r3
 8008c1a:	f000 fa59 	bl	80090d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	0018      	movs	r0, r3
 8008c22:	f000 fa65 	bl	80090f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	691b      	ldr	r3, [r3, #16]
 8008c32:	2201      	movs	r2, #1
 8008c34:	4013      	ands	r3, r2
 8008c36:	2b01      	cmp	r3, #1
 8008c38:	d10f      	bne.n	8008c5a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	68db      	ldr	r3, [r3, #12]
 8008c40:	2201      	movs	r2, #1
 8008c42:	4013      	ands	r3, r2
 8008c44:	2b01      	cmp	r3, #1
 8008c46:	d108      	bne.n	8008c5a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	2202      	movs	r2, #2
 8008c4e:	4252      	negs	r2, r2
 8008c50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	0018      	movs	r0, r3
 8008c56:	f7f9 fe09 	bl	800286c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	691b      	ldr	r3, [r3, #16]
 8008c60:	2280      	movs	r2, #128	; 0x80
 8008c62:	4013      	ands	r3, r2
 8008c64:	2b80      	cmp	r3, #128	; 0x80
 8008c66:	d10f      	bne.n	8008c88 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	68db      	ldr	r3, [r3, #12]
 8008c6e:	2280      	movs	r2, #128	; 0x80
 8008c70:	4013      	ands	r3, r2
 8008c72:	2b80      	cmp	r3, #128	; 0x80
 8008c74:	d108      	bne.n	8008c88 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	2281      	movs	r2, #129	; 0x81
 8008c7c:	4252      	negs	r2, r2
 8008c7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	0018      	movs	r0, r3
 8008c84:	f000 fe8a 	bl	800999c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	691a      	ldr	r2, [r3, #16]
 8008c8e:	2380      	movs	r3, #128	; 0x80
 8008c90:	005b      	lsls	r3, r3, #1
 8008c92:	401a      	ands	r2, r3
 8008c94:	2380      	movs	r3, #128	; 0x80
 8008c96:	005b      	lsls	r3, r3, #1
 8008c98:	429a      	cmp	r2, r3
 8008c9a:	d10e      	bne.n	8008cba <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	68db      	ldr	r3, [r3, #12]
 8008ca2:	2280      	movs	r2, #128	; 0x80
 8008ca4:	4013      	ands	r3, r2
 8008ca6:	2b80      	cmp	r3, #128	; 0x80
 8008ca8:	d107      	bne.n	8008cba <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	4a1c      	ldr	r2, [pc, #112]	; (8008d20 <HAL_TIM_IRQHandler+0x260>)
 8008cb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	0018      	movs	r0, r3
 8008cb6:	f000 fe79 	bl	80099ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	691b      	ldr	r3, [r3, #16]
 8008cc0:	2240      	movs	r2, #64	; 0x40
 8008cc2:	4013      	ands	r3, r2
 8008cc4:	2b40      	cmp	r3, #64	; 0x40
 8008cc6:	d10f      	bne.n	8008ce8 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	68db      	ldr	r3, [r3, #12]
 8008cce:	2240      	movs	r2, #64	; 0x40
 8008cd0:	4013      	ands	r3, r2
 8008cd2:	2b40      	cmp	r3, #64	; 0x40
 8008cd4:	d108      	bne.n	8008ce8 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	2241      	movs	r2, #65	; 0x41
 8008cdc:	4252      	negs	r2, r2
 8008cde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	0018      	movs	r0, r3
 8008ce4:	f000 fa0c 	bl	8009100 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	691b      	ldr	r3, [r3, #16]
 8008cee:	2220      	movs	r2, #32
 8008cf0:	4013      	ands	r3, r2
 8008cf2:	2b20      	cmp	r3, #32
 8008cf4:	d10f      	bne.n	8008d16 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	68db      	ldr	r3, [r3, #12]
 8008cfc:	2220      	movs	r2, #32
 8008cfe:	4013      	ands	r3, r2
 8008d00:	2b20      	cmp	r3, #32
 8008d02:	d108      	bne.n	8008d16 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	2221      	movs	r2, #33	; 0x21
 8008d0a:	4252      	negs	r2, r2
 8008d0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	0018      	movs	r0, r3
 8008d12:	f000 fe3b 	bl	800998c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008d16:	46c0      	nop			; (mov r8, r8)
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	b002      	add	sp, #8
 8008d1c:	bd80      	pop	{r7, pc}
 8008d1e:	46c0      	nop			; (mov r8, r8)
 8008d20:	fffffeff 	.word	0xfffffeff

08008d24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b086      	sub	sp, #24
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	60f8      	str	r0, [r7, #12]
 8008d2c:	60b9      	str	r1, [r7, #8]
 8008d2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008d30:	2317      	movs	r3, #23
 8008d32:	18fb      	adds	r3, r7, r3
 8008d34:	2200      	movs	r2, #0
 8008d36:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	223c      	movs	r2, #60	; 0x3c
 8008d3c:	5c9b      	ldrb	r3, [r3, r2]
 8008d3e:	2b01      	cmp	r3, #1
 8008d40:	d101      	bne.n	8008d46 <HAL_TIM_PWM_ConfigChannel+0x22>
 8008d42:	2302      	movs	r3, #2
 8008d44:	e0e5      	b.n	8008f12 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	223c      	movs	r2, #60	; 0x3c
 8008d4a:	2101      	movs	r1, #1
 8008d4c:	5499      	strb	r1, [r3, r2]
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2b14      	cmp	r3, #20
 8008d52:	d900      	bls.n	8008d56 <HAL_TIM_PWM_ConfigChannel+0x32>
 8008d54:	e0d1      	b.n	8008efa <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	009a      	lsls	r2, r3, #2
 8008d5a:	4b70      	ldr	r3, [pc, #448]	; (8008f1c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8008d5c:	18d3      	adds	r3, r2, r3
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	68ba      	ldr	r2, [r7, #8]
 8008d68:	0011      	movs	r1, r2
 8008d6a:	0018      	movs	r0, r3
 8008d6c:	f000 fa46 	bl	80091fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	699a      	ldr	r2, [r3, #24]
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	2108      	movs	r1, #8
 8008d7c:	430a      	orrs	r2, r1
 8008d7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	699a      	ldr	r2, [r3, #24]
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	2104      	movs	r1, #4
 8008d8c:	438a      	bics	r2, r1
 8008d8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	6999      	ldr	r1, [r3, #24]
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	691a      	ldr	r2, [r3, #16]
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	430a      	orrs	r2, r1
 8008da0:	619a      	str	r2, [r3, #24]
      break;
 8008da2:	e0af      	b.n	8008f04 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	68ba      	ldr	r2, [r7, #8]
 8008daa:	0011      	movs	r1, r2
 8008dac:	0018      	movs	r0, r3
 8008dae:	f000 faaf 	bl	8009310 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	699a      	ldr	r2, [r3, #24]
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	2180      	movs	r1, #128	; 0x80
 8008dbe:	0109      	lsls	r1, r1, #4
 8008dc0:	430a      	orrs	r2, r1
 8008dc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	699a      	ldr	r2, [r3, #24]
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	4954      	ldr	r1, [pc, #336]	; (8008f20 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8008dd0:	400a      	ands	r2, r1
 8008dd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	6999      	ldr	r1, [r3, #24]
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	691b      	ldr	r3, [r3, #16]
 8008dde:	021a      	lsls	r2, r3, #8
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	430a      	orrs	r2, r1
 8008de6:	619a      	str	r2, [r3, #24]
      break;
 8008de8:	e08c      	b.n	8008f04 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	68ba      	ldr	r2, [r7, #8]
 8008df0:	0011      	movs	r1, r2
 8008df2:	0018      	movs	r0, r3
 8008df4:	f000 fb10 	bl	8009418 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	69da      	ldr	r2, [r3, #28]
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	2108      	movs	r1, #8
 8008e04:	430a      	orrs	r2, r1
 8008e06:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	69da      	ldr	r2, [r3, #28]
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	2104      	movs	r1, #4
 8008e14:	438a      	bics	r2, r1
 8008e16:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	69d9      	ldr	r1, [r3, #28]
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	691a      	ldr	r2, [r3, #16]
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	430a      	orrs	r2, r1
 8008e28:	61da      	str	r2, [r3, #28]
      break;
 8008e2a:	e06b      	b.n	8008f04 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	68ba      	ldr	r2, [r7, #8]
 8008e32:	0011      	movs	r1, r2
 8008e34:	0018      	movs	r0, r3
 8008e36:	f000 fb77 	bl	8009528 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	69da      	ldr	r2, [r3, #28]
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	2180      	movs	r1, #128	; 0x80
 8008e46:	0109      	lsls	r1, r1, #4
 8008e48:	430a      	orrs	r2, r1
 8008e4a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	69da      	ldr	r2, [r3, #28]
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	4932      	ldr	r1, [pc, #200]	; (8008f20 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8008e58:	400a      	ands	r2, r1
 8008e5a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	69d9      	ldr	r1, [r3, #28]
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	691b      	ldr	r3, [r3, #16]
 8008e66:	021a      	lsls	r2, r3, #8
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	430a      	orrs	r2, r1
 8008e6e:	61da      	str	r2, [r3, #28]
      break;
 8008e70:	e048      	b.n	8008f04 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	68ba      	ldr	r2, [r7, #8]
 8008e78:	0011      	movs	r1, r2
 8008e7a:	0018      	movs	r0, r3
 8008e7c:	f000 fbbe 	bl	80095fc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	2108      	movs	r1, #8
 8008e8c:	430a      	orrs	r2, r1
 8008e8e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	2104      	movs	r1, #4
 8008e9c:	438a      	bics	r2, r1
 8008e9e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	691a      	ldr	r2, [r3, #16]
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	430a      	orrs	r2, r1
 8008eb0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008eb2:	e027      	b.n	8008f04 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	68ba      	ldr	r2, [r7, #8]
 8008eba:	0011      	movs	r1, r2
 8008ebc:	0018      	movs	r0, r3
 8008ebe:	f000 fbfd 	bl	80096bc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	2180      	movs	r1, #128	; 0x80
 8008ece:	0109      	lsls	r1, r1, #4
 8008ed0:	430a      	orrs	r2, r1
 8008ed2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	4910      	ldr	r1, [pc, #64]	; (8008f20 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8008ee0:	400a      	ands	r2, r1
 8008ee2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	691b      	ldr	r3, [r3, #16]
 8008eee:	021a      	lsls	r2, r3, #8
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	430a      	orrs	r2, r1
 8008ef6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008ef8:	e004      	b.n	8008f04 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8008efa:	2317      	movs	r3, #23
 8008efc:	18fb      	adds	r3, r7, r3
 8008efe:	2201      	movs	r2, #1
 8008f00:	701a      	strb	r2, [r3, #0]
      break;
 8008f02:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	223c      	movs	r2, #60	; 0x3c
 8008f08:	2100      	movs	r1, #0
 8008f0a:	5499      	strb	r1, [r3, r2]

  return status;
 8008f0c:	2317      	movs	r3, #23
 8008f0e:	18fb      	adds	r3, r7, r3
 8008f10:	781b      	ldrb	r3, [r3, #0]
}
 8008f12:	0018      	movs	r0, r3
 8008f14:	46bd      	mov	sp, r7
 8008f16:	b006      	add	sp, #24
 8008f18:	bd80      	pop	{r7, pc}
 8008f1a:	46c0      	nop			; (mov r8, r8)
 8008f1c:	0800c8f4 	.word	0x0800c8f4
 8008f20:	fffffbff 	.word	0xfffffbff

08008f24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b084      	sub	sp, #16
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
 8008f2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008f2e:	230f      	movs	r3, #15
 8008f30:	18fb      	adds	r3, r7, r3
 8008f32:	2200      	movs	r2, #0
 8008f34:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	223c      	movs	r2, #60	; 0x3c
 8008f3a:	5c9b      	ldrb	r3, [r3, r2]
 8008f3c:	2b01      	cmp	r3, #1
 8008f3e:	d101      	bne.n	8008f44 <HAL_TIM_ConfigClockSource+0x20>
 8008f40:	2302      	movs	r3, #2
 8008f42:	e0bc      	b.n	80090be <HAL_TIM_ConfigClockSource+0x19a>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	223c      	movs	r2, #60	; 0x3c
 8008f48:	2101      	movs	r1, #1
 8008f4a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	223d      	movs	r2, #61	; 0x3d
 8008f50:	2102      	movs	r1, #2
 8008f52:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	689b      	ldr	r3, [r3, #8]
 8008f5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	4a5a      	ldr	r2, [pc, #360]	; (80090c8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8008f60:	4013      	ands	r3, r2
 8008f62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	4a59      	ldr	r2, [pc, #356]	; (80090cc <HAL_TIM_ConfigClockSource+0x1a8>)
 8008f68:	4013      	ands	r3, r2
 8008f6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	68ba      	ldr	r2, [r7, #8]
 8008f72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	2280      	movs	r2, #128	; 0x80
 8008f7a:	0192      	lsls	r2, r2, #6
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d040      	beq.n	8009002 <HAL_TIM_ConfigClockSource+0xde>
 8008f80:	2280      	movs	r2, #128	; 0x80
 8008f82:	0192      	lsls	r2, r2, #6
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d900      	bls.n	8008f8a <HAL_TIM_ConfigClockSource+0x66>
 8008f88:	e088      	b.n	800909c <HAL_TIM_ConfigClockSource+0x178>
 8008f8a:	2280      	movs	r2, #128	; 0x80
 8008f8c:	0152      	lsls	r2, r2, #5
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	d100      	bne.n	8008f94 <HAL_TIM_ConfigClockSource+0x70>
 8008f92:	e088      	b.n	80090a6 <HAL_TIM_ConfigClockSource+0x182>
 8008f94:	2280      	movs	r2, #128	; 0x80
 8008f96:	0152      	lsls	r2, r2, #5
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d900      	bls.n	8008f9e <HAL_TIM_ConfigClockSource+0x7a>
 8008f9c:	e07e      	b.n	800909c <HAL_TIM_ConfigClockSource+0x178>
 8008f9e:	2b70      	cmp	r3, #112	; 0x70
 8008fa0:	d018      	beq.n	8008fd4 <HAL_TIM_ConfigClockSource+0xb0>
 8008fa2:	d900      	bls.n	8008fa6 <HAL_TIM_ConfigClockSource+0x82>
 8008fa4:	e07a      	b.n	800909c <HAL_TIM_ConfigClockSource+0x178>
 8008fa6:	2b60      	cmp	r3, #96	; 0x60
 8008fa8:	d04f      	beq.n	800904a <HAL_TIM_ConfigClockSource+0x126>
 8008faa:	d900      	bls.n	8008fae <HAL_TIM_ConfigClockSource+0x8a>
 8008fac:	e076      	b.n	800909c <HAL_TIM_ConfigClockSource+0x178>
 8008fae:	2b50      	cmp	r3, #80	; 0x50
 8008fb0:	d03b      	beq.n	800902a <HAL_TIM_ConfigClockSource+0x106>
 8008fb2:	d900      	bls.n	8008fb6 <HAL_TIM_ConfigClockSource+0x92>
 8008fb4:	e072      	b.n	800909c <HAL_TIM_ConfigClockSource+0x178>
 8008fb6:	2b40      	cmp	r3, #64	; 0x40
 8008fb8:	d057      	beq.n	800906a <HAL_TIM_ConfigClockSource+0x146>
 8008fba:	d900      	bls.n	8008fbe <HAL_TIM_ConfigClockSource+0x9a>
 8008fbc:	e06e      	b.n	800909c <HAL_TIM_ConfigClockSource+0x178>
 8008fbe:	2b30      	cmp	r3, #48	; 0x30
 8008fc0:	d063      	beq.n	800908a <HAL_TIM_ConfigClockSource+0x166>
 8008fc2:	d86b      	bhi.n	800909c <HAL_TIM_ConfigClockSource+0x178>
 8008fc4:	2b20      	cmp	r3, #32
 8008fc6:	d060      	beq.n	800908a <HAL_TIM_ConfigClockSource+0x166>
 8008fc8:	d868      	bhi.n	800909c <HAL_TIM_ConfigClockSource+0x178>
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d05d      	beq.n	800908a <HAL_TIM_ConfigClockSource+0x166>
 8008fce:	2b10      	cmp	r3, #16
 8008fd0:	d05b      	beq.n	800908a <HAL_TIM_ConfigClockSource+0x166>
 8008fd2:	e063      	b.n	800909c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6818      	ldr	r0, [r3, #0]
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	6899      	ldr	r1, [r3, #8]
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	685a      	ldr	r2, [r3, #4]
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	68db      	ldr	r3, [r3, #12]
 8008fe4:	f000 fc4a 	bl	800987c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	689b      	ldr	r3, [r3, #8]
 8008fee:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	2277      	movs	r2, #119	; 0x77
 8008ff4:	4313      	orrs	r3, r2
 8008ff6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	68ba      	ldr	r2, [r7, #8]
 8008ffe:	609a      	str	r2, [r3, #8]
      break;
 8009000:	e052      	b.n	80090a8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6818      	ldr	r0, [r3, #0]
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	6899      	ldr	r1, [r3, #8]
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	685a      	ldr	r2, [r3, #4]
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	68db      	ldr	r3, [r3, #12]
 8009012:	f000 fc33 	bl	800987c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	689a      	ldr	r2, [r3, #8]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	2180      	movs	r1, #128	; 0x80
 8009022:	01c9      	lsls	r1, r1, #7
 8009024:	430a      	orrs	r2, r1
 8009026:	609a      	str	r2, [r3, #8]
      break;
 8009028:	e03e      	b.n	80090a8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6818      	ldr	r0, [r3, #0]
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	6859      	ldr	r1, [r3, #4]
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	68db      	ldr	r3, [r3, #12]
 8009036:	001a      	movs	r2, r3
 8009038:	f000 fba4 	bl	8009784 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	2150      	movs	r1, #80	; 0x50
 8009042:	0018      	movs	r0, r3
 8009044:	f000 fbfe 	bl	8009844 <TIM_ITRx_SetConfig>
      break;
 8009048:	e02e      	b.n	80090a8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6818      	ldr	r0, [r3, #0]
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	6859      	ldr	r1, [r3, #4]
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	68db      	ldr	r3, [r3, #12]
 8009056:	001a      	movs	r2, r3
 8009058:	f000 fbc2 	bl	80097e0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	2160      	movs	r1, #96	; 0x60
 8009062:	0018      	movs	r0, r3
 8009064:	f000 fbee 	bl	8009844 <TIM_ITRx_SetConfig>
      break;
 8009068:	e01e      	b.n	80090a8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6818      	ldr	r0, [r3, #0]
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	6859      	ldr	r1, [r3, #4]
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	68db      	ldr	r3, [r3, #12]
 8009076:	001a      	movs	r2, r3
 8009078:	f000 fb84 	bl	8009784 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	2140      	movs	r1, #64	; 0x40
 8009082:	0018      	movs	r0, r3
 8009084:	f000 fbde 	bl	8009844 <TIM_ITRx_SetConfig>
      break;
 8009088:	e00e      	b.n	80090a8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681a      	ldr	r2, [r3, #0]
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	0019      	movs	r1, r3
 8009094:	0010      	movs	r0, r2
 8009096:	f000 fbd5 	bl	8009844 <TIM_ITRx_SetConfig>
      break;
 800909a:	e005      	b.n	80090a8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800909c:	230f      	movs	r3, #15
 800909e:	18fb      	adds	r3, r7, r3
 80090a0:	2201      	movs	r2, #1
 80090a2:	701a      	strb	r2, [r3, #0]
      break;
 80090a4:	e000      	b.n	80090a8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80090a6:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	223d      	movs	r2, #61	; 0x3d
 80090ac:	2101      	movs	r1, #1
 80090ae:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	223c      	movs	r2, #60	; 0x3c
 80090b4:	2100      	movs	r1, #0
 80090b6:	5499      	strb	r1, [r3, r2]

  return status;
 80090b8:	230f      	movs	r3, #15
 80090ba:	18fb      	adds	r3, r7, r3
 80090bc:	781b      	ldrb	r3, [r3, #0]
}
 80090be:	0018      	movs	r0, r3
 80090c0:	46bd      	mov	sp, r7
 80090c2:	b004      	add	sp, #16
 80090c4:	bd80      	pop	{r7, pc}
 80090c6:	46c0      	nop			; (mov r8, r8)
 80090c8:	ffceff88 	.word	0xffceff88
 80090cc:	ffff00ff 	.word	0xffff00ff

080090d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b082      	sub	sp, #8
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80090d8:	46c0      	nop			; (mov r8, r8)
 80090da:	46bd      	mov	sp, r7
 80090dc:	b002      	add	sp, #8
 80090de:	bd80      	pop	{r7, pc}

080090e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b082      	sub	sp, #8
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80090e8:	46c0      	nop			; (mov r8, r8)
 80090ea:	46bd      	mov	sp, r7
 80090ec:	b002      	add	sp, #8
 80090ee:	bd80      	pop	{r7, pc}

080090f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b082      	sub	sp, #8
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80090f8:	46c0      	nop			; (mov r8, r8)
 80090fa:	46bd      	mov	sp, r7
 80090fc:	b002      	add	sp, #8
 80090fe:	bd80      	pop	{r7, pc}

08009100 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b082      	sub	sp, #8
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009108:	46c0      	nop			; (mov r8, r8)
 800910a:	46bd      	mov	sp, r7
 800910c:	b002      	add	sp, #8
 800910e:	bd80      	pop	{r7, pc}

08009110 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b084      	sub	sp, #16
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	4a2f      	ldr	r2, [pc, #188]	; (80091e0 <TIM_Base_SetConfig+0xd0>)
 8009124:	4293      	cmp	r3, r2
 8009126:	d003      	beq.n	8009130 <TIM_Base_SetConfig+0x20>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	4a2e      	ldr	r2, [pc, #184]	; (80091e4 <TIM_Base_SetConfig+0xd4>)
 800912c:	4293      	cmp	r3, r2
 800912e:	d108      	bne.n	8009142 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	2270      	movs	r2, #112	; 0x70
 8009134:	4393      	bics	r3, r2
 8009136:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	685b      	ldr	r3, [r3, #4]
 800913c:	68fa      	ldr	r2, [r7, #12]
 800913e:	4313      	orrs	r3, r2
 8009140:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	4a26      	ldr	r2, [pc, #152]	; (80091e0 <TIM_Base_SetConfig+0xd0>)
 8009146:	4293      	cmp	r3, r2
 8009148:	d013      	beq.n	8009172 <TIM_Base_SetConfig+0x62>
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	4a25      	ldr	r2, [pc, #148]	; (80091e4 <TIM_Base_SetConfig+0xd4>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d00f      	beq.n	8009172 <TIM_Base_SetConfig+0x62>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	4a24      	ldr	r2, [pc, #144]	; (80091e8 <TIM_Base_SetConfig+0xd8>)
 8009156:	4293      	cmp	r3, r2
 8009158:	d00b      	beq.n	8009172 <TIM_Base_SetConfig+0x62>
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	4a23      	ldr	r2, [pc, #140]	; (80091ec <TIM_Base_SetConfig+0xdc>)
 800915e:	4293      	cmp	r3, r2
 8009160:	d007      	beq.n	8009172 <TIM_Base_SetConfig+0x62>
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	4a22      	ldr	r2, [pc, #136]	; (80091f0 <TIM_Base_SetConfig+0xe0>)
 8009166:	4293      	cmp	r3, r2
 8009168:	d003      	beq.n	8009172 <TIM_Base_SetConfig+0x62>
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	4a21      	ldr	r2, [pc, #132]	; (80091f4 <TIM_Base_SetConfig+0xe4>)
 800916e:	4293      	cmp	r3, r2
 8009170:	d108      	bne.n	8009184 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	4a20      	ldr	r2, [pc, #128]	; (80091f8 <TIM_Base_SetConfig+0xe8>)
 8009176:	4013      	ands	r3, r2
 8009178:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	68db      	ldr	r3, [r3, #12]
 800917e:	68fa      	ldr	r2, [r7, #12]
 8009180:	4313      	orrs	r3, r2
 8009182:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	2280      	movs	r2, #128	; 0x80
 8009188:	4393      	bics	r3, r2
 800918a:	001a      	movs	r2, r3
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	695b      	ldr	r3, [r3, #20]
 8009190:	4313      	orrs	r3, r2
 8009192:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	68fa      	ldr	r2, [r7, #12]
 8009198:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	689a      	ldr	r2, [r3, #8]
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	681a      	ldr	r2, [r3, #0]
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	4a0c      	ldr	r2, [pc, #48]	; (80091e0 <TIM_Base_SetConfig+0xd0>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d00b      	beq.n	80091ca <TIM_Base_SetConfig+0xba>
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	4a0d      	ldr	r2, [pc, #52]	; (80091ec <TIM_Base_SetConfig+0xdc>)
 80091b6:	4293      	cmp	r3, r2
 80091b8:	d007      	beq.n	80091ca <TIM_Base_SetConfig+0xba>
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	4a0c      	ldr	r2, [pc, #48]	; (80091f0 <TIM_Base_SetConfig+0xe0>)
 80091be:	4293      	cmp	r3, r2
 80091c0:	d003      	beq.n	80091ca <TIM_Base_SetConfig+0xba>
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	4a0b      	ldr	r2, [pc, #44]	; (80091f4 <TIM_Base_SetConfig+0xe4>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d103      	bne.n	80091d2 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	691a      	ldr	r2, [r3, #16]
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2201      	movs	r2, #1
 80091d6:	615a      	str	r2, [r3, #20]
}
 80091d8:	46c0      	nop			; (mov r8, r8)
 80091da:	46bd      	mov	sp, r7
 80091dc:	b004      	add	sp, #16
 80091de:	bd80      	pop	{r7, pc}
 80091e0:	40012c00 	.word	0x40012c00
 80091e4:	40000400 	.word	0x40000400
 80091e8:	40002000 	.word	0x40002000
 80091ec:	40014000 	.word	0x40014000
 80091f0:	40014400 	.word	0x40014400
 80091f4:	40014800 	.word	0x40014800
 80091f8:	fffffcff 	.word	0xfffffcff

080091fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b086      	sub	sp, #24
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
 8009204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6a1b      	ldr	r3, [r3, #32]
 800920a:	2201      	movs	r2, #1
 800920c:	4393      	bics	r3, r2
 800920e:	001a      	movs	r2, r3
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6a1b      	ldr	r3, [r3, #32]
 8009218:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	685b      	ldr	r3, [r3, #4]
 800921e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	699b      	ldr	r3, [r3, #24]
 8009224:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	4a32      	ldr	r2, [pc, #200]	; (80092f4 <TIM_OC1_SetConfig+0xf8>)
 800922a:	4013      	ands	r3, r2
 800922c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	2203      	movs	r2, #3
 8009232:	4393      	bics	r3, r2
 8009234:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	68fa      	ldr	r2, [r7, #12]
 800923c:	4313      	orrs	r3, r2
 800923e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009240:	697b      	ldr	r3, [r7, #20]
 8009242:	2202      	movs	r2, #2
 8009244:	4393      	bics	r3, r2
 8009246:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	689b      	ldr	r3, [r3, #8]
 800924c:	697a      	ldr	r2, [r7, #20]
 800924e:	4313      	orrs	r3, r2
 8009250:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	4a28      	ldr	r2, [pc, #160]	; (80092f8 <TIM_OC1_SetConfig+0xfc>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d00b      	beq.n	8009272 <TIM_OC1_SetConfig+0x76>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	4a27      	ldr	r2, [pc, #156]	; (80092fc <TIM_OC1_SetConfig+0x100>)
 800925e:	4293      	cmp	r3, r2
 8009260:	d007      	beq.n	8009272 <TIM_OC1_SetConfig+0x76>
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	4a26      	ldr	r2, [pc, #152]	; (8009300 <TIM_OC1_SetConfig+0x104>)
 8009266:	4293      	cmp	r3, r2
 8009268:	d003      	beq.n	8009272 <TIM_OC1_SetConfig+0x76>
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	4a25      	ldr	r2, [pc, #148]	; (8009304 <TIM_OC1_SetConfig+0x108>)
 800926e:	4293      	cmp	r3, r2
 8009270:	d10c      	bne.n	800928c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009272:	697b      	ldr	r3, [r7, #20]
 8009274:	2208      	movs	r2, #8
 8009276:	4393      	bics	r3, r2
 8009278:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	68db      	ldr	r3, [r3, #12]
 800927e:	697a      	ldr	r2, [r7, #20]
 8009280:	4313      	orrs	r3, r2
 8009282:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009284:	697b      	ldr	r3, [r7, #20]
 8009286:	2204      	movs	r2, #4
 8009288:	4393      	bics	r3, r2
 800928a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	4a1a      	ldr	r2, [pc, #104]	; (80092f8 <TIM_OC1_SetConfig+0xfc>)
 8009290:	4293      	cmp	r3, r2
 8009292:	d00b      	beq.n	80092ac <TIM_OC1_SetConfig+0xb0>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	4a19      	ldr	r2, [pc, #100]	; (80092fc <TIM_OC1_SetConfig+0x100>)
 8009298:	4293      	cmp	r3, r2
 800929a:	d007      	beq.n	80092ac <TIM_OC1_SetConfig+0xb0>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	4a18      	ldr	r2, [pc, #96]	; (8009300 <TIM_OC1_SetConfig+0x104>)
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d003      	beq.n	80092ac <TIM_OC1_SetConfig+0xb0>
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	4a17      	ldr	r2, [pc, #92]	; (8009304 <TIM_OC1_SetConfig+0x108>)
 80092a8:	4293      	cmp	r3, r2
 80092aa:	d111      	bne.n	80092d0 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80092ac:	693b      	ldr	r3, [r7, #16]
 80092ae:	4a16      	ldr	r2, [pc, #88]	; (8009308 <TIM_OC1_SetConfig+0x10c>)
 80092b0:	4013      	ands	r3, r2
 80092b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	4a15      	ldr	r2, [pc, #84]	; (800930c <TIM_OC1_SetConfig+0x110>)
 80092b8:	4013      	ands	r3, r2
 80092ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	695b      	ldr	r3, [r3, #20]
 80092c0:	693a      	ldr	r2, [r7, #16]
 80092c2:	4313      	orrs	r3, r2
 80092c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	699b      	ldr	r3, [r3, #24]
 80092ca:	693a      	ldr	r2, [r7, #16]
 80092cc:	4313      	orrs	r3, r2
 80092ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	693a      	ldr	r2, [r7, #16]
 80092d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	68fa      	ldr	r2, [r7, #12]
 80092da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	685a      	ldr	r2, [r3, #4]
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	697a      	ldr	r2, [r7, #20]
 80092e8:	621a      	str	r2, [r3, #32]
}
 80092ea:	46c0      	nop			; (mov r8, r8)
 80092ec:	46bd      	mov	sp, r7
 80092ee:	b006      	add	sp, #24
 80092f0:	bd80      	pop	{r7, pc}
 80092f2:	46c0      	nop			; (mov r8, r8)
 80092f4:	fffeff8f 	.word	0xfffeff8f
 80092f8:	40012c00 	.word	0x40012c00
 80092fc:	40014000 	.word	0x40014000
 8009300:	40014400 	.word	0x40014400
 8009304:	40014800 	.word	0x40014800
 8009308:	fffffeff 	.word	0xfffffeff
 800930c:	fffffdff 	.word	0xfffffdff

08009310 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b086      	sub	sp, #24
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
 8009318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6a1b      	ldr	r3, [r3, #32]
 800931e:	2210      	movs	r2, #16
 8009320:	4393      	bics	r3, r2
 8009322:	001a      	movs	r2, r3
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6a1b      	ldr	r3, [r3, #32]
 800932c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	685b      	ldr	r3, [r3, #4]
 8009332:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	699b      	ldr	r3, [r3, #24]
 8009338:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	4a2e      	ldr	r2, [pc, #184]	; (80093f8 <TIM_OC2_SetConfig+0xe8>)
 800933e:	4013      	ands	r3, r2
 8009340:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	4a2d      	ldr	r2, [pc, #180]	; (80093fc <TIM_OC2_SetConfig+0xec>)
 8009346:	4013      	ands	r3, r2
 8009348:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	021b      	lsls	r3, r3, #8
 8009350:	68fa      	ldr	r2, [r7, #12]
 8009352:	4313      	orrs	r3, r2
 8009354:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	2220      	movs	r2, #32
 800935a:	4393      	bics	r3, r2
 800935c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	689b      	ldr	r3, [r3, #8]
 8009362:	011b      	lsls	r3, r3, #4
 8009364:	697a      	ldr	r2, [r7, #20]
 8009366:	4313      	orrs	r3, r2
 8009368:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	4a24      	ldr	r2, [pc, #144]	; (8009400 <TIM_OC2_SetConfig+0xf0>)
 800936e:	4293      	cmp	r3, r2
 8009370:	d10d      	bne.n	800938e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	2280      	movs	r2, #128	; 0x80
 8009376:	4393      	bics	r3, r2
 8009378:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	68db      	ldr	r3, [r3, #12]
 800937e:	011b      	lsls	r3, r3, #4
 8009380:	697a      	ldr	r2, [r7, #20]
 8009382:	4313      	orrs	r3, r2
 8009384:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009386:	697b      	ldr	r3, [r7, #20]
 8009388:	2240      	movs	r2, #64	; 0x40
 800938a:	4393      	bics	r3, r2
 800938c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	4a1b      	ldr	r2, [pc, #108]	; (8009400 <TIM_OC2_SetConfig+0xf0>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d00b      	beq.n	80093ae <TIM_OC2_SetConfig+0x9e>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	4a1a      	ldr	r2, [pc, #104]	; (8009404 <TIM_OC2_SetConfig+0xf4>)
 800939a:	4293      	cmp	r3, r2
 800939c:	d007      	beq.n	80093ae <TIM_OC2_SetConfig+0x9e>
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	4a19      	ldr	r2, [pc, #100]	; (8009408 <TIM_OC2_SetConfig+0xf8>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d003      	beq.n	80093ae <TIM_OC2_SetConfig+0x9e>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	4a18      	ldr	r2, [pc, #96]	; (800940c <TIM_OC2_SetConfig+0xfc>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d113      	bne.n	80093d6 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80093ae:	693b      	ldr	r3, [r7, #16]
 80093b0:	4a17      	ldr	r2, [pc, #92]	; (8009410 <TIM_OC2_SetConfig+0x100>)
 80093b2:	4013      	ands	r3, r2
 80093b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80093b6:	693b      	ldr	r3, [r7, #16]
 80093b8:	4a16      	ldr	r2, [pc, #88]	; (8009414 <TIM_OC2_SetConfig+0x104>)
 80093ba:	4013      	ands	r3, r2
 80093bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	695b      	ldr	r3, [r3, #20]
 80093c2:	009b      	lsls	r3, r3, #2
 80093c4:	693a      	ldr	r2, [r7, #16]
 80093c6:	4313      	orrs	r3, r2
 80093c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	699b      	ldr	r3, [r3, #24]
 80093ce:	009b      	lsls	r3, r3, #2
 80093d0:	693a      	ldr	r2, [r7, #16]
 80093d2:	4313      	orrs	r3, r2
 80093d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	693a      	ldr	r2, [r7, #16]
 80093da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	68fa      	ldr	r2, [r7, #12]
 80093e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	685a      	ldr	r2, [r3, #4]
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	697a      	ldr	r2, [r7, #20]
 80093ee:	621a      	str	r2, [r3, #32]
}
 80093f0:	46c0      	nop			; (mov r8, r8)
 80093f2:	46bd      	mov	sp, r7
 80093f4:	b006      	add	sp, #24
 80093f6:	bd80      	pop	{r7, pc}
 80093f8:	feff8fff 	.word	0xfeff8fff
 80093fc:	fffffcff 	.word	0xfffffcff
 8009400:	40012c00 	.word	0x40012c00
 8009404:	40014000 	.word	0x40014000
 8009408:	40014400 	.word	0x40014400
 800940c:	40014800 	.word	0x40014800
 8009410:	fffffbff 	.word	0xfffffbff
 8009414:	fffff7ff 	.word	0xfffff7ff

08009418 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b086      	sub	sp, #24
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
 8009420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6a1b      	ldr	r3, [r3, #32]
 8009426:	4a35      	ldr	r2, [pc, #212]	; (80094fc <TIM_OC3_SetConfig+0xe4>)
 8009428:	401a      	ands	r2, r3
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6a1b      	ldr	r3, [r3, #32]
 8009432:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	685b      	ldr	r3, [r3, #4]
 8009438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	69db      	ldr	r3, [r3, #28]
 800943e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	4a2f      	ldr	r2, [pc, #188]	; (8009500 <TIM_OC3_SetConfig+0xe8>)
 8009444:	4013      	ands	r3, r2
 8009446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	2203      	movs	r2, #3
 800944c:	4393      	bics	r3, r2
 800944e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	68fa      	ldr	r2, [r7, #12]
 8009456:	4313      	orrs	r3, r2
 8009458:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	4a29      	ldr	r2, [pc, #164]	; (8009504 <TIM_OC3_SetConfig+0xec>)
 800945e:	4013      	ands	r3, r2
 8009460:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	689b      	ldr	r3, [r3, #8]
 8009466:	021b      	lsls	r3, r3, #8
 8009468:	697a      	ldr	r2, [r7, #20]
 800946a:	4313      	orrs	r3, r2
 800946c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	4a25      	ldr	r2, [pc, #148]	; (8009508 <TIM_OC3_SetConfig+0xf0>)
 8009472:	4293      	cmp	r3, r2
 8009474:	d10d      	bne.n	8009492 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	4a24      	ldr	r2, [pc, #144]	; (800950c <TIM_OC3_SetConfig+0xf4>)
 800947a:	4013      	ands	r3, r2
 800947c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	68db      	ldr	r3, [r3, #12]
 8009482:	021b      	lsls	r3, r3, #8
 8009484:	697a      	ldr	r2, [r7, #20]
 8009486:	4313      	orrs	r3, r2
 8009488:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800948a:	697b      	ldr	r3, [r7, #20]
 800948c:	4a20      	ldr	r2, [pc, #128]	; (8009510 <TIM_OC3_SetConfig+0xf8>)
 800948e:	4013      	ands	r3, r2
 8009490:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	4a1c      	ldr	r2, [pc, #112]	; (8009508 <TIM_OC3_SetConfig+0xf0>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d00b      	beq.n	80094b2 <TIM_OC3_SetConfig+0x9a>
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	4a1d      	ldr	r2, [pc, #116]	; (8009514 <TIM_OC3_SetConfig+0xfc>)
 800949e:	4293      	cmp	r3, r2
 80094a0:	d007      	beq.n	80094b2 <TIM_OC3_SetConfig+0x9a>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	4a1c      	ldr	r2, [pc, #112]	; (8009518 <TIM_OC3_SetConfig+0x100>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d003      	beq.n	80094b2 <TIM_OC3_SetConfig+0x9a>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	4a1b      	ldr	r2, [pc, #108]	; (800951c <TIM_OC3_SetConfig+0x104>)
 80094ae:	4293      	cmp	r3, r2
 80094b0:	d113      	bne.n	80094da <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80094b2:	693b      	ldr	r3, [r7, #16]
 80094b4:	4a1a      	ldr	r2, [pc, #104]	; (8009520 <TIM_OC3_SetConfig+0x108>)
 80094b6:	4013      	ands	r3, r2
 80094b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	4a19      	ldr	r2, [pc, #100]	; (8009524 <TIM_OC3_SetConfig+0x10c>)
 80094be:	4013      	ands	r3, r2
 80094c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	695b      	ldr	r3, [r3, #20]
 80094c6:	011b      	lsls	r3, r3, #4
 80094c8:	693a      	ldr	r2, [r7, #16]
 80094ca:	4313      	orrs	r3, r2
 80094cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	699b      	ldr	r3, [r3, #24]
 80094d2:	011b      	lsls	r3, r3, #4
 80094d4:	693a      	ldr	r2, [r7, #16]
 80094d6:	4313      	orrs	r3, r2
 80094d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	693a      	ldr	r2, [r7, #16]
 80094de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	68fa      	ldr	r2, [r7, #12]
 80094e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	685a      	ldr	r2, [r3, #4]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	697a      	ldr	r2, [r7, #20]
 80094f2:	621a      	str	r2, [r3, #32]
}
 80094f4:	46c0      	nop			; (mov r8, r8)
 80094f6:	46bd      	mov	sp, r7
 80094f8:	b006      	add	sp, #24
 80094fa:	bd80      	pop	{r7, pc}
 80094fc:	fffffeff 	.word	0xfffffeff
 8009500:	fffeff8f 	.word	0xfffeff8f
 8009504:	fffffdff 	.word	0xfffffdff
 8009508:	40012c00 	.word	0x40012c00
 800950c:	fffff7ff 	.word	0xfffff7ff
 8009510:	fffffbff 	.word	0xfffffbff
 8009514:	40014000 	.word	0x40014000
 8009518:	40014400 	.word	0x40014400
 800951c:	40014800 	.word	0x40014800
 8009520:	ffffefff 	.word	0xffffefff
 8009524:	ffffdfff 	.word	0xffffdfff

08009528 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b086      	sub	sp, #24
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
 8009530:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6a1b      	ldr	r3, [r3, #32]
 8009536:	4a28      	ldr	r2, [pc, #160]	; (80095d8 <TIM_OC4_SetConfig+0xb0>)
 8009538:	401a      	ands	r2, r3
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6a1b      	ldr	r3, [r3, #32]
 8009542:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	685b      	ldr	r3, [r3, #4]
 8009548:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	69db      	ldr	r3, [r3, #28]
 800954e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	4a22      	ldr	r2, [pc, #136]	; (80095dc <TIM_OC4_SetConfig+0xb4>)
 8009554:	4013      	ands	r3, r2
 8009556:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	4a21      	ldr	r2, [pc, #132]	; (80095e0 <TIM_OC4_SetConfig+0xb8>)
 800955c:	4013      	ands	r3, r2
 800955e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	021b      	lsls	r3, r3, #8
 8009566:	68fa      	ldr	r2, [r7, #12]
 8009568:	4313      	orrs	r3, r2
 800956a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800956c:	693b      	ldr	r3, [r7, #16]
 800956e:	4a1d      	ldr	r2, [pc, #116]	; (80095e4 <TIM_OC4_SetConfig+0xbc>)
 8009570:	4013      	ands	r3, r2
 8009572:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	689b      	ldr	r3, [r3, #8]
 8009578:	031b      	lsls	r3, r3, #12
 800957a:	693a      	ldr	r2, [r7, #16]
 800957c:	4313      	orrs	r3, r2
 800957e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	4a19      	ldr	r2, [pc, #100]	; (80095e8 <TIM_OC4_SetConfig+0xc0>)
 8009584:	4293      	cmp	r3, r2
 8009586:	d00b      	beq.n	80095a0 <TIM_OC4_SetConfig+0x78>
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	4a18      	ldr	r2, [pc, #96]	; (80095ec <TIM_OC4_SetConfig+0xc4>)
 800958c:	4293      	cmp	r3, r2
 800958e:	d007      	beq.n	80095a0 <TIM_OC4_SetConfig+0x78>
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	4a17      	ldr	r2, [pc, #92]	; (80095f0 <TIM_OC4_SetConfig+0xc8>)
 8009594:	4293      	cmp	r3, r2
 8009596:	d003      	beq.n	80095a0 <TIM_OC4_SetConfig+0x78>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	4a16      	ldr	r2, [pc, #88]	; (80095f4 <TIM_OC4_SetConfig+0xcc>)
 800959c:	4293      	cmp	r3, r2
 800959e:	d109      	bne.n	80095b4 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	4a15      	ldr	r2, [pc, #84]	; (80095f8 <TIM_OC4_SetConfig+0xd0>)
 80095a4:	4013      	ands	r3, r2
 80095a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	695b      	ldr	r3, [r3, #20]
 80095ac:	019b      	lsls	r3, r3, #6
 80095ae:	697a      	ldr	r2, [r7, #20]
 80095b0:	4313      	orrs	r3, r2
 80095b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	697a      	ldr	r2, [r7, #20]
 80095b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	68fa      	ldr	r2, [r7, #12]
 80095be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	685a      	ldr	r2, [r3, #4]
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	693a      	ldr	r2, [r7, #16]
 80095cc:	621a      	str	r2, [r3, #32]
}
 80095ce:	46c0      	nop			; (mov r8, r8)
 80095d0:	46bd      	mov	sp, r7
 80095d2:	b006      	add	sp, #24
 80095d4:	bd80      	pop	{r7, pc}
 80095d6:	46c0      	nop			; (mov r8, r8)
 80095d8:	ffffefff 	.word	0xffffefff
 80095dc:	feff8fff 	.word	0xfeff8fff
 80095e0:	fffffcff 	.word	0xfffffcff
 80095e4:	ffffdfff 	.word	0xffffdfff
 80095e8:	40012c00 	.word	0x40012c00
 80095ec:	40014000 	.word	0x40014000
 80095f0:	40014400 	.word	0x40014400
 80095f4:	40014800 	.word	0x40014800
 80095f8:	ffffbfff 	.word	0xffffbfff

080095fc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b086      	sub	sp, #24
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
 8009604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6a1b      	ldr	r3, [r3, #32]
 800960a:	4a25      	ldr	r2, [pc, #148]	; (80096a0 <TIM_OC5_SetConfig+0xa4>)
 800960c:	401a      	ands	r2, r3
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6a1b      	ldr	r3, [r3, #32]
 8009616:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	685b      	ldr	r3, [r3, #4]
 800961c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	4a1f      	ldr	r2, [pc, #124]	; (80096a4 <TIM_OC5_SetConfig+0xa8>)
 8009628:	4013      	ands	r3, r2
 800962a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	68fa      	ldr	r2, [r7, #12]
 8009632:	4313      	orrs	r3, r2
 8009634:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009636:	693b      	ldr	r3, [r7, #16]
 8009638:	4a1b      	ldr	r2, [pc, #108]	; (80096a8 <TIM_OC5_SetConfig+0xac>)
 800963a:	4013      	ands	r3, r2
 800963c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	689b      	ldr	r3, [r3, #8]
 8009642:	041b      	lsls	r3, r3, #16
 8009644:	693a      	ldr	r2, [r7, #16]
 8009646:	4313      	orrs	r3, r2
 8009648:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	4a17      	ldr	r2, [pc, #92]	; (80096ac <TIM_OC5_SetConfig+0xb0>)
 800964e:	4293      	cmp	r3, r2
 8009650:	d00b      	beq.n	800966a <TIM_OC5_SetConfig+0x6e>
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	4a16      	ldr	r2, [pc, #88]	; (80096b0 <TIM_OC5_SetConfig+0xb4>)
 8009656:	4293      	cmp	r3, r2
 8009658:	d007      	beq.n	800966a <TIM_OC5_SetConfig+0x6e>
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	4a15      	ldr	r2, [pc, #84]	; (80096b4 <TIM_OC5_SetConfig+0xb8>)
 800965e:	4293      	cmp	r3, r2
 8009660:	d003      	beq.n	800966a <TIM_OC5_SetConfig+0x6e>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	4a14      	ldr	r2, [pc, #80]	; (80096b8 <TIM_OC5_SetConfig+0xbc>)
 8009666:	4293      	cmp	r3, r2
 8009668:	d109      	bne.n	800967e <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	4a0c      	ldr	r2, [pc, #48]	; (80096a0 <TIM_OC5_SetConfig+0xa4>)
 800966e:	4013      	ands	r3, r2
 8009670:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	695b      	ldr	r3, [r3, #20]
 8009676:	021b      	lsls	r3, r3, #8
 8009678:	697a      	ldr	r2, [r7, #20]
 800967a:	4313      	orrs	r3, r2
 800967c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	697a      	ldr	r2, [r7, #20]
 8009682:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	68fa      	ldr	r2, [r7, #12]
 8009688:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	685a      	ldr	r2, [r3, #4]
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	693a      	ldr	r2, [r7, #16]
 8009696:	621a      	str	r2, [r3, #32]
}
 8009698:	46c0      	nop			; (mov r8, r8)
 800969a:	46bd      	mov	sp, r7
 800969c:	b006      	add	sp, #24
 800969e:	bd80      	pop	{r7, pc}
 80096a0:	fffeffff 	.word	0xfffeffff
 80096a4:	fffeff8f 	.word	0xfffeff8f
 80096a8:	fffdffff 	.word	0xfffdffff
 80096ac:	40012c00 	.word	0x40012c00
 80096b0:	40014000 	.word	0x40014000
 80096b4:	40014400 	.word	0x40014400
 80096b8:	40014800 	.word	0x40014800

080096bc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b086      	sub	sp, #24
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
 80096c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6a1b      	ldr	r3, [r3, #32]
 80096ca:	4a26      	ldr	r2, [pc, #152]	; (8009764 <TIM_OC6_SetConfig+0xa8>)
 80096cc:	401a      	ands	r2, r3
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6a1b      	ldr	r3, [r3, #32]
 80096d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	685b      	ldr	r3, [r3, #4]
 80096dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	4a20      	ldr	r2, [pc, #128]	; (8009768 <TIM_OC6_SetConfig+0xac>)
 80096e8:	4013      	ands	r3, r2
 80096ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	021b      	lsls	r3, r3, #8
 80096f2:	68fa      	ldr	r2, [r7, #12]
 80096f4:	4313      	orrs	r3, r2
 80096f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80096f8:	693b      	ldr	r3, [r7, #16]
 80096fa:	4a1c      	ldr	r2, [pc, #112]	; (800976c <TIM_OC6_SetConfig+0xb0>)
 80096fc:	4013      	ands	r3, r2
 80096fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	689b      	ldr	r3, [r3, #8]
 8009704:	051b      	lsls	r3, r3, #20
 8009706:	693a      	ldr	r2, [r7, #16]
 8009708:	4313      	orrs	r3, r2
 800970a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	4a18      	ldr	r2, [pc, #96]	; (8009770 <TIM_OC6_SetConfig+0xb4>)
 8009710:	4293      	cmp	r3, r2
 8009712:	d00b      	beq.n	800972c <TIM_OC6_SetConfig+0x70>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	4a17      	ldr	r2, [pc, #92]	; (8009774 <TIM_OC6_SetConfig+0xb8>)
 8009718:	4293      	cmp	r3, r2
 800971a:	d007      	beq.n	800972c <TIM_OC6_SetConfig+0x70>
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	4a16      	ldr	r2, [pc, #88]	; (8009778 <TIM_OC6_SetConfig+0xbc>)
 8009720:	4293      	cmp	r3, r2
 8009722:	d003      	beq.n	800972c <TIM_OC6_SetConfig+0x70>
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	4a15      	ldr	r2, [pc, #84]	; (800977c <TIM_OC6_SetConfig+0xc0>)
 8009728:	4293      	cmp	r3, r2
 800972a:	d109      	bne.n	8009740 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800972c:	697b      	ldr	r3, [r7, #20]
 800972e:	4a14      	ldr	r2, [pc, #80]	; (8009780 <TIM_OC6_SetConfig+0xc4>)
 8009730:	4013      	ands	r3, r2
 8009732:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	695b      	ldr	r3, [r3, #20]
 8009738:	029b      	lsls	r3, r3, #10
 800973a:	697a      	ldr	r2, [r7, #20]
 800973c:	4313      	orrs	r3, r2
 800973e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	697a      	ldr	r2, [r7, #20]
 8009744:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	68fa      	ldr	r2, [r7, #12]
 800974a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	685a      	ldr	r2, [r3, #4]
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	693a      	ldr	r2, [r7, #16]
 8009758:	621a      	str	r2, [r3, #32]
}
 800975a:	46c0      	nop			; (mov r8, r8)
 800975c:	46bd      	mov	sp, r7
 800975e:	b006      	add	sp, #24
 8009760:	bd80      	pop	{r7, pc}
 8009762:	46c0      	nop			; (mov r8, r8)
 8009764:	ffefffff 	.word	0xffefffff
 8009768:	feff8fff 	.word	0xfeff8fff
 800976c:	ffdfffff 	.word	0xffdfffff
 8009770:	40012c00 	.word	0x40012c00
 8009774:	40014000 	.word	0x40014000
 8009778:	40014400 	.word	0x40014400
 800977c:	40014800 	.word	0x40014800
 8009780:	fffbffff 	.word	0xfffbffff

08009784 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b086      	sub	sp, #24
 8009788:	af00      	add	r7, sp, #0
 800978a:	60f8      	str	r0, [r7, #12]
 800978c:	60b9      	str	r1, [r7, #8]
 800978e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	6a1b      	ldr	r3, [r3, #32]
 8009794:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	6a1b      	ldr	r3, [r3, #32]
 800979a:	2201      	movs	r2, #1
 800979c:	4393      	bics	r3, r2
 800979e:	001a      	movs	r2, r3
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	699b      	ldr	r3, [r3, #24]
 80097a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80097aa:	693b      	ldr	r3, [r7, #16]
 80097ac:	22f0      	movs	r2, #240	; 0xf0
 80097ae:	4393      	bics	r3, r2
 80097b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	011b      	lsls	r3, r3, #4
 80097b6:	693a      	ldr	r2, [r7, #16]
 80097b8:	4313      	orrs	r3, r2
 80097ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80097bc:	697b      	ldr	r3, [r7, #20]
 80097be:	220a      	movs	r2, #10
 80097c0:	4393      	bics	r3, r2
 80097c2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80097c4:	697a      	ldr	r2, [r7, #20]
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	4313      	orrs	r3, r2
 80097ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	693a      	ldr	r2, [r7, #16]
 80097d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	697a      	ldr	r2, [r7, #20]
 80097d6:	621a      	str	r2, [r3, #32]
}
 80097d8:	46c0      	nop			; (mov r8, r8)
 80097da:	46bd      	mov	sp, r7
 80097dc:	b006      	add	sp, #24
 80097de:	bd80      	pop	{r7, pc}

080097e0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b086      	sub	sp, #24
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	60f8      	str	r0, [r7, #12]
 80097e8:	60b9      	str	r1, [r7, #8]
 80097ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	6a1b      	ldr	r3, [r3, #32]
 80097f0:	2210      	movs	r2, #16
 80097f2:	4393      	bics	r3, r2
 80097f4:	001a      	movs	r2, r3
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	699b      	ldr	r3, [r3, #24]
 80097fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	6a1b      	ldr	r3, [r3, #32]
 8009804:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	4a0d      	ldr	r2, [pc, #52]	; (8009840 <TIM_TI2_ConfigInputStage+0x60>)
 800980a:	4013      	ands	r3, r2
 800980c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	031b      	lsls	r3, r3, #12
 8009812:	697a      	ldr	r2, [r7, #20]
 8009814:	4313      	orrs	r3, r2
 8009816:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009818:	693b      	ldr	r3, [r7, #16]
 800981a:	22a0      	movs	r2, #160	; 0xa0
 800981c:	4393      	bics	r3, r2
 800981e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	011b      	lsls	r3, r3, #4
 8009824:	693a      	ldr	r2, [r7, #16]
 8009826:	4313      	orrs	r3, r2
 8009828:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	697a      	ldr	r2, [r7, #20]
 800982e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	693a      	ldr	r2, [r7, #16]
 8009834:	621a      	str	r2, [r3, #32]
}
 8009836:	46c0      	nop			; (mov r8, r8)
 8009838:	46bd      	mov	sp, r7
 800983a:	b006      	add	sp, #24
 800983c:	bd80      	pop	{r7, pc}
 800983e:	46c0      	nop			; (mov r8, r8)
 8009840:	ffff0fff 	.word	0xffff0fff

08009844 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b084      	sub	sp, #16
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
 800984c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	689b      	ldr	r3, [r3, #8]
 8009852:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	4a08      	ldr	r2, [pc, #32]	; (8009878 <TIM_ITRx_SetConfig+0x34>)
 8009858:	4013      	ands	r3, r2
 800985a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800985c:	683a      	ldr	r2, [r7, #0]
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	4313      	orrs	r3, r2
 8009862:	2207      	movs	r2, #7
 8009864:	4313      	orrs	r3, r2
 8009866:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	68fa      	ldr	r2, [r7, #12]
 800986c:	609a      	str	r2, [r3, #8]
}
 800986e:	46c0      	nop			; (mov r8, r8)
 8009870:	46bd      	mov	sp, r7
 8009872:	b004      	add	sp, #16
 8009874:	bd80      	pop	{r7, pc}
 8009876:	46c0      	nop			; (mov r8, r8)
 8009878:	ffcfff8f 	.word	0xffcfff8f

0800987c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b086      	sub	sp, #24
 8009880:	af00      	add	r7, sp, #0
 8009882:	60f8      	str	r0, [r7, #12]
 8009884:	60b9      	str	r1, [r7, #8]
 8009886:	607a      	str	r2, [r7, #4]
 8009888:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	689b      	ldr	r3, [r3, #8]
 800988e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009890:	697b      	ldr	r3, [r7, #20]
 8009892:	4a09      	ldr	r2, [pc, #36]	; (80098b8 <TIM_ETR_SetConfig+0x3c>)
 8009894:	4013      	ands	r3, r2
 8009896:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	021a      	lsls	r2, r3, #8
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	431a      	orrs	r2, r3
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	4313      	orrs	r3, r2
 80098a4:	697a      	ldr	r2, [r7, #20]
 80098a6:	4313      	orrs	r3, r2
 80098a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	697a      	ldr	r2, [r7, #20]
 80098ae:	609a      	str	r2, [r3, #8]
}
 80098b0:	46c0      	nop			; (mov r8, r8)
 80098b2:	46bd      	mov	sp, r7
 80098b4:	b006      	add	sp, #24
 80098b6:	bd80      	pop	{r7, pc}
 80098b8:	ffff00ff 	.word	0xffff00ff

080098bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b084      	sub	sp, #16
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	223c      	movs	r2, #60	; 0x3c
 80098ca:	5c9b      	ldrb	r3, [r3, r2]
 80098cc:	2b01      	cmp	r3, #1
 80098ce:	d101      	bne.n	80098d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80098d0:	2302      	movs	r3, #2
 80098d2:	e04f      	b.n	8009974 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	223c      	movs	r2, #60	; 0x3c
 80098d8:	2101      	movs	r1, #1
 80098da:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	223d      	movs	r2, #61	; 0x3d
 80098e0:	2102      	movs	r1, #2
 80098e2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	685b      	ldr	r3, [r3, #4]
 80098ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	689b      	ldr	r3, [r3, #8]
 80098f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	4a20      	ldr	r2, [pc, #128]	; (800997c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80098fa:	4293      	cmp	r3, r2
 80098fc:	d108      	bne.n	8009910 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	4a1f      	ldr	r2, [pc, #124]	; (8009980 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8009902:	4013      	ands	r3, r2
 8009904:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	685b      	ldr	r3, [r3, #4]
 800990a:	68fa      	ldr	r2, [r7, #12]
 800990c:	4313      	orrs	r3, r2
 800990e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	2270      	movs	r2, #112	; 0x70
 8009914:	4393      	bics	r3, r2
 8009916:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	68fa      	ldr	r2, [r7, #12]
 800991e:	4313      	orrs	r3, r2
 8009920:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	68fa      	ldr	r2, [r7, #12]
 8009928:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	4a13      	ldr	r2, [pc, #76]	; (800997c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8009930:	4293      	cmp	r3, r2
 8009932:	d009      	beq.n	8009948 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	4a12      	ldr	r2, [pc, #72]	; (8009984 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800993a:	4293      	cmp	r3, r2
 800993c:	d004      	beq.n	8009948 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	4a11      	ldr	r2, [pc, #68]	; (8009988 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009944:	4293      	cmp	r3, r2
 8009946:	d10c      	bne.n	8009962 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	2280      	movs	r2, #128	; 0x80
 800994c:	4393      	bics	r3, r2
 800994e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	689b      	ldr	r3, [r3, #8]
 8009954:	68ba      	ldr	r2, [r7, #8]
 8009956:	4313      	orrs	r3, r2
 8009958:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	68ba      	ldr	r2, [r7, #8]
 8009960:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	223d      	movs	r2, #61	; 0x3d
 8009966:	2101      	movs	r1, #1
 8009968:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	223c      	movs	r2, #60	; 0x3c
 800996e:	2100      	movs	r1, #0
 8009970:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009972:	2300      	movs	r3, #0
}
 8009974:	0018      	movs	r0, r3
 8009976:	46bd      	mov	sp, r7
 8009978:	b004      	add	sp, #16
 800997a:	bd80      	pop	{r7, pc}
 800997c:	40012c00 	.word	0x40012c00
 8009980:	ff0fffff 	.word	0xff0fffff
 8009984:	40000400 	.word	0x40000400
 8009988:	40014000 	.word	0x40014000

0800998c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b082      	sub	sp, #8
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009994:	46c0      	nop			; (mov r8, r8)
 8009996:	46bd      	mov	sp, r7
 8009998:	b002      	add	sp, #8
 800999a:	bd80      	pop	{r7, pc}

0800999c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b082      	sub	sp, #8
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80099a4:	46c0      	nop			; (mov r8, r8)
 80099a6:	46bd      	mov	sp, r7
 80099a8:	b002      	add	sp, #8
 80099aa:	bd80      	pop	{r7, pc}

080099ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b082      	sub	sp, #8
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80099b4:	46c0      	nop			; (mov r8, r8)
 80099b6:	46bd      	mov	sp, r7
 80099b8:	b002      	add	sp, #8
 80099ba:	bd80      	pop	{r7, pc}

080099bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b082      	sub	sp, #8
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d101      	bne.n	80099ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80099ca:	2301      	movs	r3, #1
 80099cc:	e046      	b.n	8009a5c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2284      	movs	r2, #132	; 0x84
 80099d2:	589b      	ldr	r3, [r3, r2]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d107      	bne.n	80099e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2280      	movs	r2, #128	; 0x80
 80099dc:	2100      	movs	r1, #0
 80099de:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	0018      	movs	r0, r3
 80099e4:	f7fb fa52 	bl	8004e8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2284      	movs	r2, #132	; 0x84
 80099ec:	2124      	movs	r1, #36	; 0x24
 80099ee:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	681a      	ldr	r2, [r3, #0]
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	2101      	movs	r1, #1
 80099fc:	438a      	bics	r2, r1
 80099fe:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	0018      	movs	r0, r3
 8009a04:	f000 fc7c 	bl	800a300 <UART_SetConfig>
 8009a08:	0003      	movs	r3, r0
 8009a0a:	2b01      	cmp	r3, #1
 8009a0c:	d101      	bne.n	8009a12 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8009a0e:	2301      	movs	r3, #1
 8009a10:	e024      	b.n	8009a5c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d003      	beq.n	8009a22 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	0018      	movs	r0, r3
 8009a1e:	f000 fe13 	bl	800a648 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	685a      	ldr	r2, [r3, #4]
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	490d      	ldr	r1, [pc, #52]	; (8009a64 <HAL_UART_Init+0xa8>)
 8009a2e:	400a      	ands	r2, r1
 8009a30:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	689a      	ldr	r2, [r3, #8]
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	212a      	movs	r1, #42	; 0x2a
 8009a3e:	438a      	bics	r2, r1
 8009a40:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	681a      	ldr	r2, [r3, #0]
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	2101      	movs	r1, #1
 8009a4e:	430a      	orrs	r2, r1
 8009a50:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	0018      	movs	r0, r3
 8009a56:	f000 feab 	bl	800a7b0 <UART_CheckIdleState>
 8009a5a:	0003      	movs	r3, r0
}
 8009a5c:	0018      	movs	r0, r3
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	b002      	add	sp, #8
 8009a62:	bd80      	pop	{r7, pc}
 8009a64:	ffffb7ff 	.word	0xffffb7ff

08009a68 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b08c      	sub	sp, #48	; 0x30
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	60f8      	str	r0, [r7, #12]
 8009a70:	60b9      	str	r1, [r7, #8]
 8009a72:	1dbb      	adds	r3, r7, #6
 8009a74:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	2284      	movs	r2, #132	; 0x84
 8009a7a:	589b      	ldr	r3, [r3, r2]
 8009a7c:	2b20      	cmp	r3, #32
 8009a7e:	d000      	beq.n	8009a82 <HAL_UART_Transmit_IT+0x1a>
 8009a80:	e0a0      	b.n	8009bc4 <HAL_UART_Transmit_IT+0x15c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a82:	68bb      	ldr	r3, [r7, #8]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d003      	beq.n	8009a90 <HAL_UART_Transmit_IT+0x28>
 8009a88:	1dbb      	adds	r3, r7, #6
 8009a8a:	881b      	ldrh	r3, [r3, #0]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d101      	bne.n	8009a94 <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 8009a90:	2301      	movs	r3, #1
 8009a92:	e098      	b.n	8009bc6 <HAL_UART_Transmit_IT+0x15e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	689a      	ldr	r2, [r3, #8]
 8009a98:	2380      	movs	r3, #128	; 0x80
 8009a9a:	015b      	lsls	r3, r3, #5
 8009a9c:	429a      	cmp	r2, r3
 8009a9e:	d109      	bne.n	8009ab4 <HAL_UART_Transmit_IT+0x4c>
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	691b      	ldr	r3, [r3, #16]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d105      	bne.n	8009ab4 <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8009aa8:	68bb      	ldr	r3, [r7, #8]
 8009aaa:	2201      	movs	r2, #1
 8009aac:	4013      	ands	r3, r2
 8009aae:	d001      	beq.n	8009ab4 <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	e088      	b.n	8009bc6 <HAL_UART_Transmit_IT+0x15e>
      }
    }

    __HAL_LOCK(huart);
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	2280      	movs	r2, #128	; 0x80
 8009ab8:	5c9b      	ldrb	r3, [r3, r2]
 8009aba:	2b01      	cmp	r3, #1
 8009abc:	d101      	bne.n	8009ac2 <HAL_UART_Transmit_IT+0x5a>
 8009abe:	2302      	movs	r3, #2
 8009ac0:	e081      	b.n	8009bc6 <HAL_UART_Transmit_IT+0x15e>
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	2280      	movs	r2, #128	; 0x80
 8009ac6:	2101      	movs	r1, #1
 8009ac8:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	68ba      	ldr	r2, [r7, #8]
 8009ace:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	1dba      	adds	r2, r7, #6
 8009ad4:	2154      	movs	r1, #84	; 0x54
 8009ad6:	8812      	ldrh	r2, [r2, #0]
 8009ad8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	1dba      	adds	r2, r7, #6
 8009ade:	2156      	movs	r1, #86	; 0x56
 8009ae0:	8812      	ldrh	r2, [r2, #0]
 8009ae2:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	228c      	movs	r2, #140	; 0x8c
 8009aee:	2100      	movs	r1, #0
 8009af0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	2284      	movs	r2, #132	; 0x84
 8009af6:	2121      	movs	r1, #33	; 0x21
 8009af8:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009afe:	2380      	movs	r3, #128	; 0x80
 8009b00:	059b      	lsls	r3, r3, #22
 8009b02:	429a      	cmp	r2, r3
 8009b04:	d12e      	bne.n	8009b64 <HAL_UART_Transmit_IT+0xfc>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	689a      	ldr	r2, [r3, #8]
 8009b0a:	2380      	movs	r3, #128	; 0x80
 8009b0c:	015b      	lsls	r3, r3, #5
 8009b0e:	429a      	cmp	r2, r3
 8009b10:	d107      	bne.n	8009b22 <HAL_UART_Transmit_IT+0xba>
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	691b      	ldr	r3, [r3, #16]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d103      	bne.n	8009b22 <HAL_UART_Transmit_IT+0xba>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	4a2c      	ldr	r2, [pc, #176]	; (8009bd0 <HAL_UART_Transmit_IT+0x168>)
 8009b1e:	675a      	str	r2, [r3, #116]	; 0x74
 8009b20:	e002      	b.n	8009b28 <HAL_UART_Transmit_IT+0xc0>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	4a2b      	ldr	r2, [pc, #172]	; (8009bd4 <HAL_UART_Transmit_IT+0x16c>)
 8009b26:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	2280      	movs	r2, #128	; 0x80
 8009b2c:	2100      	movs	r1, #0
 8009b2e:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b30:	f3ef 8310 	mrs	r3, PRIMASK
 8009b34:	61fb      	str	r3, [r7, #28]
  return(result);
 8009b36:	69fb      	ldr	r3, [r7, #28]

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009b38:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b3e:	6a3b      	ldr	r3, [r7, #32]
 8009b40:	f383 8810 	msr	PRIMASK, r3
}
 8009b44:	46c0      	nop			; (mov r8, r8)
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	689a      	ldr	r2, [r3, #8]
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	2180      	movs	r1, #128	; 0x80
 8009b52:	0409      	lsls	r1, r1, #16
 8009b54:	430a      	orrs	r2, r1
 8009b56:	609a      	str	r2, [r3, #8]
 8009b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b5a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b5e:	f383 8810 	msr	PRIMASK, r3
}
 8009b62:	e02d      	b.n	8009bc0 <HAL_UART_Transmit_IT+0x158>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	689a      	ldr	r2, [r3, #8]
 8009b68:	2380      	movs	r3, #128	; 0x80
 8009b6a:	015b      	lsls	r3, r3, #5
 8009b6c:	429a      	cmp	r2, r3
 8009b6e:	d107      	bne.n	8009b80 <HAL_UART_Transmit_IT+0x118>
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	691b      	ldr	r3, [r3, #16]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d103      	bne.n	8009b80 <HAL_UART_Transmit_IT+0x118>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	4a17      	ldr	r2, [pc, #92]	; (8009bd8 <HAL_UART_Transmit_IT+0x170>)
 8009b7c:	675a      	str	r2, [r3, #116]	; 0x74
 8009b7e:	e002      	b.n	8009b86 <HAL_UART_Transmit_IT+0x11e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	4a16      	ldr	r2, [pc, #88]	; (8009bdc <HAL_UART_Transmit_IT+0x174>)
 8009b84:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	2280      	movs	r2, #128	; 0x80
 8009b8a:	2100      	movs	r1, #0
 8009b8c:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b8e:	f3ef 8310 	mrs	r3, PRIMASK
 8009b92:	613b      	str	r3, [r7, #16]
  return(result);
 8009b94:	693b      	ldr	r3, [r7, #16]

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009b96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b98:	2301      	movs	r3, #1
 8009b9a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b9c:	697b      	ldr	r3, [r7, #20]
 8009b9e:	f383 8810 	msr	PRIMASK, r3
}
 8009ba2:	46c0      	nop			; (mov r8, r8)
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	681a      	ldr	r2, [r3, #0]
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	2180      	movs	r1, #128	; 0x80
 8009bb0:	430a      	orrs	r2, r1
 8009bb2:	601a      	str	r2, [r3, #0]
 8009bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bb6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009bb8:	69bb      	ldr	r3, [r7, #24]
 8009bba:	f383 8810 	msr	PRIMASK, r3
}
 8009bbe:	46c0      	nop			; (mov r8, r8)
    }

    return HAL_OK;
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	e000      	b.n	8009bc6 <HAL_UART_Transmit_IT+0x15e>
  }
  else
  {
    return HAL_BUSY;
 8009bc4:	2302      	movs	r3, #2
  }
}
 8009bc6:	0018      	movs	r0, r3
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	b00c      	add	sp, #48	; 0x30
 8009bcc:	bd80      	pop	{r7, pc}
 8009bce:	46c0      	nop			; (mov r8, r8)
 8009bd0:	0800af85 	.word	0x0800af85
 8009bd4:	0800ae99 	.word	0x0800ae99
 8009bd8:	0800addb 	.word	0x0800addb
 8009bdc:	0800ad27 	.word	0x0800ad27

08009be0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b088      	sub	sp, #32
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	60f8      	str	r0, [r7, #12]
 8009be8:	60b9      	str	r1, [r7, #8]
 8009bea:	1dbb      	adds	r3, r7, #6
 8009bec:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	2288      	movs	r2, #136	; 0x88
 8009bf2:	589b      	ldr	r3, [r3, r2]
 8009bf4:	2b20      	cmp	r3, #32
 8009bf6:	d150      	bne.n	8009c9a <HAL_UART_Receive_IT+0xba>
  {
    if ((pData == NULL) || (Size == 0U))
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d003      	beq.n	8009c06 <HAL_UART_Receive_IT+0x26>
 8009bfe:	1dbb      	adds	r3, r7, #6
 8009c00:	881b      	ldrh	r3, [r3, #0]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d101      	bne.n	8009c0a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009c06:	2301      	movs	r3, #1
 8009c08:	e048      	b.n	8009c9c <HAL_UART_Receive_IT+0xbc>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	689a      	ldr	r2, [r3, #8]
 8009c0e:	2380      	movs	r3, #128	; 0x80
 8009c10:	015b      	lsls	r3, r3, #5
 8009c12:	429a      	cmp	r2, r3
 8009c14:	d109      	bne.n	8009c2a <HAL_UART_Receive_IT+0x4a>
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	691b      	ldr	r3, [r3, #16]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d105      	bne.n	8009c2a <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8009c1e:	68bb      	ldr	r3, [r7, #8]
 8009c20:	2201      	movs	r2, #1
 8009c22:	4013      	ands	r3, r2
 8009c24:	d001      	beq.n	8009c2a <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8009c26:	2301      	movs	r3, #1
 8009c28:	e038      	b.n	8009c9c <HAL_UART_Receive_IT+0xbc>
      }
    }

    __HAL_LOCK(huart);
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	2280      	movs	r2, #128	; 0x80
 8009c2e:	5c9b      	ldrb	r3, [r3, r2]
 8009c30:	2b01      	cmp	r3, #1
 8009c32:	d101      	bne.n	8009c38 <HAL_UART_Receive_IT+0x58>
 8009c34:	2302      	movs	r3, #2
 8009c36:	e031      	b.n	8009c9c <HAL_UART_Receive_IT+0xbc>
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	2280      	movs	r2, #128	; 0x80
 8009c3c:	2101      	movs	r1, #1
 8009c3e:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	2200      	movs	r2, #0
 8009c44:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	685a      	ldr	r2, [r3, #4]
 8009c4c:	2380      	movs	r3, #128	; 0x80
 8009c4e:	041b      	lsls	r3, r3, #16
 8009c50:	4013      	ands	r3, r2
 8009c52:	d019      	beq.n	8009c88 <HAL_UART_Receive_IT+0xa8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c54:	f3ef 8310 	mrs	r3, PRIMASK
 8009c58:	613b      	str	r3, [r7, #16]
  return(result);
 8009c5a:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009c5c:	61fb      	str	r3, [r7, #28]
 8009c5e:	2301      	movs	r3, #1
 8009c60:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c62:	697b      	ldr	r3, [r7, #20]
 8009c64:	f383 8810 	msr	PRIMASK, r3
}
 8009c68:	46c0      	nop			; (mov r8, r8)
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	681a      	ldr	r2, [r3, #0]
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	2180      	movs	r1, #128	; 0x80
 8009c76:	04c9      	lsls	r1, r1, #19
 8009c78:	430a      	orrs	r2, r1
 8009c7a:	601a      	str	r2, [r3, #0]
 8009c7c:	69fb      	ldr	r3, [r7, #28]
 8009c7e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c80:	69bb      	ldr	r3, [r7, #24]
 8009c82:	f383 8810 	msr	PRIMASK, r3
}
 8009c86:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009c88:	1dbb      	adds	r3, r7, #6
 8009c8a:	881a      	ldrh	r2, [r3, #0]
 8009c8c:	68b9      	ldr	r1, [r7, #8]
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	0018      	movs	r0, r3
 8009c92:	f000 fe9f 	bl	800a9d4 <UART_Start_Receive_IT>
 8009c96:	0003      	movs	r3, r0
 8009c98:	e000      	b.n	8009c9c <HAL_UART_Receive_IT+0xbc>
  }
  else
  {
    return HAL_BUSY;
 8009c9a:	2302      	movs	r3, #2
  }
}
 8009c9c:	0018      	movs	r0, r3
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	b008      	add	sp, #32
 8009ca2:	bd80      	pop	{r7, pc}

08009ca4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009ca4:	b5b0      	push	{r4, r5, r7, lr}
 8009ca6:	b0aa      	sub	sp, #168	; 0xa8
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	69db      	ldr	r3, [r3, #28]
 8009cb2:	22a4      	movs	r2, #164	; 0xa4
 8009cb4:	18b9      	adds	r1, r7, r2
 8009cb6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	20a0      	movs	r0, #160	; 0xa0
 8009cc0:	1839      	adds	r1, r7, r0
 8009cc2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	689b      	ldr	r3, [r3, #8]
 8009cca:	249c      	movs	r4, #156	; 0x9c
 8009ccc:	1939      	adds	r1, r7, r4
 8009cce:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009cd0:	0011      	movs	r1, r2
 8009cd2:	18bb      	adds	r3, r7, r2
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	4aa0      	ldr	r2, [pc, #640]	; (8009f58 <HAL_UART_IRQHandler+0x2b4>)
 8009cd8:	4013      	ands	r3, r2
 8009cda:	2298      	movs	r2, #152	; 0x98
 8009cdc:	18bd      	adds	r5, r7, r2
 8009cde:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8009ce0:	18bb      	adds	r3, r7, r2
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d11a      	bne.n	8009d1e <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009ce8:	187b      	adds	r3, r7, r1
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	2220      	movs	r2, #32
 8009cee:	4013      	ands	r3, r2
 8009cf0:	d015      	beq.n	8009d1e <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009cf2:	183b      	adds	r3, r7, r0
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	2220      	movs	r2, #32
 8009cf8:	4013      	ands	r3, r2
 8009cfa:	d105      	bne.n	8009d08 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009cfc:	193b      	adds	r3, r7, r4
 8009cfe:	681a      	ldr	r2, [r3, #0]
 8009d00:	2380      	movs	r3, #128	; 0x80
 8009d02:	055b      	lsls	r3, r3, #21
 8009d04:	4013      	ands	r3, r2
 8009d06:	d00a      	beq.n	8009d1e <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d100      	bne.n	8009d12 <HAL_UART_IRQHandler+0x6e>
 8009d10:	e2cf      	b.n	800a2b2 <HAL_UART_IRQHandler+0x60e>
      {
        huart->RxISR(huart);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d16:	687a      	ldr	r2, [r7, #4]
 8009d18:	0010      	movs	r0, r2
 8009d1a:	4798      	blx	r3
      }
      return;
 8009d1c:	e2c9      	b.n	800a2b2 <HAL_UART_IRQHandler+0x60e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009d1e:	2398      	movs	r3, #152	; 0x98
 8009d20:	18fb      	adds	r3, r7, r3
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d100      	bne.n	8009d2a <HAL_UART_IRQHandler+0x86>
 8009d28:	e11e      	b.n	8009f68 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009d2a:	239c      	movs	r3, #156	; 0x9c
 8009d2c:	18fb      	adds	r3, r7, r3
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	4a8a      	ldr	r2, [pc, #552]	; (8009f5c <HAL_UART_IRQHandler+0x2b8>)
 8009d32:	4013      	ands	r3, r2
 8009d34:	d106      	bne.n	8009d44 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009d36:	23a0      	movs	r3, #160	; 0xa0
 8009d38:	18fb      	adds	r3, r7, r3
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	4a88      	ldr	r2, [pc, #544]	; (8009f60 <HAL_UART_IRQHandler+0x2bc>)
 8009d3e:	4013      	ands	r3, r2
 8009d40:	d100      	bne.n	8009d44 <HAL_UART_IRQHandler+0xa0>
 8009d42:	e111      	b.n	8009f68 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009d44:	23a4      	movs	r3, #164	; 0xa4
 8009d46:	18fb      	adds	r3, r7, r3
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	2201      	movs	r2, #1
 8009d4c:	4013      	ands	r3, r2
 8009d4e:	d012      	beq.n	8009d76 <HAL_UART_IRQHandler+0xd2>
 8009d50:	23a0      	movs	r3, #160	; 0xa0
 8009d52:	18fb      	adds	r3, r7, r3
 8009d54:	681a      	ldr	r2, [r3, #0]
 8009d56:	2380      	movs	r3, #128	; 0x80
 8009d58:	005b      	lsls	r3, r3, #1
 8009d5a:	4013      	ands	r3, r2
 8009d5c:	d00b      	beq.n	8009d76 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	2201      	movs	r2, #1
 8009d64:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	228c      	movs	r2, #140	; 0x8c
 8009d6a:	589b      	ldr	r3, [r3, r2]
 8009d6c:	2201      	movs	r2, #1
 8009d6e:	431a      	orrs	r2, r3
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	218c      	movs	r1, #140	; 0x8c
 8009d74:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009d76:	23a4      	movs	r3, #164	; 0xa4
 8009d78:	18fb      	adds	r3, r7, r3
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	2202      	movs	r2, #2
 8009d7e:	4013      	ands	r3, r2
 8009d80:	d011      	beq.n	8009da6 <HAL_UART_IRQHandler+0x102>
 8009d82:	239c      	movs	r3, #156	; 0x9c
 8009d84:	18fb      	adds	r3, r7, r3
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	2201      	movs	r2, #1
 8009d8a:	4013      	ands	r3, r2
 8009d8c:	d00b      	beq.n	8009da6 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	2202      	movs	r2, #2
 8009d94:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	228c      	movs	r2, #140	; 0x8c
 8009d9a:	589b      	ldr	r3, [r3, r2]
 8009d9c:	2204      	movs	r2, #4
 8009d9e:	431a      	orrs	r2, r3
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	218c      	movs	r1, #140	; 0x8c
 8009da4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009da6:	23a4      	movs	r3, #164	; 0xa4
 8009da8:	18fb      	adds	r3, r7, r3
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	2204      	movs	r2, #4
 8009dae:	4013      	ands	r3, r2
 8009db0:	d011      	beq.n	8009dd6 <HAL_UART_IRQHandler+0x132>
 8009db2:	239c      	movs	r3, #156	; 0x9c
 8009db4:	18fb      	adds	r3, r7, r3
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	2201      	movs	r2, #1
 8009dba:	4013      	ands	r3, r2
 8009dbc:	d00b      	beq.n	8009dd6 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	2204      	movs	r2, #4
 8009dc4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	228c      	movs	r2, #140	; 0x8c
 8009dca:	589b      	ldr	r3, [r3, r2]
 8009dcc:	2202      	movs	r2, #2
 8009dce:	431a      	orrs	r2, r3
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	218c      	movs	r1, #140	; 0x8c
 8009dd4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009dd6:	23a4      	movs	r3, #164	; 0xa4
 8009dd8:	18fb      	adds	r3, r7, r3
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	2208      	movs	r2, #8
 8009dde:	4013      	ands	r3, r2
 8009de0:	d017      	beq.n	8009e12 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009de2:	23a0      	movs	r3, #160	; 0xa0
 8009de4:	18fb      	adds	r3, r7, r3
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	2220      	movs	r2, #32
 8009dea:	4013      	ands	r3, r2
 8009dec:	d105      	bne.n	8009dfa <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009dee:	239c      	movs	r3, #156	; 0x9c
 8009df0:	18fb      	adds	r3, r7, r3
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	4a59      	ldr	r2, [pc, #356]	; (8009f5c <HAL_UART_IRQHandler+0x2b8>)
 8009df6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009df8:	d00b      	beq.n	8009e12 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	2208      	movs	r2, #8
 8009e00:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	228c      	movs	r2, #140	; 0x8c
 8009e06:	589b      	ldr	r3, [r3, r2]
 8009e08:	2208      	movs	r2, #8
 8009e0a:	431a      	orrs	r2, r3
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	218c      	movs	r1, #140	; 0x8c
 8009e10:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009e12:	23a4      	movs	r3, #164	; 0xa4
 8009e14:	18fb      	adds	r3, r7, r3
 8009e16:	681a      	ldr	r2, [r3, #0]
 8009e18:	2380      	movs	r3, #128	; 0x80
 8009e1a:	011b      	lsls	r3, r3, #4
 8009e1c:	4013      	ands	r3, r2
 8009e1e:	d013      	beq.n	8009e48 <HAL_UART_IRQHandler+0x1a4>
 8009e20:	23a0      	movs	r3, #160	; 0xa0
 8009e22:	18fb      	adds	r3, r7, r3
 8009e24:	681a      	ldr	r2, [r3, #0]
 8009e26:	2380      	movs	r3, #128	; 0x80
 8009e28:	04db      	lsls	r3, r3, #19
 8009e2a:	4013      	ands	r3, r2
 8009e2c:	d00c      	beq.n	8009e48 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	2280      	movs	r2, #128	; 0x80
 8009e34:	0112      	lsls	r2, r2, #4
 8009e36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	228c      	movs	r2, #140	; 0x8c
 8009e3c:	589b      	ldr	r3, [r3, r2]
 8009e3e:	2220      	movs	r2, #32
 8009e40:	431a      	orrs	r2, r3
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	218c      	movs	r1, #140	; 0x8c
 8009e46:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	228c      	movs	r2, #140	; 0x8c
 8009e4c:	589b      	ldr	r3, [r3, r2]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d100      	bne.n	8009e54 <HAL_UART_IRQHandler+0x1b0>
 8009e52:	e230      	b.n	800a2b6 <HAL_UART_IRQHandler+0x612>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009e54:	23a4      	movs	r3, #164	; 0xa4
 8009e56:	18fb      	adds	r3, r7, r3
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	2220      	movs	r2, #32
 8009e5c:	4013      	ands	r3, r2
 8009e5e:	d015      	beq.n	8009e8c <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009e60:	23a0      	movs	r3, #160	; 0xa0
 8009e62:	18fb      	adds	r3, r7, r3
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	2220      	movs	r2, #32
 8009e68:	4013      	ands	r3, r2
 8009e6a:	d106      	bne.n	8009e7a <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009e6c:	239c      	movs	r3, #156	; 0x9c
 8009e6e:	18fb      	adds	r3, r7, r3
 8009e70:	681a      	ldr	r2, [r3, #0]
 8009e72:	2380      	movs	r3, #128	; 0x80
 8009e74:	055b      	lsls	r3, r3, #21
 8009e76:	4013      	ands	r3, r2
 8009e78:	d008      	beq.n	8009e8c <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d004      	beq.n	8009e8c <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e86:	687a      	ldr	r2, [r7, #4]
 8009e88:	0010      	movs	r0, r2
 8009e8a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	228c      	movs	r2, #140	; 0x8c
 8009e90:	589b      	ldr	r3, [r3, r2]
 8009e92:	2194      	movs	r1, #148	; 0x94
 8009e94:	187a      	adds	r2, r7, r1
 8009e96:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	689b      	ldr	r3, [r3, #8]
 8009e9e:	2240      	movs	r2, #64	; 0x40
 8009ea0:	4013      	ands	r3, r2
 8009ea2:	2b40      	cmp	r3, #64	; 0x40
 8009ea4:	d004      	beq.n	8009eb0 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009ea6:	187b      	adds	r3, r7, r1
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	2228      	movs	r2, #40	; 0x28
 8009eac:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009eae:	d047      	beq.n	8009f40 <HAL_UART_IRQHandler+0x29c>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	0018      	movs	r0, r3
 8009eb4:	f000 feba 	bl	800ac2c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	689b      	ldr	r3, [r3, #8]
 8009ebe:	2240      	movs	r2, #64	; 0x40
 8009ec0:	4013      	ands	r3, r2
 8009ec2:	2b40      	cmp	r3, #64	; 0x40
 8009ec4:	d137      	bne.n	8009f36 <HAL_UART_IRQHandler+0x292>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ec6:	f3ef 8310 	mrs	r3, PRIMASK
 8009eca:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8009ecc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ece:	2090      	movs	r0, #144	; 0x90
 8009ed0:	183a      	adds	r2, r7, r0
 8009ed2:	6013      	str	r3, [r2, #0]
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ed8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009eda:	f383 8810 	msr	PRIMASK, r3
}
 8009ede:	46c0      	nop			; (mov r8, r8)
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	689a      	ldr	r2, [r3, #8]
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	2140      	movs	r1, #64	; 0x40
 8009eec:	438a      	bics	r2, r1
 8009eee:	609a      	str	r2, [r3, #8]
 8009ef0:	183b      	adds	r3, r7, r0
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ef6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009ef8:	f383 8810 	msr	PRIMASK, r3
}
 8009efc:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d012      	beq.n	8009f2c <HAL_UART_IRQHandler+0x288>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f0a:	4a16      	ldr	r2, [pc, #88]	; (8009f64 <HAL_UART_IRQHandler+0x2c0>)
 8009f0c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f12:	0018      	movs	r0, r3
 8009f14:	f7fc fe88 	bl	8006c28 <HAL_DMA_Abort_IT>
 8009f18:	1e03      	subs	r3, r0, #0
 8009f1a:	d01a      	beq.n	8009f52 <HAL_UART_IRQHandler+0x2ae>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f26:	0018      	movs	r0, r3
 8009f28:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f2a:	e012      	b.n	8009f52 <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	0018      	movs	r0, r3
 8009f30:	f000 f9d2 	bl	800a2d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f34:	e00d      	b.n	8009f52 <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	0018      	movs	r0, r3
 8009f3a:	f000 f9cd 	bl	800a2d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f3e:	e008      	b.n	8009f52 <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	0018      	movs	r0, r3
 8009f44:	f000 f9c8 	bl	800a2d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	228c      	movs	r2, #140	; 0x8c
 8009f4c:	2100      	movs	r1, #0
 8009f4e:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8009f50:	e1b1      	b.n	800a2b6 <HAL_UART_IRQHandler+0x612>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f52:	46c0      	nop			; (mov r8, r8)
    return;
 8009f54:	e1af      	b.n	800a2b6 <HAL_UART_IRQHandler+0x612>
 8009f56:	46c0      	nop			; (mov r8, r8)
 8009f58:	0000080f 	.word	0x0000080f
 8009f5c:	10000001 	.word	0x10000001
 8009f60:	04000120 	.word	0x04000120
 8009f64:	0800acf9 	.word	0x0800acf9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f6c:	2b01      	cmp	r3, #1
 8009f6e:	d000      	beq.n	8009f72 <HAL_UART_IRQHandler+0x2ce>
 8009f70:	e135      	b.n	800a1de <HAL_UART_IRQHandler+0x53a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009f72:	23a4      	movs	r3, #164	; 0xa4
 8009f74:	18fb      	adds	r3, r7, r3
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	2210      	movs	r2, #16
 8009f7a:	4013      	ands	r3, r2
 8009f7c:	d100      	bne.n	8009f80 <HAL_UART_IRQHandler+0x2dc>
 8009f7e:	e12e      	b.n	800a1de <HAL_UART_IRQHandler+0x53a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009f80:	23a0      	movs	r3, #160	; 0xa0
 8009f82:	18fb      	adds	r3, r7, r3
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	2210      	movs	r2, #16
 8009f88:	4013      	ands	r3, r2
 8009f8a:	d100      	bne.n	8009f8e <HAL_UART_IRQHandler+0x2ea>
 8009f8c:	e127      	b.n	800a1de <HAL_UART_IRQHandler+0x53a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	2210      	movs	r2, #16
 8009f94:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	689b      	ldr	r3, [r3, #8]
 8009f9c:	2240      	movs	r2, #64	; 0x40
 8009f9e:	4013      	ands	r3, r2
 8009fa0:	2b40      	cmp	r3, #64	; 0x40
 8009fa2:	d000      	beq.n	8009fa6 <HAL_UART_IRQHandler+0x302>
 8009fa4:	e09e      	b.n	800a0e4 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	685a      	ldr	r2, [r3, #4]
 8009fae:	217e      	movs	r1, #126	; 0x7e
 8009fb0:	187b      	adds	r3, r7, r1
 8009fb2:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8009fb4:	187b      	adds	r3, r7, r1
 8009fb6:	881b      	ldrh	r3, [r3, #0]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d100      	bne.n	8009fbe <HAL_UART_IRQHandler+0x31a>
 8009fbc:	e17d      	b.n	800a2ba <HAL_UART_IRQHandler+0x616>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	225c      	movs	r2, #92	; 0x5c
 8009fc2:	5a9b      	ldrh	r3, [r3, r2]
 8009fc4:	187a      	adds	r2, r7, r1
 8009fc6:	8812      	ldrh	r2, [r2, #0]
 8009fc8:	429a      	cmp	r2, r3
 8009fca:	d300      	bcc.n	8009fce <HAL_UART_IRQHandler+0x32a>
 8009fcc:	e175      	b.n	800a2ba <HAL_UART_IRQHandler+0x616>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	187a      	adds	r2, r7, r1
 8009fd2:	215e      	movs	r1, #94	; 0x5e
 8009fd4:	8812      	ldrh	r2, [r2, #0]
 8009fd6:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	2220      	movs	r2, #32
 8009fe2:	4013      	ands	r3, r2
 8009fe4:	d16f      	bne.n	800a0c6 <HAL_UART_IRQHandler+0x422>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009fe6:	f3ef 8310 	mrs	r3, PRIMASK
 8009fea:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8009fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009fee:	67bb      	str	r3, [r7, #120]	; 0x78
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ff6:	f383 8810 	msr	PRIMASK, r3
}
 8009ffa:	46c0      	nop			; (mov r8, r8)
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	681a      	ldr	r2, [r3, #0]
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	49b1      	ldr	r1, [pc, #708]	; (800a2cc <HAL_UART_IRQHandler+0x628>)
 800a008:	400a      	ands	r2, r1
 800a00a:	601a      	str	r2, [r3, #0]
 800a00c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a00e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a012:	f383 8810 	msr	PRIMASK, r3
}
 800a016:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a018:	f3ef 8310 	mrs	r3, PRIMASK
 800a01c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800a01e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a020:	677b      	str	r3, [r7, #116]	; 0x74
 800a022:	2301      	movs	r3, #1
 800a024:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a026:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a028:	f383 8810 	msr	PRIMASK, r3
}
 800a02c:	46c0      	nop			; (mov r8, r8)
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	689a      	ldr	r2, [r3, #8]
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	2101      	movs	r1, #1
 800a03a:	438a      	bics	r2, r1
 800a03c:	609a      	str	r2, [r3, #8]
 800a03e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a040:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a042:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a044:	f383 8810 	msr	PRIMASK, r3
}
 800a048:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a04a:	f3ef 8310 	mrs	r3, PRIMASK
 800a04e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800a050:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a052:	673b      	str	r3, [r7, #112]	; 0x70
 800a054:	2301      	movs	r3, #1
 800a056:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a058:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a05a:	f383 8810 	msr	PRIMASK, r3
}
 800a05e:	46c0      	nop			; (mov r8, r8)
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	689a      	ldr	r2, [r3, #8]
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	2140      	movs	r1, #64	; 0x40
 800a06c:	438a      	bics	r2, r1
 800a06e:	609a      	str	r2, [r3, #8]
 800a070:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a072:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a074:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a076:	f383 8810 	msr	PRIMASK, r3
}
 800a07a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2288      	movs	r2, #136	; 0x88
 800a080:	2120      	movs	r1, #32
 800a082:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2200      	movs	r2, #0
 800a088:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a08a:	f3ef 8310 	mrs	r3, PRIMASK
 800a08e:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800a090:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a092:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a094:	2301      	movs	r3, #1
 800a096:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a098:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a09a:	f383 8810 	msr	PRIMASK, r3
}
 800a09e:	46c0      	nop			; (mov r8, r8)
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	681a      	ldr	r2, [r3, #0]
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	2110      	movs	r1, #16
 800a0ac:	438a      	bics	r2, r1
 800a0ae:	601a      	str	r2, [r3, #0]
 800a0b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a0b2:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a0b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a0b6:	f383 8810 	msr	PRIMASK, r3
}
 800a0ba:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a0c0:	0018      	movs	r0, r3
 800a0c2:	f7fc fd4f 	bl	8006b64 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	225c      	movs	r2, #92	; 0x5c
 800a0ca:	5a9a      	ldrh	r2, [r3, r2]
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	215e      	movs	r1, #94	; 0x5e
 800a0d0:	5a5b      	ldrh	r3, [r3, r1]
 800a0d2:	b29b      	uxth	r3, r3
 800a0d4:	1ad3      	subs	r3, r2, r3
 800a0d6:	b29a      	uxth	r2, r3
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	0011      	movs	r1, r2
 800a0dc:	0018      	movs	r0, r3
 800a0de:	f000 f903 	bl	800a2e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a0e2:	e0ea      	b.n	800a2ba <HAL_UART_IRQHandler+0x616>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	225c      	movs	r2, #92	; 0x5c
 800a0e8:	5a99      	ldrh	r1, [r3, r2]
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	225e      	movs	r2, #94	; 0x5e
 800a0ee:	5a9b      	ldrh	r3, [r3, r2]
 800a0f0:	b29a      	uxth	r2, r3
 800a0f2:	208e      	movs	r0, #142	; 0x8e
 800a0f4:	183b      	adds	r3, r7, r0
 800a0f6:	1a8a      	subs	r2, r1, r2
 800a0f8:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	225e      	movs	r2, #94	; 0x5e
 800a0fe:	5a9b      	ldrh	r3, [r3, r2]
 800a100:	b29b      	uxth	r3, r3
 800a102:	2b00      	cmp	r3, #0
 800a104:	d100      	bne.n	800a108 <HAL_UART_IRQHandler+0x464>
 800a106:	e0da      	b.n	800a2be <HAL_UART_IRQHandler+0x61a>
          && (nb_rx_data > 0U))
 800a108:	183b      	adds	r3, r7, r0
 800a10a:	881b      	ldrh	r3, [r3, #0]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d100      	bne.n	800a112 <HAL_UART_IRQHandler+0x46e>
 800a110:	e0d5      	b.n	800a2be <HAL_UART_IRQHandler+0x61a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a112:	f3ef 8310 	mrs	r3, PRIMASK
 800a116:	60fb      	str	r3, [r7, #12]
  return(result);
 800a118:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a11a:	2488      	movs	r4, #136	; 0x88
 800a11c:	193a      	adds	r2, r7, r4
 800a11e:	6013      	str	r3, [r2, #0]
 800a120:	2301      	movs	r3, #1
 800a122:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a124:	693b      	ldr	r3, [r7, #16]
 800a126:	f383 8810 	msr	PRIMASK, r3
}
 800a12a:	46c0      	nop			; (mov r8, r8)
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	681a      	ldr	r2, [r3, #0]
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	4966      	ldr	r1, [pc, #408]	; (800a2d0 <HAL_UART_IRQHandler+0x62c>)
 800a138:	400a      	ands	r2, r1
 800a13a:	601a      	str	r2, [r3, #0]
 800a13c:	193b      	adds	r3, r7, r4
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a142:	697b      	ldr	r3, [r7, #20]
 800a144:	f383 8810 	msr	PRIMASK, r3
}
 800a148:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a14a:	f3ef 8310 	mrs	r3, PRIMASK
 800a14e:	61bb      	str	r3, [r7, #24]
  return(result);
 800a150:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a152:	2484      	movs	r4, #132	; 0x84
 800a154:	193a      	adds	r2, r7, r4
 800a156:	6013      	str	r3, [r2, #0]
 800a158:	2301      	movs	r3, #1
 800a15a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a15c:	69fb      	ldr	r3, [r7, #28]
 800a15e:	f383 8810 	msr	PRIMASK, r3
}
 800a162:	46c0      	nop			; (mov r8, r8)
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	689a      	ldr	r2, [r3, #8]
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	4959      	ldr	r1, [pc, #356]	; (800a2d4 <HAL_UART_IRQHandler+0x630>)
 800a170:	400a      	ands	r2, r1
 800a172:	609a      	str	r2, [r3, #8]
 800a174:	193b      	adds	r3, r7, r4
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a17a:	6a3b      	ldr	r3, [r7, #32]
 800a17c:	f383 8810 	msr	PRIMASK, r3
}
 800a180:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2288      	movs	r2, #136	; 0x88
 800a186:	2120      	movs	r1, #32
 800a188:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2200      	movs	r2, #0
 800a18e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2200      	movs	r2, #0
 800a194:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a196:	f3ef 8310 	mrs	r3, PRIMASK
 800a19a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800a19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a19e:	2480      	movs	r4, #128	; 0x80
 800a1a0:	193a      	adds	r2, r7, r4
 800a1a2:	6013      	str	r3, [r2, #0]
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1aa:	f383 8810 	msr	PRIMASK, r3
}
 800a1ae:	46c0      	nop			; (mov r8, r8)
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	681a      	ldr	r2, [r3, #0]
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	2110      	movs	r1, #16
 800a1bc:	438a      	bics	r2, r1
 800a1be:	601a      	str	r2, [r3, #0]
 800a1c0:	193b      	adds	r3, r7, r4
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1c8:	f383 8810 	msr	PRIMASK, r3
}
 800a1cc:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a1ce:	183b      	adds	r3, r7, r0
 800a1d0:	881a      	ldrh	r2, [r3, #0]
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	0011      	movs	r1, r2
 800a1d6:	0018      	movs	r0, r3
 800a1d8:	f000 f886 	bl	800a2e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a1dc:	e06f      	b.n	800a2be <HAL_UART_IRQHandler+0x61a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a1de:	23a4      	movs	r3, #164	; 0xa4
 800a1e0:	18fb      	adds	r3, r7, r3
 800a1e2:	681a      	ldr	r2, [r3, #0]
 800a1e4:	2380      	movs	r3, #128	; 0x80
 800a1e6:	035b      	lsls	r3, r3, #13
 800a1e8:	4013      	ands	r3, r2
 800a1ea:	d010      	beq.n	800a20e <HAL_UART_IRQHandler+0x56a>
 800a1ec:	239c      	movs	r3, #156	; 0x9c
 800a1ee:	18fb      	adds	r3, r7, r3
 800a1f0:	681a      	ldr	r2, [r3, #0]
 800a1f2:	2380      	movs	r3, #128	; 0x80
 800a1f4:	03db      	lsls	r3, r3, #15
 800a1f6:	4013      	ands	r3, r2
 800a1f8:	d009      	beq.n	800a20e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	2280      	movs	r2, #128	; 0x80
 800a200:	0352      	lsls	r2, r2, #13
 800a202:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	0018      	movs	r0, r3
 800a208:	f001 fbb2 	bl	800b970 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a20c:	e05a      	b.n	800a2c4 <HAL_UART_IRQHandler+0x620>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a20e:	23a4      	movs	r3, #164	; 0xa4
 800a210:	18fb      	adds	r3, r7, r3
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	2280      	movs	r2, #128	; 0x80
 800a216:	4013      	ands	r3, r2
 800a218:	d016      	beq.n	800a248 <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a21a:	23a0      	movs	r3, #160	; 0xa0
 800a21c:	18fb      	adds	r3, r7, r3
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	2280      	movs	r2, #128	; 0x80
 800a222:	4013      	ands	r3, r2
 800a224:	d106      	bne.n	800a234 <HAL_UART_IRQHandler+0x590>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a226:	239c      	movs	r3, #156	; 0x9c
 800a228:	18fb      	adds	r3, r7, r3
 800a22a:	681a      	ldr	r2, [r3, #0]
 800a22c:	2380      	movs	r3, #128	; 0x80
 800a22e:	041b      	lsls	r3, r3, #16
 800a230:	4013      	ands	r3, r2
 800a232:	d009      	beq.n	800a248 <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d042      	beq.n	800a2c2 <HAL_UART_IRQHandler+0x61e>
    {
      huart->TxISR(huart);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a240:	687a      	ldr	r2, [r7, #4]
 800a242:	0010      	movs	r0, r2
 800a244:	4798      	blx	r3
    }
    return;
 800a246:	e03c      	b.n	800a2c2 <HAL_UART_IRQHandler+0x61e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a248:	23a4      	movs	r3, #164	; 0xa4
 800a24a:	18fb      	adds	r3, r7, r3
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	2240      	movs	r2, #64	; 0x40
 800a250:	4013      	ands	r3, r2
 800a252:	d00a      	beq.n	800a26a <HAL_UART_IRQHandler+0x5c6>
 800a254:	23a0      	movs	r3, #160	; 0xa0
 800a256:	18fb      	adds	r3, r7, r3
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	2240      	movs	r2, #64	; 0x40
 800a25c:	4013      	ands	r3, r2
 800a25e:	d004      	beq.n	800a26a <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	0018      	movs	r0, r3
 800a264:	f000 ff08 	bl	800b078 <UART_EndTransmit_IT>
    return;
 800a268:	e02c      	b.n	800a2c4 <HAL_UART_IRQHandler+0x620>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a26a:	23a4      	movs	r3, #164	; 0xa4
 800a26c:	18fb      	adds	r3, r7, r3
 800a26e:	681a      	ldr	r2, [r3, #0]
 800a270:	2380      	movs	r3, #128	; 0x80
 800a272:	041b      	lsls	r3, r3, #16
 800a274:	4013      	ands	r3, r2
 800a276:	d00b      	beq.n	800a290 <HAL_UART_IRQHandler+0x5ec>
 800a278:	23a0      	movs	r3, #160	; 0xa0
 800a27a:	18fb      	adds	r3, r7, r3
 800a27c:	681a      	ldr	r2, [r3, #0]
 800a27e:	2380      	movs	r3, #128	; 0x80
 800a280:	05db      	lsls	r3, r3, #23
 800a282:	4013      	ands	r3, r2
 800a284:	d004      	beq.n	800a290 <HAL_UART_IRQHandler+0x5ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	0018      	movs	r0, r3
 800a28a:	f001 fb81 	bl	800b990 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a28e:	e019      	b.n	800a2c4 <HAL_UART_IRQHandler+0x620>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a290:	23a4      	movs	r3, #164	; 0xa4
 800a292:	18fb      	adds	r3, r7, r3
 800a294:	681a      	ldr	r2, [r3, #0]
 800a296:	2380      	movs	r3, #128	; 0x80
 800a298:	045b      	lsls	r3, r3, #17
 800a29a:	4013      	ands	r3, r2
 800a29c:	d012      	beq.n	800a2c4 <HAL_UART_IRQHandler+0x620>
 800a29e:	23a0      	movs	r3, #160	; 0xa0
 800a2a0:	18fb      	adds	r3, r7, r3
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	da0d      	bge.n	800a2c4 <HAL_UART_IRQHandler+0x620>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	0018      	movs	r0, r3
 800a2ac:	f001 fb68 	bl	800b980 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a2b0:	e008      	b.n	800a2c4 <HAL_UART_IRQHandler+0x620>
      return;
 800a2b2:	46c0      	nop			; (mov r8, r8)
 800a2b4:	e006      	b.n	800a2c4 <HAL_UART_IRQHandler+0x620>
    return;
 800a2b6:	46c0      	nop			; (mov r8, r8)
 800a2b8:	e004      	b.n	800a2c4 <HAL_UART_IRQHandler+0x620>
      return;
 800a2ba:	46c0      	nop			; (mov r8, r8)
 800a2bc:	e002      	b.n	800a2c4 <HAL_UART_IRQHandler+0x620>
      return;
 800a2be:	46c0      	nop			; (mov r8, r8)
 800a2c0:	e000      	b.n	800a2c4 <HAL_UART_IRQHandler+0x620>
    return;
 800a2c2:	46c0      	nop			; (mov r8, r8)
  }
}
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	b02a      	add	sp, #168	; 0xa8
 800a2c8:	bdb0      	pop	{r4, r5, r7, pc}
 800a2ca:	46c0      	nop			; (mov r8, r8)
 800a2cc:	fffffeff 	.word	0xfffffeff
 800a2d0:	fffffedf 	.word	0xfffffedf
 800a2d4:	effffffe 	.word	0xeffffffe

0800a2d8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b082      	sub	sp, #8
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a2e0:	46c0      	nop			; (mov r8, r8)
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	b002      	add	sp, #8
 800a2e6:	bd80      	pop	{r7, pc}

0800a2e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b082      	sub	sp, #8
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
 800a2f0:	000a      	movs	r2, r1
 800a2f2:	1cbb      	adds	r3, r7, #2
 800a2f4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a2f6:	46c0      	nop			; (mov r8, r8)
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	b002      	add	sp, #8
 800a2fc:	bd80      	pop	{r7, pc}
	...

0800a300 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b088      	sub	sp, #32
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a308:	231a      	movs	r3, #26
 800a30a:	18fb      	adds	r3, r7, r3
 800a30c:	2200      	movs	r2, #0
 800a30e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	689a      	ldr	r2, [r3, #8]
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	691b      	ldr	r3, [r3, #16]
 800a318:	431a      	orrs	r2, r3
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	695b      	ldr	r3, [r3, #20]
 800a31e:	431a      	orrs	r2, r3
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	69db      	ldr	r3, [r3, #28]
 800a324:	4313      	orrs	r3, r2
 800a326:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	4abc      	ldr	r2, [pc, #752]	; (800a620 <UART_SetConfig+0x320>)
 800a330:	4013      	ands	r3, r2
 800a332:	0019      	movs	r1, r3
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	69fa      	ldr	r2, [r7, #28]
 800a33a:	430a      	orrs	r2, r1
 800a33c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	685b      	ldr	r3, [r3, #4]
 800a344:	4ab7      	ldr	r2, [pc, #732]	; (800a624 <UART_SetConfig+0x324>)
 800a346:	4013      	ands	r3, r2
 800a348:	0019      	movs	r1, r3
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	68da      	ldr	r2, [r3, #12]
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	430a      	orrs	r2, r1
 800a354:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	699b      	ldr	r3, [r3, #24]
 800a35a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	6a1b      	ldr	r3, [r3, #32]
 800a360:	69fa      	ldr	r2, [r7, #28]
 800a362:	4313      	orrs	r3, r2
 800a364:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	689b      	ldr	r3, [r3, #8]
 800a36c:	4aae      	ldr	r2, [pc, #696]	; (800a628 <UART_SetConfig+0x328>)
 800a36e:	4013      	ands	r3, r2
 800a370:	0019      	movs	r1, r3
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	69fa      	ldr	r2, [r7, #28]
 800a378:	430a      	orrs	r2, r1
 800a37a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a382:	220f      	movs	r2, #15
 800a384:	4393      	bics	r3, r2
 800a386:	0019      	movs	r1, r3
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	430a      	orrs	r2, r1
 800a392:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	4aa4      	ldr	r2, [pc, #656]	; (800a62c <UART_SetConfig+0x32c>)
 800a39a:	4293      	cmp	r3, r2
 800a39c:	d127      	bne.n	800a3ee <UART_SetConfig+0xee>
 800a39e:	4ba4      	ldr	r3, [pc, #656]	; (800a630 <UART_SetConfig+0x330>)
 800a3a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3a2:	2203      	movs	r2, #3
 800a3a4:	4013      	ands	r3, r2
 800a3a6:	2b03      	cmp	r3, #3
 800a3a8:	d017      	beq.n	800a3da <UART_SetConfig+0xda>
 800a3aa:	d81b      	bhi.n	800a3e4 <UART_SetConfig+0xe4>
 800a3ac:	2b02      	cmp	r3, #2
 800a3ae:	d00a      	beq.n	800a3c6 <UART_SetConfig+0xc6>
 800a3b0:	d818      	bhi.n	800a3e4 <UART_SetConfig+0xe4>
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d002      	beq.n	800a3bc <UART_SetConfig+0xbc>
 800a3b6:	2b01      	cmp	r3, #1
 800a3b8:	d00a      	beq.n	800a3d0 <UART_SetConfig+0xd0>
 800a3ba:	e013      	b.n	800a3e4 <UART_SetConfig+0xe4>
 800a3bc:	231b      	movs	r3, #27
 800a3be:	18fb      	adds	r3, r7, r3
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	701a      	strb	r2, [r3, #0]
 800a3c4:	e058      	b.n	800a478 <UART_SetConfig+0x178>
 800a3c6:	231b      	movs	r3, #27
 800a3c8:	18fb      	adds	r3, r7, r3
 800a3ca:	2202      	movs	r2, #2
 800a3cc:	701a      	strb	r2, [r3, #0]
 800a3ce:	e053      	b.n	800a478 <UART_SetConfig+0x178>
 800a3d0:	231b      	movs	r3, #27
 800a3d2:	18fb      	adds	r3, r7, r3
 800a3d4:	2204      	movs	r2, #4
 800a3d6:	701a      	strb	r2, [r3, #0]
 800a3d8:	e04e      	b.n	800a478 <UART_SetConfig+0x178>
 800a3da:	231b      	movs	r3, #27
 800a3dc:	18fb      	adds	r3, r7, r3
 800a3de:	2208      	movs	r2, #8
 800a3e0:	701a      	strb	r2, [r3, #0]
 800a3e2:	e049      	b.n	800a478 <UART_SetConfig+0x178>
 800a3e4:	231b      	movs	r3, #27
 800a3e6:	18fb      	adds	r3, r7, r3
 800a3e8:	2210      	movs	r2, #16
 800a3ea:	701a      	strb	r2, [r3, #0]
 800a3ec:	e044      	b.n	800a478 <UART_SetConfig+0x178>
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	4a90      	ldr	r2, [pc, #576]	; (800a634 <UART_SetConfig+0x334>)
 800a3f4:	4293      	cmp	r3, r2
 800a3f6:	d127      	bne.n	800a448 <UART_SetConfig+0x148>
 800a3f8:	4b8d      	ldr	r3, [pc, #564]	; (800a630 <UART_SetConfig+0x330>)
 800a3fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3fc:	220c      	movs	r2, #12
 800a3fe:	4013      	ands	r3, r2
 800a400:	2b0c      	cmp	r3, #12
 800a402:	d017      	beq.n	800a434 <UART_SetConfig+0x134>
 800a404:	d81b      	bhi.n	800a43e <UART_SetConfig+0x13e>
 800a406:	2b08      	cmp	r3, #8
 800a408:	d00a      	beq.n	800a420 <UART_SetConfig+0x120>
 800a40a:	d818      	bhi.n	800a43e <UART_SetConfig+0x13e>
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d002      	beq.n	800a416 <UART_SetConfig+0x116>
 800a410:	2b04      	cmp	r3, #4
 800a412:	d00a      	beq.n	800a42a <UART_SetConfig+0x12a>
 800a414:	e013      	b.n	800a43e <UART_SetConfig+0x13e>
 800a416:	231b      	movs	r3, #27
 800a418:	18fb      	adds	r3, r7, r3
 800a41a:	2200      	movs	r2, #0
 800a41c:	701a      	strb	r2, [r3, #0]
 800a41e:	e02b      	b.n	800a478 <UART_SetConfig+0x178>
 800a420:	231b      	movs	r3, #27
 800a422:	18fb      	adds	r3, r7, r3
 800a424:	2202      	movs	r2, #2
 800a426:	701a      	strb	r2, [r3, #0]
 800a428:	e026      	b.n	800a478 <UART_SetConfig+0x178>
 800a42a:	231b      	movs	r3, #27
 800a42c:	18fb      	adds	r3, r7, r3
 800a42e:	2204      	movs	r2, #4
 800a430:	701a      	strb	r2, [r3, #0]
 800a432:	e021      	b.n	800a478 <UART_SetConfig+0x178>
 800a434:	231b      	movs	r3, #27
 800a436:	18fb      	adds	r3, r7, r3
 800a438:	2208      	movs	r2, #8
 800a43a:	701a      	strb	r2, [r3, #0]
 800a43c:	e01c      	b.n	800a478 <UART_SetConfig+0x178>
 800a43e:	231b      	movs	r3, #27
 800a440:	18fb      	adds	r3, r7, r3
 800a442:	2210      	movs	r2, #16
 800a444:	701a      	strb	r2, [r3, #0]
 800a446:	e017      	b.n	800a478 <UART_SetConfig+0x178>
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	4a7a      	ldr	r2, [pc, #488]	; (800a638 <UART_SetConfig+0x338>)
 800a44e:	4293      	cmp	r3, r2
 800a450:	d104      	bne.n	800a45c <UART_SetConfig+0x15c>
 800a452:	231b      	movs	r3, #27
 800a454:	18fb      	adds	r3, r7, r3
 800a456:	2200      	movs	r2, #0
 800a458:	701a      	strb	r2, [r3, #0]
 800a45a:	e00d      	b.n	800a478 <UART_SetConfig+0x178>
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	4a76      	ldr	r2, [pc, #472]	; (800a63c <UART_SetConfig+0x33c>)
 800a462:	4293      	cmp	r3, r2
 800a464:	d104      	bne.n	800a470 <UART_SetConfig+0x170>
 800a466:	231b      	movs	r3, #27
 800a468:	18fb      	adds	r3, r7, r3
 800a46a:	2200      	movs	r2, #0
 800a46c:	701a      	strb	r2, [r3, #0]
 800a46e:	e003      	b.n	800a478 <UART_SetConfig+0x178>
 800a470:	231b      	movs	r3, #27
 800a472:	18fb      	adds	r3, r7, r3
 800a474:	2210      	movs	r2, #16
 800a476:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	69da      	ldr	r2, [r3, #28]
 800a47c:	2380      	movs	r3, #128	; 0x80
 800a47e:	021b      	lsls	r3, r3, #8
 800a480:	429a      	cmp	r2, r3
 800a482:	d000      	beq.n	800a486 <UART_SetConfig+0x186>
 800a484:	e065      	b.n	800a552 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 800a486:	231b      	movs	r3, #27
 800a488:	18fb      	adds	r3, r7, r3
 800a48a:	781b      	ldrb	r3, [r3, #0]
 800a48c:	2b08      	cmp	r3, #8
 800a48e:	d015      	beq.n	800a4bc <UART_SetConfig+0x1bc>
 800a490:	dc18      	bgt.n	800a4c4 <UART_SetConfig+0x1c4>
 800a492:	2b04      	cmp	r3, #4
 800a494:	d00d      	beq.n	800a4b2 <UART_SetConfig+0x1b2>
 800a496:	dc15      	bgt.n	800a4c4 <UART_SetConfig+0x1c4>
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d002      	beq.n	800a4a2 <UART_SetConfig+0x1a2>
 800a49c:	2b02      	cmp	r3, #2
 800a49e:	d005      	beq.n	800a4ac <UART_SetConfig+0x1ac>
 800a4a0:	e010      	b.n	800a4c4 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a4a2:	f7fe f8b5 	bl	8008610 <HAL_RCC_GetPCLK1Freq>
 800a4a6:	0003      	movs	r3, r0
 800a4a8:	617b      	str	r3, [r7, #20]
        break;
 800a4aa:	e012      	b.n	800a4d2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a4ac:	4b64      	ldr	r3, [pc, #400]	; (800a640 <UART_SetConfig+0x340>)
 800a4ae:	617b      	str	r3, [r7, #20]
        break;
 800a4b0:	e00f      	b.n	800a4d2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a4b2:	f7fe f821 	bl	80084f8 <HAL_RCC_GetSysClockFreq>
 800a4b6:	0003      	movs	r3, r0
 800a4b8:	617b      	str	r3, [r7, #20]
        break;
 800a4ba:	e00a      	b.n	800a4d2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a4bc:	2380      	movs	r3, #128	; 0x80
 800a4be:	021b      	lsls	r3, r3, #8
 800a4c0:	617b      	str	r3, [r7, #20]
        break;
 800a4c2:	e006      	b.n	800a4d2 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a4c8:	231a      	movs	r3, #26
 800a4ca:	18fb      	adds	r3, r7, r3
 800a4cc:	2201      	movs	r2, #1
 800a4ce:	701a      	strb	r2, [r3, #0]
        break;
 800a4d0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a4d2:	697b      	ldr	r3, [r7, #20]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d100      	bne.n	800a4da <UART_SetConfig+0x1da>
 800a4d8:	e08d      	b.n	800a5f6 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a4de:	4b59      	ldr	r3, [pc, #356]	; (800a644 <UART_SetConfig+0x344>)
 800a4e0:	0052      	lsls	r2, r2, #1
 800a4e2:	5ad3      	ldrh	r3, [r2, r3]
 800a4e4:	0019      	movs	r1, r3
 800a4e6:	6978      	ldr	r0, [r7, #20]
 800a4e8:	f7f5 fe1c 	bl	8000124 <__udivsi3>
 800a4ec:	0003      	movs	r3, r0
 800a4ee:	005a      	lsls	r2, r3, #1
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	685b      	ldr	r3, [r3, #4]
 800a4f4:	085b      	lsrs	r3, r3, #1
 800a4f6:	18d2      	adds	r2, r2, r3
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	685b      	ldr	r3, [r3, #4]
 800a4fc:	0019      	movs	r1, r3
 800a4fe:	0010      	movs	r0, r2
 800a500:	f7f5 fe10 	bl	8000124 <__udivsi3>
 800a504:	0003      	movs	r3, r0
 800a506:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a508:	693b      	ldr	r3, [r7, #16]
 800a50a:	2b0f      	cmp	r3, #15
 800a50c:	d91c      	bls.n	800a548 <UART_SetConfig+0x248>
 800a50e:	693a      	ldr	r2, [r7, #16]
 800a510:	2380      	movs	r3, #128	; 0x80
 800a512:	025b      	lsls	r3, r3, #9
 800a514:	429a      	cmp	r2, r3
 800a516:	d217      	bcs.n	800a548 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a518:	693b      	ldr	r3, [r7, #16]
 800a51a:	b29a      	uxth	r2, r3
 800a51c:	200e      	movs	r0, #14
 800a51e:	183b      	adds	r3, r7, r0
 800a520:	210f      	movs	r1, #15
 800a522:	438a      	bics	r2, r1
 800a524:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a526:	693b      	ldr	r3, [r7, #16]
 800a528:	085b      	lsrs	r3, r3, #1
 800a52a:	b29b      	uxth	r3, r3
 800a52c:	2207      	movs	r2, #7
 800a52e:	4013      	ands	r3, r2
 800a530:	b299      	uxth	r1, r3
 800a532:	183b      	adds	r3, r7, r0
 800a534:	183a      	adds	r2, r7, r0
 800a536:	8812      	ldrh	r2, [r2, #0]
 800a538:	430a      	orrs	r2, r1
 800a53a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	183a      	adds	r2, r7, r0
 800a542:	8812      	ldrh	r2, [r2, #0]
 800a544:	60da      	str	r2, [r3, #12]
 800a546:	e056      	b.n	800a5f6 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800a548:	231a      	movs	r3, #26
 800a54a:	18fb      	adds	r3, r7, r3
 800a54c:	2201      	movs	r2, #1
 800a54e:	701a      	strb	r2, [r3, #0]
 800a550:	e051      	b.n	800a5f6 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a552:	231b      	movs	r3, #27
 800a554:	18fb      	adds	r3, r7, r3
 800a556:	781b      	ldrb	r3, [r3, #0]
 800a558:	2b08      	cmp	r3, #8
 800a55a:	d015      	beq.n	800a588 <UART_SetConfig+0x288>
 800a55c:	dc18      	bgt.n	800a590 <UART_SetConfig+0x290>
 800a55e:	2b04      	cmp	r3, #4
 800a560:	d00d      	beq.n	800a57e <UART_SetConfig+0x27e>
 800a562:	dc15      	bgt.n	800a590 <UART_SetConfig+0x290>
 800a564:	2b00      	cmp	r3, #0
 800a566:	d002      	beq.n	800a56e <UART_SetConfig+0x26e>
 800a568:	2b02      	cmp	r3, #2
 800a56a:	d005      	beq.n	800a578 <UART_SetConfig+0x278>
 800a56c:	e010      	b.n	800a590 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a56e:	f7fe f84f 	bl	8008610 <HAL_RCC_GetPCLK1Freq>
 800a572:	0003      	movs	r3, r0
 800a574:	617b      	str	r3, [r7, #20]
        break;
 800a576:	e012      	b.n	800a59e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a578:	4b31      	ldr	r3, [pc, #196]	; (800a640 <UART_SetConfig+0x340>)
 800a57a:	617b      	str	r3, [r7, #20]
        break;
 800a57c:	e00f      	b.n	800a59e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a57e:	f7fd ffbb 	bl	80084f8 <HAL_RCC_GetSysClockFreq>
 800a582:	0003      	movs	r3, r0
 800a584:	617b      	str	r3, [r7, #20]
        break;
 800a586:	e00a      	b.n	800a59e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a588:	2380      	movs	r3, #128	; 0x80
 800a58a:	021b      	lsls	r3, r3, #8
 800a58c:	617b      	str	r3, [r7, #20]
        break;
 800a58e:	e006      	b.n	800a59e <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 800a590:	2300      	movs	r3, #0
 800a592:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a594:	231a      	movs	r3, #26
 800a596:	18fb      	adds	r3, r7, r3
 800a598:	2201      	movs	r2, #1
 800a59a:	701a      	strb	r2, [r3, #0]
        break;
 800a59c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800a59e:	697b      	ldr	r3, [r7, #20]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d028      	beq.n	800a5f6 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a5a8:	4b26      	ldr	r3, [pc, #152]	; (800a644 <UART_SetConfig+0x344>)
 800a5aa:	0052      	lsls	r2, r2, #1
 800a5ac:	5ad3      	ldrh	r3, [r2, r3]
 800a5ae:	0019      	movs	r1, r3
 800a5b0:	6978      	ldr	r0, [r7, #20]
 800a5b2:	f7f5 fdb7 	bl	8000124 <__udivsi3>
 800a5b6:	0003      	movs	r3, r0
 800a5b8:	001a      	movs	r2, r3
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	685b      	ldr	r3, [r3, #4]
 800a5be:	085b      	lsrs	r3, r3, #1
 800a5c0:	18d2      	adds	r2, r2, r3
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	685b      	ldr	r3, [r3, #4]
 800a5c6:	0019      	movs	r1, r3
 800a5c8:	0010      	movs	r0, r2
 800a5ca:	f7f5 fdab 	bl	8000124 <__udivsi3>
 800a5ce:	0003      	movs	r3, r0
 800a5d0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a5d2:	693b      	ldr	r3, [r7, #16]
 800a5d4:	2b0f      	cmp	r3, #15
 800a5d6:	d90a      	bls.n	800a5ee <UART_SetConfig+0x2ee>
 800a5d8:	693a      	ldr	r2, [r7, #16]
 800a5da:	2380      	movs	r3, #128	; 0x80
 800a5dc:	025b      	lsls	r3, r3, #9
 800a5de:	429a      	cmp	r2, r3
 800a5e0:	d205      	bcs.n	800a5ee <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a5e2:	693b      	ldr	r3, [r7, #16]
 800a5e4:	b29a      	uxth	r2, r3
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	60da      	str	r2, [r3, #12]
 800a5ec:	e003      	b.n	800a5f6 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800a5ee:	231a      	movs	r3, #26
 800a5f0:	18fb      	adds	r3, r7, r3
 800a5f2:	2201      	movs	r2, #1
 800a5f4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	226a      	movs	r2, #106	; 0x6a
 800a5fa:	2101      	movs	r1, #1
 800a5fc:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2268      	movs	r2, #104	; 0x68
 800a602:	2101      	movs	r1, #1
 800a604:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	2200      	movs	r2, #0
 800a60a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2200      	movs	r2, #0
 800a610:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a612:	231a      	movs	r3, #26
 800a614:	18fb      	adds	r3, r7, r3
 800a616:	781b      	ldrb	r3, [r3, #0]
}
 800a618:	0018      	movs	r0, r3
 800a61a:	46bd      	mov	sp, r7
 800a61c:	b008      	add	sp, #32
 800a61e:	bd80      	pop	{r7, pc}
 800a620:	cfff69f3 	.word	0xcfff69f3
 800a624:	ffffcfff 	.word	0xffffcfff
 800a628:	11fff4ff 	.word	0x11fff4ff
 800a62c:	40013800 	.word	0x40013800
 800a630:	40021000 	.word	0x40021000
 800a634:	40004400 	.word	0x40004400
 800a638:	40004800 	.word	0x40004800
 800a63c:	40004c00 	.word	0x40004c00
 800a640:	00f42400 	.word	0x00f42400
 800a644:	0800c948 	.word	0x0800c948

0800a648 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b082      	sub	sp, #8
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a654:	2201      	movs	r2, #1
 800a656:	4013      	ands	r3, r2
 800a658:	d00b      	beq.n	800a672 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	685b      	ldr	r3, [r3, #4]
 800a660:	4a4a      	ldr	r2, [pc, #296]	; (800a78c <UART_AdvFeatureConfig+0x144>)
 800a662:	4013      	ands	r3, r2
 800a664:	0019      	movs	r1, r3
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	430a      	orrs	r2, r1
 800a670:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a676:	2202      	movs	r2, #2
 800a678:	4013      	ands	r3, r2
 800a67a:	d00b      	beq.n	800a694 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	685b      	ldr	r3, [r3, #4]
 800a682:	4a43      	ldr	r2, [pc, #268]	; (800a790 <UART_AdvFeatureConfig+0x148>)
 800a684:	4013      	ands	r3, r2
 800a686:	0019      	movs	r1, r3
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	430a      	orrs	r2, r1
 800a692:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a698:	2204      	movs	r2, #4
 800a69a:	4013      	ands	r3, r2
 800a69c:	d00b      	beq.n	800a6b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	685b      	ldr	r3, [r3, #4]
 800a6a4:	4a3b      	ldr	r2, [pc, #236]	; (800a794 <UART_AdvFeatureConfig+0x14c>)
 800a6a6:	4013      	ands	r3, r2
 800a6a8:	0019      	movs	r1, r3
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	430a      	orrs	r2, r1
 800a6b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6ba:	2208      	movs	r2, #8
 800a6bc:	4013      	ands	r3, r2
 800a6be:	d00b      	beq.n	800a6d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	685b      	ldr	r3, [r3, #4]
 800a6c6:	4a34      	ldr	r2, [pc, #208]	; (800a798 <UART_AdvFeatureConfig+0x150>)
 800a6c8:	4013      	ands	r3, r2
 800a6ca:	0019      	movs	r1, r3
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	430a      	orrs	r2, r1
 800a6d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6dc:	2210      	movs	r2, #16
 800a6de:	4013      	ands	r3, r2
 800a6e0:	d00b      	beq.n	800a6fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	689b      	ldr	r3, [r3, #8]
 800a6e8:	4a2c      	ldr	r2, [pc, #176]	; (800a79c <UART_AdvFeatureConfig+0x154>)
 800a6ea:	4013      	ands	r3, r2
 800a6ec:	0019      	movs	r1, r3
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	430a      	orrs	r2, r1
 800a6f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6fe:	2220      	movs	r2, #32
 800a700:	4013      	ands	r3, r2
 800a702:	d00b      	beq.n	800a71c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	689b      	ldr	r3, [r3, #8]
 800a70a:	4a25      	ldr	r2, [pc, #148]	; (800a7a0 <UART_AdvFeatureConfig+0x158>)
 800a70c:	4013      	ands	r3, r2
 800a70e:	0019      	movs	r1, r3
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	430a      	orrs	r2, r1
 800a71a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a720:	2240      	movs	r2, #64	; 0x40
 800a722:	4013      	ands	r3, r2
 800a724:	d01d      	beq.n	800a762 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	685b      	ldr	r3, [r3, #4]
 800a72c:	4a1d      	ldr	r2, [pc, #116]	; (800a7a4 <UART_AdvFeatureConfig+0x15c>)
 800a72e:	4013      	ands	r3, r2
 800a730:	0019      	movs	r1, r3
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	430a      	orrs	r2, r1
 800a73c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a742:	2380      	movs	r3, #128	; 0x80
 800a744:	035b      	lsls	r3, r3, #13
 800a746:	429a      	cmp	r2, r3
 800a748:	d10b      	bne.n	800a762 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	685b      	ldr	r3, [r3, #4]
 800a750:	4a15      	ldr	r2, [pc, #84]	; (800a7a8 <UART_AdvFeatureConfig+0x160>)
 800a752:	4013      	ands	r3, r2
 800a754:	0019      	movs	r1, r3
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	430a      	orrs	r2, r1
 800a760:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a766:	2280      	movs	r2, #128	; 0x80
 800a768:	4013      	ands	r3, r2
 800a76a:	d00b      	beq.n	800a784 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	685b      	ldr	r3, [r3, #4]
 800a772:	4a0e      	ldr	r2, [pc, #56]	; (800a7ac <UART_AdvFeatureConfig+0x164>)
 800a774:	4013      	ands	r3, r2
 800a776:	0019      	movs	r1, r3
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	430a      	orrs	r2, r1
 800a782:	605a      	str	r2, [r3, #4]
  }
}
 800a784:	46c0      	nop			; (mov r8, r8)
 800a786:	46bd      	mov	sp, r7
 800a788:	b002      	add	sp, #8
 800a78a:	bd80      	pop	{r7, pc}
 800a78c:	fffdffff 	.word	0xfffdffff
 800a790:	fffeffff 	.word	0xfffeffff
 800a794:	fffbffff 	.word	0xfffbffff
 800a798:	ffff7fff 	.word	0xffff7fff
 800a79c:	ffffefff 	.word	0xffffefff
 800a7a0:	ffffdfff 	.word	0xffffdfff
 800a7a4:	ffefffff 	.word	0xffefffff
 800a7a8:	ff9fffff 	.word	0xff9fffff
 800a7ac:	fff7ffff 	.word	0xfff7ffff

0800a7b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b086      	sub	sp, #24
 800a7b4:	af02      	add	r7, sp, #8
 800a7b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	228c      	movs	r2, #140	; 0x8c
 800a7bc:	2100      	movs	r1, #0
 800a7be:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a7c0:	f7fa fe0c 	bl	80053dc <HAL_GetTick>
 800a7c4:	0003      	movs	r3, r0
 800a7c6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	2208      	movs	r2, #8
 800a7d0:	4013      	ands	r3, r2
 800a7d2:	2b08      	cmp	r3, #8
 800a7d4:	d10c      	bne.n	800a7f0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	2280      	movs	r2, #128	; 0x80
 800a7da:	0391      	lsls	r1, r2, #14
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	4a18      	ldr	r2, [pc, #96]	; (800a840 <UART_CheckIdleState+0x90>)
 800a7e0:	9200      	str	r2, [sp, #0]
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	f000 f82e 	bl	800a844 <UART_WaitOnFlagUntilTimeout>
 800a7e8:	1e03      	subs	r3, r0, #0
 800a7ea:	d001      	beq.n	800a7f0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a7ec:	2303      	movs	r3, #3
 800a7ee:	e023      	b.n	800a838 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	2204      	movs	r2, #4
 800a7f8:	4013      	ands	r3, r2
 800a7fa:	2b04      	cmp	r3, #4
 800a7fc:	d10c      	bne.n	800a818 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	2280      	movs	r2, #128	; 0x80
 800a802:	03d1      	lsls	r1, r2, #15
 800a804:	6878      	ldr	r0, [r7, #4]
 800a806:	4a0e      	ldr	r2, [pc, #56]	; (800a840 <UART_CheckIdleState+0x90>)
 800a808:	9200      	str	r2, [sp, #0]
 800a80a:	2200      	movs	r2, #0
 800a80c:	f000 f81a 	bl	800a844 <UART_WaitOnFlagUntilTimeout>
 800a810:	1e03      	subs	r3, r0, #0
 800a812:	d001      	beq.n	800a818 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a814:	2303      	movs	r3, #3
 800a816:	e00f      	b.n	800a838 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2284      	movs	r2, #132	; 0x84
 800a81c:	2120      	movs	r1, #32
 800a81e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2288      	movs	r2, #136	; 0x88
 800a824:	2120      	movs	r1, #32
 800a826:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2200      	movs	r2, #0
 800a82c:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	2280      	movs	r2, #128	; 0x80
 800a832:	2100      	movs	r1, #0
 800a834:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a836:	2300      	movs	r3, #0
}
 800a838:	0018      	movs	r0, r3
 800a83a:	46bd      	mov	sp, r7
 800a83c:	b004      	add	sp, #16
 800a83e:	bd80      	pop	{r7, pc}
 800a840:	01ffffff 	.word	0x01ffffff

0800a844 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b094      	sub	sp, #80	; 0x50
 800a848:	af00      	add	r7, sp, #0
 800a84a:	60f8      	str	r0, [r7, #12]
 800a84c:	60b9      	str	r1, [r7, #8]
 800a84e:	603b      	str	r3, [r7, #0]
 800a850:	1dfb      	adds	r3, r7, #7
 800a852:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a854:	e0a7      	b.n	800a9a6 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a856:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a858:	3301      	adds	r3, #1
 800a85a:	d100      	bne.n	800a85e <UART_WaitOnFlagUntilTimeout+0x1a>
 800a85c:	e0a3      	b.n	800a9a6 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a85e:	f7fa fdbd 	bl	80053dc <HAL_GetTick>
 800a862:	0002      	movs	r2, r0
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	1ad3      	subs	r3, r2, r3
 800a868:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a86a:	429a      	cmp	r2, r3
 800a86c:	d302      	bcc.n	800a874 <UART_WaitOnFlagUntilTimeout+0x30>
 800a86e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a870:	2b00      	cmp	r3, #0
 800a872:	d13f      	bne.n	800a8f4 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a874:	f3ef 8310 	mrs	r3, PRIMASK
 800a878:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800a87a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a87c:	647b      	str	r3, [r7, #68]	; 0x44
 800a87e:	2301      	movs	r3, #1
 800a880:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a884:	f383 8810 	msr	PRIMASK, r3
}
 800a888:	46c0      	nop			; (mov r8, r8)
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	681a      	ldr	r2, [r3, #0]
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	494e      	ldr	r1, [pc, #312]	; (800a9d0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800a896:	400a      	ands	r2, r1
 800a898:	601a      	str	r2, [r3, #0]
 800a89a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a89c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a89e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8a0:	f383 8810 	msr	PRIMASK, r3
}
 800a8a4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a8a6:	f3ef 8310 	mrs	r3, PRIMASK
 800a8aa:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800a8ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8ae:	643b      	str	r3, [r7, #64]	; 0x40
 800a8b0:	2301      	movs	r3, #1
 800a8b2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a8b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8b6:	f383 8810 	msr	PRIMASK, r3
}
 800a8ba:	46c0      	nop			; (mov r8, r8)
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	689a      	ldr	r2, [r3, #8]
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	2101      	movs	r1, #1
 800a8c8:	438a      	bics	r2, r1
 800a8ca:	609a      	str	r2, [r3, #8]
 800a8cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a8ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a8d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8d2:	f383 8810 	msr	PRIMASK, r3
}
 800a8d6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	2284      	movs	r2, #132	; 0x84
 800a8dc:	2120      	movs	r1, #32
 800a8de:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	2288      	movs	r2, #136	; 0x88
 800a8e4:	2120      	movs	r1, #32
 800a8e6:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	2280      	movs	r2, #128	; 0x80
 800a8ec:	2100      	movs	r1, #0
 800a8ee:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a8f0:	2303      	movs	r3, #3
 800a8f2:	e069      	b.n	800a9c8 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	2204      	movs	r2, #4
 800a8fc:	4013      	ands	r3, r2
 800a8fe:	d052      	beq.n	800a9a6 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	69da      	ldr	r2, [r3, #28]
 800a906:	2380      	movs	r3, #128	; 0x80
 800a908:	011b      	lsls	r3, r3, #4
 800a90a:	401a      	ands	r2, r3
 800a90c:	2380      	movs	r3, #128	; 0x80
 800a90e:	011b      	lsls	r3, r3, #4
 800a910:	429a      	cmp	r2, r3
 800a912:	d148      	bne.n	800a9a6 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	2280      	movs	r2, #128	; 0x80
 800a91a:	0112      	lsls	r2, r2, #4
 800a91c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a91e:	f3ef 8310 	mrs	r3, PRIMASK
 800a922:	613b      	str	r3, [r7, #16]
  return(result);
 800a924:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a926:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a928:	2301      	movs	r3, #1
 800a92a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a92c:	697b      	ldr	r3, [r7, #20]
 800a92e:	f383 8810 	msr	PRIMASK, r3
}
 800a932:	46c0      	nop			; (mov r8, r8)
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	681a      	ldr	r2, [r3, #0]
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	4924      	ldr	r1, [pc, #144]	; (800a9d0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800a940:	400a      	ands	r2, r1
 800a942:	601a      	str	r2, [r3, #0]
 800a944:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a946:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a948:	69bb      	ldr	r3, [r7, #24]
 800a94a:	f383 8810 	msr	PRIMASK, r3
}
 800a94e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a950:	f3ef 8310 	mrs	r3, PRIMASK
 800a954:	61fb      	str	r3, [r7, #28]
  return(result);
 800a956:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a958:	64bb      	str	r3, [r7, #72]	; 0x48
 800a95a:	2301      	movs	r3, #1
 800a95c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a95e:	6a3b      	ldr	r3, [r7, #32]
 800a960:	f383 8810 	msr	PRIMASK, r3
}
 800a964:	46c0      	nop			; (mov r8, r8)
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	689a      	ldr	r2, [r3, #8]
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	2101      	movs	r1, #1
 800a972:	438a      	bics	r2, r1
 800a974:	609a      	str	r2, [r3, #8]
 800a976:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a978:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a97a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a97c:	f383 8810 	msr	PRIMASK, r3
}
 800a980:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	2284      	movs	r2, #132	; 0x84
 800a986:	2120      	movs	r1, #32
 800a988:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	2288      	movs	r2, #136	; 0x88
 800a98e:	2120      	movs	r1, #32
 800a990:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	228c      	movs	r2, #140	; 0x8c
 800a996:	2120      	movs	r1, #32
 800a998:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	2280      	movs	r2, #128	; 0x80
 800a99e:	2100      	movs	r1, #0
 800a9a0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800a9a2:	2303      	movs	r3, #3
 800a9a4:	e010      	b.n	800a9c8 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	69db      	ldr	r3, [r3, #28]
 800a9ac:	68ba      	ldr	r2, [r7, #8]
 800a9ae:	4013      	ands	r3, r2
 800a9b0:	68ba      	ldr	r2, [r7, #8]
 800a9b2:	1ad3      	subs	r3, r2, r3
 800a9b4:	425a      	negs	r2, r3
 800a9b6:	4153      	adcs	r3, r2
 800a9b8:	b2db      	uxtb	r3, r3
 800a9ba:	001a      	movs	r2, r3
 800a9bc:	1dfb      	adds	r3, r7, #7
 800a9be:	781b      	ldrb	r3, [r3, #0]
 800a9c0:	429a      	cmp	r2, r3
 800a9c2:	d100      	bne.n	800a9c6 <UART_WaitOnFlagUntilTimeout+0x182>
 800a9c4:	e747      	b.n	800a856 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a9c6:	2300      	movs	r3, #0
}
 800a9c8:	0018      	movs	r0, r3
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	b014      	add	sp, #80	; 0x50
 800a9ce:	bd80      	pop	{r7, pc}
 800a9d0:	fffffe5f 	.word	0xfffffe5f

0800a9d4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b098      	sub	sp, #96	; 0x60
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	60f8      	str	r0, [r7, #12]
 800a9dc:	60b9      	str	r1, [r7, #8]
 800a9de:	1dbb      	adds	r3, r7, #6
 800a9e0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	68ba      	ldr	r2, [r7, #8]
 800a9e6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	1dba      	adds	r2, r7, #6
 800a9ec:	215c      	movs	r1, #92	; 0x5c
 800a9ee:	8812      	ldrh	r2, [r2, #0]
 800a9f0:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	1dba      	adds	r2, r7, #6
 800a9f6:	215e      	movs	r1, #94	; 0x5e
 800a9f8:	8812      	ldrh	r2, [r2, #0]
 800a9fa:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	2200      	movs	r2, #0
 800aa00:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	689a      	ldr	r2, [r3, #8]
 800aa06:	2380      	movs	r3, #128	; 0x80
 800aa08:	015b      	lsls	r3, r3, #5
 800aa0a:	429a      	cmp	r2, r3
 800aa0c:	d10d      	bne.n	800aa2a <UART_Start_Receive_IT+0x56>
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	691b      	ldr	r3, [r3, #16]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d104      	bne.n	800aa20 <UART_Start_Receive_IT+0x4c>
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	2260      	movs	r2, #96	; 0x60
 800aa1a:	497f      	ldr	r1, [pc, #508]	; (800ac18 <UART_Start_Receive_IT+0x244>)
 800aa1c:	5299      	strh	r1, [r3, r2]
 800aa1e:	e02e      	b.n	800aa7e <UART_Start_Receive_IT+0xaa>
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	2260      	movs	r2, #96	; 0x60
 800aa24:	21ff      	movs	r1, #255	; 0xff
 800aa26:	5299      	strh	r1, [r3, r2]
 800aa28:	e029      	b.n	800aa7e <UART_Start_Receive_IT+0xaa>
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	689b      	ldr	r3, [r3, #8]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d10d      	bne.n	800aa4e <UART_Start_Receive_IT+0x7a>
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	691b      	ldr	r3, [r3, #16]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d104      	bne.n	800aa44 <UART_Start_Receive_IT+0x70>
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	2260      	movs	r2, #96	; 0x60
 800aa3e:	21ff      	movs	r1, #255	; 0xff
 800aa40:	5299      	strh	r1, [r3, r2]
 800aa42:	e01c      	b.n	800aa7e <UART_Start_Receive_IT+0xaa>
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	2260      	movs	r2, #96	; 0x60
 800aa48:	217f      	movs	r1, #127	; 0x7f
 800aa4a:	5299      	strh	r1, [r3, r2]
 800aa4c:	e017      	b.n	800aa7e <UART_Start_Receive_IT+0xaa>
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	689a      	ldr	r2, [r3, #8]
 800aa52:	2380      	movs	r3, #128	; 0x80
 800aa54:	055b      	lsls	r3, r3, #21
 800aa56:	429a      	cmp	r2, r3
 800aa58:	d10d      	bne.n	800aa76 <UART_Start_Receive_IT+0xa2>
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	691b      	ldr	r3, [r3, #16]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d104      	bne.n	800aa6c <UART_Start_Receive_IT+0x98>
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	2260      	movs	r2, #96	; 0x60
 800aa66:	217f      	movs	r1, #127	; 0x7f
 800aa68:	5299      	strh	r1, [r3, r2]
 800aa6a:	e008      	b.n	800aa7e <UART_Start_Receive_IT+0xaa>
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	2260      	movs	r2, #96	; 0x60
 800aa70:	213f      	movs	r1, #63	; 0x3f
 800aa72:	5299      	strh	r1, [r3, r2]
 800aa74:	e003      	b.n	800aa7e <UART_Start_Receive_IT+0xaa>
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	2260      	movs	r2, #96	; 0x60
 800aa7a:	2100      	movs	r1, #0
 800aa7c:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	228c      	movs	r2, #140	; 0x8c
 800aa82:	2100      	movs	r1, #0
 800aa84:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	2288      	movs	r2, #136	; 0x88
 800aa8a:	2122      	movs	r1, #34	; 0x22
 800aa8c:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa8e:	f3ef 8310 	mrs	r3, PRIMASK
 800aa92:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 800aa94:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa96:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aa98:	2301      	movs	r3, #1
 800aa9a:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa9e:	f383 8810 	msr	PRIMASK, r3
}
 800aaa2:	46c0      	nop			; (mov r8, r8)
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	689a      	ldr	r2, [r3, #8]
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	2101      	movs	r1, #1
 800aab0:	430a      	orrs	r2, r1
 800aab2:	609a      	str	r2, [r3, #8]
 800aab4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aab6:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aab8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aaba:	f383 8810 	msr	PRIMASK, r3
}
 800aabe:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800aac4:	2380      	movs	r3, #128	; 0x80
 800aac6:	059b      	lsls	r3, r3, #22
 800aac8:	429a      	cmp	r2, r3
 800aaca:	d154      	bne.n	800ab76 <UART_Start_Receive_IT+0x1a2>
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	2268      	movs	r2, #104	; 0x68
 800aad0:	5a9b      	ldrh	r3, [r3, r2]
 800aad2:	1dba      	adds	r2, r7, #6
 800aad4:	8812      	ldrh	r2, [r2, #0]
 800aad6:	429a      	cmp	r2, r3
 800aad8:	d34d      	bcc.n	800ab76 <UART_Start_Receive_IT+0x1a2>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	689a      	ldr	r2, [r3, #8]
 800aade:	2380      	movs	r3, #128	; 0x80
 800aae0:	015b      	lsls	r3, r3, #5
 800aae2:	429a      	cmp	r2, r3
 800aae4:	d107      	bne.n	800aaf6 <UART_Start_Receive_IT+0x122>
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	691b      	ldr	r3, [r3, #16]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d103      	bne.n	800aaf6 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	4a4a      	ldr	r2, [pc, #296]	; (800ac1c <UART_Start_Receive_IT+0x248>)
 800aaf2:	671a      	str	r2, [r3, #112]	; 0x70
 800aaf4:	e002      	b.n	800aafc <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	4a49      	ldr	r2, [pc, #292]	; (800ac20 <UART_Start_Receive_IT+0x24c>)
 800aafa:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	2280      	movs	r2, #128	; 0x80
 800ab00:	2100      	movs	r1, #0
 800ab02:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	691b      	ldr	r3, [r3, #16]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d019      	beq.n	800ab40 <UART_Start_Receive_IT+0x16c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab0c:	f3ef 8310 	mrs	r3, PRIMASK
 800ab10:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800ab12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ab14:	65bb      	str	r3, [r7, #88]	; 0x58
 800ab16:	2301      	movs	r3, #1
 800ab18:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab1c:	f383 8810 	msr	PRIMASK, r3
}
 800ab20:	46c0      	nop			; (mov r8, r8)
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	681a      	ldr	r2, [r3, #0]
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	2180      	movs	r1, #128	; 0x80
 800ab2e:	0049      	lsls	r1, r1, #1
 800ab30:	430a      	orrs	r2, r1
 800ab32:	601a      	str	r2, [r3, #0]
 800ab34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ab36:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab3a:	f383 8810 	msr	PRIMASK, r3
}
 800ab3e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab40:	f3ef 8310 	mrs	r3, PRIMASK
 800ab44:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800ab46:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ab48:	657b      	str	r3, [r7, #84]	; 0x54
 800ab4a:	2301      	movs	r3, #1
 800ab4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab50:	f383 8810 	msr	PRIMASK, r3
}
 800ab54:	46c0      	nop			; (mov r8, r8)
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	689a      	ldr	r2, [r3, #8]
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	2180      	movs	r1, #128	; 0x80
 800ab62:	0549      	lsls	r1, r1, #21
 800ab64:	430a      	orrs	r2, r1
 800ab66:	609a      	str	r2, [r3, #8]
 800ab68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab6a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab6e:	f383 8810 	msr	PRIMASK, r3
}
 800ab72:	46c0      	nop			; (mov r8, r8)
 800ab74:	e04b      	b.n	800ac0e <UART_Start_Receive_IT+0x23a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	689a      	ldr	r2, [r3, #8]
 800ab7a:	2380      	movs	r3, #128	; 0x80
 800ab7c:	015b      	lsls	r3, r3, #5
 800ab7e:	429a      	cmp	r2, r3
 800ab80:	d107      	bne.n	800ab92 <UART_Start_Receive_IT+0x1be>
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	691b      	ldr	r3, [r3, #16]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d103      	bne.n	800ab92 <UART_Start_Receive_IT+0x1be>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	4a25      	ldr	r2, [pc, #148]	; (800ac24 <UART_Start_Receive_IT+0x250>)
 800ab8e:	671a      	str	r2, [r3, #112]	; 0x70
 800ab90:	e002      	b.n	800ab98 <UART_Start_Receive_IT+0x1c4>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	4a24      	ldr	r2, [pc, #144]	; (800ac28 <UART_Start_Receive_IT+0x254>)
 800ab96:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	2280      	movs	r2, #128	; 0x80
 800ab9c:	2100      	movs	r1, #0
 800ab9e:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	691b      	ldr	r3, [r3, #16]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d019      	beq.n	800abdc <UART_Start_Receive_IT+0x208>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aba8:	f3ef 8310 	mrs	r3, PRIMASK
 800abac:	61fb      	str	r3, [r7, #28]
  return(result);
 800abae:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800abb0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800abb2:	2301      	movs	r3, #1
 800abb4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800abb6:	6a3b      	ldr	r3, [r7, #32]
 800abb8:	f383 8810 	msr	PRIMASK, r3
}
 800abbc:	46c0      	nop			; (mov r8, r8)
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	681a      	ldr	r2, [r3, #0]
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	2190      	movs	r1, #144	; 0x90
 800abca:	0049      	lsls	r1, r1, #1
 800abcc:	430a      	orrs	r2, r1
 800abce:	601a      	str	r2, [r3, #0]
 800abd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800abd2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800abd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abd6:	f383 8810 	msr	PRIMASK, r3
}
 800abda:	e018      	b.n	800ac0e <UART_Start_Receive_IT+0x23a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800abdc:	f3ef 8310 	mrs	r3, PRIMASK
 800abe0:	613b      	str	r3, [r7, #16]
  return(result);
 800abe2:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800abe4:	653b      	str	r3, [r7, #80]	; 0x50
 800abe6:	2301      	movs	r3, #1
 800abe8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	f383 8810 	msr	PRIMASK, r3
}
 800abf0:	46c0      	nop			; (mov r8, r8)
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	681a      	ldr	r2, [r3, #0]
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	2120      	movs	r1, #32
 800abfe:	430a      	orrs	r2, r1
 800ac00:	601a      	str	r2, [r3, #0]
 800ac02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac04:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac06:	69bb      	ldr	r3, [r7, #24]
 800ac08:	f383 8810 	msr	PRIMASK, r3
}
 800ac0c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 800ac0e:	2300      	movs	r3, #0
}
 800ac10:	0018      	movs	r0, r3
 800ac12:	46bd      	mov	sp, r7
 800ac14:	b018      	add	sp, #96	; 0x60
 800ac16:	bd80      	pop	{r7, pc}
 800ac18:	000001ff 	.word	0x000001ff
 800ac1c:	0800b68d 	.word	0x0800b68d
 800ac20:	0800b3a9 	.word	0x0800b3a9
 800ac24:	0800b23d 	.word	0x0800b23d
 800ac28:	0800b0d1 	.word	0x0800b0d1

0800ac2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b08e      	sub	sp, #56	; 0x38
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ac34:	f3ef 8310 	mrs	r3, PRIMASK
 800ac38:	617b      	str	r3, [r7, #20]
  return(result);
 800ac3a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ac3c:	637b      	str	r3, [r7, #52]	; 0x34
 800ac3e:	2301      	movs	r3, #1
 800ac40:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac42:	69bb      	ldr	r3, [r7, #24]
 800ac44:	f383 8810 	msr	PRIMASK, r3
}
 800ac48:	46c0      	nop			; (mov r8, r8)
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	681a      	ldr	r2, [r3, #0]
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	4926      	ldr	r1, [pc, #152]	; (800acf0 <UART_EndRxTransfer+0xc4>)
 800ac56:	400a      	ands	r2, r1
 800ac58:	601a      	str	r2, [r3, #0]
 800ac5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac5c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac5e:	69fb      	ldr	r3, [r7, #28]
 800ac60:	f383 8810 	msr	PRIMASK, r3
}
 800ac64:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ac66:	f3ef 8310 	mrs	r3, PRIMASK
 800ac6a:	623b      	str	r3, [r7, #32]
  return(result);
 800ac6c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ac6e:	633b      	str	r3, [r7, #48]	; 0x30
 800ac70:	2301      	movs	r3, #1
 800ac72:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac76:	f383 8810 	msr	PRIMASK, r3
}
 800ac7a:	46c0      	nop			; (mov r8, r8)
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	689a      	ldr	r2, [r3, #8]
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	491b      	ldr	r1, [pc, #108]	; (800acf4 <UART_EndRxTransfer+0xc8>)
 800ac88:	400a      	ands	r2, r1
 800ac8a:	609a      	str	r2, [r3, #8]
 800ac8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac8e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac92:	f383 8810 	msr	PRIMASK, r3
}
 800ac96:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac9c:	2b01      	cmp	r3, #1
 800ac9e:	d118      	bne.n	800acd2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aca0:	f3ef 8310 	mrs	r3, PRIMASK
 800aca4:	60bb      	str	r3, [r7, #8]
  return(result);
 800aca6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aca8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800acaa:	2301      	movs	r3, #1
 800acac:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	f383 8810 	msr	PRIMASK, r3
}
 800acb4:	46c0      	nop			; (mov r8, r8)
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	681a      	ldr	r2, [r3, #0]
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	2110      	movs	r1, #16
 800acc2:	438a      	bics	r2, r1
 800acc4:	601a      	str	r2, [r3, #0]
 800acc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acc8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800acca:	693b      	ldr	r3, [r7, #16]
 800accc:	f383 8810 	msr	PRIMASK, r3
}
 800acd0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	2288      	movs	r2, #136	; 0x88
 800acd6:	2120      	movs	r1, #32
 800acd8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	2200      	movs	r2, #0
 800acde:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2200      	movs	r2, #0
 800ace4:	671a      	str	r2, [r3, #112]	; 0x70
}
 800ace6:	46c0      	nop			; (mov r8, r8)
 800ace8:	46bd      	mov	sp, r7
 800acea:	b00e      	add	sp, #56	; 0x38
 800acec:	bd80      	pop	{r7, pc}
 800acee:	46c0      	nop			; (mov r8, r8)
 800acf0:	fffffedf 	.word	0xfffffedf
 800acf4:	effffffe 	.word	0xeffffffe

0800acf8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b084      	sub	sp, #16
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad04:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	225e      	movs	r2, #94	; 0x5e
 800ad0a:	2100      	movs	r1, #0
 800ad0c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	2256      	movs	r2, #86	; 0x56
 800ad12:	2100      	movs	r1, #0
 800ad14:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	0018      	movs	r0, r3
 800ad1a:	f7ff fadd 	bl	800a2d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad1e:	46c0      	nop			; (mov r8, r8)
 800ad20:	46bd      	mov	sp, r7
 800ad22:	b004      	add	sp, #16
 800ad24:	bd80      	pop	{r7, pc}

0800ad26 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ad26:	b580      	push	{r7, lr}
 800ad28:	b08a      	sub	sp, #40	; 0x28
 800ad2a:	af00      	add	r7, sp, #0
 800ad2c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	2284      	movs	r2, #132	; 0x84
 800ad32:	589b      	ldr	r3, [r3, r2]
 800ad34:	2b21      	cmp	r3, #33	; 0x21
 800ad36:	d14c      	bne.n	800add2 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2256      	movs	r2, #86	; 0x56
 800ad3c:	5a9b      	ldrh	r3, [r3, r2]
 800ad3e:	b29b      	uxth	r3, r3
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d132      	bne.n	800adaa <UART_TxISR_8BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ad44:	f3ef 8310 	mrs	r3, PRIMASK
 800ad48:	60bb      	str	r3, [r7, #8]
  return(result);
 800ad4a:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800ad4c:	627b      	str	r3, [r7, #36]	; 0x24
 800ad4e:	2301      	movs	r3, #1
 800ad50:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	f383 8810 	msr	PRIMASK, r3
}
 800ad58:	46c0      	nop			; (mov r8, r8)
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	681a      	ldr	r2, [r3, #0]
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	2180      	movs	r1, #128	; 0x80
 800ad66:	438a      	bics	r2, r1
 800ad68:	601a      	str	r2, [r3, #0]
 800ad6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad6c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ad6e:	693b      	ldr	r3, [r7, #16]
 800ad70:	f383 8810 	msr	PRIMASK, r3
}
 800ad74:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ad76:	f3ef 8310 	mrs	r3, PRIMASK
 800ad7a:	617b      	str	r3, [r7, #20]
  return(result);
 800ad7c:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ad7e:	623b      	str	r3, [r7, #32]
 800ad80:	2301      	movs	r3, #1
 800ad82:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ad84:	69bb      	ldr	r3, [r7, #24]
 800ad86:	f383 8810 	msr	PRIMASK, r3
}
 800ad8a:	46c0      	nop			; (mov r8, r8)
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	681a      	ldr	r2, [r3, #0]
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	2140      	movs	r1, #64	; 0x40
 800ad98:	430a      	orrs	r2, r1
 800ad9a:	601a      	str	r2, [r3, #0]
 800ad9c:	6a3b      	ldr	r3, [r7, #32]
 800ad9e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ada0:	69fb      	ldr	r3, [r7, #28]
 800ada2:	f383 8810 	msr	PRIMASK, r3
}
 800ada6:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800ada8:	e013      	b.n	800add2 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adae:	781a      	ldrb	r2, [r3, #0]
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adba:	1c5a      	adds	r2, r3, #1
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2256      	movs	r2, #86	; 0x56
 800adc4:	5a9b      	ldrh	r3, [r3, r2]
 800adc6:	b29b      	uxth	r3, r3
 800adc8:	3b01      	subs	r3, #1
 800adca:	b299      	uxth	r1, r3
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2256      	movs	r2, #86	; 0x56
 800add0:	5299      	strh	r1, [r3, r2]
}
 800add2:	46c0      	nop			; (mov r8, r8)
 800add4:	46bd      	mov	sp, r7
 800add6:	b00a      	add	sp, #40	; 0x28
 800add8:	bd80      	pop	{r7, pc}

0800adda <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800adda:	b580      	push	{r7, lr}
 800addc:	b08c      	sub	sp, #48	; 0x30
 800adde:	af00      	add	r7, sp, #0
 800ade0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	2284      	movs	r2, #132	; 0x84
 800ade6:	589b      	ldr	r3, [r3, r2]
 800ade8:	2b21      	cmp	r3, #33	; 0x21
 800adea:	d151      	bne.n	800ae90 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2256      	movs	r2, #86	; 0x56
 800adf0:	5a9b      	ldrh	r3, [r3, r2]
 800adf2:	b29b      	uxth	r3, r3
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d132      	bne.n	800ae5e <UART_TxISR_16BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800adf8:	f3ef 8310 	mrs	r3, PRIMASK
 800adfc:	60fb      	str	r3, [r7, #12]
  return(result);
 800adfe:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800ae00:	62bb      	str	r3, [r7, #40]	; 0x28
 800ae02:	2301      	movs	r3, #1
 800ae04:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae06:	693b      	ldr	r3, [r7, #16]
 800ae08:	f383 8810 	msr	PRIMASK, r3
}
 800ae0c:	46c0      	nop			; (mov r8, r8)
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	681a      	ldr	r2, [r3, #0]
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	2180      	movs	r1, #128	; 0x80
 800ae1a:	438a      	bics	r2, r1
 800ae1c:	601a      	str	r2, [r3, #0]
 800ae1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae20:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae22:	697b      	ldr	r3, [r7, #20]
 800ae24:	f383 8810 	msr	PRIMASK, r3
}
 800ae28:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ae2a:	f3ef 8310 	mrs	r3, PRIMASK
 800ae2e:	61bb      	str	r3, [r7, #24]
  return(result);
 800ae30:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ae32:	627b      	str	r3, [r7, #36]	; 0x24
 800ae34:	2301      	movs	r3, #1
 800ae36:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae38:	69fb      	ldr	r3, [r7, #28]
 800ae3a:	f383 8810 	msr	PRIMASK, r3
}
 800ae3e:	46c0      	nop			; (mov r8, r8)
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	681a      	ldr	r2, [r3, #0]
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	2140      	movs	r1, #64	; 0x40
 800ae4c:	430a      	orrs	r2, r1
 800ae4e:	601a      	str	r2, [r3, #0]
 800ae50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae52:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae54:	6a3b      	ldr	r3, [r7, #32]
 800ae56:	f383 8810 	msr	PRIMASK, r3
}
 800ae5a:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800ae5c:	e018      	b.n	800ae90 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae62:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800ae64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae66:	881b      	ldrh	r3, [r3, #0]
 800ae68:	001a      	movs	r2, r3
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	05d2      	lsls	r2, r2, #23
 800ae70:	0dd2      	lsrs	r2, r2, #23
 800ae72:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae78:	1c9a      	adds	r2, r3, #2
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	2256      	movs	r2, #86	; 0x56
 800ae82:	5a9b      	ldrh	r3, [r3, r2]
 800ae84:	b29b      	uxth	r3, r3
 800ae86:	3b01      	subs	r3, #1
 800ae88:	b299      	uxth	r1, r3
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	2256      	movs	r2, #86	; 0x56
 800ae8e:	5299      	strh	r1, [r3, r2]
}
 800ae90:	46c0      	nop			; (mov r8, r8)
 800ae92:	46bd      	mov	sp, r7
 800ae94:	b00c      	add	sp, #48	; 0x30
 800ae96:	bd80      	pop	{r7, pc}

0800ae98 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b08c      	sub	sp, #48	; 0x30
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	2284      	movs	r2, #132	; 0x84
 800aea4:	589b      	ldr	r3, [r3, r2]
 800aea6:	2b21      	cmp	r3, #33	; 0x21
 800aea8:	d165      	bne.n	800af76 <UART_TxISR_8BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800aeaa:	232e      	movs	r3, #46	; 0x2e
 800aeac:	18fb      	adds	r3, r7, r3
 800aeae:	687a      	ldr	r2, [r7, #4]
 800aeb0:	216a      	movs	r1, #106	; 0x6a
 800aeb2:	5a52      	ldrh	r2, [r2, r1]
 800aeb4:	801a      	strh	r2, [r3, #0]
 800aeb6:	e059      	b.n	800af6c <UART_TxISR_8BIT_FIFOEN+0xd4>
    {
      if (huart->TxXferCount == 0U)
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2256      	movs	r2, #86	; 0x56
 800aebc:	5a9b      	ldrh	r3, [r3, r2]
 800aebe:	b29b      	uxth	r3, r3
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d133      	bne.n	800af2c <UART_TxISR_8BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aec4:	f3ef 8310 	mrs	r3, PRIMASK
 800aec8:	60fb      	str	r3, [r7, #12]
  return(result);
 800aeca:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800aecc:	62bb      	str	r3, [r7, #40]	; 0x28
 800aece:	2301      	movs	r3, #1
 800aed0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aed2:	693b      	ldr	r3, [r7, #16]
 800aed4:	f383 8810 	msr	PRIMASK, r3
}
 800aed8:	46c0      	nop			; (mov r8, r8)
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	689a      	ldr	r2, [r3, #8]
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	4926      	ldr	r1, [pc, #152]	; (800af80 <UART_TxISR_8BIT_FIFOEN+0xe8>)
 800aee6:	400a      	ands	r2, r1
 800aee8:	609a      	str	r2, [r3, #8]
 800aeea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aeee:	697b      	ldr	r3, [r7, #20]
 800aef0:	f383 8810 	msr	PRIMASK, r3
}
 800aef4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aef6:	f3ef 8310 	mrs	r3, PRIMASK
 800aefa:	61bb      	str	r3, [r7, #24]
  return(result);
 800aefc:	69bb      	ldr	r3, [r7, #24]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800aefe:	627b      	str	r3, [r7, #36]	; 0x24
 800af00:	2301      	movs	r3, #1
 800af02:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af04:	69fb      	ldr	r3, [r7, #28]
 800af06:	f383 8810 	msr	PRIMASK, r3
}
 800af0a:	46c0      	nop			; (mov r8, r8)
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	681a      	ldr	r2, [r3, #0]
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	2140      	movs	r1, #64	; 0x40
 800af18:	430a      	orrs	r2, r1
 800af1a:	601a      	str	r2, [r3, #0]
 800af1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af1e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af20:	6a3b      	ldr	r3, [r7, #32]
 800af22:	f383 8810 	msr	PRIMASK, r3
}
 800af26:	46c0      	nop			; (mov r8, r8)

        break; /* force exit loop */
 800af28:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 800af2a:	e024      	b.n	800af76 <UART_TxISR_8BIT_FIFOEN+0xde>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	69db      	ldr	r3, [r3, #28]
 800af32:	2280      	movs	r2, #128	; 0x80
 800af34:	4013      	ands	r3, r2
 800af36:	d013      	beq.n	800af60 <UART_TxISR_8BIT_FIFOEN+0xc8>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af3c:	781a      	ldrb	r2, [r3, #0]
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af48:	1c5a      	adds	r2, r3, #1
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	2256      	movs	r2, #86	; 0x56
 800af52:	5a9b      	ldrh	r3, [r3, r2]
 800af54:	b29b      	uxth	r3, r3
 800af56:	3b01      	subs	r3, #1
 800af58:	b299      	uxth	r1, r3
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	2256      	movs	r2, #86	; 0x56
 800af5e:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800af60:	212e      	movs	r1, #46	; 0x2e
 800af62:	187b      	adds	r3, r7, r1
 800af64:	881a      	ldrh	r2, [r3, #0]
 800af66:	187b      	adds	r3, r7, r1
 800af68:	3a01      	subs	r2, #1
 800af6a:	801a      	strh	r2, [r3, #0]
 800af6c:	232e      	movs	r3, #46	; 0x2e
 800af6e:	18fb      	adds	r3, r7, r3
 800af70:	881b      	ldrh	r3, [r3, #0]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d1a0      	bne.n	800aeb8 <UART_TxISR_8BIT_FIFOEN+0x20>
}
 800af76:	46c0      	nop			; (mov r8, r8)
 800af78:	46bd      	mov	sp, r7
 800af7a:	b00c      	add	sp, #48	; 0x30
 800af7c:	bd80      	pop	{r7, pc}
 800af7e:	46c0      	nop			; (mov r8, r8)
 800af80:	ff7fffff 	.word	0xff7fffff

0800af84 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b08c      	sub	sp, #48	; 0x30
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	2284      	movs	r2, #132	; 0x84
 800af90:	589b      	ldr	r3, [r3, r2]
 800af92:	2b21      	cmp	r3, #33	; 0x21
 800af94:	d16a      	bne.n	800b06c <UART_TxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800af96:	232e      	movs	r3, #46	; 0x2e
 800af98:	18fb      	adds	r3, r7, r3
 800af9a:	687a      	ldr	r2, [r7, #4]
 800af9c:	216a      	movs	r1, #106	; 0x6a
 800af9e:	5a52      	ldrh	r2, [r2, r1]
 800afa0:	801a      	strh	r2, [r3, #0]
 800afa2:	e05e      	b.n	800b062 <UART_TxISR_16BIT_FIFOEN+0xde>
    {
      if (huart->TxXferCount == 0U)
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2256      	movs	r2, #86	; 0x56
 800afa8:	5a9b      	ldrh	r3, [r3, r2]
 800afaa:	b29b      	uxth	r3, r3
 800afac:	2b00      	cmp	r3, #0
 800afae:	d133      	bne.n	800b018 <UART_TxISR_16BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800afb0:	f3ef 8310 	mrs	r3, PRIMASK
 800afb4:	60bb      	str	r3, [r7, #8]
  return(result);
 800afb6:	68bb      	ldr	r3, [r7, #8]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800afb8:	627b      	str	r3, [r7, #36]	; 0x24
 800afba:	2301      	movs	r3, #1
 800afbc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	f383 8810 	msr	PRIMASK, r3
}
 800afc4:	46c0      	nop			; (mov r8, r8)
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	689a      	ldr	r2, [r3, #8]
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	4928      	ldr	r1, [pc, #160]	; (800b074 <UART_TxISR_16BIT_FIFOEN+0xf0>)
 800afd2:	400a      	ands	r2, r1
 800afd4:	609a      	str	r2, [r3, #8]
 800afd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afd8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800afda:	693b      	ldr	r3, [r7, #16]
 800afdc:	f383 8810 	msr	PRIMASK, r3
}
 800afe0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800afe2:	f3ef 8310 	mrs	r3, PRIMASK
 800afe6:	617b      	str	r3, [r7, #20]
  return(result);
 800afe8:	697b      	ldr	r3, [r7, #20]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800afea:	623b      	str	r3, [r7, #32]
 800afec:	2301      	movs	r3, #1
 800afee:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aff0:	69bb      	ldr	r3, [r7, #24]
 800aff2:	f383 8810 	msr	PRIMASK, r3
}
 800aff6:	46c0      	nop			; (mov r8, r8)
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	681a      	ldr	r2, [r3, #0]
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	2140      	movs	r1, #64	; 0x40
 800b004:	430a      	orrs	r2, r1
 800b006:	601a      	str	r2, [r3, #0]
 800b008:	6a3b      	ldr	r3, [r7, #32]
 800b00a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b00c:	69fb      	ldr	r3, [r7, #28]
 800b00e:	f383 8810 	msr	PRIMASK, r3
}
 800b012:	46c0      	nop			; (mov r8, r8)

        break; /* force exit loop */
 800b014:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 800b016:	e029      	b.n	800b06c <UART_TxISR_16BIT_FIFOEN+0xe8>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	69db      	ldr	r3, [r3, #28]
 800b01e:	2280      	movs	r2, #128	; 0x80
 800b020:	4013      	ands	r3, r2
 800b022:	d018      	beq.n	800b056 <UART_TxISR_16BIT_FIFOEN+0xd2>
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b028:	62bb      	str	r3, [r7, #40]	; 0x28
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800b02a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b02c:	881b      	ldrh	r3, [r3, #0]
 800b02e:	001a      	movs	r2, r3
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	05d2      	lsls	r2, r2, #23
 800b036:	0dd2      	lsrs	r2, r2, #23
 800b038:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b03e:	1c9a      	adds	r2, r3, #2
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2256      	movs	r2, #86	; 0x56
 800b048:	5a9b      	ldrh	r3, [r3, r2]
 800b04a:	b29b      	uxth	r3, r3
 800b04c:	3b01      	subs	r3, #1
 800b04e:	b299      	uxth	r1, r3
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	2256      	movs	r2, #86	; 0x56
 800b054:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800b056:	212e      	movs	r1, #46	; 0x2e
 800b058:	187b      	adds	r3, r7, r1
 800b05a:	881a      	ldrh	r2, [r3, #0]
 800b05c:	187b      	adds	r3, r7, r1
 800b05e:	3a01      	subs	r2, #1
 800b060:	801a      	strh	r2, [r3, #0]
 800b062:	232e      	movs	r3, #46	; 0x2e
 800b064:	18fb      	adds	r3, r7, r3
 800b066:	881b      	ldrh	r3, [r3, #0]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d19b      	bne.n	800afa4 <UART_TxISR_16BIT_FIFOEN+0x20>
}
 800b06c:	46c0      	nop			; (mov r8, r8)
 800b06e:	46bd      	mov	sp, r7
 800b070:	b00c      	add	sp, #48	; 0x30
 800b072:	bd80      	pop	{r7, pc}
 800b074:	ff7fffff 	.word	0xff7fffff

0800b078 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b086      	sub	sp, #24
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b080:	f3ef 8310 	mrs	r3, PRIMASK
 800b084:	60bb      	str	r3, [r7, #8]
  return(result);
 800b086:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b088:	617b      	str	r3, [r7, #20]
 800b08a:	2301      	movs	r3, #1
 800b08c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	f383 8810 	msr	PRIMASK, r3
}
 800b094:	46c0      	nop			; (mov r8, r8)
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	681a      	ldr	r2, [r3, #0]
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	2140      	movs	r1, #64	; 0x40
 800b0a2:	438a      	bics	r2, r1
 800b0a4:	601a      	str	r2, [r3, #0]
 800b0a6:	697b      	ldr	r3, [r7, #20]
 800b0a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b0aa:	693b      	ldr	r3, [r7, #16]
 800b0ac:	f383 8810 	msr	PRIMASK, r3
}
 800b0b0:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	2284      	movs	r2, #132	; 0x84
 800b0b6:	2120      	movs	r1, #32
 800b0b8:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	2200      	movs	r2, #0
 800b0be:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	0018      	movs	r0, r3
 800b0c4:	f7f7 fb64 	bl	8002790 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b0c8:	46c0      	nop			; (mov r8, r8)
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	b006      	add	sp, #24
 800b0ce:	bd80      	pop	{r7, pc}

0800b0d0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b090      	sub	sp, #64	; 0x40
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800b0d8:	203e      	movs	r0, #62	; 0x3e
 800b0da:	183b      	adds	r3, r7, r0
 800b0dc:	687a      	ldr	r2, [r7, #4]
 800b0de:	2160      	movs	r1, #96	; 0x60
 800b0e0:	5a52      	ldrh	r2, [r2, r1]
 800b0e2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2288      	movs	r2, #136	; 0x88
 800b0e8:	589b      	ldr	r3, [r3, r2]
 800b0ea:	2b22      	cmp	r3, #34	; 0x22
 800b0ec:	d000      	beq.n	800b0f0 <UART_RxISR_8BIT+0x20>
 800b0ee:	e097      	b.n	800b220 <UART_RxISR_8BIT+0x150>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b0f6:	213c      	movs	r1, #60	; 0x3c
 800b0f8:	187b      	adds	r3, r7, r1
 800b0fa:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b0fc:	187b      	adds	r3, r7, r1
 800b0fe:	881b      	ldrh	r3, [r3, #0]
 800b100:	b2da      	uxtb	r2, r3
 800b102:	183b      	adds	r3, r7, r0
 800b104:	881b      	ldrh	r3, [r3, #0]
 800b106:	b2d9      	uxtb	r1, r3
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b10c:	400a      	ands	r2, r1
 800b10e:	b2d2      	uxtb	r2, r2
 800b110:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b116:	1c5a      	adds	r2, r3, #1
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	225e      	movs	r2, #94	; 0x5e
 800b120:	5a9b      	ldrh	r3, [r3, r2]
 800b122:	b29b      	uxth	r3, r3
 800b124:	3b01      	subs	r3, #1
 800b126:	b299      	uxth	r1, r3
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	225e      	movs	r2, #94	; 0x5e
 800b12c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	225e      	movs	r2, #94	; 0x5e
 800b132:	5a9b      	ldrh	r3, [r3, r2]
 800b134:	b29b      	uxth	r3, r3
 800b136:	2b00      	cmp	r3, #0
 800b138:	d000      	beq.n	800b13c <UART_RxISR_8BIT+0x6c>
 800b13a:	e079      	b.n	800b230 <UART_RxISR_8BIT+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b13c:	f3ef 8310 	mrs	r3, PRIMASK
 800b140:	61bb      	str	r3, [r7, #24]
  return(result);
 800b142:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b144:	63bb      	str	r3, [r7, #56]	; 0x38
 800b146:	2301      	movs	r3, #1
 800b148:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b14a:	69fb      	ldr	r3, [r7, #28]
 800b14c:	f383 8810 	msr	PRIMASK, r3
}
 800b150:	46c0      	nop			; (mov r8, r8)
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	681a      	ldr	r2, [r3, #0]
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	4936      	ldr	r1, [pc, #216]	; (800b238 <UART_RxISR_8BIT+0x168>)
 800b15e:	400a      	ands	r2, r1
 800b160:	601a      	str	r2, [r3, #0]
 800b162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b164:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b166:	6a3b      	ldr	r3, [r7, #32]
 800b168:	f383 8810 	msr	PRIMASK, r3
}
 800b16c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b16e:	f3ef 8310 	mrs	r3, PRIMASK
 800b172:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800b174:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b176:	637b      	str	r3, [r7, #52]	; 0x34
 800b178:	2301      	movs	r3, #1
 800b17a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b17c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b17e:	f383 8810 	msr	PRIMASK, r3
}
 800b182:	46c0      	nop			; (mov r8, r8)
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	689a      	ldr	r2, [r3, #8]
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	2101      	movs	r1, #1
 800b190:	438a      	bics	r2, r1
 800b192:	609a      	str	r2, [r3, #8]
 800b194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b196:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b19a:	f383 8810 	msr	PRIMASK, r3
}
 800b19e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2288      	movs	r2, #136	; 0x88
 800b1a4:	2120      	movs	r1, #32
 800b1a6:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b1b2:	2b01      	cmp	r3, #1
 800b1b4:	d12f      	bne.n	800b216 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b1bc:	f3ef 8310 	mrs	r3, PRIMASK
 800b1c0:	60fb      	str	r3, [r7, #12]
  return(result);
 800b1c2:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b1c4:	633b      	str	r3, [r7, #48]	; 0x30
 800b1c6:	2301      	movs	r3, #1
 800b1c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b1ca:	693b      	ldr	r3, [r7, #16]
 800b1cc:	f383 8810 	msr	PRIMASK, r3
}
 800b1d0:	46c0      	nop			; (mov r8, r8)
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	681a      	ldr	r2, [r3, #0]
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	2110      	movs	r1, #16
 800b1de:	438a      	bics	r2, r1
 800b1e0:	601a      	str	r2, [r3, #0]
 800b1e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b1e6:	697b      	ldr	r3, [r7, #20]
 800b1e8:	f383 8810 	msr	PRIMASK, r3
}
 800b1ec:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	69db      	ldr	r3, [r3, #28]
 800b1f4:	2210      	movs	r2, #16
 800b1f6:	4013      	ands	r3, r2
 800b1f8:	2b10      	cmp	r3, #16
 800b1fa:	d103      	bne.n	800b204 <UART_RxISR_8BIT+0x134>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	2210      	movs	r2, #16
 800b202:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	225c      	movs	r2, #92	; 0x5c
 800b208:	5a9a      	ldrh	r2, [r3, r2]
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	0011      	movs	r1, r2
 800b20e:	0018      	movs	r0, r3
 800b210:	f7ff f86a 	bl	800a2e8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b214:	e00c      	b.n	800b230 <UART_RxISR_8BIT+0x160>
        HAL_UART_RxCpltCallback(huart);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	0018      	movs	r0, r3
 800b21a:	f7f7 fadb 	bl	80027d4 <HAL_UART_RxCpltCallback>
}
 800b21e:	e007      	b.n	800b230 <UART_RxISR_8BIT+0x160>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	699a      	ldr	r2, [r3, #24]
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	2108      	movs	r1, #8
 800b22c:	430a      	orrs	r2, r1
 800b22e:	619a      	str	r2, [r3, #24]
}
 800b230:	46c0      	nop			; (mov r8, r8)
 800b232:	46bd      	mov	sp, r7
 800b234:	b010      	add	sp, #64	; 0x40
 800b236:	bd80      	pop	{r7, pc}
 800b238:	fffffedf 	.word	0xfffffedf

0800b23c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b090      	sub	sp, #64	; 0x40
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b244:	203e      	movs	r0, #62	; 0x3e
 800b246:	183b      	adds	r3, r7, r0
 800b248:	687a      	ldr	r2, [r7, #4]
 800b24a:	2160      	movs	r1, #96	; 0x60
 800b24c:	5a52      	ldrh	r2, [r2, r1]
 800b24e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2288      	movs	r2, #136	; 0x88
 800b254:	589b      	ldr	r3, [r3, r2]
 800b256:	2b22      	cmp	r3, #34	; 0x22
 800b258:	d000      	beq.n	800b25c <UART_RxISR_16BIT+0x20>
 800b25a:	e097      	b.n	800b38c <UART_RxISR_16BIT+0x150>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b262:	213c      	movs	r1, #60	; 0x3c
 800b264:	187b      	adds	r3, r7, r1
 800b266:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b26c:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 800b26e:	187b      	adds	r3, r7, r1
 800b270:	183a      	adds	r2, r7, r0
 800b272:	881b      	ldrh	r3, [r3, #0]
 800b274:	8812      	ldrh	r2, [r2, #0]
 800b276:	4013      	ands	r3, r2
 800b278:	b29a      	uxth	r2, r3
 800b27a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b27c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b282:	1c9a      	adds	r2, r3, #2
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	225e      	movs	r2, #94	; 0x5e
 800b28c:	5a9b      	ldrh	r3, [r3, r2]
 800b28e:	b29b      	uxth	r3, r3
 800b290:	3b01      	subs	r3, #1
 800b292:	b299      	uxth	r1, r3
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	225e      	movs	r2, #94	; 0x5e
 800b298:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	225e      	movs	r2, #94	; 0x5e
 800b29e:	5a9b      	ldrh	r3, [r3, r2]
 800b2a0:	b29b      	uxth	r3, r3
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d000      	beq.n	800b2a8 <UART_RxISR_16BIT+0x6c>
 800b2a6:	e079      	b.n	800b39c <UART_RxISR_16BIT+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b2a8:	f3ef 8310 	mrs	r3, PRIMASK
 800b2ac:	617b      	str	r3, [r7, #20]
  return(result);
 800b2ae:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b2b0:	637b      	str	r3, [r7, #52]	; 0x34
 800b2b2:	2301      	movs	r3, #1
 800b2b4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b2b6:	69bb      	ldr	r3, [r7, #24]
 800b2b8:	f383 8810 	msr	PRIMASK, r3
}
 800b2bc:	46c0      	nop			; (mov r8, r8)
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	681a      	ldr	r2, [r3, #0]
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	4936      	ldr	r1, [pc, #216]	; (800b3a4 <UART_RxISR_16BIT+0x168>)
 800b2ca:	400a      	ands	r2, r1
 800b2cc:	601a      	str	r2, [r3, #0]
 800b2ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b2d2:	69fb      	ldr	r3, [r7, #28]
 800b2d4:	f383 8810 	msr	PRIMASK, r3
}
 800b2d8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b2da:	f3ef 8310 	mrs	r3, PRIMASK
 800b2de:	623b      	str	r3, [r7, #32]
  return(result);
 800b2e0:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2e2:	633b      	str	r3, [r7, #48]	; 0x30
 800b2e4:	2301      	movs	r3, #1
 800b2e6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b2e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ea:	f383 8810 	msr	PRIMASK, r3
}
 800b2ee:	46c0      	nop			; (mov r8, r8)
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	689a      	ldr	r2, [r3, #8]
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	2101      	movs	r1, #1
 800b2fc:	438a      	bics	r2, r1
 800b2fe:	609a      	str	r2, [r3, #8]
 800b300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b302:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b306:	f383 8810 	msr	PRIMASK, r3
}
 800b30a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2288      	movs	r2, #136	; 0x88
 800b310:	2120      	movs	r1, #32
 800b312:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2200      	movs	r2, #0
 800b318:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b31e:	2b01      	cmp	r3, #1
 800b320:	d12f      	bne.n	800b382 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	2200      	movs	r2, #0
 800b326:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b328:	f3ef 8310 	mrs	r3, PRIMASK
 800b32c:	60bb      	str	r3, [r7, #8]
  return(result);
 800b32e:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b330:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b332:	2301      	movs	r3, #1
 800b334:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	f383 8810 	msr	PRIMASK, r3
}
 800b33c:	46c0      	nop			; (mov r8, r8)
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	681a      	ldr	r2, [r3, #0]
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	2110      	movs	r1, #16
 800b34a:	438a      	bics	r2, r1
 800b34c:	601a      	str	r2, [r3, #0]
 800b34e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b350:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b352:	693b      	ldr	r3, [r7, #16]
 800b354:	f383 8810 	msr	PRIMASK, r3
}
 800b358:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	69db      	ldr	r3, [r3, #28]
 800b360:	2210      	movs	r2, #16
 800b362:	4013      	ands	r3, r2
 800b364:	2b10      	cmp	r3, #16
 800b366:	d103      	bne.n	800b370 <UART_RxISR_16BIT+0x134>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	2210      	movs	r2, #16
 800b36e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	225c      	movs	r2, #92	; 0x5c
 800b374:	5a9a      	ldrh	r2, [r3, r2]
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	0011      	movs	r1, r2
 800b37a:	0018      	movs	r0, r3
 800b37c:	f7fe ffb4 	bl	800a2e8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b380:	e00c      	b.n	800b39c <UART_RxISR_16BIT+0x160>
        HAL_UART_RxCpltCallback(huart);
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	0018      	movs	r0, r3
 800b386:	f7f7 fa25 	bl	80027d4 <HAL_UART_RxCpltCallback>
}
 800b38a:	e007      	b.n	800b39c <UART_RxISR_16BIT+0x160>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	699a      	ldr	r2, [r3, #24]
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	2108      	movs	r1, #8
 800b398:	430a      	orrs	r2, r1
 800b39a:	619a      	str	r2, [r3, #24]
}
 800b39c:	46c0      	nop			; (mov r8, r8)
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	b010      	add	sp, #64	; 0x40
 800b3a2:	bd80      	pop	{r7, pc}
 800b3a4:	fffffedf 	.word	0xfffffedf

0800b3a8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b09c      	sub	sp, #112	; 0x70
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800b3b0:	236a      	movs	r3, #106	; 0x6a
 800b3b2:	18fb      	adds	r3, r7, r3
 800b3b4:	687a      	ldr	r2, [r7, #4]
 800b3b6:	2160      	movs	r1, #96	; 0x60
 800b3b8:	5a52      	ldrh	r2, [r2, r1]
 800b3ba:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	69db      	ldr	r3, [r3, #28]
 800b3c2:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	689b      	ldr	r3, [r3, #8]
 800b3d2:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	2288      	movs	r2, #136	; 0x88
 800b3d8:	589b      	ldr	r3, [r3, r2]
 800b3da:	2b22      	cmp	r3, #34	; 0x22
 800b3dc:	d000      	beq.n	800b3e0 <UART_RxISR_8BIT_FIFOEN+0x38>
 800b3de:	e141      	b.n	800b664 <UART_RxISR_8BIT_FIFOEN+0x2bc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b3e0:	235e      	movs	r3, #94	; 0x5e
 800b3e2:	18fb      	adds	r3, r7, r3
 800b3e4:	687a      	ldr	r2, [r7, #4]
 800b3e6:	2168      	movs	r1, #104	; 0x68
 800b3e8:	5a52      	ldrh	r2, [r2, r1]
 800b3ea:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b3ec:	e0e8      	b.n	800b5c0 <UART_RxISR_8BIT_FIFOEN+0x218>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b3f4:	215c      	movs	r1, #92	; 0x5c
 800b3f6:	187b      	adds	r3, r7, r1
 800b3f8:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b3fa:	187b      	adds	r3, r7, r1
 800b3fc:	881b      	ldrh	r3, [r3, #0]
 800b3fe:	b2da      	uxtb	r2, r3
 800b400:	236a      	movs	r3, #106	; 0x6a
 800b402:	18fb      	adds	r3, r7, r3
 800b404:	881b      	ldrh	r3, [r3, #0]
 800b406:	b2d9      	uxtb	r1, r3
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b40c:	400a      	ands	r2, r1
 800b40e:	b2d2      	uxtb	r2, r2
 800b410:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b416:	1c5a      	adds	r2, r3, #1
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	225e      	movs	r2, #94	; 0x5e
 800b420:	5a9b      	ldrh	r3, [r3, r2]
 800b422:	b29b      	uxth	r3, r3
 800b424:	3b01      	subs	r3, #1
 800b426:	b299      	uxth	r1, r3
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	225e      	movs	r2, #94	; 0x5e
 800b42c:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	69db      	ldr	r3, [r3, #28]
 800b434:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b436:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b438:	2207      	movs	r2, #7
 800b43a:	4013      	ands	r3, r2
 800b43c:	d049      	beq.n	800b4d2 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b43e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b440:	2201      	movs	r2, #1
 800b442:	4013      	ands	r3, r2
 800b444:	d010      	beq.n	800b468 <UART_RxISR_8BIT_FIFOEN+0xc0>
 800b446:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b448:	2380      	movs	r3, #128	; 0x80
 800b44a:	005b      	lsls	r3, r3, #1
 800b44c:	4013      	ands	r3, r2
 800b44e:	d00b      	beq.n	800b468 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	2201      	movs	r2, #1
 800b456:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	228c      	movs	r2, #140	; 0x8c
 800b45c:	589b      	ldr	r3, [r3, r2]
 800b45e:	2201      	movs	r2, #1
 800b460:	431a      	orrs	r2, r3
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	218c      	movs	r1, #140	; 0x8c
 800b466:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b468:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b46a:	2202      	movs	r2, #2
 800b46c:	4013      	ands	r3, r2
 800b46e:	d00f      	beq.n	800b490 <UART_RxISR_8BIT_FIFOEN+0xe8>
 800b470:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b472:	2201      	movs	r2, #1
 800b474:	4013      	ands	r3, r2
 800b476:	d00b      	beq.n	800b490 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	2202      	movs	r2, #2
 800b47e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	228c      	movs	r2, #140	; 0x8c
 800b484:	589b      	ldr	r3, [r3, r2]
 800b486:	2204      	movs	r2, #4
 800b488:	431a      	orrs	r2, r3
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	218c      	movs	r1, #140	; 0x8c
 800b48e:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b490:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b492:	2204      	movs	r2, #4
 800b494:	4013      	ands	r3, r2
 800b496:	d00f      	beq.n	800b4b8 <UART_RxISR_8BIT_FIFOEN+0x110>
 800b498:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b49a:	2201      	movs	r2, #1
 800b49c:	4013      	ands	r3, r2
 800b49e:	d00b      	beq.n	800b4b8 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	2204      	movs	r2, #4
 800b4a6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	228c      	movs	r2, #140	; 0x8c
 800b4ac:	589b      	ldr	r3, [r3, r2]
 800b4ae:	2202      	movs	r2, #2
 800b4b0:	431a      	orrs	r2, r3
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	218c      	movs	r1, #140	; 0x8c
 800b4b6:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	228c      	movs	r2, #140	; 0x8c
 800b4bc:	589b      	ldr	r3, [r3, r2]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d007      	beq.n	800b4d2 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	0018      	movs	r0, r3
 800b4c6:	f7fe ff07 	bl	800a2d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	228c      	movs	r2, #140	; 0x8c
 800b4ce:	2100      	movs	r1, #0
 800b4d0:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	225e      	movs	r2, #94	; 0x5e
 800b4d6:	5a9b      	ldrh	r3, [r3, r2]
 800b4d8:	b29b      	uxth	r3, r3
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d170      	bne.n	800b5c0 <UART_RxISR_8BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b4de:	f3ef 8310 	mrs	r3, PRIMASK
 800b4e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 800b4e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b4e6:	65bb      	str	r3, [r7, #88]	; 0x58
 800b4e8:	2301      	movs	r3, #1
 800b4ea:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b4ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ee:	f383 8810 	msr	PRIMASK, r3
}
 800b4f2:	46c0      	nop			; (mov r8, r8)
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	681a      	ldr	r2, [r3, #0]
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	495f      	ldr	r1, [pc, #380]	; (800b67c <UART_RxISR_8BIT_FIFOEN+0x2d4>)
 800b500:	400a      	ands	r2, r1
 800b502:	601a      	str	r2, [r3, #0]
 800b504:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b506:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b50a:	f383 8810 	msr	PRIMASK, r3
}
 800b50e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b510:	f3ef 8310 	mrs	r3, PRIMASK
 800b514:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 800b516:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b518:	657b      	str	r3, [r7, #84]	; 0x54
 800b51a:	2301      	movs	r3, #1
 800b51c:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b51e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b520:	f383 8810 	msr	PRIMASK, r3
}
 800b524:	46c0      	nop			; (mov r8, r8)
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	689a      	ldr	r2, [r3, #8]
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	4953      	ldr	r1, [pc, #332]	; (800b680 <UART_RxISR_8BIT_FIFOEN+0x2d8>)
 800b532:	400a      	ands	r2, r1
 800b534:	609a      	str	r2, [r3, #8]
 800b536:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b538:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b53a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b53c:	f383 8810 	msr	PRIMASK, r3
}
 800b540:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	2288      	movs	r2, #136	; 0x88
 800b546:	2120      	movs	r1, #32
 800b548:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	2200      	movs	r2, #0
 800b54e:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b554:	2b01      	cmp	r3, #1
 800b556:	d12f      	bne.n	800b5b8 <UART_RxISR_8BIT_FIFOEN+0x210>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2200      	movs	r2, #0
 800b55c:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b55e:	f3ef 8310 	mrs	r3, PRIMASK
 800b562:	623b      	str	r3, [r7, #32]
  return(result);
 800b564:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b566:	653b      	str	r3, [r7, #80]	; 0x50
 800b568:	2301      	movs	r3, #1
 800b56a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b56c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b56e:	f383 8810 	msr	PRIMASK, r3
}
 800b572:	46c0      	nop			; (mov r8, r8)
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	681a      	ldr	r2, [r3, #0]
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	2110      	movs	r1, #16
 800b580:	438a      	bics	r2, r1
 800b582:	601a      	str	r2, [r3, #0]
 800b584:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b586:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b58a:	f383 8810 	msr	PRIMASK, r3
}
 800b58e:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	69db      	ldr	r3, [r3, #28]
 800b596:	2210      	movs	r2, #16
 800b598:	4013      	ands	r3, r2
 800b59a:	2b10      	cmp	r3, #16
 800b59c:	d103      	bne.n	800b5a6 <UART_RxISR_8BIT_FIFOEN+0x1fe>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	2210      	movs	r2, #16
 800b5a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	225c      	movs	r2, #92	; 0x5c
 800b5aa:	5a9a      	ldrh	r2, [r3, r2]
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	0011      	movs	r1, r2
 800b5b0:	0018      	movs	r0, r3
 800b5b2:	f7fe fe99 	bl	800a2e8 <HAL_UARTEx_RxEventCallback>
 800b5b6:	e003      	b.n	800b5c0 <UART_RxISR_8BIT_FIFOEN+0x218>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	0018      	movs	r0, r3
 800b5bc:	f7f7 f90a 	bl	80027d4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b5c0:	235e      	movs	r3, #94	; 0x5e
 800b5c2:	18fb      	adds	r3, r7, r3
 800b5c4:	881b      	ldrh	r3, [r3, #0]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d004      	beq.n	800b5d4 <UART_RxISR_8BIT_FIFOEN+0x22c>
 800b5ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b5cc:	2220      	movs	r2, #32
 800b5ce:	4013      	ands	r3, r2
 800b5d0:	d000      	beq.n	800b5d4 <UART_RxISR_8BIT_FIFOEN+0x22c>
 800b5d2:	e70c      	b.n	800b3ee <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b5d4:	204e      	movs	r0, #78	; 0x4e
 800b5d6:	183b      	adds	r3, r7, r0
 800b5d8:	687a      	ldr	r2, [r7, #4]
 800b5da:	215e      	movs	r1, #94	; 0x5e
 800b5dc:	5a52      	ldrh	r2, [r2, r1]
 800b5de:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b5e0:	0001      	movs	r1, r0
 800b5e2:	187b      	adds	r3, r7, r1
 800b5e4:	881b      	ldrh	r3, [r3, #0]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d044      	beq.n	800b674 <UART_RxISR_8BIT_FIFOEN+0x2cc>
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	2268      	movs	r2, #104	; 0x68
 800b5ee:	5a9b      	ldrh	r3, [r3, r2]
 800b5f0:	187a      	adds	r2, r7, r1
 800b5f2:	8812      	ldrh	r2, [r2, #0]
 800b5f4:	429a      	cmp	r2, r3
 800b5f6:	d23d      	bcs.n	800b674 <UART_RxISR_8BIT_FIFOEN+0x2cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b5f8:	f3ef 8310 	mrs	r3, PRIMASK
 800b5fc:	60bb      	str	r3, [r7, #8]
  return(result);
 800b5fe:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b600:	64bb      	str	r3, [r7, #72]	; 0x48
 800b602:	2301      	movs	r3, #1
 800b604:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	f383 8810 	msr	PRIMASK, r3
}
 800b60c:	46c0      	nop			; (mov r8, r8)
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	689a      	ldr	r2, [r3, #8]
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	491a      	ldr	r1, [pc, #104]	; (800b684 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 800b61a:	400a      	ands	r2, r1
 800b61c:	609a      	str	r2, [r3, #8]
 800b61e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b620:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b622:	693b      	ldr	r3, [r7, #16]
 800b624:	f383 8810 	msr	PRIMASK, r3
}
 800b628:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	4a16      	ldr	r2, [pc, #88]	; (800b688 <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 800b62e:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b630:	f3ef 8310 	mrs	r3, PRIMASK
 800b634:	617b      	str	r3, [r7, #20]
  return(result);
 800b636:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b638:	647b      	str	r3, [r7, #68]	; 0x44
 800b63a:	2301      	movs	r3, #1
 800b63c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b63e:	69bb      	ldr	r3, [r7, #24]
 800b640:	f383 8810 	msr	PRIMASK, r3
}
 800b644:	46c0      	nop			; (mov r8, r8)
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	681a      	ldr	r2, [r3, #0]
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	2120      	movs	r1, #32
 800b652:	430a      	orrs	r2, r1
 800b654:	601a      	str	r2, [r3, #0]
 800b656:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b658:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b65a:	69fb      	ldr	r3, [r7, #28]
 800b65c:	f383 8810 	msr	PRIMASK, r3
}
 800b660:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b662:	e007      	b.n	800b674 <UART_RxISR_8BIT_FIFOEN+0x2cc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	699a      	ldr	r2, [r3, #24]
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	2108      	movs	r1, #8
 800b670:	430a      	orrs	r2, r1
 800b672:	619a      	str	r2, [r3, #24]
}
 800b674:	46c0      	nop			; (mov r8, r8)
 800b676:	46bd      	mov	sp, r7
 800b678:	b01c      	add	sp, #112	; 0x70
 800b67a:	bd80      	pop	{r7, pc}
 800b67c:	fffffeff 	.word	0xfffffeff
 800b680:	effffffe 	.word	0xeffffffe
 800b684:	efffffff 	.word	0xefffffff
 800b688:	0800b0d1 	.word	0x0800b0d1

0800b68c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b09e      	sub	sp, #120	; 0x78
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800b694:	2372      	movs	r3, #114	; 0x72
 800b696:	18fb      	adds	r3, r7, r3
 800b698:	687a      	ldr	r2, [r7, #4]
 800b69a:	2160      	movs	r1, #96	; 0x60
 800b69c:	5a52      	ldrh	r2, [r2, r1]
 800b69e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	69db      	ldr	r3, [r3, #28]
 800b6a6:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	689b      	ldr	r3, [r3, #8]
 800b6b6:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	2288      	movs	r2, #136	; 0x88
 800b6bc:	589b      	ldr	r3, [r3, r2]
 800b6be:	2b22      	cmp	r3, #34	; 0x22
 800b6c0:	d000      	beq.n	800b6c4 <UART_RxISR_16BIT_FIFOEN+0x38>
 800b6c2:	e141      	b.n	800b948 <UART_RxISR_16BIT_FIFOEN+0x2bc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b6c4:	2366      	movs	r3, #102	; 0x66
 800b6c6:	18fb      	adds	r3, r7, r3
 800b6c8:	687a      	ldr	r2, [r7, #4]
 800b6ca:	2168      	movs	r1, #104	; 0x68
 800b6cc:	5a52      	ldrh	r2, [r2, r1]
 800b6ce:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b6d0:	e0e8      	b.n	800b8a4 <UART_RxISR_16BIT_FIFOEN+0x218>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b6d8:	2164      	movs	r1, #100	; 0x64
 800b6da:	187b      	adds	r3, r7, r1
 800b6dc:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6e2:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 800b6e4:	187b      	adds	r3, r7, r1
 800b6e6:	2272      	movs	r2, #114	; 0x72
 800b6e8:	18ba      	adds	r2, r7, r2
 800b6ea:	881b      	ldrh	r3, [r3, #0]
 800b6ec:	8812      	ldrh	r2, [r2, #0]
 800b6ee:	4013      	ands	r3, r2
 800b6f0:	b29a      	uxth	r2, r3
 800b6f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b6f4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6fa:	1c9a      	adds	r2, r3, #2
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	225e      	movs	r2, #94	; 0x5e
 800b704:	5a9b      	ldrh	r3, [r3, r2]
 800b706:	b29b      	uxth	r3, r3
 800b708:	3b01      	subs	r3, #1
 800b70a:	b299      	uxth	r1, r3
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	225e      	movs	r2, #94	; 0x5e
 800b710:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	69db      	ldr	r3, [r3, #28]
 800b718:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b71a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b71c:	2207      	movs	r2, #7
 800b71e:	4013      	ands	r3, r2
 800b720:	d049      	beq.n	800b7b6 <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b722:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b724:	2201      	movs	r2, #1
 800b726:	4013      	ands	r3, r2
 800b728:	d010      	beq.n	800b74c <UART_RxISR_16BIT_FIFOEN+0xc0>
 800b72a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b72c:	2380      	movs	r3, #128	; 0x80
 800b72e:	005b      	lsls	r3, r3, #1
 800b730:	4013      	ands	r3, r2
 800b732:	d00b      	beq.n	800b74c <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	2201      	movs	r2, #1
 800b73a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	228c      	movs	r2, #140	; 0x8c
 800b740:	589b      	ldr	r3, [r3, r2]
 800b742:	2201      	movs	r2, #1
 800b744:	431a      	orrs	r2, r3
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	218c      	movs	r1, #140	; 0x8c
 800b74a:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b74c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b74e:	2202      	movs	r2, #2
 800b750:	4013      	ands	r3, r2
 800b752:	d00f      	beq.n	800b774 <UART_RxISR_16BIT_FIFOEN+0xe8>
 800b754:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b756:	2201      	movs	r2, #1
 800b758:	4013      	ands	r3, r2
 800b75a:	d00b      	beq.n	800b774 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	2202      	movs	r2, #2
 800b762:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	228c      	movs	r2, #140	; 0x8c
 800b768:	589b      	ldr	r3, [r3, r2]
 800b76a:	2204      	movs	r2, #4
 800b76c:	431a      	orrs	r2, r3
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	218c      	movs	r1, #140	; 0x8c
 800b772:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b774:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b776:	2204      	movs	r2, #4
 800b778:	4013      	ands	r3, r2
 800b77a:	d00f      	beq.n	800b79c <UART_RxISR_16BIT_FIFOEN+0x110>
 800b77c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b77e:	2201      	movs	r2, #1
 800b780:	4013      	ands	r3, r2
 800b782:	d00b      	beq.n	800b79c <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	2204      	movs	r2, #4
 800b78a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	228c      	movs	r2, #140	; 0x8c
 800b790:	589b      	ldr	r3, [r3, r2]
 800b792:	2202      	movs	r2, #2
 800b794:	431a      	orrs	r2, r3
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	218c      	movs	r1, #140	; 0x8c
 800b79a:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	228c      	movs	r2, #140	; 0x8c
 800b7a0:	589b      	ldr	r3, [r3, r2]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d007      	beq.n	800b7b6 <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	0018      	movs	r0, r3
 800b7aa:	f7fe fd95 	bl	800a2d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	228c      	movs	r2, #140	; 0x8c
 800b7b2:	2100      	movs	r1, #0
 800b7b4:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	225e      	movs	r2, #94	; 0x5e
 800b7ba:	5a9b      	ldrh	r3, [r3, r2]
 800b7bc:	b29b      	uxth	r3, r3
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d170      	bne.n	800b8a4 <UART_RxISR_16BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b7c2:	f3ef 8310 	mrs	r3, PRIMASK
 800b7c6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800b7c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b7ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b7cc:	2301      	movs	r3, #1
 800b7ce:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b7d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7d2:	f383 8810 	msr	PRIMASK, r3
}
 800b7d6:	46c0      	nop			; (mov r8, r8)
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	681a      	ldr	r2, [r3, #0]
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	495f      	ldr	r1, [pc, #380]	; (800b960 <UART_RxISR_16BIT_FIFOEN+0x2d4>)
 800b7e4:	400a      	ands	r2, r1
 800b7e6:	601a      	str	r2, [r3, #0]
 800b7e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b7ea:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b7ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7ee:	f383 8810 	msr	PRIMASK, r3
}
 800b7f2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b7f4:	f3ef 8310 	mrs	r3, PRIMASK
 800b7f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800b7fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b7fc:	65bb      	str	r3, [r7, #88]	; 0x58
 800b7fe:	2301      	movs	r3, #1
 800b800:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b802:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b804:	f383 8810 	msr	PRIMASK, r3
}
 800b808:	46c0      	nop			; (mov r8, r8)
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	689a      	ldr	r2, [r3, #8]
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	4953      	ldr	r1, [pc, #332]	; (800b964 <UART_RxISR_16BIT_FIFOEN+0x2d8>)
 800b816:	400a      	ands	r2, r1
 800b818:	609a      	str	r2, [r3, #8]
 800b81a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b81c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b81e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b820:	f383 8810 	msr	PRIMASK, r3
}
 800b824:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	2288      	movs	r2, #136	; 0x88
 800b82a:	2120      	movs	r1, #32
 800b82c:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	2200      	movs	r2, #0
 800b832:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b838:	2b01      	cmp	r3, #1
 800b83a:	d12f      	bne.n	800b89c <UART_RxISR_16BIT_FIFOEN+0x210>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	2200      	movs	r2, #0
 800b840:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b842:	f3ef 8310 	mrs	r3, PRIMASK
 800b846:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800b848:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b84a:	657b      	str	r3, [r7, #84]	; 0x54
 800b84c:	2301      	movs	r3, #1
 800b84e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b852:	f383 8810 	msr	PRIMASK, r3
}
 800b856:	46c0      	nop			; (mov r8, r8)
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	681a      	ldr	r2, [r3, #0]
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	2110      	movs	r1, #16
 800b864:	438a      	bics	r2, r1
 800b866:	601a      	str	r2, [r3, #0]
 800b868:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b86a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b86c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b86e:	f383 8810 	msr	PRIMASK, r3
}
 800b872:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	69db      	ldr	r3, [r3, #28]
 800b87a:	2210      	movs	r2, #16
 800b87c:	4013      	ands	r3, r2
 800b87e:	2b10      	cmp	r3, #16
 800b880:	d103      	bne.n	800b88a <UART_RxISR_16BIT_FIFOEN+0x1fe>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	2210      	movs	r2, #16
 800b888:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	225c      	movs	r2, #92	; 0x5c
 800b88e:	5a9a      	ldrh	r2, [r3, r2]
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	0011      	movs	r1, r2
 800b894:	0018      	movs	r0, r3
 800b896:	f7fe fd27 	bl	800a2e8 <HAL_UARTEx_RxEventCallback>
 800b89a:	e003      	b.n	800b8a4 <UART_RxISR_16BIT_FIFOEN+0x218>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	0018      	movs	r0, r3
 800b8a0:	f7f6 ff98 	bl	80027d4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b8a4:	2366      	movs	r3, #102	; 0x66
 800b8a6:	18fb      	adds	r3, r7, r3
 800b8a8:	881b      	ldrh	r3, [r3, #0]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d004      	beq.n	800b8b8 <UART_RxISR_16BIT_FIFOEN+0x22c>
 800b8ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b8b0:	2220      	movs	r2, #32
 800b8b2:	4013      	ands	r3, r2
 800b8b4:	d000      	beq.n	800b8b8 <UART_RxISR_16BIT_FIFOEN+0x22c>
 800b8b6:	e70c      	b.n	800b6d2 <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b8b8:	2052      	movs	r0, #82	; 0x52
 800b8ba:	183b      	adds	r3, r7, r0
 800b8bc:	687a      	ldr	r2, [r7, #4]
 800b8be:	215e      	movs	r1, #94	; 0x5e
 800b8c0:	5a52      	ldrh	r2, [r2, r1]
 800b8c2:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b8c4:	0001      	movs	r1, r0
 800b8c6:	187b      	adds	r3, r7, r1
 800b8c8:	881b      	ldrh	r3, [r3, #0]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d044      	beq.n	800b958 <UART_RxISR_16BIT_FIFOEN+0x2cc>
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	2268      	movs	r2, #104	; 0x68
 800b8d2:	5a9b      	ldrh	r3, [r3, r2]
 800b8d4:	187a      	adds	r2, r7, r1
 800b8d6:	8812      	ldrh	r2, [r2, #0]
 800b8d8:	429a      	cmp	r2, r3
 800b8da:	d23d      	bcs.n	800b958 <UART_RxISR_16BIT_FIFOEN+0x2cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b8dc:	f3ef 8310 	mrs	r3, PRIMASK
 800b8e0:	60fb      	str	r3, [r7, #12]
  return(result);
 800b8e2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b8e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b8e6:	2301      	movs	r3, #1
 800b8e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b8ea:	693b      	ldr	r3, [r7, #16]
 800b8ec:	f383 8810 	msr	PRIMASK, r3
}
 800b8f0:	46c0      	nop			; (mov r8, r8)
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	689a      	ldr	r2, [r3, #8]
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	491a      	ldr	r1, [pc, #104]	; (800b968 <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 800b8fe:	400a      	ands	r2, r1
 800b900:	609a      	str	r2, [r3, #8]
 800b902:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b904:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b906:	697b      	ldr	r3, [r7, #20]
 800b908:	f383 8810 	msr	PRIMASK, r3
}
 800b90c:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	4a16      	ldr	r2, [pc, #88]	; (800b96c <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 800b912:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b914:	f3ef 8310 	mrs	r3, PRIMASK
 800b918:	61bb      	str	r3, [r7, #24]
  return(result);
 800b91a:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b91c:	64bb      	str	r3, [r7, #72]	; 0x48
 800b91e:	2301      	movs	r3, #1
 800b920:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b922:	69fb      	ldr	r3, [r7, #28]
 800b924:	f383 8810 	msr	PRIMASK, r3
}
 800b928:	46c0      	nop			; (mov r8, r8)
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	681a      	ldr	r2, [r3, #0]
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	2120      	movs	r1, #32
 800b936:	430a      	orrs	r2, r1
 800b938:	601a      	str	r2, [r3, #0]
 800b93a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b93c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b93e:	6a3b      	ldr	r3, [r7, #32]
 800b940:	f383 8810 	msr	PRIMASK, r3
}
 800b944:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b946:	e007      	b.n	800b958 <UART_RxISR_16BIT_FIFOEN+0x2cc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	699a      	ldr	r2, [r3, #24]
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	2108      	movs	r1, #8
 800b954:	430a      	orrs	r2, r1
 800b956:	619a      	str	r2, [r3, #24]
}
 800b958:	46c0      	nop			; (mov r8, r8)
 800b95a:	46bd      	mov	sp, r7
 800b95c:	b01e      	add	sp, #120	; 0x78
 800b95e:	bd80      	pop	{r7, pc}
 800b960:	fffffeff 	.word	0xfffffeff
 800b964:	effffffe 	.word	0xeffffffe
 800b968:	efffffff 	.word	0xefffffff
 800b96c:	0800b23d 	.word	0x0800b23d

0800b970 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b082      	sub	sp, #8
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b978:	46c0      	nop			; (mov r8, r8)
 800b97a:	46bd      	mov	sp, r7
 800b97c:	b002      	add	sp, #8
 800b97e:	bd80      	pop	{r7, pc}

0800b980 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b082      	sub	sp, #8
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b988:	46c0      	nop			; (mov r8, r8)
 800b98a:	46bd      	mov	sp, r7
 800b98c:	b002      	add	sp, #8
 800b98e:	bd80      	pop	{r7, pc}

0800b990 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b990:	b580      	push	{r7, lr}
 800b992:	b082      	sub	sp, #8
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b998:	46c0      	nop			; (mov r8, r8)
 800b99a:	46bd      	mov	sp, r7
 800b99c:	b002      	add	sp, #8
 800b99e:	bd80      	pop	{r7, pc}

0800b9a0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b084      	sub	sp, #16
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2280      	movs	r2, #128	; 0x80
 800b9ac:	5c9b      	ldrb	r3, [r3, r2]
 800b9ae:	2b01      	cmp	r3, #1
 800b9b0:	d101      	bne.n	800b9b6 <HAL_UARTEx_DisableFifoMode+0x16>
 800b9b2:	2302      	movs	r3, #2
 800b9b4:	e027      	b.n	800ba06 <HAL_UARTEx_DisableFifoMode+0x66>
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	2280      	movs	r2, #128	; 0x80
 800b9ba:	2101      	movs	r1, #1
 800b9bc:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	2284      	movs	r2, #132	; 0x84
 800b9c2:	2124      	movs	r1, #36	; 0x24
 800b9c4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	681a      	ldr	r2, [r3, #0]
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	2101      	movs	r1, #1
 800b9da:	438a      	bics	r2, r1
 800b9dc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	4a0b      	ldr	r2, [pc, #44]	; (800ba10 <HAL_UARTEx_DisableFifoMode+0x70>)
 800b9e2:	4013      	ands	r3, r2
 800b9e4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	68fa      	ldr	r2, [r7, #12]
 800b9f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	2284      	movs	r2, #132	; 0x84
 800b9f8:	2120      	movs	r1, #32
 800b9fa:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	2280      	movs	r2, #128	; 0x80
 800ba00:	2100      	movs	r1, #0
 800ba02:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ba04:	2300      	movs	r3, #0
}
 800ba06:	0018      	movs	r0, r3
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	b004      	add	sp, #16
 800ba0c:	bd80      	pop	{r7, pc}
 800ba0e:	46c0      	nop			; (mov r8, r8)
 800ba10:	dfffffff 	.word	0xdfffffff

0800ba14 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b084      	sub	sp, #16
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
 800ba1c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	2280      	movs	r2, #128	; 0x80
 800ba22:	5c9b      	ldrb	r3, [r3, r2]
 800ba24:	2b01      	cmp	r3, #1
 800ba26:	d101      	bne.n	800ba2c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ba28:	2302      	movs	r3, #2
 800ba2a:	e02e      	b.n	800ba8a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	2280      	movs	r2, #128	; 0x80
 800ba30:	2101      	movs	r1, #1
 800ba32:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2284      	movs	r2, #132	; 0x84
 800ba38:	2124      	movs	r1, #36	; 0x24
 800ba3a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	681a      	ldr	r2, [r3, #0]
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	2101      	movs	r1, #1
 800ba50:	438a      	bics	r2, r1
 800ba52:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	689b      	ldr	r3, [r3, #8]
 800ba5a:	00db      	lsls	r3, r3, #3
 800ba5c:	08d9      	lsrs	r1, r3, #3
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	683a      	ldr	r2, [r7, #0]
 800ba64:	430a      	orrs	r2, r1
 800ba66:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	0018      	movs	r0, r3
 800ba6c:	f000 f854 	bl	800bb18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	68fa      	ldr	r2, [r7, #12]
 800ba76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	2284      	movs	r2, #132	; 0x84
 800ba7c:	2120      	movs	r1, #32
 800ba7e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2280      	movs	r2, #128	; 0x80
 800ba84:	2100      	movs	r1, #0
 800ba86:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ba88:	2300      	movs	r3, #0
}
 800ba8a:	0018      	movs	r0, r3
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	b004      	add	sp, #16
 800ba90:	bd80      	pop	{r7, pc}
	...

0800ba94 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b084      	sub	sp, #16
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
 800ba9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	2280      	movs	r2, #128	; 0x80
 800baa2:	5c9b      	ldrb	r3, [r3, r2]
 800baa4:	2b01      	cmp	r3, #1
 800baa6:	d101      	bne.n	800baac <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800baa8:	2302      	movs	r3, #2
 800baaa:	e02f      	b.n	800bb0c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	2280      	movs	r2, #128	; 0x80
 800bab0:	2101      	movs	r1, #1
 800bab2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	2284      	movs	r2, #132	; 0x84
 800bab8:	2124      	movs	r1, #36	; 0x24
 800baba:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	681a      	ldr	r2, [r3, #0]
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	2101      	movs	r1, #1
 800bad0:	438a      	bics	r2, r1
 800bad2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	689b      	ldr	r3, [r3, #8]
 800bada:	4a0e      	ldr	r2, [pc, #56]	; (800bb14 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800badc:	4013      	ands	r3, r2
 800bade:	0019      	movs	r1, r3
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	683a      	ldr	r2, [r7, #0]
 800bae6:	430a      	orrs	r2, r1
 800bae8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	0018      	movs	r0, r3
 800baee:	f000 f813 	bl	800bb18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	68fa      	ldr	r2, [r7, #12]
 800baf8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	2284      	movs	r2, #132	; 0x84
 800bafe:	2120      	movs	r1, #32
 800bb00:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	2280      	movs	r2, #128	; 0x80
 800bb06:	2100      	movs	r1, #0
 800bb08:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bb0a:	2300      	movs	r3, #0
}
 800bb0c:	0018      	movs	r0, r3
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	b004      	add	sp, #16
 800bb12:	bd80      	pop	{r7, pc}
 800bb14:	f1ffffff 	.word	0xf1ffffff

0800bb18 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bb18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb1a:	b085      	sub	sp, #20
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d108      	bne.n	800bb3a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	226a      	movs	r2, #106	; 0x6a
 800bb2c:	2101      	movs	r1, #1
 800bb2e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2268      	movs	r2, #104	; 0x68
 800bb34:	2101      	movs	r1, #1
 800bb36:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bb38:	e043      	b.n	800bbc2 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bb3a:	260f      	movs	r6, #15
 800bb3c:	19bb      	adds	r3, r7, r6
 800bb3e:	2208      	movs	r2, #8
 800bb40:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bb42:	200e      	movs	r0, #14
 800bb44:	183b      	adds	r3, r7, r0
 800bb46:	2208      	movs	r2, #8
 800bb48:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	689b      	ldr	r3, [r3, #8]
 800bb50:	0e5b      	lsrs	r3, r3, #25
 800bb52:	b2da      	uxtb	r2, r3
 800bb54:	240d      	movs	r4, #13
 800bb56:	193b      	adds	r3, r7, r4
 800bb58:	2107      	movs	r1, #7
 800bb5a:	400a      	ands	r2, r1
 800bb5c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	689b      	ldr	r3, [r3, #8]
 800bb64:	0f5b      	lsrs	r3, r3, #29
 800bb66:	b2da      	uxtb	r2, r3
 800bb68:	250c      	movs	r5, #12
 800bb6a:	197b      	adds	r3, r7, r5
 800bb6c:	2107      	movs	r1, #7
 800bb6e:	400a      	ands	r2, r1
 800bb70:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bb72:	183b      	adds	r3, r7, r0
 800bb74:	781b      	ldrb	r3, [r3, #0]
 800bb76:	197a      	adds	r2, r7, r5
 800bb78:	7812      	ldrb	r2, [r2, #0]
 800bb7a:	4914      	ldr	r1, [pc, #80]	; (800bbcc <UARTEx_SetNbDataToProcess+0xb4>)
 800bb7c:	5c8a      	ldrb	r2, [r1, r2]
 800bb7e:	435a      	muls	r2, r3
 800bb80:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800bb82:	197b      	adds	r3, r7, r5
 800bb84:	781b      	ldrb	r3, [r3, #0]
 800bb86:	4a12      	ldr	r2, [pc, #72]	; (800bbd0 <UARTEx_SetNbDataToProcess+0xb8>)
 800bb88:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bb8a:	0019      	movs	r1, r3
 800bb8c:	f7f4 fb54 	bl	8000238 <__divsi3>
 800bb90:	0003      	movs	r3, r0
 800bb92:	b299      	uxth	r1, r3
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	226a      	movs	r2, #106	; 0x6a
 800bb98:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bb9a:	19bb      	adds	r3, r7, r6
 800bb9c:	781b      	ldrb	r3, [r3, #0]
 800bb9e:	193a      	adds	r2, r7, r4
 800bba0:	7812      	ldrb	r2, [r2, #0]
 800bba2:	490a      	ldr	r1, [pc, #40]	; (800bbcc <UARTEx_SetNbDataToProcess+0xb4>)
 800bba4:	5c8a      	ldrb	r2, [r1, r2]
 800bba6:	435a      	muls	r2, r3
 800bba8:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800bbaa:	193b      	adds	r3, r7, r4
 800bbac:	781b      	ldrb	r3, [r3, #0]
 800bbae:	4a08      	ldr	r2, [pc, #32]	; (800bbd0 <UARTEx_SetNbDataToProcess+0xb8>)
 800bbb0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bbb2:	0019      	movs	r1, r3
 800bbb4:	f7f4 fb40 	bl	8000238 <__divsi3>
 800bbb8:	0003      	movs	r3, r0
 800bbba:	b299      	uxth	r1, r3
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	2268      	movs	r2, #104	; 0x68
 800bbc0:	5299      	strh	r1, [r3, r2]
}
 800bbc2:	46c0      	nop			; (mov r8, r8)
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	b005      	add	sp, #20
 800bbc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbca:	46c0      	nop			; (mov r8, r8)
 800bbcc:	0800c960 	.word	0x0800c960
 800bbd0:	0800c968 	.word	0x0800c968

0800bbd4 <__errno>:
 800bbd4:	4b01      	ldr	r3, [pc, #4]	; (800bbdc <__errno+0x8>)
 800bbd6:	6818      	ldr	r0, [r3, #0]
 800bbd8:	4770      	bx	lr
 800bbda:	46c0      	nop			; (mov r8, r8)
 800bbdc:	20000010 	.word	0x20000010

0800bbe0 <__libc_init_array>:
 800bbe0:	b570      	push	{r4, r5, r6, lr}
 800bbe2:	2600      	movs	r6, #0
 800bbe4:	4d0c      	ldr	r5, [pc, #48]	; (800bc18 <__libc_init_array+0x38>)
 800bbe6:	4c0d      	ldr	r4, [pc, #52]	; (800bc1c <__libc_init_array+0x3c>)
 800bbe8:	1b64      	subs	r4, r4, r5
 800bbea:	10a4      	asrs	r4, r4, #2
 800bbec:	42a6      	cmp	r6, r4
 800bbee:	d109      	bne.n	800bc04 <__libc_init_array+0x24>
 800bbf0:	2600      	movs	r6, #0
 800bbf2:	f000 fc47 	bl	800c484 <_init>
 800bbf6:	4d0a      	ldr	r5, [pc, #40]	; (800bc20 <__libc_init_array+0x40>)
 800bbf8:	4c0a      	ldr	r4, [pc, #40]	; (800bc24 <__libc_init_array+0x44>)
 800bbfa:	1b64      	subs	r4, r4, r5
 800bbfc:	10a4      	asrs	r4, r4, #2
 800bbfe:	42a6      	cmp	r6, r4
 800bc00:	d105      	bne.n	800bc0e <__libc_init_array+0x2e>
 800bc02:	bd70      	pop	{r4, r5, r6, pc}
 800bc04:	00b3      	lsls	r3, r6, #2
 800bc06:	58eb      	ldr	r3, [r5, r3]
 800bc08:	4798      	blx	r3
 800bc0a:	3601      	adds	r6, #1
 800bc0c:	e7ee      	b.n	800bbec <__libc_init_array+0xc>
 800bc0e:	00b3      	lsls	r3, r6, #2
 800bc10:	58eb      	ldr	r3, [r5, r3]
 800bc12:	4798      	blx	r3
 800bc14:	3601      	adds	r6, #1
 800bc16:	e7f2      	b.n	800bbfe <__libc_init_array+0x1e>
 800bc18:	0800c9a4 	.word	0x0800c9a4
 800bc1c:	0800c9a4 	.word	0x0800c9a4
 800bc20:	0800c9a4 	.word	0x0800c9a4
 800bc24:	0800c9a8 	.word	0x0800c9a8

0800bc28 <memset>:
 800bc28:	0003      	movs	r3, r0
 800bc2a:	1882      	adds	r2, r0, r2
 800bc2c:	4293      	cmp	r3, r2
 800bc2e:	d100      	bne.n	800bc32 <memset+0xa>
 800bc30:	4770      	bx	lr
 800bc32:	7019      	strb	r1, [r3, #0]
 800bc34:	3301      	adds	r3, #1
 800bc36:	e7f9      	b.n	800bc2c <memset+0x4>

0800bc38 <siprintf>:
 800bc38:	b40e      	push	{r1, r2, r3}
 800bc3a:	b500      	push	{lr}
 800bc3c:	490b      	ldr	r1, [pc, #44]	; (800bc6c <siprintf+0x34>)
 800bc3e:	b09c      	sub	sp, #112	; 0x70
 800bc40:	ab1d      	add	r3, sp, #116	; 0x74
 800bc42:	9002      	str	r0, [sp, #8]
 800bc44:	9006      	str	r0, [sp, #24]
 800bc46:	9107      	str	r1, [sp, #28]
 800bc48:	9104      	str	r1, [sp, #16]
 800bc4a:	4809      	ldr	r0, [pc, #36]	; (800bc70 <siprintf+0x38>)
 800bc4c:	4909      	ldr	r1, [pc, #36]	; (800bc74 <siprintf+0x3c>)
 800bc4e:	cb04      	ldmia	r3!, {r2}
 800bc50:	9105      	str	r1, [sp, #20]
 800bc52:	6800      	ldr	r0, [r0, #0]
 800bc54:	a902      	add	r1, sp, #8
 800bc56:	9301      	str	r3, [sp, #4]
 800bc58:	f000 f870 	bl	800bd3c <_svfiprintf_r>
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	9a02      	ldr	r2, [sp, #8]
 800bc60:	7013      	strb	r3, [r2, #0]
 800bc62:	b01c      	add	sp, #112	; 0x70
 800bc64:	bc08      	pop	{r3}
 800bc66:	b003      	add	sp, #12
 800bc68:	4718      	bx	r3
 800bc6a:	46c0      	nop			; (mov r8, r8)
 800bc6c:	7fffffff 	.word	0x7fffffff
 800bc70:	20000010 	.word	0x20000010
 800bc74:	ffff0208 	.word	0xffff0208

0800bc78 <__ssputs_r>:
 800bc78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc7a:	688e      	ldr	r6, [r1, #8]
 800bc7c:	b085      	sub	sp, #20
 800bc7e:	0007      	movs	r7, r0
 800bc80:	000c      	movs	r4, r1
 800bc82:	9203      	str	r2, [sp, #12]
 800bc84:	9301      	str	r3, [sp, #4]
 800bc86:	429e      	cmp	r6, r3
 800bc88:	d83c      	bhi.n	800bd04 <__ssputs_r+0x8c>
 800bc8a:	2390      	movs	r3, #144	; 0x90
 800bc8c:	898a      	ldrh	r2, [r1, #12]
 800bc8e:	00db      	lsls	r3, r3, #3
 800bc90:	421a      	tst	r2, r3
 800bc92:	d034      	beq.n	800bcfe <__ssputs_r+0x86>
 800bc94:	2503      	movs	r5, #3
 800bc96:	6909      	ldr	r1, [r1, #16]
 800bc98:	6823      	ldr	r3, [r4, #0]
 800bc9a:	1a5b      	subs	r3, r3, r1
 800bc9c:	9302      	str	r3, [sp, #8]
 800bc9e:	6963      	ldr	r3, [r4, #20]
 800bca0:	9802      	ldr	r0, [sp, #8]
 800bca2:	435d      	muls	r5, r3
 800bca4:	0feb      	lsrs	r3, r5, #31
 800bca6:	195d      	adds	r5, r3, r5
 800bca8:	9b01      	ldr	r3, [sp, #4]
 800bcaa:	106d      	asrs	r5, r5, #1
 800bcac:	3301      	adds	r3, #1
 800bcae:	181b      	adds	r3, r3, r0
 800bcb0:	42ab      	cmp	r3, r5
 800bcb2:	d900      	bls.n	800bcb6 <__ssputs_r+0x3e>
 800bcb4:	001d      	movs	r5, r3
 800bcb6:	0553      	lsls	r3, r2, #21
 800bcb8:	d532      	bpl.n	800bd20 <__ssputs_r+0xa8>
 800bcba:	0029      	movs	r1, r5
 800bcbc:	0038      	movs	r0, r7
 800bcbe:	f000 fb31 	bl	800c324 <_malloc_r>
 800bcc2:	1e06      	subs	r6, r0, #0
 800bcc4:	d109      	bne.n	800bcda <__ssputs_r+0x62>
 800bcc6:	230c      	movs	r3, #12
 800bcc8:	603b      	str	r3, [r7, #0]
 800bcca:	2340      	movs	r3, #64	; 0x40
 800bccc:	2001      	movs	r0, #1
 800bcce:	89a2      	ldrh	r2, [r4, #12]
 800bcd0:	4240      	negs	r0, r0
 800bcd2:	4313      	orrs	r3, r2
 800bcd4:	81a3      	strh	r3, [r4, #12]
 800bcd6:	b005      	add	sp, #20
 800bcd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bcda:	9a02      	ldr	r2, [sp, #8]
 800bcdc:	6921      	ldr	r1, [r4, #16]
 800bcde:	f000 faba 	bl	800c256 <memcpy>
 800bce2:	89a3      	ldrh	r3, [r4, #12]
 800bce4:	4a14      	ldr	r2, [pc, #80]	; (800bd38 <__ssputs_r+0xc0>)
 800bce6:	401a      	ands	r2, r3
 800bce8:	2380      	movs	r3, #128	; 0x80
 800bcea:	4313      	orrs	r3, r2
 800bcec:	81a3      	strh	r3, [r4, #12]
 800bcee:	9b02      	ldr	r3, [sp, #8]
 800bcf0:	6126      	str	r6, [r4, #16]
 800bcf2:	18f6      	adds	r6, r6, r3
 800bcf4:	6026      	str	r6, [r4, #0]
 800bcf6:	6165      	str	r5, [r4, #20]
 800bcf8:	9e01      	ldr	r6, [sp, #4]
 800bcfa:	1aed      	subs	r5, r5, r3
 800bcfc:	60a5      	str	r5, [r4, #8]
 800bcfe:	9b01      	ldr	r3, [sp, #4]
 800bd00:	429e      	cmp	r6, r3
 800bd02:	d900      	bls.n	800bd06 <__ssputs_r+0x8e>
 800bd04:	9e01      	ldr	r6, [sp, #4]
 800bd06:	0032      	movs	r2, r6
 800bd08:	9903      	ldr	r1, [sp, #12]
 800bd0a:	6820      	ldr	r0, [r4, #0]
 800bd0c:	f000 faac 	bl	800c268 <memmove>
 800bd10:	68a3      	ldr	r3, [r4, #8]
 800bd12:	2000      	movs	r0, #0
 800bd14:	1b9b      	subs	r3, r3, r6
 800bd16:	60a3      	str	r3, [r4, #8]
 800bd18:	6823      	ldr	r3, [r4, #0]
 800bd1a:	199e      	adds	r6, r3, r6
 800bd1c:	6026      	str	r6, [r4, #0]
 800bd1e:	e7da      	b.n	800bcd6 <__ssputs_r+0x5e>
 800bd20:	002a      	movs	r2, r5
 800bd22:	0038      	movs	r0, r7
 800bd24:	f000 fb5c 	bl	800c3e0 <_realloc_r>
 800bd28:	1e06      	subs	r6, r0, #0
 800bd2a:	d1e0      	bne.n	800bcee <__ssputs_r+0x76>
 800bd2c:	0038      	movs	r0, r7
 800bd2e:	6921      	ldr	r1, [r4, #16]
 800bd30:	f000 faae 	bl	800c290 <_free_r>
 800bd34:	e7c7      	b.n	800bcc6 <__ssputs_r+0x4e>
 800bd36:	46c0      	nop			; (mov r8, r8)
 800bd38:	fffffb7f 	.word	0xfffffb7f

0800bd3c <_svfiprintf_r>:
 800bd3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd3e:	b0a1      	sub	sp, #132	; 0x84
 800bd40:	9003      	str	r0, [sp, #12]
 800bd42:	001d      	movs	r5, r3
 800bd44:	898b      	ldrh	r3, [r1, #12]
 800bd46:	000f      	movs	r7, r1
 800bd48:	0016      	movs	r6, r2
 800bd4a:	061b      	lsls	r3, r3, #24
 800bd4c:	d511      	bpl.n	800bd72 <_svfiprintf_r+0x36>
 800bd4e:	690b      	ldr	r3, [r1, #16]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d10e      	bne.n	800bd72 <_svfiprintf_r+0x36>
 800bd54:	2140      	movs	r1, #64	; 0x40
 800bd56:	f000 fae5 	bl	800c324 <_malloc_r>
 800bd5a:	6038      	str	r0, [r7, #0]
 800bd5c:	6138      	str	r0, [r7, #16]
 800bd5e:	2800      	cmp	r0, #0
 800bd60:	d105      	bne.n	800bd6e <_svfiprintf_r+0x32>
 800bd62:	230c      	movs	r3, #12
 800bd64:	9a03      	ldr	r2, [sp, #12]
 800bd66:	3801      	subs	r0, #1
 800bd68:	6013      	str	r3, [r2, #0]
 800bd6a:	b021      	add	sp, #132	; 0x84
 800bd6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd6e:	2340      	movs	r3, #64	; 0x40
 800bd70:	617b      	str	r3, [r7, #20]
 800bd72:	2300      	movs	r3, #0
 800bd74:	ac08      	add	r4, sp, #32
 800bd76:	6163      	str	r3, [r4, #20]
 800bd78:	3320      	adds	r3, #32
 800bd7a:	7663      	strb	r3, [r4, #25]
 800bd7c:	3310      	adds	r3, #16
 800bd7e:	76a3      	strb	r3, [r4, #26]
 800bd80:	9507      	str	r5, [sp, #28]
 800bd82:	0035      	movs	r5, r6
 800bd84:	782b      	ldrb	r3, [r5, #0]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d001      	beq.n	800bd8e <_svfiprintf_r+0x52>
 800bd8a:	2b25      	cmp	r3, #37	; 0x25
 800bd8c:	d147      	bne.n	800be1e <_svfiprintf_r+0xe2>
 800bd8e:	1bab      	subs	r3, r5, r6
 800bd90:	9305      	str	r3, [sp, #20]
 800bd92:	42b5      	cmp	r5, r6
 800bd94:	d00c      	beq.n	800bdb0 <_svfiprintf_r+0x74>
 800bd96:	0032      	movs	r2, r6
 800bd98:	0039      	movs	r1, r7
 800bd9a:	9803      	ldr	r0, [sp, #12]
 800bd9c:	f7ff ff6c 	bl	800bc78 <__ssputs_r>
 800bda0:	1c43      	adds	r3, r0, #1
 800bda2:	d100      	bne.n	800bda6 <_svfiprintf_r+0x6a>
 800bda4:	e0ae      	b.n	800bf04 <_svfiprintf_r+0x1c8>
 800bda6:	6962      	ldr	r2, [r4, #20]
 800bda8:	9b05      	ldr	r3, [sp, #20]
 800bdaa:	4694      	mov	ip, r2
 800bdac:	4463      	add	r3, ip
 800bdae:	6163      	str	r3, [r4, #20]
 800bdb0:	782b      	ldrb	r3, [r5, #0]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d100      	bne.n	800bdb8 <_svfiprintf_r+0x7c>
 800bdb6:	e0a5      	b.n	800bf04 <_svfiprintf_r+0x1c8>
 800bdb8:	2201      	movs	r2, #1
 800bdba:	2300      	movs	r3, #0
 800bdbc:	4252      	negs	r2, r2
 800bdbe:	6062      	str	r2, [r4, #4]
 800bdc0:	a904      	add	r1, sp, #16
 800bdc2:	3254      	adds	r2, #84	; 0x54
 800bdc4:	1852      	adds	r2, r2, r1
 800bdc6:	1c6e      	adds	r6, r5, #1
 800bdc8:	6023      	str	r3, [r4, #0]
 800bdca:	60e3      	str	r3, [r4, #12]
 800bdcc:	60a3      	str	r3, [r4, #8]
 800bdce:	7013      	strb	r3, [r2, #0]
 800bdd0:	65a3      	str	r3, [r4, #88]	; 0x58
 800bdd2:	2205      	movs	r2, #5
 800bdd4:	7831      	ldrb	r1, [r6, #0]
 800bdd6:	4854      	ldr	r0, [pc, #336]	; (800bf28 <_svfiprintf_r+0x1ec>)
 800bdd8:	f000 fa32 	bl	800c240 <memchr>
 800bddc:	1c75      	adds	r5, r6, #1
 800bdde:	2800      	cmp	r0, #0
 800bde0:	d11f      	bne.n	800be22 <_svfiprintf_r+0xe6>
 800bde2:	6822      	ldr	r2, [r4, #0]
 800bde4:	06d3      	lsls	r3, r2, #27
 800bde6:	d504      	bpl.n	800bdf2 <_svfiprintf_r+0xb6>
 800bde8:	2353      	movs	r3, #83	; 0x53
 800bdea:	a904      	add	r1, sp, #16
 800bdec:	185b      	adds	r3, r3, r1
 800bdee:	2120      	movs	r1, #32
 800bdf0:	7019      	strb	r1, [r3, #0]
 800bdf2:	0713      	lsls	r3, r2, #28
 800bdf4:	d504      	bpl.n	800be00 <_svfiprintf_r+0xc4>
 800bdf6:	2353      	movs	r3, #83	; 0x53
 800bdf8:	a904      	add	r1, sp, #16
 800bdfa:	185b      	adds	r3, r3, r1
 800bdfc:	212b      	movs	r1, #43	; 0x2b
 800bdfe:	7019      	strb	r1, [r3, #0]
 800be00:	7833      	ldrb	r3, [r6, #0]
 800be02:	2b2a      	cmp	r3, #42	; 0x2a
 800be04:	d016      	beq.n	800be34 <_svfiprintf_r+0xf8>
 800be06:	0035      	movs	r5, r6
 800be08:	2100      	movs	r1, #0
 800be0a:	200a      	movs	r0, #10
 800be0c:	68e3      	ldr	r3, [r4, #12]
 800be0e:	782a      	ldrb	r2, [r5, #0]
 800be10:	1c6e      	adds	r6, r5, #1
 800be12:	3a30      	subs	r2, #48	; 0x30
 800be14:	2a09      	cmp	r2, #9
 800be16:	d94e      	bls.n	800beb6 <_svfiprintf_r+0x17a>
 800be18:	2900      	cmp	r1, #0
 800be1a:	d111      	bne.n	800be40 <_svfiprintf_r+0x104>
 800be1c:	e017      	b.n	800be4e <_svfiprintf_r+0x112>
 800be1e:	3501      	adds	r5, #1
 800be20:	e7b0      	b.n	800bd84 <_svfiprintf_r+0x48>
 800be22:	4b41      	ldr	r3, [pc, #260]	; (800bf28 <_svfiprintf_r+0x1ec>)
 800be24:	6822      	ldr	r2, [r4, #0]
 800be26:	1ac0      	subs	r0, r0, r3
 800be28:	2301      	movs	r3, #1
 800be2a:	4083      	lsls	r3, r0
 800be2c:	4313      	orrs	r3, r2
 800be2e:	002e      	movs	r6, r5
 800be30:	6023      	str	r3, [r4, #0]
 800be32:	e7ce      	b.n	800bdd2 <_svfiprintf_r+0x96>
 800be34:	9b07      	ldr	r3, [sp, #28]
 800be36:	1d19      	adds	r1, r3, #4
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	9107      	str	r1, [sp, #28]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	db01      	blt.n	800be44 <_svfiprintf_r+0x108>
 800be40:	930b      	str	r3, [sp, #44]	; 0x2c
 800be42:	e004      	b.n	800be4e <_svfiprintf_r+0x112>
 800be44:	425b      	negs	r3, r3
 800be46:	60e3      	str	r3, [r4, #12]
 800be48:	2302      	movs	r3, #2
 800be4a:	4313      	orrs	r3, r2
 800be4c:	6023      	str	r3, [r4, #0]
 800be4e:	782b      	ldrb	r3, [r5, #0]
 800be50:	2b2e      	cmp	r3, #46	; 0x2e
 800be52:	d10a      	bne.n	800be6a <_svfiprintf_r+0x12e>
 800be54:	786b      	ldrb	r3, [r5, #1]
 800be56:	2b2a      	cmp	r3, #42	; 0x2a
 800be58:	d135      	bne.n	800bec6 <_svfiprintf_r+0x18a>
 800be5a:	9b07      	ldr	r3, [sp, #28]
 800be5c:	3502      	adds	r5, #2
 800be5e:	1d1a      	adds	r2, r3, #4
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	9207      	str	r2, [sp, #28]
 800be64:	2b00      	cmp	r3, #0
 800be66:	db2b      	blt.n	800bec0 <_svfiprintf_r+0x184>
 800be68:	9309      	str	r3, [sp, #36]	; 0x24
 800be6a:	4e30      	ldr	r6, [pc, #192]	; (800bf2c <_svfiprintf_r+0x1f0>)
 800be6c:	2203      	movs	r2, #3
 800be6e:	0030      	movs	r0, r6
 800be70:	7829      	ldrb	r1, [r5, #0]
 800be72:	f000 f9e5 	bl	800c240 <memchr>
 800be76:	2800      	cmp	r0, #0
 800be78:	d006      	beq.n	800be88 <_svfiprintf_r+0x14c>
 800be7a:	2340      	movs	r3, #64	; 0x40
 800be7c:	1b80      	subs	r0, r0, r6
 800be7e:	4083      	lsls	r3, r0
 800be80:	6822      	ldr	r2, [r4, #0]
 800be82:	3501      	adds	r5, #1
 800be84:	4313      	orrs	r3, r2
 800be86:	6023      	str	r3, [r4, #0]
 800be88:	7829      	ldrb	r1, [r5, #0]
 800be8a:	2206      	movs	r2, #6
 800be8c:	4828      	ldr	r0, [pc, #160]	; (800bf30 <_svfiprintf_r+0x1f4>)
 800be8e:	1c6e      	adds	r6, r5, #1
 800be90:	7621      	strb	r1, [r4, #24]
 800be92:	f000 f9d5 	bl	800c240 <memchr>
 800be96:	2800      	cmp	r0, #0
 800be98:	d03c      	beq.n	800bf14 <_svfiprintf_r+0x1d8>
 800be9a:	4b26      	ldr	r3, [pc, #152]	; (800bf34 <_svfiprintf_r+0x1f8>)
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d125      	bne.n	800beec <_svfiprintf_r+0x1b0>
 800bea0:	2207      	movs	r2, #7
 800bea2:	9b07      	ldr	r3, [sp, #28]
 800bea4:	3307      	adds	r3, #7
 800bea6:	4393      	bics	r3, r2
 800bea8:	3308      	adds	r3, #8
 800beaa:	9307      	str	r3, [sp, #28]
 800beac:	6963      	ldr	r3, [r4, #20]
 800beae:	9a04      	ldr	r2, [sp, #16]
 800beb0:	189b      	adds	r3, r3, r2
 800beb2:	6163      	str	r3, [r4, #20]
 800beb4:	e765      	b.n	800bd82 <_svfiprintf_r+0x46>
 800beb6:	4343      	muls	r3, r0
 800beb8:	0035      	movs	r5, r6
 800beba:	2101      	movs	r1, #1
 800bebc:	189b      	adds	r3, r3, r2
 800bebe:	e7a6      	b.n	800be0e <_svfiprintf_r+0xd2>
 800bec0:	2301      	movs	r3, #1
 800bec2:	425b      	negs	r3, r3
 800bec4:	e7d0      	b.n	800be68 <_svfiprintf_r+0x12c>
 800bec6:	2300      	movs	r3, #0
 800bec8:	200a      	movs	r0, #10
 800beca:	001a      	movs	r2, r3
 800becc:	3501      	adds	r5, #1
 800bece:	6063      	str	r3, [r4, #4]
 800bed0:	7829      	ldrb	r1, [r5, #0]
 800bed2:	1c6e      	adds	r6, r5, #1
 800bed4:	3930      	subs	r1, #48	; 0x30
 800bed6:	2909      	cmp	r1, #9
 800bed8:	d903      	bls.n	800bee2 <_svfiprintf_r+0x1a6>
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d0c5      	beq.n	800be6a <_svfiprintf_r+0x12e>
 800bede:	9209      	str	r2, [sp, #36]	; 0x24
 800bee0:	e7c3      	b.n	800be6a <_svfiprintf_r+0x12e>
 800bee2:	4342      	muls	r2, r0
 800bee4:	0035      	movs	r5, r6
 800bee6:	2301      	movs	r3, #1
 800bee8:	1852      	adds	r2, r2, r1
 800beea:	e7f1      	b.n	800bed0 <_svfiprintf_r+0x194>
 800beec:	ab07      	add	r3, sp, #28
 800beee:	9300      	str	r3, [sp, #0]
 800bef0:	003a      	movs	r2, r7
 800bef2:	0021      	movs	r1, r4
 800bef4:	4b10      	ldr	r3, [pc, #64]	; (800bf38 <_svfiprintf_r+0x1fc>)
 800bef6:	9803      	ldr	r0, [sp, #12]
 800bef8:	e000      	b.n	800befc <_svfiprintf_r+0x1c0>
 800befa:	bf00      	nop
 800befc:	9004      	str	r0, [sp, #16]
 800befe:	9b04      	ldr	r3, [sp, #16]
 800bf00:	3301      	adds	r3, #1
 800bf02:	d1d3      	bne.n	800beac <_svfiprintf_r+0x170>
 800bf04:	89bb      	ldrh	r3, [r7, #12]
 800bf06:	980d      	ldr	r0, [sp, #52]	; 0x34
 800bf08:	065b      	lsls	r3, r3, #25
 800bf0a:	d400      	bmi.n	800bf0e <_svfiprintf_r+0x1d2>
 800bf0c:	e72d      	b.n	800bd6a <_svfiprintf_r+0x2e>
 800bf0e:	2001      	movs	r0, #1
 800bf10:	4240      	negs	r0, r0
 800bf12:	e72a      	b.n	800bd6a <_svfiprintf_r+0x2e>
 800bf14:	ab07      	add	r3, sp, #28
 800bf16:	9300      	str	r3, [sp, #0]
 800bf18:	003a      	movs	r2, r7
 800bf1a:	0021      	movs	r1, r4
 800bf1c:	4b06      	ldr	r3, [pc, #24]	; (800bf38 <_svfiprintf_r+0x1fc>)
 800bf1e:	9803      	ldr	r0, [sp, #12]
 800bf20:	f000 f87c 	bl	800c01c <_printf_i>
 800bf24:	e7ea      	b.n	800befc <_svfiprintf_r+0x1c0>
 800bf26:	46c0      	nop			; (mov r8, r8)
 800bf28:	0800c970 	.word	0x0800c970
 800bf2c:	0800c976 	.word	0x0800c976
 800bf30:	0800c97a 	.word	0x0800c97a
 800bf34:	00000000 	.word	0x00000000
 800bf38:	0800bc79 	.word	0x0800bc79

0800bf3c <_printf_common>:
 800bf3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bf3e:	0015      	movs	r5, r2
 800bf40:	9301      	str	r3, [sp, #4]
 800bf42:	688a      	ldr	r2, [r1, #8]
 800bf44:	690b      	ldr	r3, [r1, #16]
 800bf46:	000c      	movs	r4, r1
 800bf48:	9000      	str	r0, [sp, #0]
 800bf4a:	4293      	cmp	r3, r2
 800bf4c:	da00      	bge.n	800bf50 <_printf_common+0x14>
 800bf4e:	0013      	movs	r3, r2
 800bf50:	0022      	movs	r2, r4
 800bf52:	602b      	str	r3, [r5, #0]
 800bf54:	3243      	adds	r2, #67	; 0x43
 800bf56:	7812      	ldrb	r2, [r2, #0]
 800bf58:	2a00      	cmp	r2, #0
 800bf5a:	d001      	beq.n	800bf60 <_printf_common+0x24>
 800bf5c:	3301      	adds	r3, #1
 800bf5e:	602b      	str	r3, [r5, #0]
 800bf60:	6823      	ldr	r3, [r4, #0]
 800bf62:	069b      	lsls	r3, r3, #26
 800bf64:	d502      	bpl.n	800bf6c <_printf_common+0x30>
 800bf66:	682b      	ldr	r3, [r5, #0]
 800bf68:	3302      	adds	r3, #2
 800bf6a:	602b      	str	r3, [r5, #0]
 800bf6c:	6822      	ldr	r2, [r4, #0]
 800bf6e:	2306      	movs	r3, #6
 800bf70:	0017      	movs	r7, r2
 800bf72:	401f      	ands	r7, r3
 800bf74:	421a      	tst	r2, r3
 800bf76:	d027      	beq.n	800bfc8 <_printf_common+0x8c>
 800bf78:	0023      	movs	r3, r4
 800bf7a:	3343      	adds	r3, #67	; 0x43
 800bf7c:	781b      	ldrb	r3, [r3, #0]
 800bf7e:	1e5a      	subs	r2, r3, #1
 800bf80:	4193      	sbcs	r3, r2
 800bf82:	6822      	ldr	r2, [r4, #0]
 800bf84:	0692      	lsls	r2, r2, #26
 800bf86:	d430      	bmi.n	800bfea <_printf_common+0xae>
 800bf88:	0022      	movs	r2, r4
 800bf8a:	9901      	ldr	r1, [sp, #4]
 800bf8c:	9800      	ldr	r0, [sp, #0]
 800bf8e:	9e08      	ldr	r6, [sp, #32]
 800bf90:	3243      	adds	r2, #67	; 0x43
 800bf92:	47b0      	blx	r6
 800bf94:	1c43      	adds	r3, r0, #1
 800bf96:	d025      	beq.n	800bfe4 <_printf_common+0xa8>
 800bf98:	2306      	movs	r3, #6
 800bf9a:	6820      	ldr	r0, [r4, #0]
 800bf9c:	682a      	ldr	r2, [r5, #0]
 800bf9e:	68e1      	ldr	r1, [r4, #12]
 800bfa0:	2500      	movs	r5, #0
 800bfa2:	4003      	ands	r3, r0
 800bfa4:	2b04      	cmp	r3, #4
 800bfa6:	d103      	bne.n	800bfb0 <_printf_common+0x74>
 800bfa8:	1a8d      	subs	r5, r1, r2
 800bfaa:	43eb      	mvns	r3, r5
 800bfac:	17db      	asrs	r3, r3, #31
 800bfae:	401d      	ands	r5, r3
 800bfb0:	68a3      	ldr	r3, [r4, #8]
 800bfb2:	6922      	ldr	r2, [r4, #16]
 800bfb4:	4293      	cmp	r3, r2
 800bfb6:	dd01      	ble.n	800bfbc <_printf_common+0x80>
 800bfb8:	1a9b      	subs	r3, r3, r2
 800bfba:	18ed      	adds	r5, r5, r3
 800bfbc:	2700      	movs	r7, #0
 800bfbe:	42bd      	cmp	r5, r7
 800bfc0:	d120      	bne.n	800c004 <_printf_common+0xc8>
 800bfc2:	2000      	movs	r0, #0
 800bfc4:	e010      	b.n	800bfe8 <_printf_common+0xac>
 800bfc6:	3701      	adds	r7, #1
 800bfc8:	68e3      	ldr	r3, [r4, #12]
 800bfca:	682a      	ldr	r2, [r5, #0]
 800bfcc:	1a9b      	subs	r3, r3, r2
 800bfce:	42bb      	cmp	r3, r7
 800bfd0:	ddd2      	ble.n	800bf78 <_printf_common+0x3c>
 800bfd2:	0022      	movs	r2, r4
 800bfd4:	2301      	movs	r3, #1
 800bfd6:	9901      	ldr	r1, [sp, #4]
 800bfd8:	9800      	ldr	r0, [sp, #0]
 800bfda:	9e08      	ldr	r6, [sp, #32]
 800bfdc:	3219      	adds	r2, #25
 800bfde:	47b0      	blx	r6
 800bfe0:	1c43      	adds	r3, r0, #1
 800bfe2:	d1f0      	bne.n	800bfc6 <_printf_common+0x8a>
 800bfe4:	2001      	movs	r0, #1
 800bfe6:	4240      	negs	r0, r0
 800bfe8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bfea:	2030      	movs	r0, #48	; 0x30
 800bfec:	18e1      	adds	r1, r4, r3
 800bfee:	3143      	adds	r1, #67	; 0x43
 800bff0:	7008      	strb	r0, [r1, #0]
 800bff2:	0021      	movs	r1, r4
 800bff4:	1c5a      	adds	r2, r3, #1
 800bff6:	3145      	adds	r1, #69	; 0x45
 800bff8:	7809      	ldrb	r1, [r1, #0]
 800bffa:	18a2      	adds	r2, r4, r2
 800bffc:	3243      	adds	r2, #67	; 0x43
 800bffe:	3302      	adds	r3, #2
 800c000:	7011      	strb	r1, [r2, #0]
 800c002:	e7c1      	b.n	800bf88 <_printf_common+0x4c>
 800c004:	0022      	movs	r2, r4
 800c006:	2301      	movs	r3, #1
 800c008:	9901      	ldr	r1, [sp, #4]
 800c00a:	9800      	ldr	r0, [sp, #0]
 800c00c:	9e08      	ldr	r6, [sp, #32]
 800c00e:	321a      	adds	r2, #26
 800c010:	47b0      	blx	r6
 800c012:	1c43      	adds	r3, r0, #1
 800c014:	d0e6      	beq.n	800bfe4 <_printf_common+0xa8>
 800c016:	3701      	adds	r7, #1
 800c018:	e7d1      	b.n	800bfbe <_printf_common+0x82>
	...

0800c01c <_printf_i>:
 800c01c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c01e:	b08b      	sub	sp, #44	; 0x2c
 800c020:	9206      	str	r2, [sp, #24]
 800c022:	000a      	movs	r2, r1
 800c024:	3243      	adds	r2, #67	; 0x43
 800c026:	9307      	str	r3, [sp, #28]
 800c028:	9005      	str	r0, [sp, #20]
 800c02a:	9204      	str	r2, [sp, #16]
 800c02c:	7e0a      	ldrb	r2, [r1, #24]
 800c02e:	000c      	movs	r4, r1
 800c030:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c032:	2a78      	cmp	r2, #120	; 0x78
 800c034:	d806      	bhi.n	800c044 <_printf_i+0x28>
 800c036:	2a62      	cmp	r2, #98	; 0x62
 800c038:	d808      	bhi.n	800c04c <_printf_i+0x30>
 800c03a:	2a00      	cmp	r2, #0
 800c03c:	d100      	bne.n	800c040 <_printf_i+0x24>
 800c03e:	e0c0      	b.n	800c1c2 <_printf_i+0x1a6>
 800c040:	2a58      	cmp	r2, #88	; 0x58
 800c042:	d052      	beq.n	800c0ea <_printf_i+0xce>
 800c044:	0026      	movs	r6, r4
 800c046:	3642      	adds	r6, #66	; 0x42
 800c048:	7032      	strb	r2, [r6, #0]
 800c04a:	e022      	b.n	800c092 <_printf_i+0x76>
 800c04c:	0010      	movs	r0, r2
 800c04e:	3863      	subs	r0, #99	; 0x63
 800c050:	2815      	cmp	r0, #21
 800c052:	d8f7      	bhi.n	800c044 <_printf_i+0x28>
 800c054:	f7f4 f85c 	bl	8000110 <__gnu_thumb1_case_shi>
 800c058:	001f0016 	.word	0x001f0016
 800c05c:	fff6fff6 	.word	0xfff6fff6
 800c060:	fff6fff6 	.word	0xfff6fff6
 800c064:	fff6001f 	.word	0xfff6001f
 800c068:	fff6fff6 	.word	0xfff6fff6
 800c06c:	00a8fff6 	.word	0x00a8fff6
 800c070:	009a0036 	.word	0x009a0036
 800c074:	fff6fff6 	.word	0xfff6fff6
 800c078:	fff600b9 	.word	0xfff600b9
 800c07c:	fff60036 	.word	0xfff60036
 800c080:	009efff6 	.word	0x009efff6
 800c084:	0026      	movs	r6, r4
 800c086:	681a      	ldr	r2, [r3, #0]
 800c088:	3642      	adds	r6, #66	; 0x42
 800c08a:	1d11      	adds	r1, r2, #4
 800c08c:	6019      	str	r1, [r3, #0]
 800c08e:	6813      	ldr	r3, [r2, #0]
 800c090:	7033      	strb	r3, [r6, #0]
 800c092:	2301      	movs	r3, #1
 800c094:	e0a7      	b.n	800c1e6 <_printf_i+0x1ca>
 800c096:	6808      	ldr	r0, [r1, #0]
 800c098:	6819      	ldr	r1, [r3, #0]
 800c09a:	1d0a      	adds	r2, r1, #4
 800c09c:	0605      	lsls	r5, r0, #24
 800c09e:	d50b      	bpl.n	800c0b8 <_printf_i+0x9c>
 800c0a0:	680d      	ldr	r5, [r1, #0]
 800c0a2:	601a      	str	r2, [r3, #0]
 800c0a4:	2d00      	cmp	r5, #0
 800c0a6:	da03      	bge.n	800c0b0 <_printf_i+0x94>
 800c0a8:	232d      	movs	r3, #45	; 0x2d
 800c0aa:	9a04      	ldr	r2, [sp, #16]
 800c0ac:	426d      	negs	r5, r5
 800c0ae:	7013      	strb	r3, [r2, #0]
 800c0b0:	4b61      	ldr	r3, [pc, #388]	; (800c238 <_printf_i+0x21c>)
 800c0b2:	270a      	movs	r7, #10
 800c0b4:	9303      	str	r3, [sp, #12]
 800c0b6:	e032      	b.n	800c11e <_printf_i+0x102>
 800c0b8:	680d      	ldr	r5, [r1, #0]
 800c0ba:	601a      	str	r2, [r3, #0]
 800c0bc:	0641      	lsls	r1, r0, #25
 800c0be:	d5f1      	bpl.n	800c0a4 <_printf_i+0x88>
 800c0c0:	b22d      	sxth	r5, r5
 800c0c2:	e7ef      	b.n	800c0a4 <_printf_i+0x88>
 800c0c4:	680d      	ldr	r5, [r1, #0]
 800c0c6:	6819      	ldr	r1, [r3, #0]
 800c0c8:	1d08      	adds	r0, r1, #4
 800c0ca:	6018      	str	r0, [r3, #0]
 800c0cc:	062e      	lsls	r6, r5, #24
 800c0ce:	d501      	bpl.n	800c0d4 <_printf_i+0xb8>
 800c0d0:	680d      	ldr	r5, [r1, #0]
 800c0d2:	e003      	b.n	800c0dc <_printf_i+0xc0>
 800c0d4:	066d      	lsls	r5, r5, #25
 800c0d6:	d5fb      	bpl.n	800c0d0 <_printf_i+0xb4>
 800c0d8:	680d      	ldr	r5, [r1, #0]
 800c0da:	b2ad      	uxth	r5, r5
 800c0dc:	4b56      	ldr	r3, [pc, #344]	; (800c238 <_printf_i+0x21c>)
 800c0de:	270a      	movs	r7, #10
 800c0e0:	9303      	str	r3, [sp, #12]
 800c0e2:	2a6f      	cmp	r2, #111	; 0x6f
 800c0e4:	d117      	bne.n	800c116 <_printf_i+0xfa>
 800c0e6:	2708      	movs	r7, #8
 800c0e8:	e015      	b.n	800c116 <_printf_i+0xfa>
 800c0ea:	3145      	adds	r1, #69	; 0x45
 800c0ec:	700a      	strb	r2, [r1, #0]
 800c0ee:	4a52      	ldr	r2, [pc, #328]	; (800c238 <_printf_i+0x21c>)
 800c0f0:	9203      	str	r2, [sp, #12]
 800c0f2:	681a      	ldr	r2, [r3, #0]
 800c0f4:	6821      	ldr	r1, [r4, #0]
 800c0f6:	ca20      	ldmia	r2!, {r5}
 800c0f8:	601a      	str	r2, [r3, #0]
 800c0fa:	0608      	lsls	r0, r1, #24
 800c0fc:	d550      	bpl.n	800c1a0 <_printf_i+0x184>
 800c0fe:	07cb      	lsls	r3, r1, #31
 800c100:	d502      	bpl.n	800c108 <_printf_i+0xec>
 800c102:	2320      	movs	r3, #32
 800c104:	4319      	orrs	r1, r3
 800c106:	6021      	str	r1, [r4, #0]
 800c108:	2710      	movs	r7, #16
 800c10a:	2d00      	cmp	r5, #0
 800c10c:	d103      	bne.n	800c116 <_printf_i+0xfa>
 800c10e:	2320      	movs	r3, #32
 800c110:	6822      	ldr	r2, [r4, #0]
 800c112:	439a      	bics	r2, r3
 800c114:	6022      	str	r2, [r4, #0]
 800c116:	0023      	movs	r3, r4
 800c118:	2200      	movs	r2, #0
 800c11a:	3343      	adds	r3, #67	; 0x43
 800c11c:	701a      	strb	r2, [r3, #0]
 800c11e:	6863      	ldr	r3, [r4, #4]
 800c120:	60a3      	str	r3, [r4, #8]
 800c122:	2b00      	cmp	r3, #0
 800c124:	db03      	blt.n	800c12e <_printf_i+0x112>
 800c126:	2204      	movs	r2, #4
 800c128:	6821      	ldr	r1, [r4, #0]
 800c12a:	4391      	bics	r1, r2
 800c12c:	6021      	str	r1, [r4, #0]
 800c12e:	2d00      	cmp	r5, #0
 800c130:	d102      	bne.n	800c138 <_printf_i+0x11c>
 800c132:	9e04      	ldr	r6, [sp, #16]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d00c      	beq.n	800c152 <_printf_i+0x136>
 800c138:	9e04      	ldr	r6, [sp, #16]
 800c13a:	0028      	movs	r0, r5
 800c13c:	0039      	movs	r1, r7
 800c13e:	f7f4 f877 	bl	8000230 <__aeabi_uidivmod>
 800c142:	9b03      	ldr	r3, [sp, #12]
 800c144:	3e01      	subs	r6, #1
 800c146:	5c5b      	ldrb	r3, [r3, r1]
 800c148:	7033      	strb	r3, [r6, #0]
 800c14a:	002b      	movs	r3, r5
 800c14c:	0005      	movs	r5, r0
 800c14e:	429f      	cmp	r7, r3
 800c150:	d9f3      	bls.n	800c13a <_printf_i+0x11e>
 800c152:	2f08      	cmp	r7, #8
 800c154:	d109      	bne.n	800c16a <_printf_i+0x14e>
 800c156:	6823      	ldr	r3, [r4, #0]
 800c158:	07db      	lsls	r3, r3, #31
 800c15a:	d506      	bpl.n	800c16a <_printf_i+0x14e>
 800c15c:	6863      	ldr	r3, [r4, #4]
 800c15e:	6922      	ldr	r2, [r4, #16]
 800c160:	4293      	cmp	r3, r2
 800c162:	dc02      	bgt.n	800c16a <_printf_i+0x14e>
 800c164:	2330      	movs	r3, #48	; 0x30
 800c166:	3e01      	subs	r6, #1
 800c168:	7033      	strb	r3, [r6, #0]
 800c16a:	9b04      	ldr	r3, [sp, #16]
 800c16c:	1b9b      	subs	r3, r3, r6
 800c16e:	6123      	str	r3, [r4, #16]
 800c170:	9b07      	ldr	r3, [sp, #28]
 800c172:	0021      	movs	r1, r4
 800c174:	9300      	str	r3, [sp, #0]
 800c176:	9805      	ldr	r0, [sp, #20]
 800c178:	9b06      	ldr	r3, [sp, #24]
 800c17a:	aa09      	add	r2, sp, #36	; 0x24
 800c17c:	f7ff fede 	bl	800bf3c <_printf_common>
 800c180:	1c43      	adds	r3, r0, #1
 800c182:	d135      	bne.n	800c1f0 <_printf_i+0x1d4>
 800c184:	2001      	movs	r0, #1
 800c186:	4240      	negs	r0, r0
 800c188:	b00b      	add	sp, #44	; 0x2c
 800c18a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c18c:	2220      	movs	r2, #32
 800c18e:	6809      	ldr	r1, [r1, #0]
 800c190:	430a      	orrs	r2, r1
 800c192:	6022      	str	r2, [r4, #0]
 800c194:	0022      	movs	r2, r4
 800c196:	2178      	movs	r1, #120	; 0x78
 800c198:	3245      	adds	r2, #69	; 0x45
 800c19a:	7011      	strb	r1, [r2, #0]
 800c19c:	4a27      	ldr	r2, [pc, #156]	; (800c23c <_printf_i+0x220>)
 800c19e:	e7a7      	b.n	800c0f0 <_printf_i+0xd4>
 800c1a0:	0648      	lsls	r0, r1, #25
 800c1a2:	d5ac      	bpl.n	800c0fe <_printf_i+0xe2>
 800c1a4:	b2ad      	uxth	r5, r5
 800c1a6:	e7aa      	b.n	800c0fe <_printf_i+0xe2>
 800c1a8:	681a      	ldr	r2, [r3, #0]
 800c1aa:	680d      	ldr	r5, [r1, #0]
 800c1ac:	1d10      	adds	r0, r2, #4
 800c1ae:	6949      	ldr	r1, [r1, #20]
 800c1b0:	6018      	str	r0, [r3, #0]
 800c1b2:	6813      	ldr	r3, [r2, #0]
 800c1b4:	062e      	lsls	r6, r5, #24
 800c1b6:	d501      	bpl.n	800c1bc <_printf_i+0x1a0>
 800c1b8:	6019      	str	r1, [r3, #0]
 800c1ba:	e002      	b.n	800c1c2 <_printf_i+0x1a6>
 800c1bc:	066d      	lsls	r5, r5, #25
 800c1be:	d5fb      	bpl.n	800c1b8 <_printf_i+0x19c>
 800c1c0:	8019      	strh	r1, [r3, #0]
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	9e04      	ldr	r6, [sp, #16]
 800c1c6:	6123      	str	r3, [r4, #16]
 800c1c8:	e7d2      	b.n	800c170 <_printf_i+0x154>
 800c1ca:	681a      	ldr	r2, [r3, #0]
 800c1cc:	1d11      	adds	r1, r2, #4
 800c1ce:	6019      	str	r1, [r3, #0]
 800c1d0:	6816      	ldr	r6, [r2, #0]
 800c1d2:	2100      	movs	r1, #0
 800c1d4:	0030      	movs	r0, r6
 800c1d6:	6862      	ldr	r2, [r4, #4]
 800c1d8:	f000 f832 	bl	800c240 <memchr>
 800c1dc:	2800      	cmp	r0, #0
 800c1de:	d001      	beq.n	800c1e4 <_printf_i+0x1c8>
 800c1e0:	1b80      	subs	r0, r0, r6
 800c1e2:	6060      	str	r0, [r4, #4]
 800c1e4:	6863      	ldr	r3, [r4, #4]
 800c1e6:	6123      	str	r3, [r4, #16]
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	9a04      	ldr	r2, [sp, #16]
 800c1ec:	7013      	strb	r3, [r2, #0]
 800c1ee:	e7bf      	b.n	800c170 <_printf_i+0x154>
 800c1f0:	6923      	ldr	r3, [r4, #16]
 800c1f2:	0032      	movs	r2, r6
 800c1f4:	9906      	ldr	r1, [sp, #24]
 800c1f6:	9805      	ldr	r0, [sp, #20]
 800c1f8:	9d07      	ldr	r5, [sp, #28]
 800c1fa:	47a8      	blx	r5
 800c1fc:	1c43      	adds	r3, r0, #1
 800c1fe:	d0c1      	beq.n	800c184 <_printf_i+0x168>
 800c200:	6823      	ldr	r3, [r4, #0]
 800c202:	079b      	lsls	r3, r3, #30
 800c204:	d415      	bmi.n	800c232 <_printf_i+0x216>
 800c206:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c208:	68e0      	ldr	r0, [r4, #12]
 800c20a:	4298      	cmp	r0, r3
 800c20c:	dabc      	bge.n	800c188 <_printf_i+0x16c>
 800c20e:	0018      	movs	r0, r3
 800c210:	e7ba      	b.n	800c188 <_printf_i+0x16c>
 800c212:	0022      	movs	r2, r4
 800c214:	2301      	movs	r3, #1
 800c216:	9906      	ldr	r1, [sp, #24]
 800c218:	9805      	ldr	r0, [sp, #20]
 800c21a:	9e07      	ldr	r6, [sp, #28]
 800c21c:	3219      	adds	r2, #25
 800c21e:	47b0      	blx	r6
 800c220:	1c43      	adds	r3, r0, #1
 800c222:	d0af      	beq.n	800c184 <_printf_i+0x168>
 800c224:	3501      	adds	r5, #1
 800c226:	68e3      	ldr	r3, [r4, #12]
 800c228:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c22a:	1a9b      	subs	r3, r3, r2
 800c22c:	42ab      	cmp	r3, r5
 800c22e:	dcf0      	bgt.n	800c212 <_printf_i+0x1f6>
 800c230:	e7e9      	b.n	800c206 <_printf_i+0x1ea>
 800c232:	2500      	movs	r5, #0
 800c234:	e7f7      	b.n	800c226 <_printf_i+0x20a>
 800c236:	46c0      	nop			; (mov r8, r8)
 800c238:	0800c981 	.word	0x0800c981
 800c23c:	0800c992 	.word	0x0800c992

0800c240 <memchr>:
 800c240:	b2c9      	uxtb	r1, r1
 800c242:	1882      	adds	r2, r0, r2
 800c244:	4290      	cmp	r0, r2
 800c246:	d101      	bne.n	800c24c <memchr+0xc>
 800c248:	2000      	movs	r0, #0
 800c24a:	4770      	bx	lr
 800c24c:	7803      	ldrb	r3, [r0, #0]
 800c24e:	428b      	cmp	r3, r1
 800c250:	d0fb      	beq.n	800c24a <memchr+0xa>
 800c252:	3001      	adds	r0, #1
 800c254:	e7f6      	b.n	800c244 <memchr+0x4>

0800c256 <memcpy>:
 800c256:	2300      	movs	r3, #0
 800c258:	b510      	push	{r4, lr}
 800c25a:	429a      	cmp	r2, r3
 800c25c:	d100      	bne.n	800c260 <memcpy+0xa>
 800c25e:	bd10      	pop	{r4, pc}
 800c260:	5ccc      	ldrb	r4, [r1, r3]
 800c262:	54c4      	strb	r4, [r0, r3]
 800c264:	3301      	adds	r3, #1
 800c266:	e7f8      	b.n	800c25a <memcpy+0x4>

0800c268 <memmove>:
 800c268:	b510      	push	{r4, lr}
 800c26a:	4288      	cmp	r0, r1
 800c26c:	d902      	bls.n	800c274 <memmove+0xc>
 800c26e:	188b      	adds	r3, r1, r2
 800c270:	4298      	cmp	r0, r3
 800c272:	d303      	bcc.n	800c27c <memmove+0x14>
 800c274:	2300      	movs	r3, #0
 800c276:	e007      	b.n	800c288 <memmove+0x20>
 800c278:	5c8b      	ldrb	r3, [r1, r2]
 800c27a:	5483      	strb	r3, [r0, r2]
 800c27c:	3a01      	subs	r2, #1
 800c27e:	d2fb      	bcs.n	800c278 <memmove+0x10>
 800c280:	bd10      	pop	{r4, pc}
 800c282:	5ccc      	ldrb	r4, [r1, r3]
 800c284:	54c4      	strb	r4, [r0, r3]
 800c286:	3301      	adds	r3, #1
 800c288:	429a      	cmp	r2, r3
 800c28a:	d1fa      	bne.n	800c282 <memmove+0x1a>
 800c28c:	e7f8      	b.n	800c280 <memmove+0x18>
	...

0800c290 <_free_r>:
 800c290:	b570      	push	{r4, r5, r6, lr}
 800c292:	0005      	movs	r5, r0
 800c294:	2900      	cmp	r1, #0
 800c296:	d010      	beq.n	800c2ba <_free_r+0x2a>
 800c298:	1f0c      	subs	r4, r1, #4
 800c29a:	6823      	ldr	r3, [r4, #0]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	da00      	bge.n	800c2a2 <_free_r+0x12>
 800c2a0:	18e4      	adds	r4, r4, r3
 800c2a2:	0028      	movs	r0, r5
 800c2a4:	f000 f8d4 	bl	800c450 <__malloc_lock>
 800c2a8:	4a1d      	ldr	r2, [pc, #116]	; (800c320 <_free_r+0x90>)
 800c2aa:	6813      	ldr	r3, [r2, #0]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d105      	bne.n	800c2bc <_free_r+0x2c>
 800c2b0:	6063      	str	r3, [r4, #4]
 800c2b2:	6014      	str	r4, [r2, #0]
 800c2b4:	0028      	movs	r0, r5
 800c2b6:	f000 f8d3 	bl	800c460 <__malloc_unlock>
 800c2ba:	bd70      	pop	{r4, r5, r6, pc}
 800c2bc:	42a3      	cmp	r3, r4
 800c2be:	d908      	bls.n	800c2d2 <_free_r+0x42>
 800c2c0:	6821      	ldr	r1, [r4, #0]
 800c2c2:	1860      	adds	r0, r4, r1
 800c2c4:	4283      	cmp	r3, r0
 800c2c6:	d1f3      	bne.n	800c2b0 <_free_r+0x20>
 800c2c8:	6818      	ldr	r0, [r3, #0]
 800c2ca:	685b      	ldr	r3, [r3, #4]
 800c2cc:	1841      	adds	r1, r0, r1
 800c2ce:	6021      	str	r1, [r4, #0]
 800c2d0:	e7ee      	b.n	800c2b0 <_free_r+0x20>
 800c2d2:	001a      	movs	r2, r3
 800c2d4:	685b      	ldr	r3, [r3, #4]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d001      	beq.n	800c2de <_free_r+0x4e>
 800c2da:	42a3      	cmp	r3, r4
 800c2dc:	d9f9      	bls.n	800c2d2 <_free_r+0x42>
 800c2de:	6811      	ldr	r1, [r2, #0]
 800c2e0:	1850      	adds	r0, r2, r1
 800c2e2:	42a0      	cmp	r0, r4
 800c2e4:	d10b      	bne.n	800c2fe <_free_r+0x6e>
 800c2e6:	6820      	ldr	r0, [r4, #0]
 800c2e8:	1809      	adds	r1, r1, r0
 800c2ea:	1850      	adds	r0, r2, r1
 800c2ec:	6011      	str	r1, [r2, #0]
 800c2ee:	4283      	cmp	r3, r0
 800c2f0:	d1e0      	bne.n	800c2b4 <_free_r+0x24>
 800c2f2:	6818      	ldr	r0, [r3, #0]
 800c2f4:	685b      	ldr	r3, [r3, #4]
 800c2f6:	1841      	adds	r1, r0, r1
 800c2f8:	6011      	str	r1, [r2, #0]
 800c2fa:	6053      	str	r3, [r2, #4]
 800c2fc:	e7da      	b.n	800c2b4 <_free_r+0x24>
 800c2fe:	42a0      	cmp	r0, r4
 800c300:	d902      	bls.n	800c308 <_free_r+0x78>
 800c302:	230c      	movs	r3, #12
 800c304:	602b      	str	r3, [r5, #0]
 800c306:	e7d5      	b.n	800c2b4 <_free_r+0x24>
 800c308:	6821      	ldr	r1, [r4, #0]
 800c30a:	1860      	adds	r0, r4, r1
 800c30c:	4283      	cmp	r3, r0
 800c30e:	d103      	bne.n	800c318 <_free_r+0x88>
 800c310:	6818      	ldr	r0, [r3, #0]
 800c312:	685b      	ldr	r3, [r3, #4]
 800c314:	1841      	adds	r1, r0, r1
 800c316:	6021      	str	r1, [r4, #0]
 800c318:	6063      	str	r3, [r4, #4]
 800c31a:	6054      	str	r4, [r2, #4]
 800c31c:	e7ca      	b.n	800c2b4 <_free_r+0x24>
 800c31e:	46c0      	nop			; (mov r8, r8)
 800c320:	200000e4 	.word	0x200000e4

0800c324 <_malloc_r>:
 800c324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c326:	2303      	movs	r3, #3
 800c328:	1ccd      	adds	r5, r1, #3
 800c32a:	439d      	bics	r5, r3
 800c32c:	3508      	adds	r5, #8
 800c32e:	0006      	movs	r6, r0
 800c330:	2d0c      	cmp	r5, #12
 800c332:	d21f      	bcs.n	800c374 <_malloc_r+0x50>
 800c334:	250c      	movs	r5, #12
 800c336:	42a9      	cmp	r1, r5
 800c338:	d81e      	bhi.n	800c378 <_malloc_r+0x54>
 800c33a:	0030      	movs	r0, r6
 800c33c:	f000 f888 	bl	800c450 <__malloc_lock>
 800c340:	4925      	ldr	r1, [pc, #148]	; (800c3d8 <_malloc_r+0xb4>)
 800c342:	680a      	ldr	r2, [r1, #0]
 800c344:	0014      	movs	r4, r2
 800c346:	2c00      	cmp	r4, #0
 800c348:	d11a      	bne.n	800c380 <_malloc_r+0x5c>
 800c34a:	4f24      	ldr	r7, [pc, #144]	; (800c3dc <_malloc_r+0xb8>)
 800c34c:	683b      	ldr	r3, [r7, #0]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d104      	bne.n	800c35c <_malloc_r+0x38>
 800c352:	0021      	movs	r1, r4
 800c354:	0030      	movs	r0, r6
 800c356:	f000 f869 	bl	800c42c <_sbrk_r>
 800c35a:	6038      	str	r0, [r7, #0]
 800c35c:	0029      	movs	r1, r5
 800c35e:	0030      	movs	r0, r6
 800c360:	f000 f864 	bl	800c42c <_sbrk_r>
 800c364:	1c43      	adds	r3, r0, #1
 800c366:	d12b      	bne.n	800c3c0 <_malloc_r+0x9c>
 800c368:	230c      	movs	r3, #12
 800c36a:	0030      	movs	r0, r6
 800c36c:	6033      	str	r3, [r6, #0]
 800c36e:	f000 f877 	bl	800c460 <__malloc_unlock>
 800c372:	e003      	b.n	800c37c <_malloc_r+0x58>
 800c374:	2d00      	cmp	r5, #0
 800c376:	dade      	bge.n	800c336 <_malloc_r+0x12>
 800c378:	230c      	movs	r3, #12
 800c37a:	6033      	str	r3, [r6, #0]
 800c37c:	2000      	movs	r0, #0
 800c37e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c380:	6823      	ldr	r3, [r4, #0]
 800c382:	1b5b      	subs	r3, r3, r5
 800c384:	d419      	bmi.n	800c3ba <_malloc_r+0x96>
 800c386:	2b0b      	cmp	r3, #11
 800c388:	d903      	bls.n	800c392 <_malloc_r+0x6e>
 800c38a:	6023      	str	r3, [r4, #0]
 800c38c:	18e4      	adds	r4, r4, r3
 800c38e:	6025      	str	r5, [r4, #0]
 800c390:	e003      	b.n	800c39a <_malloc_r+0x76>
 800c392:	6863      	ldr	r3, [r4, #4]
 800c394:	42a2      	cmp	r2, r4
 800c396:	d10e      	bne.n	800c3b6 <_malloc_r+0x92>
 800c398:	600b      	str	r3, [r1, #0]
 800c39a:	0030      	movs	r0, r6
 800c39c:	f000 f860 	bl	800c460 <__malloc_unlock>
 800c3a0:	0020      	movs	r0, r4
 800c3a2:	2207      	movs	r2, #7
 800c3a4:	300b      	adds	r0, #11
 800c3a6:	1d23      	adds	r3, r4, #4
 800c3a8:	4390      	bics	r0, r2
 800c3aa:	1ac2      	subs	r2, r0, r3
 800c3ac:	4298      	cmp	r0, r3
 800c3ae:	d0e6      	beq.n	800c37e <_malloc_r+0x5a>
 800c3b0:	1a1b      	subs	r3, r3, r0
 800c3b2:	50a3      	str	r3, [r4, r2]
 800c3b4:	e7e3      	b.n	800c37e <_malloc_r+0x5a>
 800c3b6:	6053      	str	r3, [r2, #4]
 800c3b8:	e7ef      	b.n	800c39a <_malloc_r+0x76>
 800c3ba:	0022      	movs	r2, r4
 800c3bc:	6864      	ldr	r4, [r4, #4]
 800c3be:	e7c2      	b.n	800c346 <_malloc_r+0x22>
 800c3c0:	2303      	movs	r3, #3
 800c3c2:	1cc4      	adds	r4, r0, #3
 800c3c4:	439c      	bics	r4, r3
 800c3c6:	42a0      	cmp	r0, r4
 800c3c8:	d0e1      	beq.n	800c38e <_malloc_r+0x6a>
 800c3ca:	1a21      	subs	r1, r4, r0
 800c3cc:	0030      	movs	r0, r6
 800c3ce:	f000 f82d 	bl	800c42c <_sbrk_r>
 800c3d2:	1c43      	adds	r3, r0, #1
 800c3d4:	d1db      	bne.n	800c38e <_malloc_r+0x6a>
 800c3d6:	e7c7      	b.n	800c368 <_malloc_r+0x44>
 800c3d8:	200000e4 	.word	0x200000e4
 800c3dc:	200000e8 	.word	0x200000e8

0800c3e0 <_realloc_r>:
 800c3e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3e2:	0007      	movs	r7, r0
 800c3e4:	000d      	movs	r5, r1
 800c3e6:	0016      	movs	r6, r2
 800c3e8:	2900      	cmp	r1, #0
 800c3ea:	d105      	bne.n	800c3f8 <_realloc_r+0x18>
 800c3ec:	0011      	movs	r1, r2
 800c3ee:	f7ff ff99 	bl	800c324 <_malloc_r>
 800c3f2:	0004      	movs	r4, r0
 800c3f4:	0020      	movs	r0, r4
 800c3f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c3f8:	2a00      	cmp	r2, #0
 800c3fa:	d103      	bne.n	800c404 <_realloc_r+0x24>
 800c3fc:	f7ff ff48 	bl	800c290 <_free_r>
 800c400:	0034      	movs	r4, r6
 800c402:	e7f7      	b.n	800c3f4 <_realloc_r+0x14>
 800c404:	f000 f834 	bl	800c470 <_malloc_usable_size_r>
 800c408:	002c      	movs	r4, r5
 800c40a:	42b0      	cmp	r0, r6
 800c40c:	d2f2      	bcs.n	800c3f4 <_realloc_r+0x14>
 800c40e:	0031      	movs	r1, r6
 800c410:	0038      	movs	r0, r7
 800c412:	f7ff ff87 	bl	800c324 <_malloc_r>
 800c416:	1e04      	subs	r4, r0, #0
 800c418:	d0ec      	beq.n	800c3f4 <_realloc_r+0x14>
 800c41a:	0029      	movs	r1, r5
 800c41c:	0032      	movs	r2, r6
 800c41e:	f7ff ff1a 	bl	800c256 <memcpy>
 800c422:	0029      	movs	r1, r5
 800c424:	0038      	movs	r0, r7
 800c426:	f7ff ff33 	bl	800c290 <_free_r>
 800c42a:	e7e3      	b.n	800c3f4 <_realloc_r+0x14>

0800c42c <_sbrk_r>:
 800c42c:	2300      	movs	r3, #0
 800c42e:	b570      	push	{r4, r5, r6, lr}
 800c430:	4d06      	ldr	r5, [pc, #24]	; (800c44c <_sbrk_r+0x20>)
 800c432:	0004      	movs	r4, r0
 800c434:	0008      	movs	r0, r1
 800c436:	602b      	str	r3, [r5, #0]
 800c438:	f7f8 fef2 	bl	8005220 <_sbrk>
 800c43c:	1c43      	adds	r3, r0, #1
 800c43e:	d103      	bne.n	800c448 <_sbrk_r+0x1c>
 800c440:	682b      	ldr	r3, [r5, #0]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d000      	beq.n	800c448 <_sbrk_r+0x1c>
 800c446:	6023      	str	r3, [r4, #0]
 800c448:	bd70      	pop	{r4, r5, r6, pc}
 800c44a:	46c0      	nop			; (mov r8, r8)
 800c44c:	200008c0 	.word	0x200008c0

0800c450 <__malloc_lock>:
 800c450:	b510      	push	{r4, lr}
 800c452:	4802      	ldr	r0, [pc, #8]	; (800c45c <__malloc_lock+0xc>)
 800c454:	f000 f814 	bl	800c480 <__retarget_lock_acquire_recursive>
 800c458:	bd10      	pop	{r4, pc}
 800c45a:	46c0      	nop			; (mov r8, r8)
 800c45c:	200008c8 	.word	0x200008c8

0800c460 <__malloc_unlock>:
 800c460:	b510      	push	{r4, lr}
 800c462:	4802      	ldr	r0, [pc, #8]	; (800c46c <__malloc_unlock+0xc>)
 800c464:	f000 f80d 	bl	800c482 <__retarget_lock_release_recursive>
 800c468:	bd10      	pop	{r4, pc}
 800c46a:	46c0      	nop			; (mov r8, r8)
 800c46c:	200008c8 	.word	0x200008c8

0800c470 <_malloc_usable_size_r>:
 800c470:	1f0b      	subs	r3, r1, #4
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	1f18      	subs	r0, r3, #4
 800c476:	2b00      	cmp	r3, #0
 800c478:	da01      	bge.n	800c47e <_malloc_usable_size_r+0xe>
 800c47a:	580b      	ldr	r3, [r1, r0]
 800c47c:	18c0      	adds	r0, r0, r3
 800c47e:	4770      	bx	lr

0800c480 <__retarget_lock_acquire_recursive>:
 800c480:	4770      	bx	lr

0800c482 <__retarget_lock_release_recursive>:
 800c482:	4770      	bx	lr

0800c484 <_init>:
 800c484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c486:	46c0      	nop			; (mov r8, r8)
 800c488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c48a:	bc08      	pop	{r3}
 800c48c:	469e      	mov	lr, r3
 800c48e:	4770      	bx	lr

0800c490 <_fini>:
 800c490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c492:	46c0      	nop			; (mov r8, r8)
 800c494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c496:	bc08      	pop	{r3}
 800c498:	469e      	mov	lr, r3
 800c49a:	4770      	bx	lr
